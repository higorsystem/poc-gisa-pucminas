(self["webpackChunkdapr_dashboard"] = self["webpackChunkdapr_dashboard"] || []).push([["vendor"],{

/***/ 82458:
/*!*****************************************************************!*\
  !*** ./node_modules/@angular/animations/fesm2015/animations.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AUTO_STYLE": function() { return /* binding */ AUTO_STYLE; },
/* harmony export */   "AnimationBuilder": function() { return /* binding */ AnimationBuilder; },
/* harmony export */   "AnimationFactory": function() { return /* binding */ AnimationFactory; },
/* harmony export */   "NoopAnimationPlayer": function() { return /* binding */ NoopAnimationPlayer; },
/* harmony export */   "animate": function() { return /* binding */ animate; },
/* harmony export */   "animateChild": function() { return /* binding */ animateChild; },
/* harmony export */   "animation": function() { return /* binding */ animation; },
/* harmony export */   "group": function() { return /* binding */ group; },
/* harmony export */   "keyframes": function() { return /* binding */ keyframes; },
/* harmony export */   "query": function() { return /* binding */ query; },
/* harmony export */   "sequence": function() { return /* binding */ sequence; },
/* harmony export */   "stagger": function() { return /* binding */ stagger; },
/* harmony export */   "state": function() { return /* binding */ state; },
/* harmony export */   "style": function() { return /* binding */ style; },
/* harmony export */   "transition": function() { return /* binding */ transition; },
/* harmony export */   "trigger": function() { return /* binding */ trigger; },
/* harmony export */   "useAnimation": function() { return /* binding */ useAnimation; },
/* harmony export */   "ɵAnimationGroupPlayer": function() { return /* binding */ AnimationGroupPlayer; },
/* harmony export */   "ɵPRE_STYLE": function() { return /* binding */ ɵPRE_STYLE; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);



/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */

/**
 * An injectable service that produces an animation sequence programmatically within an
 * Angular component or directive.
 * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
 *
 * @usageNotes
 *
 * To use this service, add it to your component or directive as a dependency.
 * The service is instantiated along with your component.
 *
 * Apps do not typically need to create their own animation players, but if you
 * do need to, follow these steps:
 *
 * 1. Use the `build()` method to create a programmatic animation using the
 * `animate()` function. The method returns an `AnimationFactory` instance.
 *
 * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
 *
 * 3. Use the player object to control the animation programmatically.
 *
 * For example:
 *
 * ```ts
 * // import the service from BrowserAnimationsModule
 * import {AnimationBuilder} from '@angular/animations';
 * // require the service as a dependency
 * class MyCmp {
 *   constructor(private _builder: AnimationBuilder) {}
 *
 *   makeAnimation(element: any) {
 *     // first define a reusable animation
 *     const myAnimation = this._builder.build([
 *       style({ width: 0 }),
 *       animate(1000, style({ width: '100px' }))
 *     ]);
 *
 *     // use the returned factory object to create a player
 *     const player = myAnimation.create(element);
 *
 *     player.play();
 *   }
 * }
 * ```
 *
 * @publicApi
 */
var AnimationBuilder = function AnimationBuilder() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, AnimationBuilder);
};
/**
 * A factory object returned from the `AnimationBuilder`.`build()` method.
 *
 * @publicApi
 */


var AnimationFactory = function AnimationFactory() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, AnimationFactory);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Specifies automatic styling.
 *
 * @publicApi
 */


var AUTO_STYLE = '*';
/**
 * Creates a named animation trigger, containing a  list of `state()`
 * and `transition()` entries to be evaluated when the expression
 * bound to the trigger changes.
 *
 * @param name An identifying string.
 * @param definitions  An animation definition object, containing an array of `state()`
 * and `transition()` declarations.
 *
 * @return An object that encapsulates the trigger data.
 *
 * @usageNotes
 * Define an animation trigger in the `animations` section of `@Component` metadata.
 * In the template, reference the trigger by name and bind it to a trigger expression that
 * evaluates to a defined animation state, using the following format:
 *
 * `[@triggerName]="expression"`
 *
 * Animation trigger bindings convert all values to strings, and then match the
 * previous and current values against any linked transitions.
 * Booleans can be specified as `1` or `true` and `0` or `false`.
 *
 * ### Usage Example
 *
 * The following example creates an animation trigger reference based on the provided
 * name value.
 * The provided animation value is expected to be an array consisting of state and
 * transition declarations.
 *
 * ```typescript
 * @Component({
 *   selector: "my-component",
 *   templateUrl: "my-component-tpl.html",
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component makes use of the defined trigger
 * by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ### Using an inline function
 * The `transition` animation method also supports reading an inline function which can decide
 * if its associated animation should be run.
 *
 * ```typescript
 * // this method is run each time the `myAnimationTrigger` trigger value changes.
 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
 string]: any}): boolean {
 *   // notice that `element` and `params` are also available here
 *   return toState == 'yes-please-animate';
 * }
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger('myAnimationTrigger', [
 *       transition(myInlineMatcherFn, [
 *         // the animation sequence code
 *       ]),
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "yes-please-animate";
 * }
 * ```
 *
 * ### Disabling Animations
 * When true, the special animation control binding `@.disabled` binding prevents
 * all animations from rendering.
 * Place the  `@.disabled` binding on an element to disable
 * animations on the element itself, as well as any inner animation triggers
 * within the element.
 *
 * The following example shows how to use this feature:
 *
 * ```typescript
 * @Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [@.disabled]="isDisabled">
 *       <div [@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
 * along with any inner animations.
 *
 * ### Disable animations application-wide
 * When an area of the template is set to have animations disabled,
 * **all** inner components have their animations disabled as well.
 * This means that you can disable all animations for an app
 * by placing a host binding set on `@.disabled` on the topmost Angular component.
 *
 * ```typescript
 * import {Component, HostBinding} from '@angular/core';
 *
 * @Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   @HostBinding('@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### Overriding disablement of inner animations
 * Despite inner animations being disabled, a parent animation can `query()`
 * for inner elements located in disabled areas of the template and still animate
 * them if needed. This is also the case for when a sub animation is
 * queried by a parent and then later animated using `animateChild()`.
 *
 * ### Detecting when an animation is disabled
 * If a region of the DOM (or the entire application) has its animations disabled, the animation
 * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
 * an instance of an `AnimationEvent`. If animations are disabled,
 * the `.disabled` flag on the event is true.
 *
 * @publicApi
 */

function trigger(name, definitions) {
  return {
    type: 7
    /* Trigger */
    ,
    name: name,
    definitions: definitions,
    options: {}
  };
}
/**
 * Defines an animation step that combines styling information with timing information.
 *
 * @param timings Sets `AnimateTimings` for the parent animation.
 * A string in the format "duration [delay] [easing]".
 *  - Duration and delay are expressed as a number and optional time unit,
 * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
 * The default unit is milliseconds.
 *  - The easing value controls how the animation accelerates and decelerates
 * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
 * `ease-in-out`, or a `cubic-bezier()` function call.
 * If not supplied, no easing is applied.
 *
 * For example, the string "1s 100ms ease-out" specifies a duration of
 * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
 * which decelerates near the end of the duration.
 * @param styles Sets AnimationStyles for the parent animation.
 * A function call to either `style()` or `keyframes()`
 * that returns a collection of CSS style entries to be applied to the parent animation.
 * When null, uses the styles from the destination state.
 * This is useful when describing an animation step that will complete an animation;
 * see "Animating to the final state" in `transitions()`.
 * @returns An object that encapsulates the animation step.
 *
 * @usageNotes
 * Call within an animation `sequence()`, `{@link animations/group group()}`, or
 * `transition()` call to specify an animation step
 * that applies given style data to the parent animation for a given amount of time.
 *
 * ### Syntax Examples
 * **Timing examples**
 *
 * The following examples show various `timings` specifications.
 * - `animate(500)` : Duration is 500 milliseconds.
 * - `animate("1s")` : Duration is 1000 milliseconds.
 * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
 * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
 * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
 * milliseconds, easing according to a bezier curve.
 *
 * **Style examples**
 *
 * The following example calls `style()` to set a single CSS style.
 * ```typescript
 * animate(500, style({ background: "red" }))
 * ```
 * The following example calls `keyframes()` to set a CSS style
 * to different values for successive keyframes.
 * ```typescript
 * animate(500, keyframes(
 *  [
 *   style({ background: "blue" }),
 *   style({ background: "red" })
 *  ])
 * ```
 *
 * @publicApi
 */


function animate(timings) {
  var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    type: 4
    /* Animate */
    ,
    styles: styles,
    timings: timings
  };
}
/**
 * @description Defines a list of animation steps to be run in parallel.
 *
 * @param steps An array of animation step objects.
 * - When steps are defined by `style()` or `animate()`
 * function calls, each call within the group is executed instantly.
 * - To specify offset styles to be applied at a later time, define steps with
 * `keyframes()`, or use `animate()` calls with a delay value.
 * For example:
 *
 * ```typescript
 * group([
 *   animate("1s", style({ background: "black" })),
 *   animate("2s", style({ color: "white" }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the group data.
 *
 * @usageNotes
 * Grouped animations are useful when a series of styles must be
 * animated at different starting times and closed off at different ending times.
 *
 * When called within a `sequence()` or a
 * `transition()` call, does not continue to the next
 * instruction until all of the inner animation steps have completed.
 *
 * @publicApi
 */


function group(steps) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    type: 3
    /* Group */
    ,
    steps: steps,
    options: options
  };
}
/**
 * Defines a list of animation steps to be run sequentially, one by one.
 *
 * @param steps An array of animation step objects.
 * - Steps defined by `style()` calls apply the styling data immediately.
 * - Steps defined by `animate()` calls apply the styling data over time
 *   as specified by the timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 }),
 *   animate("1s", style({ opacity: 1 }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the sequence data.
 *
 * @usageNotes
 * When you pass an array of steps to a
 * `transition()` call, the steps run sequentially by default.
 * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
 *parallel.
 *
 * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
 * execution continues to the next instruction only after each of the inner animation
 * steps have completed.
 *
 * @publicApi
 **/


function sequence(steps) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    type: 2
    /* Sequence */
    ,
    steps: steps,
    options: options
  };
}
/**
 * Declares a key/value object containing CSS properties/styles that
 * can then be used for an animation `state`, within an animation `sequence`,
 * or as styling data for calls to `animate()` and `keyframes()`.
 *
 * @param tokens A set of CSS styles or HTML styles associated with an animation state.
 * The value can be any of the following:
 * - A key-value style pair associating a CSS property with a value.
 * - An array of key-value style pairs.
 * - An asterisk (*), to use auto-styling, where styles are derived from the element
 * being animated and applied to the animation when it starts.
 *
 * Auto-styling can be used to define a state that depends on layout or other
 * environmental factors.
 *
 * @return An object that encapsulates the style data.
 *
 * @usageNotes
 * The following examples create animation styles that collect a set of
 * CSS property values:
 *
 * ```typescript
 * // string values for CSS properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical pixel values
 * style({ width: 100, height: 0 })
 * ```
 *
 * The following example uses auto-styling to allow a component to animate from
 * a height of 0 up to the height of the parent element:
 *
 * ```
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * @publicApi
 **/


function style(tokens) {
  return {
    type: 6
    /* Style */
    ,
    styles: tokens,
    offset: null
  };
}
/**
 * Declares an animation state within a trigger attached to an element.
 *
 * @param name One or more names for the defined state in a comma-separated string.
 * The following reserved state names can be supplied to define a style for specific use
 * cases:
 *
 * - `void` You can associate styles with this name to be used when
 * the element is detached from the application. For example, when an `ngIf` evaluates
 * to false, the state of the associated element is void.
 *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
 * to be used as the fallback when the state that is being animated is not declared
 * within the trigger.
 *
 * @param styles A set of CSS styles associated with this state, created using the
 * `style()` function.
 * This set of styles persists on the element once the state has been reached.
 * @param options Parameters that can be passed to the state when it is invoked.
 * 0 or more key-value pairs.
 * @return An object that encapsulates the new state data.
 *
 * @usageNotes
 * Use the `trigger()` function to register states to an animation trigger.
 * Use the `transition()` function to animate between states.
 * When a state is active within a component, its associated styles persist on the element,
 * even when the animation ends.
 *
 * @publicApi
 **/


function state(name, styles, options) {
  return {
    type: 0
    /* State */
    ,
    name: name,
    styles: styles,
    options: options
  };
}
/**
 * Defines a set of animation styles, associating each style with an optional `offset` value.
 *
 * @param steps A set of animation styles with optional offset data.
 * The optional `offset` value for a style specifies a percentage of the total animation
 * time at which that style is applied.
 * @returns An object that encapsulates the keyframes data.
 *
 * @usageNotes
 * Use with the `animate()` call. Instead of applying animations
 * from the current state
 * to the destination state, keyframes describe how each style entry is applied and at what point
 * within the animation arc.
 * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
 *
 * ### Usage
 *
 * In the following example, the offset values describe
 * when each `backgroundColor` value is applied. The color is red at the start, and changes to
 * blue when 20% of the total time has elapsed.
 *
 * ```typescript
 * // the provided offset values
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * If there are no `offset` values specified in the style entries, the offsets
 * are calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 *```

 * @publicApi
 */


function keyframes(steps) {
  return {
    type: 5
    /* Keyframes */
    ,
    steps: steps
  };
}
/**
 * Declares an animation transition as a sequence of animation steps to run when a given
 * condition is satisfied. The condition is a Boolean expression or function that compares
 * the previous and current animation states, and returns true if this transition should occur.
 * When the state criteria of a defined transition are met, the associated animation is
 * triggered.
 *
 * @param stateChangeExpr A Boolean expression or function that compares the previous and current
 * animation states, and returns true if this transition should occur. Note that  "true" and "false"
 * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
 * animation trigger element.
 * The animation steps run when the expression evaluates to true.
 *
 * - A state-change string takes the form "state1 => state2", where each side is a defined animation
 * state, or an asterix (*) to refer to a dynamic start or end state.
 *   - The expression string can contain multiple comma-separated statements;
 * for example "state1 => state2, state3 => state4".
 *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
 * equivalent to  "void => *"  and "* => void".
 *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
 * increased or decreased in value.
 * - A function is executed each time a state change occurs in the animation trigger element.
 * The animation steps run when the function returns true.
 *
 * @param steps One or more animation objects, as returned by the `animate()` or
 * `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param options An options object that can contain a delay value for the start of the animation,
 * and additional developer-defined parameters. Provided values for additional parameters are used
 * as defaults, and override values can be passed to the caller on invocation.
 * @returns An object that encapsulates the transition data.
 *
 * @usageNotes
 * The template associated with a component binds an animation trigger to an element.
 *
 * ```HTML
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * All transitions are defined within an animation trigger,
 * along with named states that the transitions change to and from.
 *
 * ```typescript
 * trigger("myAnimationTrigger", [
 *  // define states
 *  state("on", style({ background: "green" })),
 *  state("off", style({ background: "grey" })),
 *  ...]
 * ```
 *
 * Note that when you call the `sequence()` function within a `{@link animations/group group()}`
 * or a `transition()` call, execution does not continue to the next instruction
 * until each of the inner animation steps have completed.
 *
 * ### Syntax examples
 *
 * The following examples define transitions between the two defined states (and default states),
 * using various options:
 *
 * ```typescript
 * // Transition occurs when the state value
 * // bound to "myAnimationTrigger" changes from "on" to "off"
 * transition("on => off", animate(500))
 * // Run the same animation for both directions
 * transition("on <=> off", animate(500))
 * // Define multiple state-change pairs separated by commas
 * transition("on => off, off => void", animate(500))
 * ```
 *
 * ### Special values for state-change expressions
 *
 * - Catch-all state change for when an element is inserted into the page and the
 * destination state is unknown:
 *
 * ```typescript
 * transition("void => *", [
 *  style({ opacity: 0 }),
 *  animate(500)
 *  ])
 * ```
 *
 * - Capture a state change between any states:
 *
 *  `transition("* => *", animate("1s 0s"))`
 *
 * - Entry and exit transitions:
 *
 * ```typescript
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 *   ]),
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 *   ])
 * ```
 *
 * - Use `:increment` and `:decrement` to initiate transitions:
 *
 * ```typescript
 * transition(":increment", group([
 *  query(':enter', [
 *     style({ left: '100%' }),
 *     animate('0.5s ease-out', style('*'))
 *   ]),
 *  query(':leave', [
 *     animate('0.5s ease-out', style({ left: '-100%' }))
 *  ])
 * ]))
 *
 * transition(":decrement", group([
 *  query(':enter', [
 *     style({ left: '100%' }),
 *     animate('0.5s ease-out', style('*'))
 *   ]),
 *  query(':leave', [
 *     animate('0.5s ease-out', style({ left: '-100%' }))
 *  ])
 * ]))
 * ```
 *
 * ### State-change functions
 *
 * Here is an example of a `fromState` specified as a state-change function that invokes an
 * animation when true:
 *
 * ```typescript
 * transition((fromState, toState) =>
 *  {
 *   return fromState == "off" && toState == "on";
 *  },
 *  animate("1s 0s"))
 * ```
 *
 * ### Animating to the final state
 *
 * If the final step in a transition is a call to `animate()` that uses a timing value
 * with no style data, that step is automatically considered the final animation arc,
 * for the element to reach the final state. Angular automatically adds or removes
 * CSS styles to ensure that the element is in the correct final state.
 *
 * The following example defines a transition that starts by hiding the element,
 * then makes sure that it animates properly to whatever state is currently active for trigger:
 *
 * ```typescript
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 *  ])
 * ```
 * ### Boolean value matching
 * If a trigger binding value is a Boolean, it can be matched using a transition expression
 * that compares true and false or 1 and 0. For example:
 *
 * ```
 * // in the template
 * <div [@openClose]="open ? true : false">...</div>
 * // in the component metadata
 * trigger('openClose', [
 *   state('true', style({ height: '*' })),
 *   state('false', style({ height: '0px' })),
 *   transition('false <=> true', animate(500))
 * ])
 * ```
 *
 * @publicApi
 **/


function transition(stateChangeExpr, steps) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    type: 1
    /* Transition */
    ,
    expr: stateChangeExpr,
    animation: steps,
    options: options
  };
}
/**
 * Produces a reusable animation that can be invoked in another animation or sequence,
 * by calling the `useAnimation()` function.
 *
 * @param steps One or more animation objects, as returned by the `animate()`
 * or `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional developer-defined parameters.
 * Provided values for additional parameters are used as defaults,
 * and override values can be passed to the caller on invocation.
 * @returns An object that encapsulates the animation data.
 *
 * @usageNotes
 * The following example defines a reusable animation, providing some default parameter
 * values.
 *
 * ```typescript
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *   style({ opacity: '{{ end }}'}))
 *   ],
 *   { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * The following invokes the defined animation with a call to `useAnimation()`,
 * passing in override parameter values.
 *
 * ```js
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If any of the passed-in parameter values are missing from this call,
 * the default values are used. If one or more parameter values are missing before a step is
 * animated, `useAnimation()` throws an error.
 *
 * @publicApi
 */


function animation(steps) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    type: 8
    /* Reference */
    ,
    animation: steps,
    options: options
  };
}
/**
 * Executes a queried inner animation element within an animation sequence.
 *
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional override values for developer-defined parameters.
 * @return An object that encapsulates the child animation data.
 *
 * @usageNotes
 * Each time an animation is triggered in Angular, the parent animation
 * has priority and any child animations are blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations, and run them using this function.
 *
 * Note that this feature is designed to be used with `query()` and it will only work
 * with animations that are assigned using the Angular animation library. CSS keyframes
 * and transitions are not handled by this API.
 *
 * @publicApi
 */


function animateChild() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return {
    type: 9
    /* AnimateChild */
    ,
    options: options
  };
}
/**
 * Starts a reusable animation that is created using the `animation()` function.
 *
 * @param animation The reusable animation to start.
 * @param options An options object that can contain a delay value for the start of
 * the animation, and additional override values for developer-defined parameters.
 * @return An object that contains the animation parameters.
 *
 * @publicApi
 */


function useAnimation(animation) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    type: 10
    /* AnimateRef */
    ,
    animation: animation,
    options: options
  };
}
/**
 * Finds one or more inner elements within the current element that is
 * being animated within a sequence. Use with `animate()`.
 *
 * @param selector The element to query, or a set of elements that contain Angular-specific
 * characteristics, specified with one or more of the following tokens.
 *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
 *  - `query(":animating")` : Query all currently animating elements.
 *  - `query("@triggerName")` : Query elements that contain an animation trigger.
 *  - `query("@*")` : Query all elements that contain an animation triggers.
 *  - `query(":self")` : Include the current element into the animation sequence.
 *
 * @param animation One or more animation steps to apply to the queried element or elements.
 * An array is treated as an animation sequence.
 * @param options An options object. Use the 'limit' field to limit the total number of
 * items to collect.
 * @return An object that encapsulates the query data.
 *
 * @usageNotes
 * Tokens can be merged into a combined query selector string. For example:
 *
 * ```typescript
 *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
 * ```
 *
 * The `query()` function collects multiple elements and works internally by using
 * `element.querySelectorAll`. Use the `limit` field of an options object to limit
 * the total number of items to be collected. For example:
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * By default, throws an error when zero items are found. Set the
 * `optional` flag to ignore this error. For example:
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Usage Example
 *
 * The following example queries for inner elements and animates them
 * individually using `animate()`.
 *
 * ```typescript
 * @Component({
 *   selector: 'inner',
 *   template: `
 *     <div [@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 }))),
 *        query('.content', animate(1000, style({ opacity: 1 }))),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * @publicApi
 */


function query(selector, animation) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    type: 11
    /* Query */
    ,
    selector: selector,
    animation: animation,
    options: options
  };
}
/**
 * Use within an animation `query()` call to issue a timing gap after
 * each queried item is animated.
 *
 * @param timings A delay value.
 * @param animation One ore more animation steps.
 * @returns An object that encapsulates the stagger data.
 *
 * @usageNotes
 * In the following example, a container element wraps a list of items stamped out
 * by an `ngFor`. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * Each time items are added, the opacity fade-in animation runs,
 * and each removed item is faded out.
 * When either of these animations occur, the stagger effect is
 * applied after each item's animation is started.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * Here is the component code:
 *
 * ```typescript
 * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
 * @Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *     ...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *    }
 *  }
 * ```
 *
 * Here is the animation trigger code:
 *
 * ```typescript
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * @publicApi
 */


function stagger(timings, animation) {
  return {
    type: 12
    /* Stagger */
    ,
    timings: timings,
    animation: animation
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function scheduleMicroTask(cb) {
  Promise.resolve(null).then(cb);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An empty programmatic controller for reusable animations.
 * Used internally when animations are disabled, to avoid
 * checking for the null case when an animation player is expected.
 *
 * @see `animate()`
 * @see `AnimationPlayer`
 * @see `GroupPlayer`
 *
 * @publicApi
 */


var NoopAnimationPlayer = /*#__PURE__*/function () {
  function NoopAnimationPlayer() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, NoopAnimationPlayer);

    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._started = false;
    this._destroyed = false;
    this._finished = false;
    this._position = 0;
    this.parentPlayer = null;
    this.totalTime = duration + delay;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__.default)(NoopAnimationPlayer, [{
    key: "_onFinish",
    value: function _onFinish() {
      if (!this._finished) {
        this._finished = true;

        this._onDoneFns.forEach(function (fn) {
          return fn();
        });

        this._onDoneFns = [];
      }
    }
  }, {
    key: "onStart",
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this._started;
    }
  }, {
    key: "init",
    value: function init() {}
  }, {
    key: "play",
    value: function play() {
      if (!this.hasStarted()) {
        this._onStart();

        this.triggerMicrotask();
      }

      this._started = true;
    }
    /** @internal */

  }, {
    key: "triggerMicrotask",
    value: function triggerMicrotask() {
      var _this = this;

      scheduleMicroTask(function () {
        return _this._onFinish();
      });
    }
  }, {
    key: "_onStart",
    value: function _onStart() {
      this._onStartFns.forEach(function (fn) {
        return fn();
      });

      this._onStartFns = [];
    }
  }, {
    key: "pause",
    value: function pause() {}
  }, {
    key: "restart",
    value: function restart() {}
  }, {
    key: "finish",
    value: function finish() {
      this._onFinish();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (!this._destroyed) {
        this._destroyed = true;

        if (!this.hasStarted()) {
          this._onStart();
        }

        this.finish();

        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });

        this._onDestroyFns = [];
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this._started = false;
    }
  }, {
    key: "setPosition",
    value: function setPosition(position) {
      this._position = this.totalTime ? position * this.totalTime : 1;
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return this.totalTime ? this._position / this.totalTime : 1;
    }
    /** @internal */

  }, {
    key: "triggerCallback",
    value: function triggerCallback(phaseName) {
      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
      methods.forEach(function (fn) {
        return fn();
      });
      methods.length = 0;
    }
  }]);

  return NoopAnimationPlayer;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A programmatic controller for a group of reusable animations.
 * Used internally to control animations.
 *
 * @see `AnimationPlayer`
 * @see `{@link animations/group group()}`
 *
 */


var AnimationGroupPlayer = /*#__PURE__*/function () {
  function AnimationGroupPlayer(_players) {
    var _this2 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, AnimationGroupPlayer);

    this._onDoneFns = [];
    this._onStartFns = [];
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._onDestroyFns = [];
    this.parentPlayer = null;
    this.totalTime = 0;
    this.players = _players;
    var doneCount = 0;
    var destroyCount = 0;
    var startCount = 0;
    var total = this.players.length;

    if (total == 0) {
      scheduleMicroTask(function () {
        return _this2._onFinish();
      });
    } else {
      this.players.forEach(function (player) {
        player.onDone(function () {
          if (++doneCount == total) {
            _this2._onFinish();
          }
        });
        player.onDestroy(function () {
          if (++destroyCount == total) {
            _this2._onDestroy();
          }
        });
        player.onStart(function () {
          if (++startCount == total) {
            _this2._onStart();
          }
        });
      });
    }

    this.totalTime = this.players.reduce(function (time, player) {
      return Math.max(time, player.totalTime);
    }, 0);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__.default)(AnimationGroupPlayer, [{
    key: "_onFinish",
    value: function _onFinish() {
      if (!this._finished) {
        this._finished = true;

        this._onDoneFns.forEach(function (fn) {
          return fn();
        });

        this._onDoneFns = [];
      }
    }
  }, {
    key: "init",
    value: function init() {
      this.players.forEach(function (player) {
        return player.init();
      });
    }
  }, {
    key: "onStart",
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
  }, {
    key: "_onStart",
    value: function _onStart() {
      if (!this.hasStarted()) {
        this._started = true;

        this._onStartFns.forEach(function (fn) {
          return fn();
        });

        this._onStartFns = [];
      }
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this._started;
    }
  }, {
    key: "play",
    value: function play() {
      if (!this.parentPlayer) {
        this.init();
      }

      this._onStart();

      this.players.forEach(function (player) {
        return player.play();
      });
    }
  }, {
    key: "pause",
    value: function pause() {
      this.players.forEach(function (player) {
        return player.pause();
      });
    }
  }, {
    key: "restart",
    value: function restart() {
      this.players.forEach(function (player) {
        return player.restart();
      });
    }
  }, {
    key: "finish",
    value: function finish() {
      this._onFinish();

      this.players.forEach(function (player) {
        return player.finish();
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._onDestroy();
    }
  }, {
    key: "_onDestroy",
    value: function _onDestroy() {
      if (!this._destroyed) {
        this._destroyed = true;

        this._onFinish();

        this.players.forEach(function (player) {
          return player.destroy();
        });

        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });

        this._onDestroyFns = [];
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.players.forEach(function (player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    }
  }, {
    key: "setPosition",
    value: function setPosition(p) {
      var timeAtPosition = p * this.totalTime;
      this.players.forEach(function (player) {
        var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
        player.setPosition(position);
      });
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      var longestPlayer = this.players.reduce(function (longestSoFar, player) {
        var newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
        return newPlayerIsLongest ? player : longestSoFar;
      }, null);
      return longestPlayer != null ? longestPlayer.getPosition() : 0;
    }
  }, {
    key: "beforeDestroy",
    value: function beforeDestroy() {
      this.players.forEach(function (player) {
        if (player.beforeDestroy) {
          player.beforeDestroy();
        }
      });
    }
    /** @internal */

  }, {
    key: "triggerCallback",
    value: function triggerCallback(phaseName) {
      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
      methods.forEach(function (fn) {
        return fn();
      });
      methods.length = 0;
    }
  }]);

  return AnimationGroupPlayer;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵPRE_STYLE = '!';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 26022:
/*!**************************************************************!*\
  !*** ./node_modules/@angular/animations/fesm2015/browser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationDriver": function() { return /* binding */ AnimationDriver; },
/* harmony export */   "ɵAnimation": function() { return /* binding */ Animation; },
/* harmony export */   "ɵAnimationEngine": function() { return /* binding */ AnimationEngine; },
/* harmony export */   "ɵAnimationStyleNormalizer": function() { return /* binding */ AnimationStyleNormalizer; },
/* harmony export */   "ɵCssKeyframesDriver": function() { return /* binding */ CssKeyframesDriver; },
/* harmony export */   "ɵCssKeyframesPlayer": function() { return /* binding */ CssKeyframesPlayer; },
/* harmony export */   "ɵNoopAnimationDriver": function() { return /* binding */ NoopAnimationDriver; },
/* harmony export */   "ɵNoopAnimationStyleNormalizer": function() { return /* binding */ NoopAnimationStyleNormalizer; },
/* harmony export */   "ɵWebAnimationsDriver": function() { return /* binding */ WebAnimationsDriver; },
/* harmony export */   "ɵWebAnimationsPlayer": function() { return /* binding */ WebAnimationsPlayer; },
/* harmony export */   "ɵWebAnimationsStyleNormalizer": function() { return /* binding */ WebAnimationsStyleNormalizer; },
/* harmony export */   "ɵallowPreviousPlayerStylesMerge": function() { return /* binding */ allowPreviousPlayerStylesMerge; },
/* harmony export */   "ɵangular_packages_animations_browser_browser_a": function() { return /* binding */ SpecialCasedStyles; },
/* harmony export */   "ɵcontainsElement": function() { return /* binding */ _containsElement; },
/* harmony export */   "ɵinvokeQuery": function() { return /* binding */ invokeQuery; },
/* harmony export */   "ɵmatchesElement": function() { return /* binding */ _matchesElement; },
/* harmony export */   "ɵsupportsWebAnimations": function() { return /* binding */ supportsWebAnimations; },
/* harmony export */   "ɵvalidateStyleProperty": function() { return /* binding */ _validateStyleProperty; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/animations */ 82458);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 91477);










/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



function isBrowser() {
  return typeof window !== 'undefined' && typeof window.document !== 'undefined';
}

function isNode() {
  // Checking only for `process` isn't enough to identify whether or not we're in a Node
  // environment, because Webpack by default will polyfill the `process`. While we can discern
  // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
  // might not be future-proof. Instead we look at the stringified version of `process` which
  // is `[object process]` in Node and `[object Object]` when polyfilled.
  return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
}

function optimizeGroupPlayer(players) {
  switch (players.length) {
    case 0:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer();

    case 1:
      return players[0];

    default:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_9__["ɵAnimationGroupPlayer"](players);
  }
}

function normalizeKeyframes(driver, normalizer, element, keyframes) {
  var preStyles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var postStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var errors = [];
  var normalizedKeyframes = [];
  var previousOffset = -1;
  var previousKeyframe = null;
  keyframes.forEach(function (kf) {
    var offset = kf['offset'];
    var isSameOffset = offset == previousOffset;
    var normalizedKeyframe = isSameOffset && previousKeyframe || {};
    Object.keys(kf).forEach(function (prop) {
      var normalizedProp = prop;
      var normalizedValue = kf[prop];

      if (prop !== 'offset') {
        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);

        switch (normalizedValue) {
          case _angular_animations__WEBPACK_IMPORTED_MODULE_9__["ɵPRE_STYLE"]:
            normalizedValue = preStyles[prop];
            break;

          case _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE:
            normalizedValue = postStyles[prop];
            break;

          default:
            normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
            break;
        }
      }

      normalizedKeyframe[normalizedProp] = normalizedValue;
    });

    if (!isSameOffset) {
      normalizedKeyframes.push(normalizedKeyframe);
    }

    previousKeyframe = normalizedKeyframe;
    previousOffset = offset;
  });

  if (errors.length) {
    var LINE_START = '\n - ';
    throw new Error("Unable to animate due to the following errors:".concat(LINE_START).concat(errors.join(LINE_START)));
  }

  return normalizedKeyframes;
}

function listenOnPlayer(player, eventName, event, callback) {
  switch (eventName) {
    case 'start':
      player.onStart(function () {
        return callback(event && copyAnimationEvent(event, 'start', player));
      });
      break;

    case 'done':
      player.onDone(function () {
        return callback(event && copyAnimationEvent(event, 'done', player));
      });
      break;

    case 'destroy':
      player.onDestroy(function () {
        return callback(event && copyAnimationEvent(event, 'destroy', player));
      });
      break;
  }
}

function copyAnimationEvent(e, phaseName, player) {
  var totalTime = player.totalTime;
  var disabled = player.disabled ? true : false;
  var event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
  var data = e['_data'];

  if (data != null) {
    event['_data'] = data;
  }

  return event;
}

function makeAnimationEvent(element, triggerName, fromState, toState) {
  var phaseName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
  var totalTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var disabled = arguments.length > 6 ? arguments[6] : undefined;
  return {
    element: element,
    triggerName: triggerName,
    fromState: fromState,
    toState: toState,
    phaseName: phaseName,
    totalTime: totalTime,
    disabled: !!disabled
  };
}

function getOrSetAsInMap(map, key, defaultValue) {
  var value;

  if (map instanceof Map) {
    value = map.get(key);

    if (!value) {
      map.set(key, value = defaultValue);
    }
  } else {
    value = map[key];

    if (!value) {
      value = map[key] = defaultValue;
    }
  }

  return value;
}

function parseTimelineCommand(command) {
  var separatorPos = command.indexOf(':');
  var id = command.substring(1, separatorPos);
  var action = command.substr(separatorPos + 1);
  return [id, action];
}

var _contains = function _contains(elm1, elm2) {
  return false;
};

var ɵ0 = _contains;

var _matches = function _matches(element, selector) {
  return false;
};

var ɵ1 = _matches;

var _query = function _query(element, selector, multi) {
  return [];
};

var ɵ2 = _query; // Define utility methods for browsers and platform-server(domino) where Element
// and utility methods exist.

var _isNode = isNode();

if (_isNode || typeof Element !== 'undefined') {
  if (!isBrowser()) {
    _contains = function _contains(elm1, elm2) {
      return elm1.contains(elm2);
    };
  } else {
    _contains = function _contains(elm1, elm2) {
      while (elm2 && elm2 !== document.documentElement) {
        if (elm2 === elm1) {
          return true;
        }

        elm2 = elm2.parentNode || elm2.host; // consider host to support shadow DOM
      }

      return false;
    };
  }

  _matches = function () {
    if (_isNode || Element.prototype.matches) {
      return function (element, selector) {
        return element.matches(selector);
      };
    } else {
      var proto = Element.prototype;
      var fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;

      if (fn) {
        return function (element, selector) {
          return fn.apply(element, [selector]);
        };
      } else {
        return _matches;
      }
    }
  }();

  _query = function _query(element, selector, multi) {
    var results = [];

    if (multi) {
      // DO NOT REFACTOR TO USE SPREAD SYNTAX.
      // For element queries that return sufficiently large NodeList objects,
      // using spread syntax to populate the results array causes a RangeError
      // due to the call stack limit being reached. `Array.from` can not be used
      // as well, since NodeList is not iterable in IE 11, see
      // https://developer.mozilla.org/en-US/docs/Web/API/NodeList
      // More info is available in #38551.
      var elems = element.querySelectorAll(selector);

      for (var i = 0; i < elems.length; i++) {
        results.push(elems[i]);
      }
    } else {
      var elm = element.querySelector(selector);

      if (elm) {
        results.push(elm);
      }
    }

    return results;
  };
}

function containsVendorPrefix(prop) {
  // Webkit is the only real popular vendor prefix nowadays
  // cc: http://shouldiprefix.com/
  return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
}

var _CACHED_BODY = null;
var _IS_WEBKIT = false;

function _validateStyleProperty(prop) {
  if (!_CACHED_BODY) {
    _CACHED_BODY = getBodyNode() || {};
    _IS_WEBKIT = _CACHED_BODY.style ? 'WebkitAppearance' in _CACHED_BODY.style : false;
  }

  var result = true;

  if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
    result = prop in _CACHED_BODY.style;

    if (!result && _IS_WEBKIT) {
      var camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
      result = camelProp in _CACHED_BODY.style;
    }
  }

  return result;
}

function getBodyNode() {
  if (typeof document != 'undefined') {
    return document.body;
  }

  return null;
}

var _matchesElement = _matches;
var _containsElement = _contains;
var invokeQuery = _query;

function hypenatePropsObject(object) {
  var newObj = {};
  Object.keys(object).forEach(function (prop) {
    var newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
    newObj[newProp] = object[prop];
  });
  return newObj;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var NoopAnimationDriver = /*#__PURE__*/function () {
  function NoopAnimationDriver() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NoopAnimationDriver);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(NoopAnimationDriver, [{
    key: "validateStyleProperty",
    value: function validateStyleProperty(prop) {
      return _validateStyleProperty(prop);
    }
  }, {
    key: "matchesElement",
    value: function matchesElement(element, selector) {
      return _matchesElement(element, selector);
    }
  }, {
    key: "containsElement",
    value: function containsElement(elm1, elm2) {
      return _containsElement(elm1, elm2);
    }
  }, {
    key: "query",
    value: function query(element, selector, multi) {
      return invokeQuery(element, selector, multi);
    }
  }, {
    key: "computeStyle",
    value: function computeStyle(element, prop, defaultValue) {
      return defaultValue || '';
    }
  }, {
    key: "animate",
    value: function animate(element, keyframes, duration, delay, easing) {
      var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
      var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer(duration, delay);
    }
  }]);

  return NoopAnimationDriver;
}();

NoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) {
  return new (t || NoopAnimationDriver)();
};

NoopAnimationDriver.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: NoopAnimationDriver,
  factory: NoopAnimationDriver.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](NoopAnimationDriver, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], null, null);
})();
/**
 * @publicApi
 */


var AnimationDriver = function AnimationDriver() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationDriver);
};

AnimationDriver.NOOP = new NoopAnimationDriver();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var ONE_SECOND = 1000;
var SUBSTITUTION_EXPR_START = '{{';
var SUBSTITUTION_EXPR_END = '}}';
var ENTER_CLASSNAME = 'ng-enter';
var LEAVE_CLASSNAME = 'ng-leave';
var ENTER_SELECTOR = '.ng-enter';
var LEAVE_SELECTOR = '.ng-leave';
var NG_TRIGGER_CLASSNAME = 'ng-trigger';
var NG_TRIGGER_SELECTOR = '.ng-trigger';
var NG_ANIMATING_CLASSNAME = 'ng-animating';
var NG_ANIMATING_SELECTOR = '.ng-animating';

function resolveTimingValue(value) {
  if (typeof value == 'number') return value;
  var matches = value.match(/^(-?[\.\d]+)(m?s)/);
  if (!matches || matches.length < 2) return 0;
  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}

function _convertTimeValueToMS(value, unit) {
  switch (unit) {
    case 's':
      return value * ONE_SECOND;

    default:
      // ms or something else
      return value;
  }
}

function resolveTiming(timings, errors, allowNegativeValues) {
  return timings.hasOwnProperty('duration') ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
}

function parseTimeExpression(exp, errors, allowNegativeValues) {
  var regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
  var duration;
  var delay = 0;
  var easing = '';

  if (typeof exp === 'string') {
    var matches = exp.match(regex);

    if (matches === null) {
      errors.push("The provided timing value \"".concat(exp, "\" is invalid."));
      return {
        duration: 0,
        delay: 0,
        easing: ''
      };
    }

    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    var delayMatch = matches[3];

    if (delayMatch != null) {
      delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
    }

    var easingVal = matches[5];

    if (easingVal) {
      easing = easingVal;
    }
  } else {
    duration = exp;
  }

  if (!allowNegativeValues) {
    var containsErrors = false;
    var startIndex = errors.length;

    if (duration < 0) {
      errors.push("Duration values below 0 are not allowed for this animation step.");
      containsErrors = true;
    }

    if (delay < 0) {
      errors.push("Delay values below 0 are not allowed for this animation step.");
      containsErrors = true;
    }

    if (containsErrors) {
      errors.splice(startIndex, 0, "The provided timing value \"".concat(exp, "\" is invalid."));
    }
  }

  return {
    duration: duration,
    delay: delay,
    easing: easing
  };
}

function copyObj(obj) {
  var destination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  Object.keys(obj).forEach(function (prop) {
    destination[prop] = obj[prop];
  });
  return destination;
}

function normalizeStyles(styles) {
  var normalizedStyles = {};

  if (Array.isArray(styles)) {
    styles.forEach(function (data) {
      return copyStyles(data, false, normalizedStyles);
    });
  } else {
    copyStyles(styles, false, normalizedStyles);
  }

  return normalizedStyles;
}

function copyStyles(styles, readPrototype) {
  var destination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (readPrototype) {
    // we make use of a for-in loop so that the
    // prototypically inherited properties are
    // revealed from the backFill map
    for (var prop in styles) {
      destination[prop] = styles[prop];
    }
  } else {
    copyObj(styles, destination);
  }

  return destination;
}

function getStyleAttributeString(element, key, value) {
  // Return the key-value pair string to be added to the style attribute for the
  // given CSS style key.
  if (value) {
    return key + ':' + value + ';';
  } else {
    return '';
  }
}

function writeStyleAttribute(element) {
  // Read the style property of the element and manually reflect it to the
  // style attribute. This is needed because Domino on platform-server doesn't
  // understand the full set of allowed CSS properties and doesn't reflect some
  // of them automatically.
  var styleAttrValue = '';

  for (var i = 0; i < element.style.length; i++) {
    var key = element.style.item(i);
    styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
  }

  for (var _key in element.style) {
    // Skip internal Domino properties that don't need to be reflected.
    if (!element.style.hasOwnProperty(_key) || _key.startsWith('_')) {
      continue;
    }

    var dashKey = camelCaseToDashCase(_key);
    styleAttrValue += getStyleAttributeString(element, dashKey, element.style[_key]);
  }

  element.setAttribute('style', styleAttrValue);
}

function setStyles(element, styles, formerStyles) {
  if (element['style']) {
    Object.keys(styles).forEach(function (prop) {
      var camelProp = dashCaseToCamelCase(prop);

      if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
        formerStyles[prop] = element.style[camelProp];
      }

      element.style[camelProp] = styles[prop];
    }); // On the server set the 'style' attribute since it's not automatically reflected.

    if (isNode()) {
      writeStyleAttribute(element);
    }
  }
}

function eraseStyles(element, styles) {
  if (element['style']) {
    Object.keys(styles).forEach(function (prop) {
      var camelProp = dashCaseToCamelCase(prop);
      element.style[camelProp] = '';
    }); // On the server set the 'style' attribute since it's not automatically reflected.

    if (isNode()) {
      writeStyleAttribute(element);
    }
  }
}

function normalizeAnimationEntry(steps) {
  if (Array.isArray(steps)) {
    if (steps.length == 1) return steps[0];
    return (0,_angular_animations__WEBPACK_IMPORTED_MODULE_9__.sequence)(steps);
  }

  return steps;
}

function validateStyleParams(value, options, errors) {
  var params = options.params || {};
  var matches = extractStyleParams(value);

  if (matches.length) {
    matches.forEach(function (varName) {
      if (!params.hasOwnProperty(varName)) {
        errors.push("Unable to resolve the local animation param ".concat(varName, " in the given list of values"));
      }
    });
  }
}

var PARAM_REGEX = new RegExp("".concat(SUBSTITUTION_EXPR_START, "\\s*(.+?)\\s*").concat(SUBSTITUTION_EXPR_END), 'g');

function extractStyleParams(value) {
  var params = [];

  if (typeof value === 'string') {
    var match;

    while (match = PARAM_REGEX.exec(value)) {
      params.push(match[1]);
    }

    PARAM_REGEX.lastIndex = 0;
  }

  return params;
}

function interpolateParams(value, params, errors) {
  var original = value.toString();
  var str = original.replace(PARAM_REGEX, function (_, varName) {
    var localVal = params[varName]; // this means that the value was never overridden by the data passed in by the user

    if (!params.hasOwnProperty(varName)) {
      errors.push("Please provide a value for the animation param ".concat(varName));
      localVal = '';
    }

    return localVal.toString();
  }); // we do this to assert that numeric values stay as they are

  return str == original ? value : str;
}

function iteratorToArray(iterator) {
  var arr = [];
  var item = iterator.next();

  while (!item.done) {
    arr.push(item.value);
    item = iterator.next();
  }

  return arr;
}

var DASH_CASE_REGEXP = /-+([a-z0-9])/g;

function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, function () {
    for (var _len = arguments.length, m = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      m[_key2] = arguments[_key2];
    }

    return m[1].toUpperCase();
  });
}

function camelCaseToDashCase(input) {
  return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function allowPreviousPlayerStylesMerge(duration, delay) {
  return duration === 0 || delay === 0;
}

function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
  var previousStyleProps = Object.keys(previousStyles);

  if (previousStyleProps.length && keyframes.length) {
    var startingKeyframe = keyframes[0];
    var missingStyleProps = [];
    previousStyleProps.forEach(function (prop) {
      if (!startingKeyframe.hasOwnProperty(prop)) {
        missingStyleProps.push(prop);
      }

      startingKeyframe[prop] = previousStyles[prop];
    });

    if (missingStyleProps.length) {
      var _loop = function _loop() {
        var kf = keyframes[i];
        missingStyleProps.forEach(function (prop) {
          kf[prop] = computeStyle(element, prop);
        });
      };

      // tslint:disable-next-line
      for (var i = 1; i < keyframes.length; i++) {
        _loop();
      }
    }
  }

  return keyframes;
}

function visitDslNode(visitor, node, context) {
  switch (node.type) {
    case 7
    /* Trigger */
    :
      return visitor.visitTrigger(node, context);

    case 0
    /* State */
    :
      return visitor.visitState(node, context);

    case 1
    /* Transition */
    :
      return visitor.visitTransition(node, context);

    case 2
    /* Sequence */
    :
      return visitor.visitSequence(node, context);

    case 3
    /* Group */
    :
      return visitor.visitGroup(node, context);

    case 4
    /* Animate */
    :
      return visitor.visitAnimate(node, context);

    case 5
    /* Keyframes */
    :
      return visitor.visitKeyframes(node, context);

    case 6
    /* Style */
    :
      return visitor.visitStyle(node, context);

    case 8
    /* Reference */
    :
      return visitor.visitReference(node, context);

    case 9
    /* AnimateChild */
    :
      return visitor.visitAnimateChild(node, context);

    case 10
    /* AnimateRef */
    :
      return visitor.visitAnimateRef(node, context);

    case 11
    /* Query */
    :
      return visitor.visitQuery(node, context);

    case 12
    /* Stagger */
    :
      return visitor.visitStagger(node, context);

    default:
      throw new Error("Unable to resolve animation metadata node #".concat(node.type));
  }
}

function computeStyle(element, prop) {
  return window.getComputedStyle(element)[prop];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ANY_STATE = '*';

function parseTransitionExpr(transitionValue, errors) {
  var expressions = [];

  if (typeof transitionValue == 'string') {
    transitionValue.split(/\s*,\s*/).forEach(function (str) {
      return parseInnerTransitionStr(str, expressions, errors);
    });
  } else {
    expressions.push(transitionValue);
  }

  return expressions;
}

function parseInnerTransitionStr(eventStr, expressions, errors) {
  if (eventStr[0] == ':') {
    var result = parseAnimationAlias(eventStr, errors);

    if (typeof result == 'function') {
      expressions.push(result);
      return;
    }

    eventStr = result;
  }

  var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);

  if (match == null || match.length < 4) {
    errors.push("The provided transition expression \"".concat(eventStr, "\" is not supported"));
    return expressions;
  }

  var fromState = match[1];
  var separator = match[2];
  var toState = match[3];
  expressions.push(makeLambdaFromStates(fromState, toState));
  var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;

  if (separator[0] == '<' && !isFullAnyStateExpr) {
    expressions.push(makeLambdaFromStates(toState, fromState));
  }
}

function parseAnimationAlias(alias, errors) {
  switch (alias) {
    case ':enter':
      return 'void => *';

    case ':leave':
      return '* => void';

    case ':increment':
      return function (fromState, toState) {
        return parseFloat(toState) > parseFloat(fromState);
      };

    case ':decrement':
      return function (fromState, toState) {
        return parseFloat(toState) < parseFloat(fromState);
      };

    default:
      errors.push("The transition alias value \"".concat(alias, "\" is not supported"));
      return '* => *';
  }
} // DO NOT REFACTOR ... keep the follow set instantiations
// with the values intact (closure compiler for some reason
// removes follow-up lines that add the values outside of
// the constructor...


var TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
var FALSE_BOOLEAN_VALUES = new Set(['false', '0']);

function makeLambdaFromStates(lhs, rhs) {
  var LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
  var RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
  return function (fromState, toState) {
    var lhsMatch = lhs == ANY_STATE || lhs == fromState;
    var rhsMatch = rhs == ANY_STATE || rhs == toState;

    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
    }

    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
    }

    return lhsMatch && rhsMatch;
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SELF_TOKEN = ':self';
var SELF_TOKEN_REGEX = new RegExp("s*".concat(SELF_TOKEN, "s*,?"), 'g');
/*
 * [Validation]
 * The visitor code below will traverse the animation AST generated by the animation verb functions
 * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
 * following corner-cases will be validated:
 *
 * 1. Overlap of animations
 * Given that a CSS property cannot be animated in more than one place at the same time, it's
 * important that this behavior is detected and validated. The way in which this occurs is that
 * each time a style property is examined, a string-map containing the property will be updated with
 * the start and end times for when the property is used within an animation step.
 *
 * If there are two or more parallel animations that are currently running (these are invoked by the
 * group()) on the same element then the validator will throw an error. Since the start/end timing
 * values are collected for each property then if the current animation step is animating the same
 * property and its timing values fall anywhere into the window of time that the property is
 * currently being animated within then this is what causes an error.
 *
 * 2. Timing values
 * The validator will validate to see if a timing value of `duration delay easing` or
 * `durationNumber` is valid or not.
 *
 * (note that upon validation the code below will replace the timing data with an object containing
 * {duration,delay,easing}.
 *
 * 3. Offset Validation
 * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
 * Offsets within keyframes() are considered valid when:
 *
 *   - No offsets are used at all
 *   - Each style() entry contains an offset value
 *   - Each offset is between 0 and 1
 *   - Each offset is greater to or equal than the previous one
 *
 * Otherwise an error will be thrown.
 */

function buildAnimationAst(driver, metadata, errors) {
  return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
}

var ROOT_SELECTOR = '';

var AnimationAstBuilderVisitor = /*#__PURE__*/function () {
  function AnimationAstBuilderVisitor(_driver) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationAstBuilderVisitor);

    this._driver = _driver;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationAstBuilderVisitor, [{
    key: "build",
    value: function build(metadata, errors) {
      var context = new AnimationAstBuilderContext(errors);

      this._resetContextStyleTimingState(context);

      return visitDslNode(this, normalizeAnimationEntry(metadata), context);
    }
  }, {
    key: "_resetContextStyleTimingState",
    value: function _resetContextStyleTimingState(context) {
      context.currentQuerySelector = ROOT_SELECTOR;
      context.collectedStyles = {};
      context.collectedStyles[ROOT_SELECTOR] = {};
      context.currentTime = 0;
    }
  }, {
    key: "visitTrigger",
    value: function visitTrigger(metadata, context) {
      var _this = this;

      var queryCount = context.queryCount = 0;
      var depCount = context.depCount = 0;
      var states = [];
      var transitions = [];

      if (metadata.name.charAt(0) == '@') {
        context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
      }

      metadata.definitions.forEach(function (def) {
        _this._resetContextStyleTimingState(context);

        if (def.type == 0
        /* State */
        ) {
          var stateDef = def;
          var name = stateDef.name;
          name.toString().split(/\s*,\s*/).forEach(function (n) {
            stateDef.name = n;
            states.push(_this.visitState(stateDef, context));
          });
          stateDef.name = name;
        } else if (def.type == 1
        /* Transition */
        ) {
          var transition = _this.visitTransition(def, context);

          queryCount += transition.queryCount;
          depCount += transition.depCount;
          transitions.push(transition);
        } else {
          context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
        }
      });
      return {
        type: 7
        /* Trigger */
        ,
        name: metadata.name,
        states: states,
        transitions: transitions,
        queryCount: queryCount,
        depCount: depCount,
        options: null
      };
    }
  }, {
    key: "visitState",
    value: function visitState(metadata, context) {
      var styleAst = this.visitStyle(metadata.styles, context);
      var astParams = metadata.options && metadata.options.params || null;

      if (styleAst.containsDynamicStyles) {
        var missingSubs = new Set();
        var params = astParams || {};
        styleAst.styles.forEach(function (value) {
          if (isObject(value)) {
            var stylesObj = value;
            Object.keys(stylesObj).forEach(function (prop) {
              extractStyleParams(stylesObj[prop]).forEach(function (sub) {
                if (!params.hasOwnProperty(sub)) {
                  missingSubs.add(sub);
                }
              });
            });
          }
        });

        if (missingSubs.size) {
          var missingSubsArr = iteratorToArray(missingSubs.values());
          context.errors.push("state(\"".concat(metadata.name, "\", ...) must define default values for all the following style substitutions: ").concat(missingSubsArr.join(', ')));
        }
      }

      return {
        type: 0
        /* State */
        ,
        name: metadata.name,
        style: styleAst,
        options: astParams ? {
          params: astParams
        } : null
      };
    }
  }, {
    key: "visitTransition",
    value: function visitTransition(metadata, context) {
      context.queryCount = 0;
      context.depCount = 0;
      var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
      var matchers = parseTransitionExpr(metadata.expr, context.errors);
      return {
        type: 1
        /* Transition */
        ,
        matchers: matchers,
        animation: animation,
        queryCount: context.queryCount,
        depCount: context.depCount,
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitSequence",
    value: function visitSequence(metadata, context) {
      var _this2 = this;

      return {
        type: 2
        /* Sequence */
        ,
        steps: metadata.steps.map(function (s) {
          return visitDslNode(_this2, s, context);
        }),
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitGroup",
    value: function visitGroup(metadata, context) {
      var _this3 = this;

      var currentTime = context.currentTime;
      var furthestTime = 0;
      var steps = metadata.steps.map(function (step) {
        context.currentTime = currentTime;
        var innerAst = visitDslNode(_this3, step, context);
        furthestTime = Math.max(furthestTime, context.currentTime);
        return innerAst;
      });
      context.currentTime = furthestTime;
      return {
        type: 3
        /* Group */
        ,
        steps: steps,
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitAnimate",
    value: function visitAnimate(metadata, context) {
      var timingAst = constructTimingAst(metadata.timings, context.errors);
      context.currentAnimateTimings = timingAst;
      var styleAst;
      var styleMetadata = metadata.styles ? metadata.styles : (0,_angular_animations__WEBPACK_IMPORTED_MODULE_9__.style)({});

      if (styleMetadata.type == 5
      /* Keyframes */
      ) {
        styleAst = this.visitKeyframes(styleMetadata, context);
      } else {
        var _styleMetadata = metadata.styles;
        var isEmpty = false;

        if (!_styleMetadata) {
          isEmpty = true;
          var newStyleData = {};

          if (timingAst.easing) {
            newStyleData['easing'] = timingAst.easing;
          }

          _styleMetadata = (0,_angular_animations__WEBPACK_IMPORTED_MODULE_9__.style)(newStyleData);
        }

        context.currentTime += timingAst.duration + timingAst.delay;

        var _styleAst = this.visitStyle(_styleMetadata, context);

        _styleAst.isEmptyStep = isEmpty;
        styleAst = _styleAst;
      }

      context.currentAnimateTimings = null;
      return {
        type: 4
        /* Animate */
        ,
        timings: timingAst,
        style: styleAst,
        options: null
      };
    }
  }, {
    key: "visitStyle",
    value: function visitStyle(metadata, context) {
      var ast = this._makeStyleAst(metadata, context);

      this._validateStyleAst(ast, context);

      return ast;
    }
  }, {
    key: "_makeStyleAst",
    value: function _makeStyleAst(metadata, context) {
      var styles = [];

      if (Array.isArray(metadata.styles)) {
        metadata.styles.forEach(function (styleTuple) {
          if (typeof styleTuple == 'string') {
            if (styleTuple == _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE) {
              styles.push(styleTuple);
            } else {
              context.errors.push("The provided style string value ".concat(styleTuple, " is not allowed."));
            }
          } else {
            styles.push(styleTuple);
          }
        });
      } else {
        styles.push(metadata.styles);
      }

      var containsDynamicStyles = false;
      var collectedEasing = null;
      styles.forEach(function (styleData) {
        if (isObject(styleData)) {
          var styleMap = styleData;
          var easing = styleMap['easing'];

          if (easing) {
            collectedEasing = easing;
            delete styleMap['easing'];
          }

          if (!containsDynamicStyles) {
            for (var prop in styleMap) {
              var value = styleMap[prop];

              if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                containsDynamicStyles = true;
                break;
              }
            }
          }
        }
      });
      return {
        type: 6
        /* Style */
        ,
        styles: styles,
        easing: collectedEasing,
        offset: metadata.offset,
        containsDynamicStyles: containsDynamicStyles,
        options: null
      };
    }
  }, {
    key: "_validateStyleAst",
    value: function _validateStyleAst(ast, context) {
      var _this4 = this;

      var timings = context.currentAnimateTimings;
      var endTime = context.currentTime;
      var startTime = context.currentTime;

      if (timings && startTime > 0) {
        startTime -= timings.duration + timings.delay;
      }

      ast.styles.forEach(function (tuple) {
        if (typeof tuple == 'string') return;
        Object.keys(tuple).forEach(function (prop) {
          if (!_this4._driver.validateStyleProperty(prop)) {
            context.errors.push("The provided animation property \"".concat(prop, "\" is not a supported CSS property for animations"));
            return;
          }

          var collectedStyles = context.collectedStyles[context.currentQuerySelector];
          var collectedEntry = collectedStyles[prop];
          var updateCollectedStyle = true;

          if (collectedEntry) {
            if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
              context.errors.push("The CSS property \"".concat(prop, "\" that exists between the times of \"").concat(collectedEntry.startTime, "ms\" and \"").concat(collectedEntry.endTime, "ms\" is also being animated in a parallel animation between the times of \"").concat(startTime, "ms\" and \"").concat(endTime, "ms\""));
              updateCollectedStyle = false;
            } // we always choose the smaller start time value since we
            // want to have a record of the entire animation window where
            // the style property is being animated in between


            startTime = collectedEntry.startTime;
          }

          if (updateCollectedStyle) {
            collectedStyles[prop] = {
              startTime: startTime,
              endTime: endTime
            };
          }

          if (context.options) {
            validateStyleParams(tuple[prop], context.options, context.errors);
          }
        });
      });
    }
  }, {
    key: "visitKeyframes",
    value: function visitKeyframes(metadata, context) {
      var _this5 = this;

      var ast = {
        type: 5
        /* Keyframes */
        ,
        styles: [],
        options: null
      };

      if (!context.currentAnimateTimings) {
        context.errors.push("keyframes() must be placed inside of a call to animate()");
        return ast;
      }

      var MAX_KEYFRAME_OFFSET = 1;
      var totalKeyframesWithOffsets = 0;
      var offsets = [];
      var offsetsOutOfOrder = false;
      var keyframesOutOfRange = false;
      var previousOffset = 0;
      var keyframes = metadata.steps.map(function (styles) {
        var style = _this5._makeStyleAst(styles, context);

        var offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
        var offset = 0;

        if (offsetVal != null) {
          totalKeyframesWithOffsets++;
          offset = style.offset = offsetVal;
        }

        keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
        offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
        previousOffset = offset;
        offsets.push(offset);
        return style;
      });

      if (keyframesOutOfRange) {
        context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
      }

      if (offsetsOutOfOrder) {
        context.errors.push("Please ensure that all keyframe offsets are in order");
      }

      var length = metadata.steps.length;
      var generatedOffset = 0;

      if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
        context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
      } else if (totalKeyframesWithOffsets == 0) {
        generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
      }

      var limit = length - 1;
      var currentTime = context.currentTime;
      var currentAnimateTimings = context.currentAnimateTimings;
      var animateDuration = currentAnimateTimings.duration;
      keyframes.forEach(function (kf, i) {
        var offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
        var durationUpToThisFrame = offset * animateDuration;
        context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
        currentAnimateTimings.duration = durationUpToThisFrame;

        _this5._validateStyleAst(kf, context);

        kf.offset = offset;
        ast.styles.push(kf);
      });
      return ast;
    }
  }, {
    key: "visitReference",
    value: function visitReference(metadata, context) {
      return {
        type: 8
        /* Reference */
        ,
        animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitAnimateChild",
    value: function visitAnimateChild(metadata, context) {
      context.depCount++;
      return {
        type: 9
        /* AnimateChild */
        ,
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitAnimateRef",
    value: function visitAnimateRef(metadata, context) {
      return {
        type: 10
        /* AnimateRef */
        ,
        animation: this.visitReference(metadata.animation, context),
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitQuery",
    value: function visitQuery(metadata, context) {
      var parentSelector = context.currentQuerySelector;
      var options = metadata.options || {};
      context.queryCount++;
      context.currentQuery = metadata;

      var _normalizeSelector = normalizeSelector(metadata.selector),
          _normalizeSelector2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__.default)(_normalizeSelector, 2),
          selector = _normalizeSelector2[0],
          includeSelf = _normalizeSelector2[1];

      context.currentQuerySelector = parentSelector.length ? parentSelector + ' ' + selector : selector;
      getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
      var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
      context.currentQuery = null;
      context.currentQuerySelector = parentSelector;
      return {
        type: 11
        /* Query */
        ,
        selector: selector,
        limit: options.limit || 0,
        optional: !!options.optional,
        includeSelf: includeSelf,
        animation: animation,
        originalSelector: metadata.selector,
        options: normalizeAnimationOptions(metadata.options)
      };
    }
  }, {
    key: "visitStagger",
    value: function visitStagger(metadata, context) {
      if (!context.currentQuery) {
        context.errors.push("stagger() can only be used inside of query()");
      }

      var timings = metadata.timings === 'full' ? {
        duration: 0,
        delay: 0,
        easing: 'full'
      } : resolveTiming(metadata.timings, context.errors, true);
      return {
        type: 12
        /* Stagger */
        ,
        animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
        timings: timings,
        options: null
      };
    }
  }]);

  return AnimationAstBuilderVisitor;
}();

function normalizeSelector(selector) {
  var hasAmpersand = selector.split(/\s*,\s*/).find(function (token) {
    return token == SELF_TOKEN;
  }) ? true : false;

  if (hasAmpersand) {
    selector = selector.replace(SELF_TOKEN_REGEX, '');
  } // the :enter and :leave selectors are filled in at runtime during timeline building


  selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, function (match) {
    return NG_TRIGGER_SELECTOR + '-' + match.substr(1);
  }).replace(/:animating/g, NG_ANIMATING_SELECTOR);
  return [selector, hasAmpersand];
}

function normalizeParams(obj) {
  return obj ? copyObj(obj) : null;
}

var AnimationAstBuilderContext = function AnimationAstBuilderContext(errors) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationAstBuilderContext);

  this.errors = errors;
  this.queryCount = 0;
  this.depCount = 0;
  this.currentTransition = null;
  this.currentQuery = null;
  this.currentQuerySelector = null;
  this.currentAnimateTimings = null;
  this.currentTime = 0;
  this.collectedStyles = {};
  this.options = null;
};

function consumeOffset(styles) {
  if (typeof styles == 'string') return null;
  var offset = null;

  if (Array.isArray(styles)) {
    styles.forEach(function (styleTuple) {
      if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
        var obj = styleTuple;
        offset = parseFloat(obj['offset']);
        delete obj['offset'];
      }
    });
  } else if (isObject(styles) && styles.hasOwnProperty('offset')) {
    var obj = styles;
    offset = parseFloat(obj['offset']);
    delete obj['offset'];
  }

  return offset;
}

function isObject(value) {
  return !Array.isArray(value) && typeof value == 'object';
}

function constructTimingAst(value, errors) {
  var timings = null;

  if (value.hasOwnProperty('duration')) {
    timings = value;
  } else if (typeof value == 'number') {
    var duration = resolveTiming(value, errors).duration;
    return makeTimingAst(duration, 0, '');
  }

  var strValue = value;
  var isDynamic = strValue.split(/\s+/).some(function (v) {
    return v.charAt(0) == '{' && v.charAt(1) == '{';
  });

  if (isDynamic) {
    var ast = makeTimingAst(0, 0, '');
    ast.dynamic = true;
    ast.strValue = strValue;
    return ast;
  }

  timings = timings || resolveTiming(strValue, errors);
  return makeTimingAst(timings.duration, timings.delay, timings.easing);
}

function normalizeAnimationOptions(options) {
  if (options) {
    options = copyObj(options);

    if (options['params']) {
      options['params'] = normalizeParams(options['params']);
    }
  } else {
    options = {};
  }

  return options;
}

function makeTimingAst(duration, delay, easing) {
  return {
    duration: duration,
    delay: delay,
    easing: easing
  };
}

function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay) {
  var easing = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var subTimeline = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
  return {
    type: 1
    /* TimelineAnimation */
    ,
    element: element,
    keyframes: keyframes,
    preStyleProps: preStyleProps,
    postStyleProps: postStyleProps,
    duration: duration,
    delay: delay,
    totalTime: duration + delay,
    easing: easing,
    subTimeline: subTimeline
  };
}

var ElementInstructionMap = /*#__PURE__*/function () {
  function ElementInstructionMap() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ElementInstructionMap);

    this._map = new Map();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(ElementInstructionMap, [{
    key: "consume",
    value: function consume(element) {
      var instructions = this._map.get(element);

      if (instructions) {
        this._map.delete(element);
      } else {
        instructions = [];
      }

      return instructions;
    }
  }, {
    key: "append",
    value: function append(element, instructions) {
      var _existingInstructions;

      var existingInstructions = this._map.get(element);

      if (!existingInstructions) {
        this._map.set(element, existingInstructions = []);
      }

      (_existingInstructions = existingInstructions).push.apply(_existingInstructions, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__.default)(instructions));
    }
  }, {
    key: "has",
    value: function has(element) {
      return this._map.has(element);
    }
  }, {
    key: "clear",
    value: function clear() {
      this._map.clear();
    }
  }]);

  return ElementInstructionMap;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ONE_FRAME_IN_MILLISECONDS = 1;
var ENTER_TOKEN = ':enter';
var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
var LEAVE_TOKEN = ':leave';
var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
/*
 * The code within this file aims to generate web-animations-compatible keyframes from Angular's
 * animation DSL code.
 *
 * The code below will be converted from:
 *
 * ```
 * sequence([
 *   style({ opacity: 0 }),
 *   animate(1000, style({ opacity: 0 }))
 * ])
 * ```
 *
 * To:
 * ```
 * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
 * duration = 1000
 * delay = 0
 * easing = ''
 * ```
 *
 * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
 * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
 *
 * [AST Traversal]
 * Each of the animation verbs, when executed, will return an string-map object representing what
 * type of action it is (style, animate, group, etc...) and the data associated with it. This means
 * that when functional composition mix of these functions is evaluated (like in the example above)
 * then it will end up producing a tree of objects representing the animation itself.
 *
 * When this animation object tree is processed by the visitor code below it will visit each of the
 * verb statements within the visitor. And during each visit it will build the context of the
 * animation keyframes by interacting with the `TimelineBuilder`.
 *
 * [TimelineBuilder]
 * This class is responsible for tracking the styles and building a series of keyframe objects for a
 * timeline between a start and end time. The builder starts off with an initial timeline and each
 * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a
 * `sequence()` then it will generate a sub timeline for each step as well as a new one after
 * they are complete.
 *
 * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
 * timeline was created (based on one of the cases above) then the parent timeline will attempt to
 * merge the styles used within the sub timelines into itself (only with group() this will happen).
 * This happens with a merge operation (much like how the merge works in mergesort) and it will only
 * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
 * that if the styles are used later on in another phase of the animation then they will be the most
 * up-to-date values.
 *
 * [How Missing Styles Are Updated]
 * Each timeline has a `backFill` property which is responsible for filling in new styles into
 * already processed keyframes if a new style shows up later within the animation sequence.
 *
 * ```
 * sequence([
 *   style({ width: 0 }),
 *   animate(1000, style({ width: 100 })),
 *   animate(1000, style({ width: 200 })),
 *   animate(1000, style({ width: 300 }))
 *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
 * else
 * ])
 * ```
 *
 * What is happening here is that the `height` value is added later in the sequence, but is missing
 * from all previous animation steps. Therefore when a keyframe is created it would also be missing
 * from all previous keyframes up until where it is first used. For the timeline keyframe generation
 * to properly fill in the style it will place the previous value (the value from the parent
 * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
 * styles are objects that prototypically inhert from the backFill object, this means that if a
 * value is added into the backFill then it will automatically propagate any missing values to all
 * keyframes. Therefore the missing `height` value will be properly filled into the already
 * processed keyframes.
 *
 * When a sub-timeline is created it will have its own backFill property. This is done so that
 * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
 * keyframes
 *
 * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
 *
 * [Validation]
 * The code in this file is not responsible for validation. That functionality happens with within
 * the `AnimationValidatorVisitor` code.
 */

function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName) {
  var startingStyles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var finalStyles = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
  var options = arguments.length > 7 ? arguments[7] : undefined;
  var subInstructions = arguments.length > 8 ? arguments[8] : undefined;
  var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
  return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}

var AnimationTimelineBuilderVisitor = /*#__PURE__*/function () {
  function AnimationTimelineBuilderVisitor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationTimelineBuilderVisitor);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationTimelineBuilderVisitor, [{
    key: "buildKeyframes",
    value: function buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions) {
      var errors = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];
      subInstructions = subInstructions || new ElementInstructionMap();
      var context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
      context.options = options;
      context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
      visitDslNode(this, ast, context); // this checks to see if an actual animation happened

      var timelines = context.timelines.filter(function (timeline) {
        return timeline.containsAnimation();
      });

      if (timelines.length && Object.keys(finalStyles).length) {
        var tl = timelines[timelines.length - 1];

        if (!tl.allowOnlyTimelineStyles()) {
          tl.setStyles([finalStyles], null, context.errors, options);
        }
      }

      return timelines.length ? timelines.map(function (timeline) {
        return timeline.buildKeyframes();
      }) : [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
    }
  }, {
    key: "visitTrigger",
    value: function visitTrigger(ast, context) {// these values are not visited in this AST
    }
  }, {
    key: "visitState",
    value: function visitState(ast, context) {// these values are not visited in this AST
    }
  }, {
    key: "visitTransition",
    value: function visitTransition(ast, context) {// these values are not visited in this AST
    }
  }, {
    key: "visitAnimateChild",
    value: function visitAnimateChild(ast, context) {
      var elementInstructions = context.subInstructions.consume(context.element);

      if (elementInstructions) {
        var innerContext = context.createSubContext(ast.options);
        var startTime = context.currentTimeline.currentTime;

        var endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);

        if (startTime != endTime) {
          // we do this on the upper context because we created a sub context for
          // the sub child animations
          context.transformIntoNewTimeline(endTime);
        }
      }

      context.previousNode = ast;
    }
  }, {
    key: "visitAnimateRef",
    value: function visitAnimateRef(ast, context) {
      var innerContext = context.createSubContext(ast.options);
      innerContext.transformIntoNewTimeline();
      this.visitReference(ast.animation, innerContext);
      context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
      context.previousNode = ast;
    }
  }, {
    key: "_visitSubInstructions",
    value: function _visitSubInstructions(instructions, context, options) {
      var startTime = context.currentTimeline.currentTime;
      var furthestTime = startTime; // this is a special-case for when a user wants to skip a sub
      // animation from being fired entirely.

      var duration = options.duration != null ? resolveTimingValue(options.duration) : null;
      var delay = options.delay != null ? resolveTimingValue(options.delay) : null;

      if (duration !== 0) {
        instructions.forEach(function (instruction) {
          var instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
          furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
        });
      }

      return furthestTime;
    }
  }, {
    key: "visitReference",
    value: function visitReference(ast, context) {
      context.updateOptions(ast.options, true);
      visitDslNode(this, ast.animation, context);
      context.previousNode = ast;
    }
  }, {
    key: "visitSequence",
    value: function visitSequence(ast, context) {
      var _this6 = this;

      var subContextCount = context.subContextCount;
      var ctx = context;
      var options = ast.options;

      if (options && (options.params || options.delay)) {
        ctx = context.createSubContext(options);
        ctx.transformIntoNewTimeline();

        if (options.delay != null) {
          if (ctx.previousNode.type == 6
          /* Style */
          ) {
            ctx.currentTimeline.snapshotCurrentStyles();
            ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
          }

          var delay = resolveTimingValue(options.delay);
          ctx.delayNextStep(delay);
        }
      }

      if (ast.steps.length) {
        ast.steps.forEach(function (s) {
          return visitDslNode(_this6, s, ctx);
        }); // this is here just incase the inner steps only contain or end with a style() call

        ctx.currentTimeline.applyStylesToKeyframe(); // this means that some animation function within the sequence
        // ended up creating a sub timeline (which means the current
        // timeline cannot overlap with the contents of the sequence)

        if (ctx.subContextCount > subContextCount) {
          ctx.transformIntoNewTimeline();
        }
      }

      context.previousNode = ast;
    }
  }, {
    key: "visitGroup",
    value: function visitGroup(ast, context) {
      var _this7 = this;

      var innerTimelines = [];
      var furthestTime = context.currentTimeline.currentTime;
      var delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
      ast.steps.forEach(function (s) {
        var innerContext = context.createSubContext(ast.options);

        if (delay) {
          innerContext.delayNextStep(delay);
        }

        visitDslNode(_this7, s, innerContext);
        furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
        innerTimelines.push(innerContext.currentTimeline);
      }); // this operation is run after the AST loop because otherwise
      // if the parent timeline's collected styles were updated then
      // it would pass in invalid data into the new-to-be forked items

      innerTimelines.forEach(function (timeline) {
        return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
      });
      context.transformIntoNewTimeline(furthestTime);
      context.previousNode = ast;
    }
  }, {
    key: "_visitTiming",
    value: function _visitTiming(ast, context) {
      if (ast.dynamic) {
        var strValue = ast.strValue;
        var timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
        return resolveTiming(timingValue, context.errors);
      } else {
        return {
          duration: ast.duration,
          delay: ast.delay,
          easing: ast.easing
        };
      }
    }
  }, {
    key: "visitAnimate",
    value: function visitAnimate(ast, context) {
      var timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);

      var timeline = context.currentTimeline;

      if (timings.delay) {
        context.incrementTime(timings.delay);
        timeline.snapshotCurrentStyles();
      }

      var style = ast.style;

      if (style.type == 5
      /* Keyframes */
      ) {
        this.visitKeyframes(style, context);
      } else {
        context.incrementTime(timings.duration);
        this.visitStyle(style, context);
        timeline.applyStylesToKeyframe();
      }

      context.currentAnimateTimings = null;
      context.previousNode = ast;
    }
  }, {
    key: "visitStyle",
    value: function visitStyle(ast, context) {
      var timeline = context.currentTimeline;
      var timings = context.currentAnimateTimings; // this is a special case for when a style() call
      // directly follows  an animate() call (but not inside of an animate() call)

      if (!timings && timeline.getCurrentStyleProperties().length) {
        timeline.forwardFrame();
      }

      var easing = timings && timings.easing || ast.easing;

      if (ast.isEmptyStep) {
        timeline.applyEmptyStep(easing);
      } else {
        timeline.setStyles(ast.styles, easing, context.errors, context.options);
      }

      context.previousNode = ast;
    }
  }, {
    key: "visitKeyframes",
    value: function visitKeyframes(ast, context) {
      var currentAnimateTimings = context.currentAnimateTimings;
      var startTime = context.currentTimeline.duration;
      var duration = currentAnimateTimings.duration;
      var innerContext = context.createSubContext();
      var innerTimeline = innerContext.currentTimeline;
      innerTimeline.easing = currentAnimateTimings.easing;
      ast.styles.forEach(function (step) {
        var offset = step.offset || 0;
        innerTimeline.forwardTime(offset * duration);
        innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
        innerTimeline.applyStylesToKeyframe();
      }); // this will ensure that the parent timeline gets all the styles from
      // the child even if the new timeline below is not used

      context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline); // we do this because the window between this timeline and the sub timeline
      // should ensure that the styles within are exactly the same as they were before

      context.transformIntoNewTimeline(startTime + duration);
      context.previousNode = ast;
    }
  }, {
    key: "visitQuery",
    value: function visitQuery(ast, context) {
      var _this8 = this;

      // in the event that the first step before this is a style step we need
      // to ensure the styles are applied before the children are animated
      var startTime = context.currentTimeline.currentTime;
      var options = ast.options || {};
      var delay = options.delay ? resolveTimingValue(options.delay) : 0;

      if (delay && (context.previousNode.type === 6
      /* Style */
      || startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length)) {
        context.currentTimeline.snapshotCurrentStyles();
        context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
      }

      var furthestTime = startTime;
      var elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
      context.currentQueryTotal = elms.length;
      var sameElementTimeline = null;
      elms.forEach(function (element, i) {
        context.currentQueryIndex = i;
        var innerContext = context.createSubContext(ast.options, element);

        if (delay) {
          innerContext.delayNextStep(delay);
        }

        if (element === context.element) {
          sameElementTimeline = innerContext.currentTimeline;
        }

        visitDslNode(_this8, ast.animation, innerContext); // this is here just incase the inner steps only contain or end
        // with a style() call (which is here to signal that this is a preparatory
        // call to style an element before it is animated again)

        innerContext.currentTimeline.applyStylesToKeyframe();
        var endTime = innerContext.currentTimeline.currentTime;
        furthestTime = Math.max(furthestTime, endTime);
      });
      context.currentQueryIndex = 0;
      context.currentQueryTotal = 0;
      context.transformIntoNewTimeline(furthestTime);

      if (sameElementTimeline) {
        context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
        context.currentTimeline.snapshotCurrentStyles();
      }

      context.previousNode = ast;
    }
  }, {
    key: "visitStagger",
    value: function visitStagger(ast, context) {
      var parentContext = context.parentContext;
      var tl = context.currentTimeline;
      var timings = ast.timings;
      var duration = Math.abs(timings.duration);
      var maxTime = duration * (context.currentQueryTotal - 1);
      var delay = duration * context.currentQueryIndex;
      var staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;

      switch (staggerTransformer) {
        case 'reverse':
          delay = maxTime - delay;
          break;

        case 'full':
          delay = parentContext.currentStaggerTime;
          break;
      }

      var timeline = context.currentTimeline;

      if (delay) {
        timeline.delayNextStep(delay);
      }

      var startingTime = timeline.currentTime;
      visitDslNode(this, ast.animation, context);
      context.previousNode = ast; // time = duration + delay
      // the reason why this computation is so complex is because
      // the inner timeline may either have a delay value or a stretched
      // keyframe depending on if a subtimeline is not used or is used.

      parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
    }
  }]);

  return AnimationTimelineBuilderVisitor;
}();

var DEFAULT_NOOP_PREVIOUS_NODE = {};

var AnimationTimelineContext = /*#__PURE__*/function () {
  function AnimationTimelineContext(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationTimelineContext);

    this._driver = _driver;
    this.element = element;
    this.subInstructions = subInstructions;
    this._enterClassName = _enterClassName;
    this._leaveClassName = _leaveClassName;
    this.errors = errors;
    this.timelines = timelines;
    this.parentContext = null;
    this.currentAnimateTimings = null;
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.subContextCount = 0;
    this.options = {};
    this.currentQueryIndex = 0;
    this.currentQueryTotal = 0;
    this.currentStaggerTime = 0;
    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
    timelines.push(this.currentTimeline);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationTimelineContext, [{
    key: "params",
    get: function get() {
      return this.options.params;
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(options, skipIfExists) {
      var _this9 = this;

      if (!options) return;
      var newOptions = options;
      var optionsToUpdate = this.options; // NOTE: this will get patched up when other animation methods support duration overrides

      if (newOptions.duration != null) {
        optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
      }

      if (newOptions.delay != null) {
        optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
      }

      var newParams = newOptions.params;

      if (newParams) {
        var paramsToUpdate = optionsToUpdate.params;

        if (!paramsToUpdate) {
          paramsToUpdate = this.options.params = {};
        }

        Object.keys(newParams).forEach(function (name) {
          if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
            paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, _this9.errors);
          }
        });
      }
    }
  }, {
    key: "_copyOptions",
    value: function _copyOptions() {
      var options = {};

      if (this.options) {
        var oldParams = this.options.params;

        if (oldParams) {
          var params = options['params'] = {};
          Object.keys(oldParams).forEach(function (name) {
            params[name] = oldParams[name];
          });
        }
      }

      return options;
    }
  }, {
    key: "createSubContext",
    value: function createSubContext() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var element = arguments.length > 1 ? arguments[1] : undefined;
      var newTime = arguments.length > 2 ? arguments[2] : undefined;
      var target = element || this.element;
      var context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
      context.previousNode = this.previousNode;
      context.currentAnimateTimings = this.currentAnimateTimings;
      context.options = this._copyOptions();
      context.updateOptions(options);
      context.currentQueryIndex = this.currentQueryIndex;
      context.currentQueryTotal = this.currentQueryTotal;
      context.parentContext = this;
      this.subContextCount++;
      return context;
    }
  }, {
    key: "transformIntoNewTimeline",
    value: function transformIntoNewTimeline(newTime) {
      this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
      this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
      this.timelines.push(this.currentTimeline);
      return this.currentTimeline;
    }
  }, {
    key: "appendInstructionToTimeline",
    value: function appendInstructionToTimeline(instruction, duration, delay) {
      var updatedTimings = {
        duration: duration != null ? duration : instruction.duration,
        delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
        easing: ''
      };
      var builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
      this.timelines.push(builder);
      return updatedTimings;
    }
  }, {
    key: "incrementTime",
    value: function incrementTime(time) {
      this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
    }
  }, {
    key: "delayNextStep",
    value: function delayNextStep(delay) {
      // negative delays are not yet supported
      if (delay > 0) {
        this.currentTimeline.delayNextStep(delay);
      }
    }
  }, {
    key: "invokeQuery",
    value: function invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
      var results = [];

      if (includeSelf) {
        results.push(this.element);
      }

      if (selector.length > 0) {
        // if :self is only used then the selector is empty
        selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
        selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
        var multi = limit != 1;

        var elements = this._driver.query(this.element, selector, multi);

        if (limit !== 0) {
          elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
        }

        results.push.apply(results, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__.default)(elements));
      }

      if (!optional && results.length == 0) {
        errors.push("`query(\"".concat(originalSelector, "\")` returned zero elements. (Use `query(\"").concat(originalSelector, "\", { optional: true })` if you wish to allow this.)"));
      }

      return results;
    }
  }]);

  return AnimationTimelineContext;
}();

var TimelineBuilder = /*#__PURE__*/function () {
  function TimelineBuilder(_driver, element, startTime, _elementTimelineStylesLookup) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, TimelineBuilder);

    this._driver = _driver;
    this.element = element;
    this.startTime = startTime;
    this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
    this.duration = 0;
    this._previousKeyframe = {};
    this._currentKeyframe = {};
    this._keyframes = new Map();
    this._styleSummary = {};
    this._pendingStyles = {};
    this._backFill = {};
    this._currentEmptyStepKeyframe = null;

    if (!this._elementTimelineStylesLookup) {
      this._elementTimelineStylesLookup = new Map();
    }

    this._localTimelineStyles = Object.create(this._backFill, {});
    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);

    if (!this._globalTimelineStyles) {
      this._globalTimelineStyles = this._localTimelineStyles;

      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
    }

    this._loadKeyframe();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(TimelineBuilder, [{
    key: "containsAnimation",
    value: function containsAnimation() {
      switch (this._keyframes.size) {
        case 0:
          return false;

        case 1:
          return this.getCurrentStyleProperties().length > 0;

        default:
          return true;
      }
    }
  }, {
    key: "getCurrentStyleProperties",
    value: function getCurrentStyleProperties() {
      return Object.keys(this._currentKeyframe);
    }
  }, {
    key: "currentTime",
    get: function get() {
      return this.startTime + this.duration;
    }
  }, {
    key: "delayNextStep",
    value: function delayNextStep(delay) {
      // in the event that a style() step is placed right before a stagger()
      // and that style() step is the very first style() value in the animation
      // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
      // properly applies the style() values to work with the stagger...
      var hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;

      if (this.duration || hasPreStyleStep) {
        this.forwardTime(this.currentTime + delay);

        if (hasPreStyleStep) {
          this.snapshotCurrentStyles();
        }
      } else {
        this.startTime += delay;
      }
    }
  }, {
    key: "fork",
    value: function fork(element, currentTime) {
      this.applyStylesToKeyframe();
      return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
    }
  }, {
    key: "_loadKeyframe",
    value: function _loadKeyframe() {
      if (this._currentKeyframe) {
        this._previousKeyframe = this._currentKeyframe;
      }

      this._currentKeyframe = this._keyframes.get(this.duration);

      if (!this._currentKeyframe) {
        this._currentKeyframe = Object.create(this._backFill, {});

        this._keyframes.set(this.duration, this._currentKeyframe);
      }
    }
  }, {
    key: "forwardFrame",
    value: function forwardFrame() {
      this.duration += ONE_FRAME_IN_MILLISECONDS;

      this._loadKeyframe();
    }
  }, {
    key: "forwardTime",
    value: function forwardTime(time) {
      this.applyStylesToKeyframe();
      this.duration = time;

      this._loadKeyframe();
    }
  }, {
    key: "_updateStyle",
    value: function _updateStyle(prop, value) {
      this._localTimelineStyles[prop] = value;
      this._globalTimelineStyles[prop] = value;
      this._styleSummary[prop] = {
        time: this.currentTime,
        value: value
      };
    }
  }, {
    key: "allowOnlyTimelineStyles",
    value: function allowOnlyTimelineStyles() {
      return this._currentEmptyStepKeyframe !== this._currentKeyframe;
    }
  }, {
    key: "applyEmptyStep",
    value: function applyEmptyStep(easing) {
      var _this10 = this;

      if (easing) {
        this._previousKeyframe['easing'] = easing;
      } // special case for animate(duration):
      // all missing styles are filled with a `*` value then
      // if any destination styles are filled in later on the same
      // keyframe then they will override the overridden styles
      // We use `_globalTimelineStyles` here because there may be
      // styles in previous keyframes that are not present in this timeline


      Object.keys(this._globalTimelineStyles).forEach(function (prop) {
        _this10._backFill[prop] = _this10._globalTimelineStyles[prop] || _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE;
        _this10._currentKeyframe[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE;
      });
      this._currentEmptyStepKeyframe = this._currentKeyframe;
    }
  }, {
    key: "setStyles",
    value: function setStyles(input, easing, errors, options) {
      var _this11 = this;

      if (easing) {
        this._previousKeyframe['easing'] = easing;
      }

      var params = options && options.params || {};
      var styles = flattenStyles(input, this._globalTimelineStyles);
      Object.keys(styles).forEach(function (prop) {
        var val = interpolateParams(styles[prop], params, errors);
        _this11._pendingStyles[prop] = val;

        if (!_this11._localTimelineStyles.hasOwnProperty(prop)) {
          _this11._backFill[prop] = _this11._globalTimelineStyles.hasOwnProperty(prop) ? _this11._globalTimelineStyles[prop] : _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE;
        }

        _this11._updateStyle(prop, val);
      });
    }
  }, {
    key: "applyStylesToKeyframe",
    value: function applyStylesToKeyframe() {
      var _this12 = this;

      var styles = this._pendingStyles;
      var props = Object.keys(styles);
      if (props.length == 0) return;
      this._pendingStyles = {};
      props.forEach(function (prop) {
        var val = styles[prop];
        _this12._currentKeyframe[prop] = val;
      });
      Object.keys(this._localTimelineStyles).forEach(function (prop) {
        if (!_this12._currentKeyframe.hasOwnProperty(prop)) {
          _this12._currentKeyframe[prop] = _this12._localTimelineStyles[prop];
        }
      });
    }
  }, {
    key: "snapshotCurrentStyles",
    value: function snapshotCurrentStyles() {
      var _this13 = this;

      Object.keys(this._localTimelineStyles).forEach(function (prop) {
        var val = _this13._localTimelineStyles[prop];
        _this13._pendingStyles[prop] = val;

        _this13._updateStyle(prop, val);
      });
    }
  }, {
    key: "getFinalKeyframe",
    value: function getFinalKeyframe() {
      return this._keyframes.get(this.duration);
    }
  }, {
    key: "properties",
    get: function get() {
      var properties = [];

      for (var prop in this._currentKeyframe) {
        properties.push(prop);
      }

      return properties;
    }
  }, {
    key: "mergeTimelineCollectedStyles",
    value: function mergeTimelineCollectedStyles(timeline) {
      var _this14 = this;

      Object.keys(timeline._styleSummary).forEach(function (prop) {
        var details0 = _this14._styleSummary[prop];
        var details1 = timeline._styleSummary[prop];

        if (!details0 || details1.time > details0.time) {
          _this14._updateStyle(prop, details1.value);
        }
      });
    }
  }, {
    key: "buildKeyframes",
    value: function buildKeyframes() {
      var _this15 = this;

      this.applyStylesToKeyframe();
      var preStyleProps = new Set();
      var postStyleProps = new Set();
      var isEmpty = this._keyframes.size === 1 && this.duration === 0;
      var finalKeyframes = [];

      this._keyframes.forEach(function (keyframe, time) {
        var finalKeyframe = copyStyles(keyframe, true);
        Object.keys(finalKeyframe).forEach(function (prop) {
          var value = finalKeyframe[prop];

          if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_9__["ɵPRE_STYLE"]) {
            preStyleProps.add(prop);
          } else if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE) {
            postStyleProps.add(prop);
          }
        });

        if (!isEmpty) {
          finalKeyframe['offset'] = time / _this15.duration;
        }

        finalKeyframes.push(finalKeyframe);
      });

      var preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
      var postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : []; // special case for a 0-second animation (which is designed just to place styles onscreen)

      if (isEmpty) {
        var kf0 = finalKeyframes[0];
        var kf1 = copyObj(kf0);
        kf0['offset'] = 0;
        kf1['offset'] = 1;
        finalKeyframes = [kf0, kf1];
      }

      return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
    }
  }]);

  return TimelineBuilder;
}();

var SubTimelineBuilder = /*#__PURE__*/function (_TimelineBuilder) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(SubTimelineBuilder, _TimelineBuilder);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(SubTimelineBuilder);

  function SubTimelineBuilder(driver, element, keyframes, preStyleProps, postStyleProps, timings) {
    var _this16;

    var _stretchStartingKeyframe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, SubTimelineBuilder);

    _this16 = _super.call(this, driver, element, timings.delay);
    _this16.keyframes = keyframes;
    _this16.preStyleProps = preStyleProps;
    _this16.postStyleProps = postStyleProps;
    _this16._stretchStartingKeyframe = _stretchStartingKeyframe;
    _this16.timings = {
      duration: timings.duration,
      delay: timings.delay,
      easing: timings.easing
    };
    return _this16;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(SubTimelineBuilder, [{
    key: "containsAnimation",
    value: function containsAnimation() {
      return this.keyframes.length > 1;
    }
  }, {
    key: "buildKeyframes",
    value: function buildKeyframes() {
      var keyframes = this.keyframes;
      var _this$timings = this.timings,
          delay = _this$timings.delay,
          duration = _this$timings.duration,
          easing = _this$timings.easing;

      if (this._stretchStartingKeyframe && delay) {
        var newKeyframes = [];
        var totalTime = duration + delay;
        var startingGap = delay / totalTime; // the original starting keyframe now starts once the delay is done

        var newFirstKeyframe = copyStyles(keyframes[0], false);
        newFirstKeyframe['offset'] = 0;
        newKeyframes.push(newFirstKeyframe);
        var oldFirstKeyframe = copyStyles(keyframes[0], false);
        oldFirstKeyframe['offset'] = roundOffset(startingGap);
        newKeyframes.push(oldFirstKeyframe);
        /*
          When the keyframe is stretched then it means that the delay before the animation
          starts is gone. Instead the first keyframe is placed at the start of the animation
          and it is then copied to where it starts when the original delay is over. This basically
          means nothing animates during that delay, but the styles are still renderered. For this
          to work the original offset values that exist in the original keyframes must be "warped"
          so that they can take the new keyframe + delay into account.
                 delay=1000, duration=1000, keyframes = 0 .5 1
                 turns into
                 delay=0, duration=2000, keyframes = 0 .33 .66 1
         */
        // offsets between 1 ... n -1 are all warped by the keyframe stretch

        var limit = keyframes.length - 1;

        for (var i = 1; i <= limit; i++) {
          var kf = copyStyles(keyframes[i], false);
          var oldOffset = kf['offset'];
          var timeAtKeyframe = delay + oldOffset * duration;
          kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
          newKeyframes.push(kf);
        } // the new starting keyframe should be added at the start


        duration = totalTime;
        delay = 0;
        easing = '';
        keyframes = newKeyframes;
      }

      return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
    }
  }]);

  return SubTimelineBuilder;
}(TimelineBuilder);

function roundOffset(offset) {
  var decimalPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
  var mult = Math.pow(10, decimalPoints - 1);
  return Math.round(offset * mult) / mult;
}

function flattenStyles(input, allStyles) {
  var styles = {};
  var allProperties;
  input.forEach(function (token) {
    if (token === '*') {
      allProperties = allProperties || Object.keys(allStyles);
      allProperties.forEach(function (prop) {
        styles[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE;
      });
    } else {
      copyStyles(token, false, styles);
    }
  });
  return styles;
}

var Animation = /*#__PURE__*/function () {
  function Animation(_driver, input) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Animation);

    this._driver = _driver;
    var errors = [];
    var ast = buildAnimationAst(_driver, input, errors);

    if (errors.length) {
      var errorMessage = "animation validation failed:\n".concat(errors.join('\n'));
      throw new Error(errorMessage);
    }

    this._animationAst = ast;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(Animation, [{
    key: "buildTimelines",
    value: function buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
      var start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
      var dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
      var errors = [];
      subInstructions = subInstructions || new ElementInstructionMap();
      var result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);

      if (errors.length) {
        var errorMessage = "animation building failed:\n".concat(errors.join('\n'));
        throw new Error(errorMessage);
      }

      return result;
    }
  }]);

  return Animation;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var AnimationStyleNormalizer = function AnimationStyleNormalizer() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationStyleNormalizer);
};
/**
 * @publicApi
 */


var NoopAnimationStyleNormalizer = /*#__PURE__*/function () {
  function NoopAnimationStyleNormalizer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NoopAnimationStyleNormalizer);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(NoopAnimationStyleNormalizer, [{
    key: "normalizePropertyName",
    value: function normalizePropertyName(propertyName, errors) {
      return propertyName;
    }
  }, {
    key: "normalizeStyleValue",
    value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
      return value;
    }
  }]);

  return NoopAnimationStyleNormalizer;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var WebAnimationsStyleNormalizer = /*#__PURE__*/function (_AnimationStyleNormal) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(WebAnimationsStyleNormalizer, _AnimationStyleNormal);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(WebAnimationsStyleNormalizer);

  function WebAnimationsStyleNormalizer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, WebAnimationsStyleNormalizer);

    return _super2.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(WebAnimationsStyleNormalizer, [{
    key: "normalizePropertyName",
    value: function normalizePropertyName(propertyName, errors) {
      return dashCaseToCamelCase(propertyName);
    }
  }, {
    key: "normalizeStyleValue",
    value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
      var unit = '';
      var strVal = value.toString().trim();

      if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
        if (typeof value === 'number') {
          unit = 'px';
        } else {
          var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);

          if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
            errors.push("Please provide a CSS unit value for ".concat(userProvidedProperty, ":").concat(value));
          }
        }
      }

      return strVal + unit;
    }
  }]);

  return WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer);

var ɵ0$1 = function ɵ0$1() {
  return makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(','));
};

var DIMENSIONAL_PROP_MAP = ɵ0$1();

function makeBooleanMap(keys) {
  var map = {};
  keys.forEach(function (key) {
    return map[key] = true;
  });
  return map;
}

function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
  return {
    type: 0
    /* TransitionAnimation */
    ,
    element: element,
    triggerName: triggerName,
    isRemovalTransition: isRemovalTransition,
    fromState: fromState,
    fromStyles: fromStyles,
    toState: toState,
    toStyles: toStyles,
    timelines: timelines,
    queriedElements: queriedElements,
    preStyleProps: preStyleProps,
    postStyleProps: postStyleProps,
    totalTime: totalTime,
    errors: errors
  };
}

var EMPTY_OBJECT = {};

var AnimationTransitionFactory = /*#__PURE__*/function () {
  function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationTransitionFactory);

    this._triggerName = _triggerName;
    this.ast = ast;
    this._stateStyles = _stateStyles;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationTransitionFactory, [{
    key: "match",
    value: function match(currentState, nextState, element, params) {
      return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
    }
  }, {
    key: "buildStyles",
    value: function buildStyles(stateName, params, errors) {
      var backupStateStyler = this._stateStyles['*'];
      var stateStyler = this._stateStyles[stateName];
      var backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
      return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
    }
  }, {
    key: "build",
    value: function build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
      var errors = [];
      var transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
      var currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
      var currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
      var nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
      var nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
      var queriedElements = new Set();
      var preStyleMap = new Map();
      var postStyleMap = new Map();
      var isRemoval = nextState === 'void';
      var animationOptions = {
        params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams)
      };
      var timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
      var totalTime = 0;
      timelines.forEach(function (tl) {
        totalTime = Math.max(tl.duration + tl.delay, totalTime);
      });

      if (errors.length) {
        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
      }

      timelines.forEach(function (tl) {
        var elm = tl.element;
        var preProps = getOrSetAsInMap(preStyleMap, elm, {});
        tl.preStyleProps.forEach(function (prop) {
          return preProps[prop] = true;
        });
        var postProps = getOrSetAsInMap(postStyleMap, elm, {});
        tl.postStyleProps.forEach(function (prop) {
          return postProps[prop] = true;
        });

        if (elm !== element) {
          queriedElements.add(elm);
        }
      });
      var queriedElementsList = iteratorToArray(queriedElements.values());
      return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
    }
  }]);

  return AnimationTransitionFactory;
}();

function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
  return matchFns.some(function (fn) {
    return fn(currentState, nextState, element, params);
  });
}

var AnimationStateStyles = /*#__PURE__*/function () {
  function AnimationStateStyles(styles, defaultParams, normalizer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationStateStyles);

    this.styles = styles;
    this.defaultParams = defaultParams;
    this.normalizer = normalizer;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationStateStyles, [{
    key: "buildStyles",
    value: function buildStyles(params, errors) {
      var _this17 = this;

      var finalStyles = {};
      var combinedParams = copyObj(this.defaultParams);
      Object.keys(params).forEach(function (key) {
        var value = params[key];

        if (value != null) {
          combinedParams[key] = value;
        }
      });
      this.styles.styles.forEach(function (value) {
        if (typeof value !== 'string') {
          var styleObj = value;
          Object.keys(styleObj).forEach(function (prop) {
            var val = styleObj[prop];

            if (val.length > 1) {
              val = interpolateParams(val, combinedParams, errors);
            }

            var normalizedProp = _this17.normalizer.normalizePropertyName(prop, errors);

            val = _this17.normalizer.normalizeStyleValue(prop, normalizedProp, val, errors);
            finalStyles[normalizedProp] = val;
          });
        }
      });
      return finalStyles;
    }
  }]);

  return AnimationStateStyles;
}();

function buildTrigger(name, ast, normalizer) {
  return new AnimationTrigger(name, ast, normalizer);
}

var AnimationTrigger = /*#__PURE__*/function () {
  function AnimationTrigger(name, ast, _normalizer) {
    var _this18 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationTrigger);

    this.name = name;
    this.ast = ast;
    this._normalizer = _normalizer;
    this.transitionFactories = [];
    this.states = {};
    ast.states.forEach(function (ast) {
      var defaultParams = ast.options && ast.options.params || {};
      _this18.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams, _normalizer);
    });
    balanceProperties(this.states, 'true', '1');
    balanceProperties(this.states, 'false', '0');
    ast.transitions.forEach(function (ast) {
      _this18.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this18.states));
    });
    this.fallbackTransition = createFallbackTransition(name, this.states, this._normalizer);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationTrigger, [{
    key: "containsQueries",
    get: function get() {
      return this.ast.queryCount > 0;
    }
  }, {
    key: "matchTransition",
    value: function matchTransition(currentState, nextState, element, params) {
      var entry = this.transitionFactories.find(function (f) {
        return f.match(currentState, nextState, element, params);
      });
      return entry || null;
    }
  }, {
    key: "matchStyles",
    value: function matchStyles(currentState, params, errors) {
      return this.fallbackTransition.buildStyles(currentState, params, errors);
    }
  }]);

  return AnimationTrigger;
}();

function createFallbackTransition(triggerName, states, normalizer) {
  var matchers = [function (fromState, toState) {
    return true;
  }];
  var animation = {
    type: 2
    /* Sequence */
    ,
    steps: [],
    options: null
  };
  var transition = {
    type: 1
    /* Transition */
    ,
    animation: animation,
    matchers: matchers,
    options: null,
    queryCount: 0,
    depCount: 0
  };
  return new AnimationTransitionFactory(triggerName, transition, states);
}

function balanceProperties(obj, key1, key2) {
  if (obj.hasOwnProperty(key1)) {
    if (!obj.hasOwnProperty(key2)) {
      obj[key2] = obj[key1];
    }
  } else if (obj.hasOwnProperty(key2)) {
    obj[key1] = obj[key2];
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();

var TimelineAnimationEngine = /*#__PURE__*/function () {
  function TimelineAnimationEngine(bodyNode, _driver, _normalizer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, TimelineAnimationEngine);

    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._animations = {};
    this._playersById = {};
    this.players = [];
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(TimelineAnimationEngine, [{
    key: "register",
    value: function register(id, metadata) {
      var errors = [];
      var ast = buildAnimationAst(this._driver, metadata, errors);

      if (errors.length) {
        throw new Error("Unable to build the animation due to the following errors: ".concat(errors.join('\n')));
      } else {
        this._animations[id] = ast;
      }
    }
  }, {
    key: "_buildPlayer",
    value: function _buildPlayer(i, preStyles, postStyles) {
      var element = i.element;
      var keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
      return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
    }
  }, {
    key: "create",
    value: function create(id, element) {
      var _this19 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var errors = [];
      var ast = this._animations[id];
      var instructions;
      var autoStylesMap = new Map();

      if (ast) {
        instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
        instructions.forEach(function (inst) {
          var styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
          inst.postStyleProps.forEach(function (prop) {
            return styles[prop] = null;
          });
        });
      } else {
        errors.push('The requested animation doesn\'t exist or has already been destroyed');
        instructions = [];
      }

      if (errors.length) {
        throw new Error("Unable to create the animation due to the following errors: ".concat(errors.join('\n')));
      }

      autoStylesMap.forEach(function (styles, element) {
        Object.keys(styles).forEach(function (prop) {
          styles[prop] = _this19._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE);
        });
      });
      var players = instructions.map(function (i) {
        var styles = autoStylesMap.get(i.element);
        return _this19._buildPlayer(i, {}, styles);
      });
      var player = optimizeGroupPlayer(players);
      this._playersById[id] = player;
      player.onDestroy(function () {
        return _this19.destroy(id);
      });
      this.players.push(player);
      return player;
    }
  }, {
    key: "destroy",
    value: function destroy(id) {
      var player = this._getPlayer(id);

      player.destroy();
      delete this._playersById[id];
      var index = this.players.indexOf(player);

      if (index >= 0) {
        this.players.splice(index, 1);
      }
    }
  }, {
    key: "_getPlayer",
    value: function _getPlayer(id) {
      var player = this._playersById[id];

      if (!player) {
        throw new Error("Unable to find the timeline player referenced by ".concat(id));
      }

      return player;
    }
  }, {
    key: "listen",
    value: function listen(id, element, eventName, callback) {
      // triggerName, fromState, toState are all ignored for timeline animations
      var baseEvent = makeAnimationEvent(element, '', '', '');
      listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
      return function () {};
    }
  }, {
    key: "command",
    value: function command(id, element, _command, args) {
      if (_command == 'register') {
        this.register(id, args[0]);
        return;
      }

      if (_command == 'create') {
        var options = args[0] || {};
        this.create(id, element, options);
        return;
      }

      var player = this._getPlayer(id);

      switch (_command) {
        case 'play':
          player.play();
          break;

        case 'pause':
          player.pause();
          break;

        case 'reset':
          player.reset();
          break;

        case 'restart':
          player.restart();
          break;

        case 'finish':
          player.finish();
          break;

        case 'init':
          player.init();
          break;

        case 'setPosition':
          player.setPosition(parseFloat(args[0]));
          break;

        case 'destroy':
          this.destroy(id);
          break;
      }
    }
  }]);

  return TimelineAnimationEngine;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var QUEUED_CLASSNAME = 'ng-animate-queued';
var QUEUED_SELECTOR = '.ng-animate-queued';
var DISABLED_CLASSNAME = 'ng-animate-disabled';
var DISABLED_SELECTOR = '.ng-animate-disabled';
var STAR_CLASSNAME = 'ng-star-inserted';
var STAR_SELECTOR = '.ng-star-inserted';
var EMPTY_PLAYER_ARRAY = [];
var NULL_REMOVAL_STATE = {
  namespaceId: '',
  setForRemoval: false,
  setForMove: false,
  hasAnimation: false,
  removedBeforeQueried: false
};
var NULL_REMOVED_QUERIED_STATE = {
  namespaceId: '',
  setForMove: false,
  setForRemoval: false,
  hasAnimation: false,
  removedBeforeQueried: true
};
var REMOVAL_FLAG = '__ng_removed';

var StateValue = /*#__PURE__*/function () {
  function StateValue(input) {
    var namespaceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, StateValue);

    this.namespaceId = namespaceId;
    var isObj = input && input.hasOwnProperty('value');
    var value = isObj ? input['value'] : input;
    this.value = normalizeTriggerValue(value);

    if (isObj) {
      var options = copyObj(input);
      delete options['value'];
      this.options = options;
    } else {
      this.options = {};
    }

    if (!this.options.params) {
      this.options.params = {};
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(StateValue, [{
    key: "params",
    get: function get() {
      return this.options.params;
    }
  }, {
    key: "absorbOptions",
    value: function absorbOptions(options) {
      var newParams = options.params;

      if (newParams) {
        var oldParams = this.options.params;
        Object.keys(newParams).forEach(function (prop) {
          if (oldParams[prop] == null) {
            oldParams[prop] = newParams[prop];
          }
        });
      }
    }
  }]);

  return StateValue;
}();

var VOID_VALUE = 'void';
var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);

var AnimationTransitionNamespace = /*#__PURE__*/function () {
  function AnimationTransitionNamespace(id, hostElement, _engine) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationTransitionNamespace);

    this.id = id;
    this.hostElement = hostElement;
    this._engine = _engine;
    this.players = [];
    this._triggers = {};
    this._queue = [];
    this._elementListeners = new Map();
    this._hostClassName = 'ng-tns-' + id;
    addClass(hostElement, this._hostClassName);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationTransitionNamespace, [{
    key: "listen",
    value: function listen(element, name, phase, callback) {
      var _this20 = this;

      if (!this._triggers.hasOwnProperty(name)) {
        throw new Error("Unable to listen on the animation trigger event \"".concat(phase, "\" because the animation trigger \"").concat(name, "\" doesn't exist!"));
      }

      if (phase == null || phase.length == 0) {
        throw new Error("Unable to listen on the animation trigger \"".concat(name, "\" because the provided event is undefined!"));
      }

      if (!isTriggerEventValid(phase)) {
        throw new Error("The provided animation trigger event \"".concat(phase, "\" for the animation trigger \"").concat(name, "\" is not supported!"));
      }

      var listeners = getOrSetAsInMap(this._elementListeners, element, []);
      var data = {
        name: name,
        phase: phase,
        callback: callback
      };
      listeners.push(data);
      var triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});

      if (!triggersWithStates.hasOwnProperty(name)) {
        addClass(element, NG_TRIGGER_CLASSNAME);
        addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
        triggersWithStates[name] = DEFAULT_STATE_VALUE;
      }

      return function () {
        // the event listener is removed AFTER the flush has occurred such
        // that leave animations callbacks can fire (otherwise if the node
        // is removed in between then the listeners would be deregistered)
        _this20._engine.afterFlush(function () {
          var index = listeners.indexOf(data);

          if (index >= 0) {
            listeners.splice(index, 1);
          }

          if (!_this20._triggers[name]) {
            delete triggersWithStates[name];
          }
        });
      };
    }
  }, {
    key: "register",
    value: function register(name, ast) {
      if (this._triggers[name]) {
        // throw
        return false;
      } else {
        this._triggers[name] = ast;
        return true;
      }
    }
  }, {
    key: "_getTrigger",
    value: function _getTrigger(name) {
      var trigger = this._triggers[name];

      if (!trigger) {
        throw new Error("The provided animation trigger \"".concat(name, "\" has not been registered!"));
      }

      return trigger;
    }
  }, {
    key: "trigger",
    value: function trigger(element, triggerName, value) {
      var _this21 = this;

      var defaultToFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      var trigger = this._getTrigger(triggerName);

      var player = new TransitionAnimationPlayer(this.id, triggerName, element);

      var triggersWithStates = this._engine.statesByElement.get(element);

      if (!triggersWithStates) {
        addClass(element, NG_TRIGGER_CLASSNAME);
        addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);

        this._engine.statesByElement.set(element, triggersWithStates = {});
      }

      var fromState = triggersWithStates[triggerName];
      var toState = new StateValue(value, this.id);
      var isObj = value && value.hasOwnProperty('value');

      if (!isObj && fromState) {
        toState.absorbOptions(fromState.options);
      }

      triggersWithStates[triggerName] = toState;

      if (!fromState) {
        fromState = DEFAULT_STATE_VALUE;
      }

      var isRemoval = toState.value === VOID_VALUE; // normally this isn't reached by here, however, if an object expression
      // is passed in then it may be a new object each time. Comparing the value
      // is important since that will stay the same despite there being a new object.
      // The removal arc here is special cased because the same element is triggered
      // twice in the event that it contains animations on the outer/inner portions
      // of the host container

      if (!isRemoval && fromState.value === toState.value) {
        // this means that despite the value not changing, some inner params
        // have changed which means that the animation final styles need to be applied
        if (!objEquals(fromState.params, toState.params)) {
          var errors = [];
          var fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
          var toStyles = trigger.matchStyles(toState.value, toState.params, errors);

          if (errors.length) {
            this._engine.reportError(errors);
          } else {
            this._engine.afterFlush(function () {
              eraseStyles(element, fromStyles);
              setStyles(element, toStyles);
            });
          }
        }

        return;
      }

      var playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
      playersOnElement.forEach(function (player) {
        // only remove the player if it is queued on the EXACT same trigger/namespace
        // we only also deal with queued players here because if the animation has
        // started then we want to keep the player alive until the flush happens
        // (which is where the previousPlayers are passed into the new palyer)
        if (player.namespaceId == _this21.id && player.triggerName == triggerName && player.queued) {
          player.destroy();
        }
      });
      var transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
      var isFallbackTransition = false;

      if (!transition) {
        if (!defaultToFallback) return;
        transition = trigger.fallbackTransition;
        isFallbackTransition = true;
      }

      this._engine.totalQueuedPlayers++;

      this._queue.push({
        element: element,
        triggerName: triggerName,
        transition: transition,
        fromState: fromState,
        toState: toState,
        player: player,
        isFallbackTransition: isFallbackTransition
      });

      if (!isFallbackTransition) {
        addClass(element, QUEUED_CLASSNAME);
        player.onStart(function () {
          removeClass(element, QUEUED_CLASSNAME);
        });
      }

      player.onDone(function () {
        var index = _this21.players.indexOf(player);

        if (index >= 0) {
          _this21.players.splice(index, 1);
        }

        var players = _this21._engine.playersByElement.get(element);

        if (players) {
          var _index = players.indexOf(player);

          if (_index >= 0) {
            players.splice(_index, 1);
          }
        }
      });
      this.players.push(player);
      playersOnElement.push(player);
      return player;
    }
  }, {
    key: "deregister",
    value: function deregister(name) {
      var _this22 = this;

      delete this._triggers[name];

      this._engine.statesByElement.forEach(function (stateMap, element) {
        delete stateMap[name];
      });

      this._elementListeners.forEach(function (listeners, element) {
        _this22._elementListeners.set(element, listeners.filter(function (entry) {
          return entry.name != name;
        }));
      });
    }
  }, {
    key: "clearElementCache",
    value: function clearElementCache(element) {
      this._engine.statesByElement.delete(element);

      this._elementListeners.delete(element);

      var elementPlayers = this._engine.playersByElement.get(element);

      if (elementPlayers) {
        elementPlayers.forEach(function (player) {
          return player.destroy();
        });

        this._engine.playersByElement.delete(element);
      }
    }
  }, {
    key: "_signalRemovalForInnerTriggers",
    value: function _signalRemovalForInnerTriggers(rootElement, context) {
      var _this23 = this;

      var elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true); // emulate a leave animation for all inner nodes within this node.
      // If there are no animations found for any of the nodes then clear the cache
      // for the element.


      elements.forEach(function (elm) {
        // this means that an inner remove() operation has already kicked off
        // the animation on this element...
        if (elm[REMOVAL_FLAG]) return;

        var namespaces = _this23._engine.fetchNamespacesByElement(elm);

        if (namespaces.size) {
          namespaces.forEach(function (ns) {
            return ns.triggerLeaveAnimation(elm, context, false, true);
          });
        } else {
          _this23.clearElementCache(elm);
        }
      }); // If the child elements were removed along with the parent, their animations might not
      // have completed. Clear all the elements from the cache so we don't end up with a memory leak.

      this._engine.afterFlushAnimationsDone(function () {
        return elements.forEach(function (elm) {
          return _this23.clearElementCache(elm);
        });
      });
    }
  }, {
    key: "triggerLeaveAnimation",
    value: function triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
      var _this24 = this;

      var triggerStates = this._engine.statesByElement.get(element);

      if (triggerStates) {
        var players = [];
        Object.keys(triggerStates).forEach(function (triggerName) {
          // this check is here in the event that an element is removed
          // twice (both on the host level and the component level)
          if (_this24._triggers[triggerName]) {
            var player = _this24.trigger(element, triggerName, VOID_VALUE, defaultToFallback);

            if (player) {
              players.push(player);
            }
          }
        });

        if (players.length) {
          this._engine.markElementAsRemoved(this.id, element, true, context);

          if (destroyAfterComplete) {
            optimizeGroupPlayer(players).onDone(function () {
              return _this24._engine.processLeaveNode(element);
            });
          }

          return true;
        }
      }

      return false;
    }
  }, {
    key: "prepareLeaveAnimationListeners",
    value: function prepareLeaveAnimationListeners(element) {
      var _this25 = this;

      var listeners = this._elementListeners.get(element);

      var elementStates = this._engine.statesByElement.get(element); // if this statement fails then it means that the element was picked up
      // by an earlier flush (or there are no listeners at all to track the leave).


      if (listeners && elementStates) {
        var visitedTriggers = new Set();
        listeners.forEach(function (listener) {
          var triggerName = listener.name;
          if (visitedTriggers.has(triggerName)) return;
          visitedTriggers.add(triggerName);
          var trigger = _this25._triggers[triggerName];
          var transition = trigger.fallbackTransition;
          var fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
          var toState = new StateValue(VOID_VALUE);
          var player = new TransitionAnimationPlayer(_this25.id, triggerName, element);
          _this25._engine.totalQueuedPlayers++;

          _this25._queue.push({
            element: element,
            triggerName: triggerName,
            transition: transition,
            fromState: fromState,
            toState: toState,
            player: player,
            isFallbackTransition: true
          });
        });
      }
    }
  }, {
    key: "removeNode",
    value: function removeNode(element, context) {
      var _this26 = this;

      var engine = this._engine;

      if (element.childElementCount) {
        this._signalRemovalForInnerTriggers(element, context);
      } // this means that a * => VOID animation was detected and kicked off


      if (this.triggerLeaveAnimation(element, context, true)) return; // find the player that is animating and make sure that the
      // removal is delayed until that player has completed

      var containsPotentialParentTransition = false;

      if (engine.totalAnimations) {
        var currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : []; // when this `if statement` does not continue forward it means that
        // a previous animation query has selected the current element and
        // is animating it. In this situation want to continue forwards and
        // allow the element to be queued up for animation later.

        if (currentPlayers && currentPlayers.length) {
          containsPotentialParentTransition = true;
        } else {
          var parent = element;

          while (parent = parent.parentNode) {
            var triggers = engine.statesByElement.get(parent);

            if (triggers) {
              containsPotentialParentTransition = true;
              break;
            }
          }
        }
      } // at this stage we know that the element will either get removed
      // during flush or will be picked up by a parent query. Either way
      // we need to fire the listeners for this element when it DOES get
      // removed (once the query parent animation is done or after flush)


      this.prepareLeaveAnimationListeners(element); // whether or not a parent has an animation we need to delay the deferral of the leave
      // operation until we have more information (which we do after flush() has been called)

      if (containsPotentialParentTransition) {
        engine.markElementAsRemoved(this.id, element, false, context);
      } else {
        var removalFlag = element[REMOVAL_FLAG];

        if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
          // we do this after the flush has occurred such
          // that the callbacks can be fired
          engine.afterFlush(function () {
            return _this26.clearElementCache(element);
          });
          engine.destroyInnerAnimations(element);

          engine._onRemovalComplete(element, context);
        }
      }
    }
  }, {
    key: "insertNode",
    value: function insertNode(element, parent) {
      addClass(element, this._hostClassName);
    }
  }, {
    key: "drainQueuedTransitions",
    value: function drainQueuedTransitions(microtaskId) {
      var _this27 = this;

      var instructions = [];

      this._queue.forEach(function (entry) {
        var player = entry.player;
        if (player.destroyed) return;
        var element = entry.element;

        var listeners = _this27._elementListeners.get(element);

        if (listeners) {
          listeners.forEach(function (listener) {
            if (listener.name == entry.triggerName) {
              var baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
              baseEvent['_data'] = microtaskId;
              listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
            }
          });
        }

        if (player.markedForDestroy) {
          _this27._engine.afterFlush(function () {
            // now we can destroy the element properly since the event listeners have
            // been bound to the player
            player.destroy();
          });
        } else {
          instructions.push(entry);
        }
      });

      this._queue = [];
      return instructions.sort(function (a, b) {
        // if depCount == 0 them move to front
        // otherwise if a contains b then move back
        var d0 = a.transition.ast.depCount;
        var d1 = b.transition.ast.depCount;

        if (d0 == 0 || d1 == 0) {
          return d0 - d1;
        }

        return _this27._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
      });
    }
  }, {
    key: "destroy",
    value: function destroy(context) {
      this.players.forEach(function (p) {
        return p.destroy();
      });

      this._signalRemovalForInnerTriggers(this.hostElement, context);
    }
  }, {
    key: "elementContainsData",
    value: function elementContainsData(element) {
      var containsData = false;
      if (this._elementListeners.has(element)) containsData = true;
      containsData = (this._queue.find(function (entry) {
        return entry.element === element;
      }) ? true : false) || containsData;
      return containsData;
    }
  }]);

  return AnimationTransitionNamespace;
}();

var TransitionAnimationEngine = /*#__PURE__*/function () {
  function TransitionAnimationEngine(bodyNode, driver, _normalizer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, TransitionAnimationEngine);

    this.bodyNode = bodyNode;
    this.driver = driver;
    this._normalizer = _normalizer;
    this.players = [];
    this.newHostElements = new Map();
    this.playersByElement = new Map();
    this.playersByQueriedElement = new Map();
    this.statesByElement = new Map();
    this.disabledNodes = new Set();
    this.totalAnimations = 0;
    this.totalQueuedPlayers = 0;
    this._namespaceLookup = {};
    this._namespaceList = [];
    this._flushFns = [];
    this._whenQuietFns = [];
    this.namespacesByHostElement = new Map();
    this.collectedEnterElements = [];
    this.collectedLeaveElements = []; // this method is designed to be overridden by the code that uses this engine

    this.onRemovalComplete = function (element, context) {};
  }
  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(TransitionAnimationEngine, [{
    key: "_onRemovalComplete",
    value: function _onRemovalComplete(element, context) {
      this.onRemovalComplete(element, context);
    }
  }, {
    key: "queuedPlayers",
    get: function get() {
      var players = [];

      this._namespaceList.forEach(function (ns) {
        ns.players.forEach(function (player) {
          if (player.queued) {
            players.push(player);
          }
        });
      });

      return players;
    }
  }, {
    key: "createNamespace",
    value: function createNamespace(namespaceId, hostElement) {
      var ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);

      if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
        this._balanceNamespaceList(ns, hostElement);
      } else {
        // defer this later until flush during when the host element has
        // been inserted so that we know exactly where to place it in
        // the namespace list
        this.newHostElements.set(hostElement, ns); // given that this host element is apart of the animation code, it
        // may or may not be inserted by a parent node that is of an
        // animation renderer type. If this happens then we can still have
        // access to this item when we query for :enter nodes. If the parent
        // is a renderer then the set data-structure will normalize the entry

        this.collectEnterElement(hostElement);
      }

      return this._namespaceLookup[namespaceId] = ns;
    }
  }, {
    key: "_balanceNamespaceList",
    value: function _balanceNamespaceList(ns, hostElement) {
      var limit = this._namespaceList.length - 1;

      if (limit >= 0) {
        var found = false;

        for (var i = limit; i >= 0; i--) {
          var nextNamespace = this._namespaceList[i];

          if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
            this._namespaceList.splice(i + 1, 0, ns);

            found = true;
            break;
          }
        }

        if (!found) {
          this._namespaceList.splice(0, 0, ns);
        }
      } else {
        this._namespaceList.push(ns);
      }

      this.namespacesByHostElement.set(hostElement, ns);
      return ns;
    }
  }, {
    key: "register",
    value: function register(namespaceId, hostElement) {
      var ns = this._namespaceLookup[namespaceId];

      if (!ns) {
        ns = this.createNamespace(namespaceId, hostElement);
      }

      return ns;
    }
  }, {
    key: "registerTrigger",
    value: function registerTrigger(namespaceId, name, trigger) {
      var ns = this._namespaceLookup[namespaceId];

      if (ns && ns.register(name, trigger)) {
        this.totalAnimations++;
      }
    }
  }, {
    key: "destroy",
    value: function destroy(namespaceId, context) {
      var _this28 = this;

      if (!namespaceId) return;

      var ns = this._fetchNamespace(namespaceId);

      this.afterFlush(function () {
        _this28.namespacesByHostElement.delete(ns.hostElement);

        delete _this28._namespaceLookup[namespaceId];

        var index = _this28._namespaceList.indexOf(ns);

        if (index >= 0) {
          _this28._namespaceList.splice(index, 1);
        }
      });
      this.afterFlushAnimationsDone(function () {
        return ns.destroy(context);
      });
    }
  }, {
    key: "_fetchNamespace",
    value: function _fetchNamespace(id) {
      return this._namespaceLookup[id];
    }
  }, {
    key: "fetchNamespacesByElement",
    value: function fetchNamespacesByElement(element) {
      // normally there should only be one namespace per element, however
      // if @triggers are placed on both the component element and then
      // its host element (within the component code) then there will be
      // two namespaces returned. We use a set here to simply the dedupe
      // of namespaces incase there are multiple triggers both the elm and host
      var namespaces = new Set();
      var elementStates = this.statesByElement.get(element);

      if (elementStates) {
        var keys = Object.keys(elementStates);

        for (var i = 0; i < keys.length; i++) {
          var nsId = elementStates[keys[i]].namespaceId;

          if (nsId) {
            var ns = this._fetchNamespace(nsId);

            if (ns) {
              namespaces.add(ns);
            }
          }
        }
      }

      return namespaces;
    }
  }, {
    key: "trigger",
    value: function trigger(namespaceId, element, name, value) {
      if (isElementNode(element)) {
        var ns = this._fetchNamespace(namespaceId);

        if (ns) {
          ns.trigger(element, name, value);
          return true;
        }
      }

      return false;
    }
  }, {
    key: "insertNode",
    value: function insertNode(namespaceId, element, parent, insertBefore) {
      if (!isElementNode(element)) return; // special case for when an element is removed and reinserted (move operation)
      // when this occurs we do not want to use the element for deletion later

      var details = element[REMOVAL_FLAG];

      if (details && details.setForRemoval) {
        details.setForRemoval = false;
        details.setForMove = true;
        var index = this.collectedLeaveElements.indexOf(element);

        if (index >= 0) {
          this.collectedLeaveElements.splice(index, 1);
        }
      } // in the event that the namespaceId is blank then the caller
      // code does not contain any animation code in it, but it is
      // just being called so that the node is marked as being inserted


      if (namespaceId) {
        var ns = this._fetchNamespace(namespaceId); // This if-statement is a workaround for router issue #21947.
        // The router sometimes hits a race condition where while a route
        // is being instantiated a new navigation arrives, triggering leave
        // animation of DOM that has not been fully initialized, until this
        // is resolved, we need to handle the scenario when DOM is not in a
        // consistent state during the animation.


        if (ns) {
          ns.insertNode(element, parent);
        }
      } // only *directives and host elements are inserted before


      if (insertBefore) {
        this.collectEnterElement(element);
      }
    }
  }, {
    key: "collectEnterElement",
    value: function collectEnterElement(element) {
      this.collectedEnterElements.push(element);
    }
  }, {
    key: "markElementAsDisabled",
    value: function markElementAsDisabled(element, value) {
      if (value) {
        if (!this.disabledNodes.has(element)) {
          this.disabledNodes.add(element);
          addClass(element, DISABLED_CLASSNAME);
        }
      } else if (this.disabledNodes.has(element)) {
        this.disabledNodes.delete(element);
        removeClass(element, DISABLED_CLASSNAME);
      }
    }
  }, {
    key: "removeNode",
    value: function removeNode(namespaceId, element, isHostElement, context) {
      if (isElementNode(element)) {
        var ns = namespaceId ? this._fetchNamespace(namespaceId) : null;

        if (ns) {
          ns.removeNode(element, context);
        } else {
          this.markElementAsRemoved(namespaceId, element, false, context);
        }

        if (isHostElement) {
          var hostNS = this.namespacesByHostElement.get(element);

          if (hostNS && hostNS.id !== namespaceId) {
            hostNS.removeNode(element, context);
          }
        }
      } else {
        this._onRemovalComplete(element, context);
      }
    }
  }, {
    key: "markElementAsRemoved",
    value: function markElementAsRemoved(namespaceId, element, hasAnimation, context) {
      this.collectedLeaveElements.push(element);
      element[REMOVAL_FLAG] = {
        namespaceId: namespaceId,
        setForRemoval: context,
        hasAnimation: hasAnimation,
        removedBeforeQueried: false
      };
    }
  }, {
    key: "listen",
    value: function listen(namespaceId, element, name, phase, callback) {
      if (isElementNode(element)) {
        return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
      }

      return function () {};
    }
  }, {
    key: "_buildInstruction",
    value: function _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
      return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
    }
  }, {
    key: "destroyInnerAnimations",
    value: function destroyInnerAnimations(containerElement) {
      var _this29 = this;

      var elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
      elements.forEach(function (element) {
        return _this29.destroyActiveAnimationsForElement(element);
      });
      if (this.playersByQueriedElement.size == 0) return;
      elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
      elements.forEach(function (element) {
        return _this29.finishActiveQueriedAnimationOnElement(element);
      });
    }
  }, {
    key: "destroyActiveAnimationsForElement",
    value: function destroyActiveAnimationsForElement(element) {
      var players = this.playersByElement.get(element);

      if (players) {
        players.forEach(function (player) {
          // special case for when an element is set for destruction, but hasn't started.
          // in this situation we want to delay the destruction until the flush occurs
          // so that any event listeners attached to the player are triggered.
          if (player.queued) {
            player.markedForDestroy = true;
          } else {
            player.destroy();
          }
        });
      }
    }
  }, {
    key: "finishActiveQueriedAnimationOnElement",
    value: function finishActiveQueriedAnimationOnElement(element) {
      var players = this.playersByQueriedElement.get(element);

      if (players) {
        players.forEach(function (player) {
          return player.finish();
        });
      }
    }
  }, {
    key: "whenRenderingDone",
    value: function whenRenderingDone() {
      var _this30 = this;

      return new Promise(function (resolve) {
        if (_this30.players.length) {
          return optimizeGroupPlayer(_this30.players).onDone(function () {
            return resolve();
          });
        } else {
          resolve();
        }
      });
    }
  }, {
    key: "processLeaveNode",
    value: function processLeaveNode(element) {
      var _this31 = this;

      var details = element[REMOVAL_FLAG];

      if (details && details.setForRemoval) {
        // this will prevent it from removing it twice
        element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;

        if (details.namespaceId) {
          this.destroyInnerAnimations(element);

          var ns = this._fetchNamespace(details.namespaceId);

          if (ns) {
            ns.clearElementCache(element);
          }
        }

        this._onRemovalComplete(element, details.setForRemoval);
      }

      if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
        this.markElementAsDisabled(element, false);
      }

      this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
        _this31.markElementAsDisabled(node, false);
      });
    }
  }, {
    key: "flush",
    value: function flush() {
      var _this32 = this;

      var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      var players = [];

      if (this.newHostElements.size) {
        this.newHostElements.forEach(function (ns, element) {
          return _this32._balanceNamespaceList(ns, element);
        });
        this.newHostElements.clear();
      }

      if (this.totalAnimations && this.collectedEnterElements.length) {
        for (var i = 0; i < this.collectedEnterElements.length; i++) {
          var elm = this.collectedEnterElements[i];
          addClass(elm, STAR_CLASSNAME);
        }
      }

      if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
        var cleanupFns = [];

        try {
          players = this._flushAnimations(cleanupFns, microtaskId);
        } finally {
          for (var _i = 0; _i < cleanupFns.length; _i++) {
            cleanupFns[_i]();
          }
        }
      } else {
        for (var _i2 = 0; _i2 < this.collectedLeaveElements.length; _i2++) {
          var element = this.collectedLeaveElements[_i2];
          this.processLeaveNode(element);
        }
      }

      this.totalQueuedPlayers = 0;
      this.collectedEnterElements.length = 0;
      this.collectedLeaveElements.length = 0;

      this._flushFns.forEach(function (fn) {
        return fn();
      });

      this._flushFns = [];

      if (this._whenQuietFns.length) {
        // we move these over to a variable so that
        // if any new callbacks are registered in another
        // flush they do not populate the existing set
        var quietFns = this._whenQuietFns;
        this._whenQuietFns = [];

        if (players.length) {
          optimizeGroupPlayer(players).onDone(function () {
            quietFns.forEach(function (fn) {
              return fn();
            });
          });
        } else {
          quietFns.forEach(function (fn) {
            return fn();
          });
        }
      }
    }
  }, {
    key: "reportError",
    value: function reportError(errors) {
      throw new Error("Unable to process animations due to the following failed trigger transitions\n ".concat(errors.join('\n')));
    }
  }, {
    key: "_flushAnimations",
    value: function _flushAnimations(cleanupFns, microtaskId) {
      var _this33 = this;

      var subTimelines = new ElementInstructionMap();
      var skippedPlayers = [];
      var skippedPlayersMap = new Map();
      var queuedInstructions = [];
      var queriedElements = new Map();
      var allPreStyleElements = new Map();
      var allPostStyleElements = new Map();
      var disabledElementsSet = new Set();
      this.disabledNodes.forEach(function (node) {
        disabledElementsSet.add(node);

        var nodesThatAreDisabled = _this33.driver.query(node, QUEUED_SELECTOR, true);

        for (var _i3 = 0; _i3 < nodesThatAreDisabled.length; _i3++) {
          disabledElementsSet.add(nodesThatAreDisabled[_i3]);
        }
      });
      var bodyNode = this.bodyNode;
      var allTriggerElements = Array.from(this.statesByElement.keys());
      var enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements); // this must occur before the instructions are built below such that
      // the :enter queries match the elements (since the timeline queries
      // are fired during instruction building).

      var enterNodeMapIds = new Map();
      var i = 0;
      enterNodeMap.forEach(function (nodes, root) {
        var className = ENTER_CLASSNAME + i++;
        enterNodeMapIds.set(root, className);
        nodes.forEach(function (node) {
          return addClass(node, className);
        });
      });
      var allLeaveNodes = [];
      var mergedLeaveNodes = new Set();
      var leaveNodesWithoutAnimations = new Set();

      for (var _i4 = 0; _i4 < this.collectedLeaveElements.length; _i4++) {
        var element = this.collectedLeaveElements[_i4];
        var details = element[REMOVAL_FLAG];

        if (details && details.setForRemoval) {
          allLeaveNodes.push(element);
          mergedLeaveNodes.add(element);

          if (details.hasAnimation) {
            this.driver.query(element, STAR_SELECTOR, true).forEach(function (elm) {
              return mergedLeaveNodes.add(elm);
            });
          } else {
            leaveNodesWithoutAnimations.add(element);
          }
        }
      }

      var leaveNodeMapIds = new Map();
      var leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
      leaveNodeMap.forEach(function (nodes, root) {
        var className = LEAVE_CLASSNAME + i++;
        leaveNodeMapIds.set(root, className);
        nodes.forEach(function (node) {
          return addClass(node, className);
        });
      });
      cleanupFns.push(function () {
        enterNodeMap.forEach(function (nodes, root) {
          var className = enterNodeMapIds.get(root);
          nodes.forEach(function (node) {
            return removeClass(node, className);
          });
        });
        leaveNodeMap.forEach(function (nodes, root) {
          var className = leaveNodeMapIds.get(root);
          nodes.forEach(function (node) {
            return removeClass(node, className);
          });
        });
        allLeaveNodes.forEach(function (element) {
          _this33.processLeaveNode(element);
        });
      });
      var allPlayers = [];
      var erroneousTransitions = [];

      for (var _i5 = this._namespaceList.length - 1; _i5 >= 0; _i5--) {
        var ns = this._namespaceList[_i5];
        ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
          var player = entry.player;
          var element = entry.element;
          allPlayers.push(player);

          if (_this33.collectedEnterElements.length) {
            var _details = element[REMOVAL_FLAG]; // move animations are currently not supported...

            if (_details && _details.setForMove) {
              player.destroy();
              return;
            }
          }

          var nodeIsOrphaned = !bodyNode || !_this33.driver.containsElement(bodyNode, element);
          var leaveClassName = leaveNodeMapIds.get(element);
          var enterClassName = enterNodeMapIds.get(element);

          var instruction = _this33._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);

          if (instruction.errors && instruction.errors.length) {
            erroneousTransitions.push(instruction);
            return;
          } // even though the element may not be apart of the DOM, it may
          // still be added at a later point (due to the mechanics of content
          // projection and/or dynamic component insertion) therefore it's
          // important we still style the element.


          if (nodeIsOrphaned) {
            player.onStart(function () {
              return eraseStyles(element, instruction.fromStyles);
            });
            player.onDestroy(function () {
              return setStyles(element, instruction.toStyles);
            });
            skippedPlayers.push(player);
            return;
          } // if a unmatched transition is queued to go then it SHOULD NOT render
          // an animation and cancel the previously running animations.


          if (entry.isFallbackTransition) {
            player.onStart(function () {
              return eraseStyles(element, instruction.fromStyles);
            });
            player.onDestroy(function () {
              return setStyles(element, instruction.toStyles);
            });
            skippedPlayers.push(player);
            return;
          } // this means that if a parent animation uses this animation as a sub trigger
          // then it will instruct the timeline builder to not add a player delay, but
          // instead stretch the first keyframe gap up until the animation starts. The
          // reason this is important is to prevent extra initialization styles from being
          // required by the user in the animation.


          instruction.timelines.forEach(function (tl) {
            return tl.stretchStartingKeyframe = true;
          });
          subTimelines.append(element, instruction.timelines);
          var tuple = {
            instruction: instruction,
            player: player,
            element: element
          };
          queuedInstructions.push(tuple);
          instruction.queriedElements.forEach(function (element) {
            return getOrSetAsInMap(queriedElements, element, []).push(player);
          });
          instruction.preStyleProps.forEach(function (stringMap, element) {
            var props = Object.keys(stringMap);

            if (props.length) {
              var setVal = allPreStyleElements.get(element);

              if (!setVal) {
                allPreStyleElements.set(element, setVal = new Set());
              }

              props.forEach(function (prop) {
                return setVal.add(prop);
              });
            }
          });
          instruction.postStyleProps.forEach(function (stringMap, element) {
            var props = Object.keys(stringMap);
            var setVal = allPostStyleElements.get(element);

            if (!setVal) {
              allPostStyleElements.set(element, setVal = new Set());
            }

            props.forEach(function (prop) {
              return setVal.add(prop);
            });
          });
        });
      }

      if (erroneousTransitions.length) {
        var errors = [];
        erroneousTransitions.forEach(function (instruction) {
          errors.push("@".concat(instruction.triggerName, " has failed due to:\n"));
          instruction.errors.forEach(function (error) {
            return errors.push("- ".concat(error, "\n"));
          });
        });
        allPlayers.forEach(function (player) {
          return player.destroy();
        });
        this.reportError(errors);
      }

      var allPreviousPlayersMap = new Map(); // this map works to tell which element in the DOM tree is contained by
      // which animation. Further down below this map will get populated once
      // the players are built and in doing so it can efficiently figure out
      // if a sub player is skipped due to a parent player having priority.

      var animationElementMap = new Map();
      queuedInstructions.forEach(function (entry) {
        var element = entry.element;

        if (subTimelines.has(element)) {
          animationElementMap.set(element, element);

          _this33._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
        }
      });
      skippedPlayers.forEach(function (player) {
        var element = player.element;

        var previousPlayers = _this33._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);

        previousPlayers.forEach(function (prevPlayer) {
          getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
          prevPlayer.destroy();
        });
      }); // this is a special case for nodes that will be removed (either by)
      // having their own leave animations or by being queried in a container
      // that will be removed once a parent animation is complete. The idea
      // here is that * styles must be identical to ! styles because of
      // backwards compatibility (* is also filled in by default in many places).
      // Otherwise * styles will return an empty value or auto since the element
      // that is being getComputedStyle'd will not be visible (since * = destination)

      var replaceNodes = allLeaveNodes.filter(function (node) {
        return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
      }); // POST STAGE: fill the * styles

      var postStylesMap = new Map();
      var allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_9__.AUTO_STYLE);
      allLeaveQueriedNodes.forEach(function (node) {
        if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
          replaceNodes.push(node);
        }
      }); // PRE STAGE: fill the ! styles

      var preStylesMap = new Map();
      enterNodeMap.forEach(function (nodes, root) {
        cloakAndComputeStyles(preStylesMap, _this33.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_9__["ɵPRE_STYLE"]);
      });
      replaceNodes.forEach(function (node) {
        var post = postStylesMap.get(node);
        var pre = preStylesMap.get(node);
        postStylesMap.set(node, Object.assign(Object.assign({}, post), pre));
      });
      var rootPlayers = [];
      var subPlayers = [];
      var NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
      queuedInstructions.forEach(function (entry) {
        var element = entry.element,
            player = entry.player,
            instruction = entry.instruction; // this means that it was never consumed by a parent animation which
        // means that it is independent and therefore should be set for animation

        if (subTimelines.has(element)) {
          if (disabledElementsSet.has(element)) {
            player.onDestroy(function () {
              return setStyles(element, instruction.toStyles);
            });
            player.disabled = true;
            player.overrideTotalTime(instruction.totalTime);
            skippedPlayers.push(player);
            return;
          } // this will flow up the DOM and query the map to figure out
          // if a parent animation has priority over it. In the situation
          // that a parent is detected then it will cancel the loop. If
          // nothing is detected, or it takes a few hops to find a parent,
          // then it will fill in the missing nodes and signal them as having
          // a detected parent (or a NO_PARENT value via a special constant).


          var parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;

          if (animationElementMap.size > 1) {
            var elm = element;
            var parentsToAdd = [];

            while (elm = elm.parentNode) {
              var detectedParent = animationElementMap.get(elm);

              if (detectedParent) {
                parentWithAnimation = detectedParent;
                break;
              }

              parentsToAdd.push(elm);
            }

            parentsToAdd.forEach(function (parent) {
              return animationElementMap.set(parent, parentWithAnimation);
            });
          }

          var innerPlayer = _this33._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);

          player.setRealPlayer(innerPlayer);

          if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
            rootPlayers.push(player);
          } else {
            var parentPlayers = _this33.playersByElement.get(parentWithAnimation);

            if (parentPlayers && parentPlayers.length) {
              player.parentPlayer = optimizeGroupPlayer(parentPlayers);
            }

            skippedPlayers.push(player);
          }
        } else {
          eraseStyles(element, instruction.fromStyles);
          player.onDestroy(function () {
            return setStyles(element, instruction.toStyles);
          }); // there still might be a ancestor player animating this
          // element therefore we will still add it as a sub player
          // even if its animation may be disabled

          subPlayers.push(player);

          if (disabledElementsSet.has(element)) {
            skippedPlayers.push(player);
          }
        }
      }); // find all of the sub players' corresponding inner animation player

      subPlayers.forEach(function (player) {
        // even if any players are not found for a sub animation then it
        // will still complete itself after the next tick since it's Noop
        var playersForElement = skippedPlayersMap.get(player.element);

        if (playersForElement && playersForElement.length) {
          var innerPlayer = optimizeGroupPlayer(playersForElement);
          player.setRealPlayer(innerPlayer);
        }
      }); // the reason why we don't actually play the animation is
      // because all that a skipped player is designed to do is to
      // fire the start/done transition callback events

      skippedPlayers.forEach(function (player) {
        if (player.parentPlayer) {
          player.syncPlayerEvents(player.parentPlayer);
        } else {
          player.destroy();
        }
      }); // run through all of the queued removals and see if they
      // were picked up by a query. If not then perform the removal
      // operation right away unless a parent animation is ongoing.

      for (var _i6 = 0; _i6 < allLeaveNodes.length; _i6++) {
        var _element2 = allLeaveNodes[_i6];
        var _details2 = _element2[REMOVAL_FLAG];
        removeClass(_element2, LEAVE_CLASSNAME); // this means the element has a removal animation that is being
        // taken care of and therefore the inner elements will hang around
        // until that animation is over (or the parent queried animation)

        if (_details2 && _details2.hasAnimation) continue;
        var players = []; // if this element is queried or if it contains queried children
        // then we want for the element not to be removed from the page
        // until the queried animations have finished

        if (queriedElements.size) {
          var queriedPlayerResults = queriedElements.get(_element2);

          if (queriedPlayerResults && queriedPlayerResults.length) {
            players.push.apply(players, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__.default)(queriedPlayerResults));
          }

          var queriedInnerElements = this.driver.query(_element2, NG_ANIMATING_SELECTOR, true);

          for (var j = 0; j < queriedInnerElements.length; j++) {
            var queriedPlayers = queriedElements.get(queriedInnerElements[j]);

            if (queriedPlayers && queriedPlayers.length) {
              players.push.apply(players, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__.default)(queriedPlayers));
            }
          }
        }

        var activePlayers = players.filter(function (p) {
          return !p.destroyed;
        });

        if (activePlayers.length) {
          removeNodesAfterAnimationDone(this, _element2, activePlayers);
        } else {
          this.processLeaveNode(_element2);
        }
      } // this is required so the cleanup method doesn't remove them


      allLeaveNodes.length = 0;
      rootPlayers.forEach(function (player) {
        _this33.players.push(player);

        player.onDone(function () {
          player.destroy();

          var index = _this33.players.indexOf(player);

          _this33.players.splice(index, 1);
        });
        player.play();
      });
      return rootPlayers;
    }
  }, {
    key: "elementContainsData",
    value: function elementContainsData(namespaceId, element) {
      var containsData = false;
      var details = element[REMOVAL_FLAG];
      if (details && details.setForRemoval) containsData = true;
      if (this.playersByElement.has(element)) containsData = true;
      if (this.playersByQueriedElement.has(element)) containsData = true;
      if (this.statesByElement.has(element)) containsData = true;
      return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
    }
  }, {
    key: "afterFlush",
    value: function afterFlush(callback) {
      this._flushFns.push(callback);
    }
  }, {
    key: "afterFlushAnimationsDone",
    value: function afterFlushAnimationsDone(callback) {
      this._whenQuietFns.push(callback);
    }
  }, {
    key: "_getPreviousPlayers",
    value: function _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
      var players = [];

      if (isQueriedElement) {
        var queriedElementPlayers = this.playersByQueriedElement.get(element);

        if (queriedElementPlayers) {
          players = queriedElementPlayers;
        }
      } else {
        var elementPlayers = this.playersByElement.get(element);

        if (elementPlayers) {
          var isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
          elementPlayers.forEach(function (player) {
            if (player.queued) return;
            if (!isRemovalAnimation && player.triggerName != triggerName) return;
            players.push(player);
          });
        }
      }

      if (namespaceId || triggerName) {
        players = players.filter(function (player) {
          if (namespaceId && namespaceId != player.namespaceId) return false;
          if (triggerName && triggerName != player.triggerName) return false;
          return true;
        });
      }

      return players;
    }
  }, {
    key: "_beforeAnimationBuild",
    value: function _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
      var _this34 = this;

      var triggerName = instruction.triggerName;
      var rootElement = instruction.element; // when a removal animation occurs, ALL previous players are collected
      // and destroyed (even if they are outside of the current namespace)

      var targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
      var targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;

      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(instruction.timelines),
          _step;

      try {
        var _loop2 = function _loop2() {
          var timelineInstruction = _step.value;
          var element = timelineInstruction.element;
          var isQueriedElement = element !== rootElement;
          var players = getOrSetAsInMap(allPreviousPlayersMap, element, []);

          var previousPlayers = _this34._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);

          previousPlayers.forEach(function (player) {
            var realPlayer = player.getRealPlayer();

            if (realPlayer.beforeDestroy) {
              realPlayer.beforeDestroy();
            }

            player.destroy();
            players.push(player);
          });
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop2();
        } // this needs to be done so that the PRE/POST styles can be
        // computed properly without interfering with the previous animation

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      eraseStyles(rootElement, instruction.fromStyles);
    }
  }, {
    key: "_buildAnimation",
    value: function _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
      var _this35 = this;

      var triggerName = instruction.triggerName;
      var rootElement = instruction.element; // we first run this so that the previous animation player
      // data can be passed into the successive animation players

      var allQueriedPlayers = [];
      var allConsumedElements = new Set();
      var allSubElements = new Set();
      var allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
        var element = timelineInstruction.element;
        allConsumedElements.add(element); // FIXME (matsko): make sure to-be-removed animations are removed properly

        var details = element[REMOVAL_FLAG];
        if (details && details.removedBeforeQueried) return new _angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
        var isQueriedElement = element !== rootElement;
        var previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map(function (p) {
          return p.getRealPlayer();
        })).filter(function (p) {
          // the `element` is not apart of the AnimationPlayer definition, but
          // Mock/WebAnimations
          // use the element within their implementation. This will be added in Angular5 to
          // AnimationPlayer
          var pp = p;
          return pp.element ? pp.element === element : false;
        });
        var preStyles = preStylesMap.get(element);
        var postStyles = postStylesMap.get(element);
        var keyframes = normalizeKeyframes(_this35.driver, _this35._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);

        var player = _this35._buildPlayer(timelineInstruction, keyframes, previousPlayers); // this means that this particular player belongs to a sub trigger. It is
        // important that we match this player up with the corresponding (@trigger.listener)


        if (timelineInstruction.subTimeline && skippedPlayersMap) {
          allSubElements.add(element);
        }

        if (isQueriedElement) {
          var wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
          wrappedPlayer.setRealPlayer(player);
          allQueriedPlayers.push(wrappedPlayer);
        }

        return player;
      });
      allQueriedPlayers.forEach(function (player) {
        getOrSetAsInMap(_this35.playersByQueriedElement, player.element, []).push(player);
        player.onDone(function () {
          return deleteOrUnsetInMap(_this35.playersByQueriedElement, player.element, player);
        });
      });
      allConsumedElements.forEach(function (element) {
        return addClass(element, NG_ANIMATING_CLASSNAME);
      });
      var player = optimizeGroupPlayer(allNewPlayers);
      player.onDestroy(function () {
        allConsumedElements.forEach(function (element) {
          return removeClass(element, NG_ANIMATING_CLASSNAME);
        });
        setStyles(rootElement, instruction.toStyles);
      }); // this basically makes all of the callbacks for sub element animations
      // be dependent on the upper players for when they finish

      allSubElements.forEach(function (element) {
        getOrSetAsInMap(skippedPlayersMap, element, []).push(player);
      });
      return player;
    }
  }, {
    key: "_buildPlayer",
    value: function _buildPlayer(instruction, keyframes, previousPlayers) {
      if (keyframes.length > 0) {
        return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
      } // special case for when an empty transition|definition is provided
      // ... there is no point in rendering an empty animation


      return new _angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer(instruction.duration, instruction.delay);
    }
  }]);

  return TransitionAnimationEngine;
}();

var TransitionAnimationPlayer = /*#__PURE__*/function () {
  function TransitionAnimationPlayer(namespaceId, triggerName, element) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, TransitionAnimationPlayer);

    this.namespaceId = namespaceId;
    this.triggerName = triggerName;
    this.element = element;
    this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer();
    this._containsRealPlayer = false;
    this._queuedCallbacks = {};
    this.destroyed = false;
    this.markedForDestroy = false;
    this.disabled = false;
    this.queued = true;
    this.totalTime = 0;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(TransitionAnimationPlayer, [{
    key: "setRealPlayer",
    value: function setRealPlayer(player) {
      var _this36 = this;

      if (this._containsRealPlayer) return;
      this._player = player;
      Object.keys(this._queuedCallbacks).forEach(function (phase) {
        _this36._queuedCallbacks[phase].forEach(function (callback) {
          return listenOnPlayer(player, phase, undefined, callback);
        });
      });
      this._queuedCallbacks = {};
      this._containsRealPlayer = true;
      this.overrideTotalTime(player.totalTime);
      this.queued = false;
    }
  }, {
    key: "getRealPlayer",
    value: function getRealPlayer() {
      return this._player;
    }
  }, {
    key: "overrideTotalTime",
    value: function overrideTotalTime(totalTime) {
      this.totalTime = totalTime;
    }
  }, {
    key: "syncPlayerEvents",
    value: function syncPlayerEvents(player) {
      var _this37 = this;

      var p = this._player;

      if (p.triggerCallback) {
        player.onStart(function () {
          return p.triggerCallback('start');
        });
      }

      player.onDone(function () {
        return _this37.finish();
      });
      player.onDestroy(function () {
        return _this37.destroy();
      });
    }
  }, {
    key: "_queueEvent",
    value: function _queueEvent(name, callback) {
      getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      if (this.queued) {
        this._queueEvent('done', fn);
      }

      this._player.onDone(fn);
    }
  }, {
    key: "onStart",
    value: function onStart(fn) {
      if (this.queued) {
        this._queueEvent('start', fn);
      }

      this._player.onStart(fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      if (this.queued) {
        this._queueEvent('destroy', fn);
      }

      this._player.onDestroy(fn);
    }
  }, {
    key: "init",
    value: function init() {
      this._player.init();
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this.queued ? false : this._player.hasStarted();
    }
  }, {
    key: "play",
    value: function play() {
      !this.queued && this._player.play();
    }
  }, {
    key: "pause",
    value: function pause() {
      !this.queued && this._player.pause();
    }
  }, {
    key: "restart",
    value: function restart() {
      !this.queued && this._player.restart();
    }
  }, {
    key: "finish",
    value: function finish() {
      this._player.finish();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.destroyed = true;

      this._player.destroy();
    }
  }, {
    key: "reset",
    value: function reset() {
      !this.queued && this._player.reset();
    }
  }, {
    key: "setPosition",
    value: function setPosition(p) {
      if (!this.queued) {
        this._player.setPosition(p);
      }
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return this.queued ? 0 : this._player.getPosition();
    }
    /** @internal */

  }, {
    key: "triggerCallback",
    value: function triggerCallback(phaseName) {
      var p = this._player;

      if (p.triggerCallback) {
        p.triggerCallback(phaseName);
      }
    }
  }]);

  return TransitionAnimationPlayer;
}();

function deleteOrUnsetInMap(map, key, value) {
  var currentValues;

  if (map instanceof Map) {
    currentValues = map.get(key);

    if (currentValues) {
      if (currentValues.length) {
        var index = currentValues.indexOf(value);
        currentValues.splice(index, 1);
      }

      if (currentValues.length == 0) {
        map.delete(key);
      }
    }
  } else {
    currentValues = map[key];

    if (currentValues) {
      if (currentValues.length) {
        var _index2 = currentValues.indexOf(value);

        currentValues.splice(_index2, 1);
      }

      if (currentValues.length == 0) {
        delete map[key];
      }
    }
  }

  return currentValues;
}

function normalizeTriggerValue(value) {
  // we use `!= null` here because it's the most simple
  // way to test against a "falsy" value without mixing
  // in empty strings or a zero value. DO NOT OPTIMIZE.
  return value != null ? value : null;
}

function isElementNode(node) {
  return node && node['nodeType'] === 1;
}

function isTriggerEventValid(eventName) {
  return eventName == 'start' || eventName == 'done';
}

function cloakElement(element, value) {
  var oldValue = element.style.display;
  element.style.display = value != null ? value : 'none';
  return oldValue;
}

function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
  var cloakVals = [];
  elements.forEach(function (element) {
    return cloakVals.push(cloakElement(element));
  });
  var failedElements = [];
  elementPropsMap.forEach(function (props, element) {
    var styles = {};
    props.forEach(function (prop) {
      var value = styles[prop] = driver.computeStyle(element, prop, defaultStyle); // there is no easy way to detect this because a sub element could be removed
      // by a parent animation element being detached.

      if (!value || value.length == 0) {
        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
        failedElements.push(element);
      }
    });
    valuesMap.set(element, styles);
  }); // we use a index variable here since Set.forEach(a, i) does not return
  // an index value for the closure (but instead just the value)

  var i = 0;
  elements.forEach(function (element) {
    return cloakElement(element, cloakVals[i++]);
  });
  return failedElements;
}
/*
Since the Angular renderer code will return a collection of inserted
nodes in all areas of a DOM tree, it's up to this algorithm to figure
out which nodes are roots for each animation @trigger.

By placing each inserted node into a Set and traversing upwards, it
is possible to find the @trigger elements and well any direct *star
insertion nodes, if a @trigger root is found then the enter element
is placed into the Map[@trigger] spot.
 */


function buildRootMap(roots, nodes) {
  var rootMap = new Map();
  roots.forEach(function (root) {
    return rootMap.set(root, []);
  });
  if (nodes.length == 0) return rootMap;
  var NULL_NODE = 1;
  var nodeSet = new Set(nodes);
  var localRootMap = new Map();

  function getRoot(node) {
    if (!node) return NULL_NODE;
    var root = localRootMap.get(node);
    if (root) return root;
    var parent = node.parentNode;

    if (rootMap.has(parent)) {
      // ngIf inside @trigger
      root = parent;
    } else if (nodeSet.has(parent)) {
      // ngIf inside ngIf
      root = NULL_NODE;
    } else {
      // recurse upwards
      root = getRoot(parent);
    }

    localRootMap.set(node, root);
    return root;
  }

  nodes.forEach(function (node) {
    var root = getRoot(node);

    if (root !== NULL_NODE) {
      rootMap.get(root).push(node);
    }
  });
  return rootMap;
}

var CLASSES_CACHE_KEY = '$$classes';

function containsClass(element, className) {
  if (element.classList) {
    return element.classList.contains(className);
  } else {
    var classes = element[CLASSES_CACHE_KEY];
    return classes && classes[className];
  }
}

function addClass(element, className) {
  if (element.classList) {
    element.classList.add(className);
  } else {
    var classes = element[CLASSES_CACHE_KEY];

    if (!classes) {
      classes = element[CLASSES_CACHE_KEY] = {};
    }

    classes[className] = true;
  }
}

function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else {
    var classes = element[CLASSES_CACHE_KEY];

    if (classes) {
      delete classes[className];
    }
  }
}

function removeNodesAfterAnimationDone(engine, element, players) {
  optimizeGroupPlayer(players).onDone(function () {
    return engine.processLeaveNode(element);
  });
}

function flattenGroupPlayers(players) {
  var finalPlayers = [];

  _flattenGroupPlayersRecur(players, finalPlayers);

  return finalPlayers;
}

function _flattenGroupPlayersRecur(players, finalPlayers) {
  for (var i = 0; i < players.length; i++) {
    var player = players[i];

    if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_9__["ɵAnimationGroupPlayer"]) {
      _flattenGroupPlayersRecur(player.players, finalPlayers);
    } else {
      finalPlayers.push(player);
    }
  }
}

function objEquals(a, b) {
  var k1 = Object.keys(a);
  var k2 = Object.keys(b);
  if (k1.length != k2.length) return false;

  for (var i = 0; i < k1.length; i++) {
    var prop = k1[i];
    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
  }

  return true;
}

function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
  var postEntry = allPostStyleElements.get(element);
  if (!postEntry) return false;
  var preEntry = allPreStyleElements.get(element);

  if (preEntry) {
    postEntry.forEach(function (data) {
      return preEntry.add(data);
    });
  } else {
    allPreStyleElements.set(element, postEntry);
  }

  allPostStyleElements.delete(element);
  return true;
}

var AnimationEngine = /*#__PURE__*/function () {
  function AnimationEngine(bodyNode, _driver, _normalizer) {
    var _this38 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AnimationEngine);

    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._triggerCache = {}; // this method is designed to be overridden by the code that uses this engine

    this.onRemovalComplete = function (element, context) {};

    this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, _normalizer);
    this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, _normalizer);

    this._transitionEngine.onRemovalComplete = function (element, context) {
      return _this38.onRemovalComplete(element, context);
    };
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(AnimationEngine, [{
    key: "registerTrigger",
    value: function registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
      var cacheKey = componentId + '-' + name;
      var trigger = this._triggerCache[cacheKey];

      if (!trigger) {
        var errors = [];
        var ast = buildAnimationAst(this._driver, metadata, errors);

        if (errors.length) {
          throw new Error("The animation trigger \"".concat(name, "\" has failed to build due to the following errors:\n - ").concat(errors.join('\n - ')));
        }

        trigger = buildTrigger(name, ast, this._normalizer);
        this._triggerCache[cacheKey] = trigger;
      }

      this._transitionEngine.registerTrigger(namespaceId, name, trigger);
    }
  }, {
    key: "register",
    value: function register(namespaceId, hostElement) {
      this._transitionEngine.register(namespaceId, hostElement);
    }
  }, {
    key: "destroy",
    value: function destroy(namespaceId, context) {
      this._transitionEngine.destroy(namespaceId, context);
    }
  }, {
    key: "onInsert",
    value: function onInsert(namespaceId, element, parent, insertBefore) {
      this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
    }
  }, {
    key: "onRemove",
    value: function onRemove(namespaceId, element, context, isHostElement) {
      this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
    }
  }, {
    key: "disableAnimations",
    value: function disableAnimations(element, disable) {
      this._transitionEngine.markElementAsDisabled(element, disable);
    }
  }, {
    key: "process",
    value: function process(namespaceId, element, property, value) {
      if (property.charAt(0) == '@') {
        var _parseTimelineCommand = parseTimelineCommand(property),
            _parseTimelineCommand2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__.default)(_parseTimelineCommand, 2),
            id = _parseTimelineCommand2[0],
            action = _parseTimelineCommand2[1];

        var args = value;

        this._timelineEngine.command(id, element, action, args);
      } else {
        this._transitionEngine.trigger(namespaceId, element, property, value);
      }
    }
  }, {
    key: "listen",
    value: function listen(namespaceId, element, eventName, eventPhase, callback) {
      // @@listen
      if (eventName.charAt(0) == '@') {
        var _parseTimelineCommand3 = parseTimelineCommand(eventName),
            _parseTimelineCommand4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__.default)(_parseTimelineCommand3, 2),
            id = _parseTimelineCommand4[0],
            action = _parseTimelineCommand4[1];

        return this._timelineEngine.listen(id, element, action, callback);
      }

      return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
    }
  }, {
    key: "flush",
    value: function flush() {
      var microtaskId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

      this._transitionEngine.flush(microtaskId);
    }
  }, {
    key: "players",
    get: function get() {
      return this._transitionEngine.players.concat(this._timelineEngine.players);
    }
  }, {
    key: "whenRenderingDone",
    value: function whenRenderingDone() {
      return this._transitionEngine.whenRenderingDone();
    }
  }]);

  return AnimationEngine;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
 * detected.
 *
 * In CSS there exist properties that cannot be animated within a keyframe animation
 * (whether it be via CSS keyframes or web-animations) and the animation implementation
 * will ignore them. This function is designed to detect those special cased styles and
 * return a container that will be executed at the start and end of the animation.
 *
 * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
 */


function packageNonAnimatableStyles(element, styles) {
  var startStyles = null;
  var endStyles = null;

  if (Array.isArray(styles) && styles.length) {
    startStyles = filterNonAnimatableStyles(styles[0]);

    if (styles.length > 1) {
      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
    }
  } else if (styles) {
    startStyles = filterNonAnimatableStyles(styles);
  }

  return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
}
/**
 * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
 *
 * When started (when the `start()` method is run) then the provided `startStyles`
 * will be applied. When finished (when the `finish()` method is called) the
 * `endStyles` will be applied as well any any starting styles. Finally when
 * `destroy()` is called then all styles will be removed.
 */


var SpecialCasedStyles = /*#__PURE__*/function () {
  function SpecialCasedStyles(_element, _startStyles, _endStyles) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, SpecialCasedStyles);

    this._element = _element;
    this._startStyles = _startStyles;
    this._endStyles = _endStyles;
    this._state = 0
    /* Pending */
    ;
    var initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);

    if (!initialStyles) {
      SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
    }

    this._initialStyles = initialStyles;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(SpecialCasedStyles, [{
    key: "start",
    value: function start() {
      if (this._state < 1
      /* Started */
      ) {
        if (this._startStyles) {
          setStyles(this._element, this._startStyles, this._initialStyles);
        }

        this._state = 1
        /* Started */
        ;
      }
    }
  }, {
    key: "finish",
    value: function finish() {
      this.start();

      if (this._state < 2
      /* Finished */
      ) {
        setStyles(this._element, this._initialStyles);

        if (this._endStyles) {
          setStyles(this._element, this._endStyles);
          this._endStyles = null;
        }

        this._state = 1
        /* Started */
        ;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.finish();

      if (this._state < 3
      /* Destroyed */
      ) {
        SpecialCasedStyles.initialStylesByElement.delete(this._element);

        if (this._startStyles) {
          eraseStyles(this._element, this._startStyles);
          this._endStyles = null;
        }

        if (this._endStyles) {
          eraseStyles(this._element, this._endStyles);
          this._endStyles = null;
        }

        setStyles(this._element, this._initialStyles);
        this._state = 3
        /* Destroyed */
        ;
      }
    }
  }]);

  return SpecialCasedStyles;
}();

SpecialCasedStyles.initialStylesByElement = new WeakMap();

function filterNonAnimatableStyles(styles) {
  var result = null;
  var props = Object.keys(styles);

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];

    if (isNonAnimatableStyle(prop)) {
      result = result || {};
      result[prop] = styles[prop];
    }
  }

  return result;
}

function isNonAnimatableStyle(prop) {
  return prop === 'display' || prop === 'position';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var ANIMATION_PROP = 'animation';
var ANIMATIONEND_EVENT = 'animationend';
var ONE_SECOND$1 = 1000;

var ElementAnimationStyleHandler = /*#__PURE__*/function () {
  function ElementAnimationStyleHandler(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {
    var _this39 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ElementAnimationStyleHandler);

    this._element = _element;
    this._name = _name;
    this._duration = _duration;
    this._delay = _delay;
    this._easing = _easing;
    this._fillMode = _fillMode;
    this._onDoneFn = _onDoneFn;
    this._finished = false;
    this._destroyed = false;
    this._startTime = 0;
    this._position = 0;

    this._eventFn = function (e) {
      return _this39._handleCallback(e);
    };
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(ElementAnimationStyleHandler, [{
    key: "apply",
    value: function apply() {
      applyKeyframeAnimation(this._element, "".concat(this._duration, "ms ").concat(this._easing, " ").concat(this._delay, "ms 1 normal ").concat(this._fillMode, " ").concat(this._name));
      addRemoveAnimationEvent(this._element, this._eventFn, false);
      this._startTime = Date.now();
    }
  }, {
    key: "pause",
    value: function pause() {
      playPauseAnimation(this._element, this._name, 'paused');
    }
  }, {
    key: "resume",
    value: function resume() {
      playPauseAnimation(this._element, this._name, 'running');
    }
  }, {
    key: "setPosition",
    value: function setPosition(position) {
      var index = findIndexForAnimation(this._element, this._name);
      this._position = position * this._duration;
      setAnimationStyle(this._element, 'Delay', "-".concat(this._position, "ms"), index);
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return this._position;
    }
  }, {
    key: "_handleCallback",
    value: function _handleCallback(event) {
      var timestamp = event._ngTestManualTimestamp || Date.now();
      var elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;

      if (event.animationName == this._name && Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {
        this.finish();
      }
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this._finished) return;
      this._finished = true;

      this._onDoneFn();

      addRemoveAnimationEvent(this._element, this._eventFn, true);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._destroyed) return;
      this._destroyed = true;
      this.finish();
      removeKeyframeAnimation(this._element, this._name);
    }
  }]);

  return ElementAnimationStyleHandler;
}();

function playPauseAnimation(element, name, status) {
  var index = findIndexForAnimation(element, name);
  setAnimationStyle(element, 'PlayState', status, index);
}

function applyKeyframeAnimation(element, value) {
  var anim = getAnimationStyle(element, '').trim();
  var index = 0;

  if (anim.length) {
    index = countChars(anim, ',') + 1;
    value = "".concat(anim, ", ").concat(value);
  }

  setAnimationStyle(element, '', value);
  return index;
}

function removeKeyframeAnimation(element, name) {
  var anim = getAnimationStyle(element, '');
  var tokens = anim.split(',');
  var index = findMatchingTokenIndex(tokens, name);

  if (index >= 0) {
    tokens.splice(index, 1);
    var newValue = tokens.join(',');
    setAnimationStyle(element, '', newValue);
  }
}

function findIndexForAnimation(element, value) {
  var anim = getAnimationStyle(element, '');

  if (anim.indexOf(',') > 0) {
    var tokens = anim.split(',');
    return findMatchingTokenIndex(tokens, value);
  }

  return findMatchingTokenIndex([anim], value);
}

function findMatchingTokenIndex(tokens, searchToken) {
  for (var i = 0; i < tokens.length; i++) {
    if (tokens[i].indexOf(searchToken) >= 0) {
      return i;
    }
  }

  return -1;
}

function addRemoveAnimationEvent(element, fn, doRemove) {
  doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) : element.addEventListener(ANIMATIONEND_EVENT, fn);
}

function setAnimationStyle(element, name, value, index) {
  var prop = ANIMATION_PROP + name;

  if (index != null) {
    var oldValue = element.style[prop];

    if (oldValue.length) {
      var tokens = oldValue.split(',');
      tokens[index] = value;
      value = tokens.join(',');
    }
  }

  element.style[prop] = value;
}

function getAnimationStyle(element, name) {
  return element.style[ANIMATION_PROP + name] || '';
}

function countChars(value, char) {
  var count = 0;

  for (var i = 0; i < value.length; i++) {
    var c = value.charAt(i);
    if (c === char) count++;
  }

  return count;
}

var DEFAULT_FILL_MODE = 'forwards';
var DEFAULT_EASING = 'linear';

var CssKeyframesPlayer = /*#__PURE__*/function () {
  function CssKeyframesPlayer(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, CssKeyframesPlayer);

    this.element = element;
    this.keyframes = keyframes;
    this.animationName = animationName;
    this._duration = _duration;
    this._delay = _delay;
    this._finalStyles = _finalStyles;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this.currentSnapshot = {};
    this._state = 0;
    this.easing = easing || DEFAULT_EASING;
    this.totalTime = _duration + _delay;

    this._buildStyler();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(CssKeyframesPlayer, [{
    key: "onStart",
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.init();
      if (this._state >= 4
      /* DESTROYED */
      ) return;
      this._state = 4
      /* DESTROYED */
      ;

      this._styler.destroy();

      this._flushStartFns();

      this._flushDoneFns();

      if (this._specialStyles) {
        this._specialStyles.destroy();
      }

      this._onDestroyFns.forEach(function (fn) {
        return fn();
      });

      this._onDestroyFns = [];
    }
  }, {
    key: "_flushDoneFns",
    value: function _flushDoneFns() {
      this._onDoneFns.forEach(function (fn) {
        return fn();
      });

      this._onDoneFns = [];
    }
  }, {
    key: "_flushStartFns",
    value: function _flushStartFns() {
      this._onStartFns.forEach(function (fn) {
        return fn();
      });

      this._onStartFns = [];
    }
  }, {
    key: "finish",
    value: function finish() {
      this.init();
      if (this._state >= 3
      /* FINISHED */
      ) return;
      this._state = 3
      /* FINISHED */
      ;

      this._styler.finish();

      this._flushStartFns();

      if (this._specialStyles) {
        this._specialStyles.finish();
      }

      this._flushDoneFns();
    }
  }, {
    key: "setPosition",
    value: function setPosition(value) {
      this._styler.setPosition(value);
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return this._styler.getPosition();
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this._state >= 2
      /* STARTED */
      ;
    }
  }, {
    key: "init",
    value: function init() {
      if (this._state >= 1
      /* INITIALIZED */
      ) return;
      this._state = 1
      /* INITIALIZED */
      ;
      var elm = this.element;

      this._styler.apply();

      if (this._delay) {
        this._styler.pause();
      }
    }
  }, {
    key: "play",
    value: function play() {
      this.init();

      if (!this.hasStarted()) {
        this._flushStartFns();

        this._state = 2
        /* STARTED */
        ;

        if (this._specialStyles) {
          this._specialStyles.start();
        }
      }

      this._styler.resume();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.init();

      this._styler.pause();
    }
  }, {
    key: "restart",
    value: function restart() {
      this.reset();
      this.play();
    }
  }, {
    key: "reset",
    value: function reset() {
      this._state = 0
      /* RESET */
      ;

      this._styler.destroy();

      this._buildStyler();

      this._styler.apply();
    }
  }, {
    key: "_buildStyler",
    value: function _buildStyler() {
      var _this40 = this;

      this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, function () {
        return _this40.finish();
      });
    }
    /** @internal */

  }, {
    key: "triggerCallback",
    value: function triggerCallback(phaseName) {
      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
      methods.forEach(function (fn) {
        return fn();
      });
      methods.length = 0;
    }
  }, {
    key: "beforeDestroy",
    value: function beforeDestroy() {
      var _this41 = this;

      this.init();
      var styles = {};

      if (this.hasStarted()) {
        var finished = this._state >= 3
        /* FINISHED */
        ;
        Object.keys(this._finalStyles).forEach(function (prop) {
          if (prop != 'offset') {
            styles[prop] = finished ? _this41._finalStyles[prop] : computeStyle(_this41.element, prop);
          }
        });
      }

      this.currentSnapshot = styles;
    }
  }]);

  return CssKeyframesPlayer;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DirectStylePlayer = /*#__PURE__*/function (_NoopAnimationPlayer) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DirectStylePlayer, _NoopAnimationPlayer);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(DirectStylePlayer);

  function DirectStylePlayer(element, styles) {
    var _this42;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, DirectStylePlayer);

    _this42 = _super3.call(this);
    _this42.element = element;
    _this42._startingStyles = {};
    _this42.__initialized = false;
    _this42._styles = hypenatePropsObject(styles);
    return _this42;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(DirectStylePlayer, [{
    key: "init",
    value: function init() {
      var _this43 = this;

      if (this.__initialized || !this._startingStyles) return;
      this.__initialized = true;
      Object.keys(this._styles).forEach(function (prop) {
        _this43._startingStyles[prop] = _this43.element.style[prop];
      });

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(DirectStylePlayer.prototype), "init", this).call(this);
    }
  }, {
    key: "play",
    value: function play() {
      var _this44 = this;

      if (!this._startingStyles) return;
      this.init();
      Object.keys(this._styles).forEach(function (prop) {
        return _this44.element.style.setProperty(prop, _this44._styles[prop]);
      });

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(DirectStylePlayer.prototype), "play", this).call(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this45 = this;

      if (!this._startingStyles) return;
      Object.keys(this._startingStyles).forEach(function (prop) {
        var value = _this45._startingStyles[prop];

        if (value) {
          _this45.element.style.setProperty(prop, value);
        } else {
          _this45.element.style.removeProperty(prop);
        }
      });
      this._startingStyles = null;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(DirectStylePlayer.prototype), "destroy", this).call(this);
    }
  }]);

  return DirectStylePlayer;
}(_angular_animations__WEBPACK_IMPORTED_MODULE_9__.NoopAnimationPlayer);

var KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';
var TAB_SPACE = ' ';

var CssKeyframesDriver = /*#__PURE__*/function () {
  function CssKeyframesDriver() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, CssKeyframesDriver);

    this._count = 0;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(CssKeyframesDriver, [{
    key: "validateStyleProperty",
    value: function validateStyleProperty(prop) {
      return _validateStyleProperty(prop);
    }
  }, {
    key: "matchesElement",
    value: function matchesElement(element, selector) {
      return _matchesElement(element, selector);
    }
  }, {
    key: "containsElement",
    value: function containsElement(elm1, elm2) {
      return _containsElement(elm1, elm2);
    }
  }, {
    key: "query",
    value: function query(element, selector, multi) {
      return invokeQuery(element, selector, multi);
    }
  }, {
    key: "computeStyle",
    value: function computeStyle(element, prop, defaultValue) {
      return window.getComputedStyle(element)[prop];
    }
  }, {
    key: "buildKeyframeElement",
    value: function buildKeyframeElement(element, name, keyframes) {
      keyframes = keyframes.map(function (kf) {
        return hypenatePropsObject(kf);
      });
      var keyframeStr = "@keyframes ".concat(name, " {\n");
      var tab = '';
      keyframes.forEach(function (kf) {
        tab = TAB_SPACE;
        var offset = parseFloat(kf['offset']);
        keyframeStr += "".concat(tab).concat(offset * 100, "% {\n");
        tab += TAB_SPACE;
        Object.keys(kf).forEach(function (prop) {
          var value = kf[prop];

          switch (prop) {
            case 'offset':
              return;

            case 'easing':
              if (value) {
                keyframeStr += "".concat(tab, "animation-timing-function: ").concat(value, ";\n");
              }

              return;

            default:
              keyframeStr += "".concat(tab).concat(prop, ": ").concat(value, ";\n");
              return;
          }
        });
        keyframeStr += "".concat(tab, "}\n");
      });
      keyframeStr += "}\n";
      var kfElm = document.createElement('style');
      kfElm.textContent = keyframeStr;
      return kfElm;
    }
  }, {
    key: "animate",
    value: function animate(element, keyframes, duration, delay, easing) {
      var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
      var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;

      if ((typeof ngDevMode === 'undefined' || ngDevMode) && scrubberAccessRequested) {
        notifyFaultyScrubber();
      }

      var previousCssKeyframePlayers = previousPlayers.filter(function (player) {
        return player instanceof CssKeyframesPlayer;
      });
      var previousStyles = {};

      if (allowPreviousPlayerStylesMerge(duration, delay)) {
        previousCssKeyframePlayers.forEach(function (player) {
          var styles = player.currentSnapshot;
          Object.keys(styles).forEach(function (prop) {
            return previousStyles[prop] = styles[prop];
          });
        });
      }

      keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
      var finalStyles = flattenKeyframesIntoStyles(keyframes); // if there is no animation then there is no point in applying
      // styles and waiting for an event to get fired. This causes lag.
      // It's better to just directly apply the styles to the element
      // via the direct styling animation player.

      if (duration == 0) {
        return new DirectStylePlayer(element, finalStyles);
      }

      var animationName = "".concat(KEYFRAMES_NAME_PREFIX).concat(this._count++);
      var kfElm = this.buildKeyframeElement(element, animationName, keyframes);
      var nodeToAppendKfElm = findNodeToAppendKeyframeElement(element);
      nodeToAppendKfElm.appendChild(kfElm);
      var specialStyles = packageNonAnimatableStyles(element, keyframes);
      var player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);
      player.onDestroy(function () {
        return removeElement(kfElm);
      });
      return player;
    }
  }]);

  return CssKeyframesDriver;
}();

function findNodeToAppendKeyframeElement(element) {
  var _a;

  var rootNode = (_a = element.getRootNode) === null || _a === void 0 ? void 0 : _a.call(element);

  if (typeof ShadowRoot !== 'undefined' && rootNode instanceof ShadowRoot) {
    return rootNode;
  }

  return document.head;
}

function flattenKeyframesIntoStyles(keyframes) {
  var flatKeyframes = {};

  if (keyframes) {
    var kfs = Array.isArray(keyframes) ? keyframes : [keyframes];
    kfs.forEach(function (kf) {
      Object.keys(kf).forEach(function (prop) {
        if (prop == 'offset' || prop == 'easing') return;
        flatKeyframes[prop] = kf[prop];
      });
    });
  }

  return flatKeyframes;
}

function removeElement(node) {
  node.parentNode.removeChild(node);
}

var warningIssued = false;

function notifyFaultyScrubber() {
  if (warningIssued) return;
  console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n', '  visit https://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');
  warningIssued = true;
}

var WebAnimationsPlayer = /*#__PURE__*/function () {
  function WebAnimationsPlayer(element, keyframes, options, _specialStyles) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, WebAnimationsPlayer);

    this.element = element;
    this.keyframes = keyframes;
    this.options = options;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._initialized = false;
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this.time = 0;
    this.parentPlayer = null;
    this.currentSnapshot = {};
    this._duration = options['duration'];
    this._delay = options['delay'] || 0;
    this.time = this._duration + this._delay;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(WebAnimationsPlayer, [{
    key: "_onFinish",
    value: function _onFinish() {
      if (!this._finished) {
        this._finished = true;

        this._onDoneFns.forEach(function (fn) {
          return fn();
        });

        this._onDoneFns = [];
      }
    }
  }, {
    key: "init",
    value: function init() {
      this._buildPlayer();

      this._preparePlayerBeforeStart();
    }
  }, {
    key: "_buildPlayer",
    value: function _buildPlayer() {
      var _this46 = this;

      if (this._initialized) return;
      this._initialized = true;
      var keyframes = this.keyframes;
      this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
      this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
      this.domPlayer.addEventListener('finish', function () {
        return _this46._onFinish();
      });
    }
  }, {
    key: "_preparePlayerBeforeStart",
    value: function _preparePlayerBeforeStart() {
      // this is required so that the player doesn't start to animate right away
      if (this._delay) {
        this._resetDomPlayerState();
      } else {
        this.domPlayer.pause();
      }
    }
    /** @internal */

  }, {
    key: "_triggerWebAnimation",
    value: function _triggerWebAnimation(element, keyframes, options) {
      // jscompiler doesn't seem to know animate is a native property because it's not fully
      // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
      return element['animate'](keyframes, options);
    }
  }, {
    key: "onStart",
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
  }, {
    key: "play",
    value: function play() {
      this._buildPlayer();

      if (!this.hasStarted()) {
        this._onStartFns.forEach(function (fn) {
          return fn();
        });

        this._onStartFns = [];
        this._started = true;

        if (this._specialStyles) {
          this._specialStyles.start();
        }
      }

      this.domPlayer.play();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.init();
      this.domPlayer.pause();
    }
  }, {
    key: "finish",
    value: function finish() {
      this.init();

      if (this._specialStyles) {
        this._specialStyles.finish();
      }

      this._onFinish();

      this.domPlayer.finish();
    }
  }, {
    key: "reset",
    value: function reset() {
      this._resetDomPlayerState();

      this._destroyed = false;
      this._finished = false;
      this._started = false;
    }
  }, {
    key: "_resetDomPlayerState",
    value: function _resetDomPlayerState() {
      if (this.domPlayer) {
        this.domPlayer.cancel();
      }
    }
  }, {
    key: "restart",
    value: function restart() {
      this.reset();
      this.play();
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this._started;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (!this._destroyed) {
        this._destroyed = true;

        this._resetDomPlayerState();

        this._onFinish();

        if (this._specialStyles) {
          this._specialStyles.destroy();
        }

        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });

        this._onDestroyFns = [];
      }
    }
  }, {
    key: "setPosition",
    value: function setPosition(p) {
      if (this.domPlayer === undefined) {
        this.init();
      }

      this.domPlayer.currentTime = p * this.time;
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return this.domPlayer.currentTime / this.time;
    }
  }, {
    key: "totalTime",
    get: function get() {
      return this._delay + this._duration;
    }
  }, {
    key: "beforeDestroy",
    value: function beforeDestroy() {
      var _this47 = this;

      var styles = {};

      if (this.hasStarted()) {
        Object.keys(this._finalKeyframe).forEach(function (prop) {
          if (prop != 'offset') {
            styles[prop] = _this47._finished ? _this47._finalKeyframe[prop] : computeStyle(_this47.element, prop);
          }
        });
      }

      this.currentSnapshot = styles;
    }
    /** @internal */

  }, {
    key: "triggerCallback",
    value: function triggerCallback(phaseName) {
      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
      methods.forEach(function (fn) {
        return fn();
      });
      methods.length = 0;
    }
  }]);

  return WebAnimationsPlayer;
}();

var WebAnimationsDriver = /*#__PURE__*/function () {
  function WebAnimationsDriver() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, WebAnimationsDriver);

    this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(getElementAnimateFn().toString());
    this._cssKeyframesDriver = new CssKeyframesDriver();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_8__.default)(WebAnimationsDriver, [{
    key: "validateStyleProperty",
    value: function validateStyleProperty(prop) {
      return _validateStyleProperty(prop);
    }
  }, {
    key: "matchesElement",
    value: function matchesElement(element, selector) {
      return _matchesElement(element, selector);
    }
  }, {
    key: "containsElement",
    value: function containsElement(elm1, elm2) {
      return _containsElement(elm1, elm2);
    }
  }, {
    key: "query",
    value: function query(element, selector, multi) {
      return invokeQuery(element, selector, multi);
    }
  }, {
    key: "computeStyle",
    value: function computeStyle(element, prop, defaultValue) {
      return window.getComputedStyle(element)[prop];
    }
  }, {
    key: "overrideWebAnimationsSupport",
    value: function overrideWebAnimationsSupport(supported) {
      this._isNativeImpl = supported;
    }
  }, {
    key: "animate",
    value: function animate(element, keyframes, duration, delay, easing) {
      var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
      var scrubberAccessRequested = arguments.length > 6 ? arguments[6] : undefined;
      var useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;

      if (useKeyframes) {
        return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);
      }

      var fill = delay == 0 ? 'both' : 'forwards';
      var playerOptions = {
        duration: duration,
        delay: delay,
        fill: fill
      }; // we check for this to avoid having a null|undefined value be present
      // for the easing (which results in an error for certain browsers #9752)

      if (easing) {
        playerOptions['easing'] = easing;
      }

      var previousStyles = {};
      var previousWebAnimationPlayers = previousPlayers.filter(function (player) {
        return player instanceof WebAnimationsPlayer;
      });

      if (allowPreviousPlayerStylesMerge(duration, delay)) {
        previousWebAnimationPlayers.forEach(function (player) {
          var styles = player.currentSnapshot;
          Object.keys(styles).forEach(function (prop) {
            return previousStyles[prop] = styles[prop];
          });
        });
      }

      keyframes = keyframes.map(function (styles) {
        return copyStyles(styles, false);
      });
      keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
      var specialStyles = packageNonAnimatableStyles(element, keyframes);
      return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
    }
  }]);

  return WebAnimationsDriver;
}();

function supportsWebAnimations() {
  return typeof getElementAnimateFn() === 'function';
}

function getElementAnimateFn() {
  return isBrowser() && Element.prototype['animate'] || {};
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 65897:
/*!****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/bidi.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BidiModule": function() { return /* binding */ BidiModule; },
/* harmony export */   "DIR_DOCUMENT": function() { return /* binding */ DIR_DOCUMENT; },
/* harmony export */   "Dir": function() { return /* binding */ Dir; },
/* harmony export */   "Directionality": function() { return /* binding */ Directionality; },
/* harmony export */   "ɵangular_material_src_cdk_bidi_bidi_a": function() { return /* binding */ DIR_DOCUMENT_FACTORY; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 40093);





/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection token used to inject the document into Directionality.
 * This is used so that the value can be faked in tests.
 *
 * We can't use the real document in tests because changing the real `dir` causes geometry-based
 * tests in Safari to fail.
 *
 * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
 * themselves use things like `querySelector` in test code.
 *
 * This token is defined in a separate file from Directionality as a workaround for
 * https://github.com/angular/angular/issues/22559
 *
 * @docs-private
 */


var DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.InjectionToken('cdk-dir-doc', {
  providedIn: 'root',
  factory: DIR_DOCUMENT_FACTORY
});
/** @docs-private */

function DIR_DOCUMENT_FACTORY() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The directionality (LTR / RTL) context for the application (or a subtree of it).
 * Exposes the current direction and a stream of direction changes.
 */


var Directionality = /*#__PURE__*/function () {
  function Directionality(_document) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Directionality);

    /** The current 'ltr' or 'rtl' value. */
    this.value = 'ltr';
    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */

    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();

    if (_document) {
      // TODO: handle 'auto' value -
      // We still need to account for dir="auto".
      // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
      // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
      var bodyDir = _document.body ? _document.body.dir : null;
      var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
      var value = bodyDir || htmlDir;
      this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Directionality, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.change.complete();
    }
  }]);

  return Directionality;
}();

Directionality.ɵfac = function Directionality_Factory(t) {
  return new (t || Directionality)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](DIR_DOCUMENT, 8));
};

Directionality.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  factory: function Directionality_Factory() {
    return new Directionality(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](DIR_DOCUMENT, 8));
  },
  token: Directionality,
  providedIn: "root"
});

Directionality.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
      args: [DIR_DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](Directionality, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
        args: [DIR_DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Directive to listen for changes of direction of part of the DOM.
 *
 * Provides itself as Directionality such that descendant directives only need to ever inject
 * Directionality to get the closest direction.
 */


var Dir = /*#__PURE__*/function () {
  function Dir() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Dir);

    /** Normalized direction that accounts for invalid/unsupported values. */
    this._dir = 'ltr';
    /** Whether the `value` has been set to its initial value. */

    this._isInitialized = false;
    /** Event emitted when the direction changes. */

    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
  }
  /** @docs-private */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Dir, [{
    key: "dir",
    get: function get() {
      return this._dir;
    },
    set: function set(value) {
      var old = this._dir;
      var normalizedValue = value ? value.toLowerCase() : value;
      this._rawDir = value;
      this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';

      if (old !== this._dir && this._isInitialized) {
        this.change.emit(this._dir);
      }
    }
    /** Current layout direction of the element. */

  }, {
    key: "value",
    get: function get() {
      return this.dir;
    }
    /** Initialize once default value has been set. */

  }, {
    key: "ngAfterContentInit",
    value: function ngAfterContentInit() {
      this._isInitialized = true;
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.change.complete();
    }
  }]);

  return Dir;
}();

Dir.ɵfac = function Dir_Factory(t) {
  return new (t || Dir)();
};

Dir.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineDirective"]({
  type: Dir,
  selectors: [["", "dir", ""]],
  hostVars: 1,
  hostBindings: function Dir_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("dir", ctx._rawDir);
    }
  },
  inputs: {
    dir: "dir"
  },
  outputs: {
    change: "dirChange"
  },
  exportAs: ["dir"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([{
    provide: Directionality,
    useExisting: Dir
  }])]
});
Dir.propDecorators = {
  change: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output,
    args: ['dirChange']
  }],
  dir: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](Dir, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Directive,
    args: [{
      selector: '[dir]',
      providers: [{
        provide: Directionality,
        useExisting: Dir
      }],
      host: {
        '[attr.dir]': '_rawDir'
      },
      exportAs: 'dir'
    }]
  }], function () {
    return [];
  }, {
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output,
      args: ['dirChange']
    }],
    dir: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var BidiModule = function BidiModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, BidiModule);
};

BidiModule.ɵfac = function BidiModule_Factory(t) {
  return new (t || BidiModule)();
};

BidiModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
  type: BidiModule
});
BidiModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](BidiModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
    args: [{
      exports: [Dir],
      declarations: [Dir]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](BidiModule, {
    declarations: [Dir],
    exports: [Dir]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 20657:
/*!********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/coercion.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_isNumberValue": function() { return /* binding */ _isNumberValue; },
/* harmony export */   "coerceArray": function() { return /* binding */ coerceArray; },
/* harmony export */   "coerceBooleanProperty": function() { return /* binding */ coerceBooleanProperty; },
/* harmony export */   "coerceCssPixelValue": function() { return /* binding */ coerceCssPixelValue; },
/* harmony export */   "coerceElement": function() { return /* binding */ coerceElement; },
/* harmony export */   "coerceNumberProperty": function() { return /* binding */ coerceNumberProperty; },
/* harmony export */   "coerceStringArray": function() { return /* binding */ coerceStringArray; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 91477);


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Coerces a data-bound value (typically a string) to a boolean. */

function coerceBooleanProperty(value) {
  return value != null && "".concat(value) !== 'false';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function coerceNumberProperty(value) {
  var fallbackValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return _isNumberValue(value) ? Number(value) : fallbackValue;
}
/**
 * Whether the provided value is considered a number.
 * @docs-private
 */


function _isNumberValue(value) {
  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
  // and other non-number values as NaN, where Number just uses 0) but it considers the string
  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
  return !isNaN(parseFloat(value)) && !isNaN(Number(value));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function coerceArray(value) {
  return Array.isArray(value) ? value : [value];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Coerces a value to a CSS pixel value. */


function coerceCssPixelValue(value) {
  if (value == null) {
    return '';
  }

  return typeof value === 'string' ? value : "".concat(value, "px");
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Coerces an ElementRef or an Element into an element.
 * Useful for APIs that can accept either a ref or the native element itself.
 */


function coerceElement(elementOrRef) {
  return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef ? elementOrRef.nativeElement : elementOrRef;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Coerces a value to an array of trimmed non-empty strings.
 * Any input that is not an array, `null` or `undefined` will be turned into a string
 * via `toString()` and subsequently split with the given separator.
 * `null` and `undefined` will result in an empty array.
 * This results in the following outcomes:
 * - `null` -&gt; `[]`
 * - `[null]` -&gt; `["null"]`
 * - `["a", "b ", " "]` -&gt; `["a", "b"]`
 * - `[1, [2, 3]]` -&gt; `["1", "2,3"]`
 * - `[{ a: 0 }]` -&gt; `["[object Object]"]`
 * - `{ a: 0 }` -&gt; `["[object", "Object]"]`
 *
 * Useful for defining CSS classes or table columns.
 * @param value the value to coerce into an array of strings
 * @param separator split-separator if value isn't an array
 */


function coerceStringArray(value) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\s+/;
  var result = [];

  if (value != null) {
    var sourceValues = Array.isArray(value) ? value : "".concat(value).split(separator);

    var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__.default)(sourceValues),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var sourceValue = _step.value;
        var trimmedString = "".concat(sourceValue).trim();

        if (trimmedString) {
          result.push(trimmedString);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */




/***/ }),

/***/ 80198:
/*!***********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/collections.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrayDataSource": function() { return /* binding */ ArrayDataSource; },
/* harmony export */   "DataSource": function() { return /* binding */ DataSource; },
/* harmony export */   "SelectionModel": function() { return /* binding */ SelectionModel; },
/* harmony export */   "UniqueSelectionDispatcher": function() { return /* binding */ UniqueSelectionDispatcher; },
/* harmony export */   "_DisposeViewRepeaterStrategy": function() { return /* binding */ _DisposeViewRepeaterStrategy; },
/* harmony export */   "_RecycleViewRepeaterStrategy": function() { return /* binding */ _RecycleViewRepeaterStrategy; },
/* harmony export */   "_VIEW_REPEATER_STRATEGY": function() { return /* binding */ _VIEW_REPEATER_STRATEGY; },
/* harmony export */   "getMultipleValuesInSingleSelectionError": function() { return /* binding */ getMultipleValuesInSingleSelectionError; },
/* harmony export */   "isDataSource": function() { return /* binding */ isDataSource; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 64674);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 81134);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 91477);








/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var DataSource = function DataSource() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, DataSource);
};
/** Checks whether an object is a data source. */


function isDataSource(value) {
  // Check if the value is a DataSource by observing if it has a connect function. Cannot
  // be checked as an `instanceof DataSource` since people could create their own sources
  // that match the interface, but don't extend DataSource.
  return value && typeof value.connect === 'function';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** DataSource wrapper for a native array. */


var ArrayDataSource = /*#__PURE__*/function (_DataSource) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(ArrayDataSource, _DataSource);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(ArrayDataSource);

  function ArrayDataSource(_data) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, ArrayDataSource);

    _this = _super.call(this);
    _this._data = _data;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(ArrayDataSource, [{
    key: "connect",
    value: function connect() {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.isObservable)(this._data) ? this._data : (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(this._data);
    }
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }]);

  return ArrayDataSource;
}(DataSource);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A repeater that destroys views when they are removed from a
 * {@link ViewContainerRef}. When new items are inserted into the container,
 * the repeater will always construct a new embedded view for each item.
 *
 * @template T The type for the embedded view's $implicit property.
 * @template R The type for the item in each IterableDiffer change record.
 * @template C The type for the context passed to each embedded view.
 */


var _DisposeViewRepeaterStrategy = /*#__PURE__*/function () {
  function _DisposeViewRepeaterStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, _DisposeViewRepeaterStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(_DisposeViewRepeaterStrategy, [{
    key: "applyChanges",
    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {
        var view;
        var operation;

        if (record.previousIndex == null) {
          var insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);
          view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);
          operation = 1
          /* INSERTED */
          ;
        } else if (currentIndex == null) {
          viewContainerRef.remove(adjustedPreviousIndex);
          operation = 3
          /* REMOVED */
          ;
        } else {
          view = viewContainerRef.get(adjustedPreviousIndex);
          viewContainerRef.move(view, currentIndex);
          operation = 2
          /* MOVED */
          ;
        }

        if (itemViewChanged) {
          itemViewChanged({
            context: view === null || view === void 0 ? void 0 : view.context,
            operation: operation,
            record: record
          });
        }
      });
    }
  }, {
    key: "detach",
    value: function detach() {}
  }]);

  return _DisposeViewRepeaterStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A repeater that caches views when they are removed from a
 * {@link ViewContainerRef}. When new items are inserted into the container,
 * the repeater will reuse one of the cached views instead of creating a new
 * embedded view. Recycling cached views reduces the quantity of expensive DOM
 * inserts.
 *
 * @template T The type for the embedded view's $implicit property.
 * @template R The type for the item in each IterableDiffer change record.
 * @template C The type for the context passed to each embedded view.
 */


var _RecycleViewRepeaterStrategy = /*#__PURE__*/function () {
  function _RecycleViewRepeaterStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, _RecycleViewRepeaterStrategy);

    /**
     * The size of the cache used to store unused views.
     * Setting the cache size to `0` will disable caching. Defaults to 20 views.
     */
    this.viewCacheSize = 20;
    /**
     * View cache that stores embedded view instances that have been previously stamped out,
     * but don't are not currently rendered. The view repeater will reuse these views rather than
     * creating brand new ones.
     *
     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.
     */

    this._viewCache = [];
  }
  /** Apply changes to the DOM. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(_RecycleViewRepeaterStrategy, [{
    key: "applyChanges",
    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
      var _this2 = this;

      // Rearrange the views to put them in the right location.
      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {
        var view;
        var operation;

        if (record.previousIndex == null) {
          // Item added.
          var viewArgsFactory = function viewArgsFactory() {
            return itemContextFactory(record, adjustedPreviousIndex, currentIndex);
          };

          view = _this2._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));
          operation = view ? 1
          /* INSERTED */
          : 0
          /* REPLACED */
          ;
        } else if (currentIndex == null) {
          // Item removed.
          _this2._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);

          operation = 3
          /* REMOVED */
          ;
        } else {
          // Item moved.
          view = _this2._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));
          operation = 2
          /* MOVED */
          ;
        }

        if (itemViewChanged) {
          itemViewChanged({
            context: view === null || view === void 0 ? void 0 : view.context,
            operation: operation,
            record: record
          });
        }
      });
    }
  }, {
    key: "detach",
    value: function detach() {
      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__.default)(this._viewCache),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var view = _step.value;
          view.destroy();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this._viewCache = [];
    }
    /**
     * Inserts a view for a new item, either from the cache or by creating a new
     * one. Returns `undefined` if the item was inserted into a cached view.
     */

  }, {
    key: "_insertView",
    value: function _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {
      var cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);

      if (cachedView) {
        cachedView.context.$implicit = value;
        return undefined;
      }

      var viewArgs = viewArgsFactory();
      return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);
    }
    /** Detaches the view at the given index and inserts into the view cache. */

  }, {
    key: "_detachAndCacheView",
    value: function _detachAndCacheView(index, viewContainerRef) {
      var detachedView = viewContainerRef.detach(index);

      this._maybeCacheView(detachedView, viewContainerRef);
    }
    /** Moves view at the previous index to the current index. */

  }, {
    key: "_moveView",
    value: function _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {
      var view = viewContainerRef.get(adjustedPreviousIndex);
      viewContainerRef.move(view, currentIndex);
      view.context.$implicit = value;
      return view;
    }
    /**
     * Cache the given detached view. If the cache is full, the view will be
     * destroyed.
     */

  }, {
    key: "_maybeCacheView",
    value: function _maybeCacheView(view, viewContainerRef) {
      if (this._viewCache.length < this.viewCacheSize) {
        this._viewCache.push(view);
      } else {
        var index = viewContainerRef.indexOf(view); // The host component could remove views from the container outside of
        // the view repeater. It's unlikely this will occur, but just in case,
        // destroy the view on its own, otherwise destroy it through the
        // container to ensure that all the references are removed.

        if (index === -1) {
          view.destroy();
        } else {
          viewContainerRef.remove(index);
        }
      }
    }
    /** Inserts a recycled view from the cache at the given index. */

  }, {
    key: "_insertViewFromCache",
    value: function _insertViewFromCache(index, viewContainerRef) {
      var cachedView = this._viewCache.pop();

      if (cachedView) {
        viewContainerRef.insert(cachedView, index);
      }

      return cachedView || null;
    }
  }]);

  return _RecycleViewRepeaterStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Class to be used to power selecting one or more options from a list.
 */


var SelectionModel = /*#__PURE__*/function () {
  function SelectionModel() {
    var _this3 = this;

    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;

    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SelectionModel);

    this._multiple = _multiple;
    this._emitChanges = _emitChanges;
    /** Currently-selected values. */

    this._selection = new Set();
    /** Keeps track of the deselected options that haven't been emitted by the change event. */

    this._deselectedToEmit = [];
    /** Keeps track of the selected options that haven't been emitted by the change event. */

    this._selectedToEmit = [];
    /** Event emitted when the value has changed. */

    this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();

    if (initiallySelectedValues && initiallySelectedValues.length) {
      if (_multiple) {
        initiallySelectedValues.forEach(function (value) {
          return _this3._markSelected(value);
        });
      } else {
        this._markSelected(initiallySelectedValues[0]);
      } // Clear the array in order to avoid firing the change event for preselected values.


      this._selectedToEmit.length = 0;
    }
  }
  /** Selected values. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(SelectionModel, [{
    key: "selected",
    get: function get() {
      if (!this._selected) {
        this._selected = Array.from(this._selection.values());
      }

      return this._selected;
    }
    /**
     * Selects a value or an array of values.
     */

  }, {
    key: "select",
    value: function select() {
      var _this4 = this;

      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      this._verifyValueAssignment(values);

      values.forEach(function (value) {
        return _this4._markSelected(value);
      });

      this._emitChangeEvent();
    }
    /**
     * Deselects a value or an array of values.
     */

  }, {
    key: "deselect",
    value: function deselect() {
      var _this5 = this;

      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      this._verifyValueAssignment(values);

      values.forEach(function (value) {
        return _this5._unmarkSelected(value);
      });

      this._emitChangeEvent();
    }
    /**
     * Toggles a value between selected and deselected.
     */

  }, {
    key: "toggle",
    value: function toggle(value) {
      this.isSelected(value) ? this.deselect(value) : this.select(value);
    }
    /**
     * Clears all of the selected values.
     */

  }, {
    key: "clear",
    value: function clear() {
      this._unmarkAll();

      this._emitChangeEvent();
    }
    /**
     * Determines whether a value is selected.
     */

  }, {
    key: "isSelected",
    value: function isSelected(value) {
      return this._selection.has(value);
    }
    /**
     * Determines whether the model does not have a value.
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this._selection.size === 0;
    }
    /**
     * Determines whether the model has a value.
     */

  }, {
    key: "hasValue",
    value: function hasValue() {
      return !this.isEmpty();
    }
    /**
     * Sorts the selected values based on a predicate function.
     */

  }, {
    key: "sort",
    value: function sort(predicate) {
      if (this._multiple && this.selected) {
        this._selected.sort(predicate);
      }
    }
    /**
     * Gets whether multiple values can be selected.
     */

  }, {
    key: "isMultipleSelection",
    value: function isMultipleSelection() {
      return this._multiple;
    }
    /** Emits a change event and clears the records of selected and deselected values. */

  }, {
    key: "_emitChangeEvent",
    value: function _emitChangeEvent() {
      // Clear the selected values so they can be re-cached.
      this._selected = null;

      if (this._selectedToEmit.length || this._deselectedToEmit.length) {
        this.changed.next({
          source: this,
          added: this._selectedToEmit,
          removed: this._deselectedToEmit
        });
        this._deselectedToEmit = [];
        this._selectedToEmit = [];
      }
    }
    /** Selects a value. */

  }, {
    key: "_markSelected",
    value: function _markSelected(value) {
      if (!this.isSelected(value)) {
        if (!this._multiple) {
          this._unmarkAll();
        }

        this._selection.add(value);

        if (this._emitChanges) {
          this._selectedToEmit.push(value);
        }
      }
    }
    /** Deselects a value. */

  }, {
    key: "_unmarkSelected",
    value: function _unmarkSelected(value) {
      if (this.isSelected(value)) {
        this._selection.delete(value);

        if (this._emitChanges) {
          this._deselectedToEmit.push(value);
        }
      }
    }
    /** Clears out the selected values. */

  }, {
    key: "_unmarkAll",
    value: function _unmarkAll() {
      var _this6 = this;

      if (!this.isEmpty()) {
        this._selection.forEach(function (value) {
          return _this6._unmarkSelected(value);
        });
      }
    }
    /**
     * Verifies the value assignment and throws an error if the specified value array is
     * including multiple values while the selection model is not supporting multiple values.
     */

  }, {
    key: "_verifyValueAssignment",
    value: function _verifyValueAssignment(values) {
      if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw getMultipleValuesInSingleSelectionError();
      }
    }
  }]);

  return SelectionModel;
}();
/**
 * Returns an error that reports that multiple values are passed into a selection model
 * with a single value.
 * @docs-private
 */


function getMultipleValuesInSingleSelectionError() {
  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Class to coordinate unique selection based on name.
 * Intended to be consumed as an Angular service.
 * This service is needed because native radio change events are only fired on the item currently
 * being selected, and we still need to uncheck the previous selection.
 *
 * This service does not *store* any IDs and names because they may change at any time, so it is
 * less error-prone if they are simply passed through when the events occur.
 */


var UniqueSelectionDispatcher = /*#__PURE__*/function () {
  function UniqueSelectionDispatcher() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, UniqueSelectionDispatcher);

    this._listeners = [];
  }
  /**
   * Notify other items that selection for the given name has been set.
   * @param id ID of the item.
   * @param name Name of the item.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(UniqueSelectionDispatcher, [{
    key: "notify",
    value: function notify(id, name) {
      var _iterator2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__.default)(this._listeners),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var listener = _step2.value;
          listener(id, name);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    /**
     * Listen for future changes to item selection.
     * @return Function used to deregister listener
     */

  }, {
    key: "listen",
    value: function listen(listener) {
      var _this7 = this;

      this._listeners.push(listener);

      return function () {
        _this7._listeners = _this7._listeners.filter(function (registered) {
          return listener !== registered;
        });
      };
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._listeners = [];
    }
  }]);

  return UniqueSelectionDispatcher;
}();

UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {
  return new (t || UniqueSelectionDispatcher)();
};

UniqueSelectionDispatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  factory: function UniqueSelectionDispatcher_Factory() {
    return new UniqueSelectionDispatcher();
  },
  token: UniqueSelectionDispatcher,
  providedIn: "root"
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](UniqueSelectionDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.
 * @docs-private
 */


var _VIEW_REPEATER_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('_ViewRepeater');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 47193:
/*!********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/keycodes.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": function() { return /* binding */ A; },
/* harmony export */   "ALT": function() { return /* binding */ ALT; },
/* harmony export */   "APOSTROPHE": function() { return /* binding */ APOSTROPHE; },
/* harmony export */   "AT_SIGN": function() { return /* binding */ AT_SIGN; },
/* harmony export */   "B": function() { return /* binding */ B; },
/* harmony export */   "BACKSLASH": function() { return /* binding */ BACKSLASH; },
/* harmony export */   "BACKSPACE": function() { return /* binding */ BACKSPACE; },
/* harmony export */   "C": function() { return /* binding */ C; },
/* harmony export */   "CAPS_LOCK": function() { return /* binding */ CAPS_LOCK; },
/* harmony export */   "CLOSE_SQUARE_BRACKET": function() { return /* binding */ CLOSE_SQUARE_BRACKET; },
/* harmony export */   "COMMA": function() { return /* binding */ COMMA; },
/* harmony export */   "CONTEXT_MENU": function() { return /* binding */ CONTEXT_MENU; },
/* harmony export */   "CONTROL": function() { return /* binding */ CONTROL; },
/* harmony export */   "D": function() { return /* binding */ D; },
/* harmony export */   "DASH": function() { return /* binding */ DASH; },
/* harmony export */   "DELETE": function() { return /* binding */ DELETE; },
/* harmony export */   "DOWN_ARROW": function() { return /* binding */ DOWN_ARROW; },
/* harmony export */   "E": function() { return /* binding */ E; },
/* harmony export */   "EIGHT": function() { return /* binding */ EIGHT; },
/* harmony export */   "END": function() { return /* binding */ END; },
/* harmony export */   "ENTER": function() { return /* binding */ ENTER; },
/* harmony export */   "EQUALS": function() { return /* binding */ EQUALS; },
/* harmony export */   "ESCAPE": function() { return /* binding */ ESCAPE; },
/* harmony export */   "F": function() { return /* binding */ F; },
/* harmony export */   "F1": function() { return /* binding */ F1; },
/* harmony export */   "F10": function() { return /* binding */ F10; },
/* harmony export */   "F11": function() { return /* binding */ F11; },
/* harmony export */   "F12": function() { return /* binding */ F12; },
/* harmony export */   "F2": function() { return /* binding */ F2; },
/* harmony export */   "F3": function() { return /* binding */ F3; },
/* harmony export */   "F4": function() { return /* binding */ F4; },
/* harmony export */   "F5": function() { return /* binding */ F5; },
/* harmony export */   "F6": function() { return /* binding */ F6; },
/* harmony export */   "F7": function() { return /* binding */ F7; },
/* harmony export */   "F8": function() { return /* binding */ F8; },
/* harmony export */   "F9": function() { return /* binding */ F9; },
/* harmony export */   "FF_EQUALS": function() { return /* binding */ FF_EQUALS; },
/* harmony export */   "FF_MINUS": function() { return /* binding */ FF_MINUS; },
/* harmony export */   "FF_MUTE": function() { return /* binding */ FF_MUTE; },
/* harmony export */   "FF_SEMICOLON": function() { return /* binding */ FF_SEMICOLON; },
/* harmony export */   "FF_VOLUME_DOWN": function() { return /* binding */ FF_VOLUME_DOWN; },
/* harmony export */   "FF_VOLUME_UP": function() { return /* binding */ FF_VOLUME_UP; },
/* harmony export */   "FIRST_MEDIA": function() { return /* binding */ FIRST_MEDIA; },
/* harmony export */   "FIVE": function() { return /* binding */ FIVE; },
/* harmony export */   "FOUR": function() { return /* binding */ FOUR; },
/* harmony export */   "G": function() { return /* binding */ G; },
/* harmony export */   "H": function() { return /* binding */ H; },
/* harmony export */   "HOME": function() { return /* binding */ HOME; },
/* harmony export */   "I": function() { return /* binding */ I; },
/* harmony export */   "INSERT": function() { return /* binding */ INSERT; },
/* harmony export */   "J": function() { return /* binding */ J; },
/* harmony export */   "K": function() { return /* binding */ K; },
/* harmony export */   "L": function() { return /* binding */ L; },
/* harmony export */   "LAST_MEDIA": function() { return /* binding */ LAST_MEDIA; },
/* harmony export */   "LEFT_ARROW": function() { return /* binding */ LEFT_ARROW; },
/* harmony export */   "M": function() { return /* binding */ M; },
/* harmony export */   "MAC_ENTER": function() { return /* binding */ MAC_ENTER; },
/* harmony export */   "MAC_META": function() { return /* binding */ MAC_META; },
/* harmony export */   "MAC_WK_CMD_LEFT": function() { return /* binding */ MAC_WK_CMD_LEFT; },
/* harmony export */   "MAC_WK_CMD_RIGHT": function() { return /* binding */ MAC_WK_CMD_RIGHT; },
/* harmony export */   "META": function() { return /* binding */ META; },
/* harmony export */   "MUTE": function() { return /* binding */ MUTE; },
/* harmony export */   "N": function() { return /* binding */ N; },
/* harmony export */   "NINE": function() { return /* binding */ NINE; },
/* harmony export */   "NUMPAD_DIVIDE": function() { return /* binding */ NUMPAD_DIVIDE; },
/* harmony export */   "NUMPAD_EIGHT": function() { return /* binding */ NUMPAD_EIGHT; },
/* harmony export */   "NUMPAD_FIVE": function() { return /* binding */ NUMPAD_FIVE; },
/* harmony export */   "NUMPAD_FOUR": function() { return /* binding */ NUMPAD_FOUR; },
/* harmony export */   "NUMPAD_MINUS": function() { return /* binding */ NUMPAD_MINUS; },
/* harmony export */   "NUMPAD_MULTIPLY": function() { return /* binding */ NUMPAD_MULTIPLY; },
/* harmony export */   "NUMPAD_NINE": function() { return /* binding */ NUMPAD_NINE; },
/* harmony export */   "NUMPAD_ONE": function() { return /* binding */ NUMPAD_ONE; },
/* harmony export */   "NUMPAD_PERIOD": function() { return /* binding */ NUMPAD_PERIOD; },
/* harmony export */   "NUMPAD_PLUS": function() { return /* binding */ NUMPAD_PLUS; },
/* harmony export */   "NUMPAD_SEVEN": function() { return /* binding */ NUMPAD_SEVEN; },
/* harmony export */   "NUMPAD_SIX": function() { return /* binding */ NUMPAD_SIX; },
/* harmony export */   "NUMPAD_THREE": function() { return /* binding */ NUMPAD_THREE; },
/* harmony export */   "NUMPAD_TWO": function() { return /* binding */ NUMPAD_TWO; },
/* harmony export */   "NUMPAD_ZERO": function() { return /* binding */ NUMPAD_ZERO; },
/* harmony export */   "NUM_CENTER": function() { return /* binding */ NUM_CENTER; },
/* harmony export */   "NUM_LOCK": function() { return /* binding */ NUM_LOCK; },
/* harmony export */   "O": function() { return /* binding */ O; },
/* harmony export */   "ONE": function() { return /* binding */ ONE; },
/* harmony export */   "OPEN_SQUARE_BRACKET": function() { return /* binding */ OPEN_SQUARE_BRACKET; },
/* harmony export */   "P": function() { return /* binding */ P; },
/* harmony export */   "PAGE_DOWN": function() { return /* binding */ PAGE_DOWN; },
/* harmony export */   "PAGE_UP": function() { return /* binding */ PAGE_UP; },
/* harmony export */   "PAUSE": function() { return /* binding */ PAUSE; },
/* harmony export */   "PERIOD": function() { return /* binding */ PERIOD; },
/* harmony export */   "PLUS_SIGN": function() { return /* binding */ PLUS_SIGN; },
/* harmony export */   "PRINT_SCREEN": function() { return /* binding */ PRINT_SCREEN; },
/* harmony export */   "Q": function() { return /* binding */ Q; },
/* harmony export */   "QUESTION_MARK": function() { return /* binding */ QUESTION_MARK; },
/* harmony export */   "R": function() { return /* binding */ R; },
/* harmony export */   "RIGHT_ARROW": function() { return /* binding */ RIGHT_ARROW; },
/* harmony export */   "S": function() { return /* binding */ S; },
/* harmony export */   "SCROLL_LOCK": function() { return /* binding */ SCROLL_LOCK; },
/* harmony export */   "SEMICOLON": function() { return /* binding */ SEMICOLON; },
/* harmony export */   "SEVEN": function() { return /* binding */ SEVEN; },
/* harmony export */   "SHIFT": function() { return /* binding */ SHIFT; },
/* harmony export */   "SINGLE_QUOTE": function() { return /* binding */ SINGLE_QUOTE; },
/* harmony export */   "SIX": function() { return /* binding */ SIX; },
/* harmony export */   "SLASH": function() { return /* binding */ SLASH; },
/* harmony export */   "SPACE": function() { return /* binding */ SPACE; },
/* harmony export */   "T": function() { return /* binding */ T; },
/* harmony export */   "TAB": function() { return /* binding */ TAB; },
/* harmony export */   "THREE": function() { return /* binding */ THREE; },
/* harmony export */   "TILDE": function() { return /* binding */ TILDE; },
/* harmony export */   "TWO": function() { return /* binding */ TWO; },
/* harmony export */   "U": function() { return /* binding */ U; },
/* harmony export */   "UP_ARROW": function() { return /* binding */ UP_ARROW; },
/* harmony export */   "V": function() { return /* binding */ V; },
/* harmony export */   "VOLUME_DOWN": function() { return /* binding */ VOLUME_DOWN; },
/* harmony export */   "VOLUME_UP": function() { return /* binding */ VOLUME_UP; },
/* harmony export */   "W": function() { return /* binding */ W; },
/* harmony export */   "X": function() { return /* binding */ X; },
/* harmony export */   "Y": function() { return /* binding */ Y; },
/* harmony export */   "Z": function() { return /* binding */ Z; },
/* harmony export */   "ZERO": function() { return /* binding */ ZERO; },
/* harmony export */   "hasModifierKey": function() { return /* binding */ hasModifierKey; }
/* harmony export */ });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var MAC_ENTER = 3;
var BACKSPACE = 8;
var TAB = 9;
var NUM_CENTER = 12;
var ENTER = 13;
var SHIFT = 16;
var CONTROL = 17;
var ALT = 18;
var PAUSE = 19;
var CAPS_LOCK = 20;
var ESCAPE = 27;
var SPACE = 32;
var PAGE_UP = 33;
var PAGE_DOWN = 34;
var END = 35;
var HOME = 36;
var LEFT_ARROW = 37;
var UP_ARROW = 38;
var RIGHT_ARROW = 39;
var DOWN_ARROW = 40;
var PLUS_SIGN = 43;
var PRINT_SCREEN = 44;
var INSERT = 45;
var DELETE = 46;
var ZERO = 48;
var ONE = 49;
var TWO = 50;
var THREE = 51;
var FOUR = 52;
var FIVE = 53;
var SIX = 54;
var SEVEN = 55;
var EIGHT = 56;
var NINE = 57;
var FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

var FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

var QUESTION_MARK = 63;
var AT_SIGN = 64;
var A = 65;
var B = 66;
var C = 67;
var D = 68;
var E = 69;
var F = 70;
var G = 71;
var H = 72;
var I = 73;
var J = 74;
var K = 75;
var L = 76;
var M = 77;
var N = 78;
var O = 79;
var P = 80;
var Q = 81;
var R = 82;
var S = 83;
var T = 84;
var U = 85;
var V = 86;
var W = 87;
var X = 88;
var Y = 89;
var Z = 90;
var META = 91; // WIN_KEY_LEFT

var MAC_WK_CMD_LEFT = 91;
var MAC_WK_CMD_RIGHT = 93;
var CONTEXT_MENU = 93;
var NUMPAD_ZERO = 96;
var NUMPAD_ONE = 97;
var NUMPAD_TWO = 98;
var NUMPAD_THREE = 99;
var NUMPAD_FOUR = 100;
var NUMPAD_FIVE = 101;
var NUMPAD_SIX = 102;
var NUMPAD_SEVEN = 103;
var NUMPAD_EIGHT = 104;
var NUMPAD_NINE = 105;
var NUMPAD_MULTIPLY = 106;
var NUMPAD_PLUS = 107;
var NUMPAD_MINUS = 109;
var NUMPAD_PERIOD = 110;
var NUMPAD_DIVIDE = 111;
var F1 = 112;
var F2 = 113;
var F3 = 114;
var F4 = 115;
var F5 = 116;
var F6 = 117;
var F7 = 118;
var F8 = 119;
var F9 = 120;
var F10 = 121;
var F11 = 122;
var F12 = 123;
var NUM_LOCK = 144;
var SCROLL_LOCK = 145;
var FIRST_MEDIA = 166;
var FF_MINUS = 173;
var MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

var VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

var VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

var FF_MUTE = 181;
var FF_VOLUME_DOWN = 182;
var LAST_MEDIA = 183;
var FF_VOLUME_UP = 183;
var SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

var EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

var COMMA = 188;
var DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

var PERIOD = 190;
var SLASH = 191;
var APOSTROPHE = 192;
var TILDE = 192;
var OPEN_SQUARE_BRACKET = 219;
var BACKSLASH = 220;
var CLOSE_SQUARE_BRACKET = 221;
var SINGLE_QUOTE = 222;
var MAC_META = 224;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Checks whether a modifier key is pressed.
 * @param event Event to be checked.
 */

function hasModifierKey(event) {
  for (var _len = arguments.length, modifiers = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    modifiers[_key - 1] = arguments[_key];
  }

  if (modifiers.length) {
    return modifiers.some(function (modifier) {
      return event[modifier];
    });
  }

  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 2897:
/*!*******************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/overlay.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkScrollable": function() { return /* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.CdkScrollable; },
/* harmony export */   "ScrollDispatcher": function() { return /* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollDispatcher; },
/* harmony export */   "ViewportRuler": function() { return /* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler; },
/* harmony export */   "BlockScrollStrategy": function() { return /* binding */ BlockScrollStrategy; },
/* harmony export */   "CdkConnectedOverlay": function() { return /* binding */ CdkConnectedOverlay; },
/* harmony export */   "CdkOverlayOrigin": function() { return /* binding */ CdkOverlayOrigin; },
/* harmony export */   "CloseScrollStrategy": function() { return /* binding */ CloseScrollStrategy; },
/* harmony export */   "ConnectedOverlayPositionChange": function() { return /* binding */ ConnectedOverlayPositionChange; },
/* harmony export */   "ConnectedPositionStrategy": function() { return /* binding */ ConnectedPositionStrategy; },
/* harmony export */   "ConnectionPositionPair": function() { return /* binding */ ConnectionPositionPair; },
/* harmony export */   "FlexibleConnectedPositionStrategy": function() { return /* binding */ FlexibleConnectedPositionStrategy; },
/* harmony export */   "FullscreenOverlayContainer": function() { return /* binding */ FullscreenOverlayContainer; },
/* harmony export */   "GlobalPositionStrategy": function() { return /* binding */ GlobalPositionStrategy; },
/* harmony export */   "NoopScrollStrategy": function() { return /* binding */ NoopScrollStrategy; },
/* harmony export */   "Overlay": function() { return /* binding */ Overlay; },
/* harmony export */   "OverlayConfig": function() { return /* binding */ OverlayConfig; },
/* harmony export */   "OverlayContainer": function() { return /* binding */ OverlayContainer; },
/* harmony export */   "OverlayKeyboardDispatcher": function() { return /* binding */ OverlayKeyboardDispatcher; },
/* harmony export */   "OverlayModule": function() { return /* binding */ OverlayModule; },
/* harmony export */   "OverlayOutsideClickDispatcher": function() { return /* binding */ OverlayOutsideClickDispatcher; },
/* harmony export */   "OverlayPositionBuilder": function() { return /* binding */ OverlayPositionBuilder; },
/* harmony export */   "OverlayRef": function() { return /* binding */ OverlayRef; },
/* harmony export */   "RepositionScrollStrategy": function() { return /* binding */ RepositionScrollStrategy; },
/* harmony export */   "ScrollStrategyOptions": function() { return /* binding */ ScrollStrategyOptions; },
/* harmony export */   "ScrollingVisibility": function() { return /* binding */ ScrollingVisibility; },
/* harmony export */   "validateHorizontalPosition": function() { return /* binding */ validateHorizontalPosition; },
/* harmony export */   "validateVerticalPosition": function() { return /* binding */ validateVerticalPosition; },
/* harmony export */   "ɵangular_material_src_cdk_overlay_overlay_a": function() { return /* binding */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY; },
/* harmony export */   "ɵangular_material_src_cdk_overlay_overlay_b": function() { return /* binding */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY; },
/* harmony export */   "ɵangular_material_src_cdk_overlay_overlay_c": function() { return /* binding */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER; },
/* harmony export */   "ɵangular_material_src_cdk_overlay_overlay_d": function() { return /* binding */ BaseOverlayDispatcher; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/scrolling */ 33715);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/platform */ 34079);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/bidi */ 65897);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/coercion */ 20657);
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/cdk/portal */ 16529);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ 94283);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ 89919);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 53466);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 22663);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ 18511);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/cdk/keycodes */ 47193);




























/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var scrollBehaviorSupported = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.supportsScrollBehavior)();
/**
 * Strategy that will prevent the user from scrolling while the overlay is visible.
 */

var BlockScrollStrategy = /*#__PURE__*/function () {
  function BlockScrollStrategy(_viewportRuler, document) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, BlockScrollStrategy);

    this._viewportRuler = _viewportRuler;
    this._previousHTMLStyles = {
      top: '',
      left: ''
    };
    this._isEnabled = false;
    this._document = document;
  }
  /** Attaches this scroll strategy to an overlay. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(BlockScrollStrategy, [{
    key: "attach",
    value: function attach() {}
    /** Blocks page-level scroll while the attached overlay is open. */

  }, {
    key: "enable",
    value: function enable() {
      if (this._canBeEnabled()) {
        var root = this._document.documentElement;
        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.

        this._previousHTMLStyles.left = root.style.left || '';
        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may
        // have the user agent margin, whereas the `html` is guaranteed not to have one.

        root.style.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(-this._previousScrollPosition.left);
        root.style.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(-this._previousScrollPosition.top);
        root.classList.add('cdk-global-scrollblock');
        this._isEnabled = true;
      }
    }
    /** Unblocks page-level scroll while the attached overlay is open. */

  }, {
    key: "disable",
    value: function disable() {
      if (this._isEnabled) {
        var html = this._document.documentElement;
        var body = this._document.body;
        var htmlStyle = html.style;
        var bodyStyle = body.style;
        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
        this._isEnabled = false;
        htmlStyle.left = this._previousHTMLStyles.left;
        htmlStyle.top = this._previousHTMLStyles.top;
        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
        // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,
        // because it can throw off feature detections in `supportsScrollBehavior` which
        // checks for `'scrollBehavior' in documentElement.style`.

        if (scrollBehaviorSupported) {
          htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
        }

        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);

        if (scrollBehaviorSupported) {
          htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
          bodyStyle.scrollBehavior = previousBodyScrollBehavior;
        }
      }
    }
  }, {
    key: "_canBeEnabled",
    value: function _canBeEnabled() {
      // Since the scroll strategies can't be singletons, we have to use a global CSS class
      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
      // scrolling multiple times.
      var html = this._document.documentElement;

      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
        return false;
      }

      var body = this._document.body;

      var viewport = this._viewportRuler.getViewportSize();

      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
    }
  }]);

  return BlockScrollStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
 */


function getMatScrollStrategyAlreadyAttachedError() {
  return Error("Scroll strategy has already been attached.");
}
/**
 * Strategy that will close the overlay as soon as the user starts scrolling.
 */


var CloseScrollStrategy = /*#__PURE__*/function () {
  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
    var _this = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CloseScrollStrategy);

    this._scrollDispatcher = _scrollDispatcher;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._config = _config;
    this._scrollSubscription = null;
    /** Detaches the overlay ref and disables the scroll strategy. */

    this._detach = function () {
      _this.disable();

      if (_this._overlayRef.hasAttached()) {
        _this._ngZone.run(function () {
          return _this._overlayRef.detach();
        });
      }
    };
  }
  /** Attaches this scroll strategy to an overlay. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CloseScrollStrategy, [{
    key: "attach",
    value: function attach(overlayRef) {
      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw getMatScrollStrategyAlreadyAttachedError();
      }

      this._overlayRef = overlayRef;
    }
    /** Enables the closing of the attached overlay on scroll. */

  }, {
    key: "enable",
    value: function enable() {
      var _this2 = this;

      if (this._scrollSubscription) {
        return;
      }

      var stream = this._scrollDispatcher.scrolled(0);

      if (this._config && this._config.threshold && this._config.threshold > 1) {
        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
        this._scrollSubscription = stream.subscribe(function () {
          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;

          if (Math.abs(scrollPosition - _this2._initialScrollPosition) > _this2._config.threshold) {
            _this2._detach();
          } else {
            _this2._overlayRef.updatePosition();
          }
        });
      } else {
        this._scrollSubscription = stream.subscribe(this._detach);
      }
    }
    /** Disables the closing the attached overlay on scroll. */

  }, {
    key: "disable",
    value: function disable() {
      if (this._scrollSubscription) {
        this._scrollSubscription.unsubscribe();

        this._scrollSubscription = null;
      }
    }
  }, {
    key: "detach",
    value: function detach() {
      this.disable();
      this._overlayRef = null;
    }
  }]);

  return CloseScrollStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Scroll strategy that doesn't do anything. */


var NoopScrollStrategy = /*#__PURE__*/function () {
  function NoopScrollStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, NoopScrollStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(NoopScrollStrategy, [{
    key: "enable",
    value:
    /** Does nothing, as this scroll strategy is a no-op. */
    function enable() {}
    /** Does nothing, as this scroll strategy is a no-op. */

  }, {
    key: "disable",
    value: function disable() {}
    /** Does nothing, as this scroll strategy is a no-op. */

  }, {
    key: "attach",
    value: function attach() {}
  }]);

  return NoopScrollStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO(jelbourn): move this to live with the rest of the scrolling code
// TODO(jelbourn): someday replace this with IntersectionObservers

/**
 * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @returns Whether the element is scrolled out of view
 * @docs-private
 */


function isElementScrolledOutsideView(element, scrollContainers) {
  return scrollContainers.some(function (containerBounds) {
    var outsideAbove = element.bottom < containerBounds.top;
    var outsideBelow = element.top > containerBounds.bottom;
    var outsideLeft = element.right < containerBounds.left;
    var outsideRight = element.left > containerBounds.right;
    return outsideAbove || outsideBelow || outsideLeft || outsideRight;
  });
}
/**
 * Gets whether an element is clipped by any of its scrolling containers.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @returns Whether the element is clipped
 * @docs-private
 */


function isElementClippedByScrolling(element, scrollContainers) {
  return scrollContainers.some(function (scrollContainerRect) {
    var clippedAbove = element.top < scrollContainerRect.top;
    var clippedBelow = element.bottom > scrollContainerRect.bottom;
    var clippedLeft = element.left < scrollContainerRect.left;
    var clippedRight = element.right > scrollContainerRect.right;
    return clippedAbove || clippedBelow || clippedLeft || clippedRight;
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Strategy that will update the element position as the user is scrolling.
 */


var RepositionScrollStrategy = /*#__PURE__*/function () {
  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, RepositionScrollStrategy);

    this._scrollDispatcher = _scrollDispatcher;
    this._viewportRuler = _viewportRuler;
    this._ngZone = _ngZone;
    this._config = _config;
    this._scrollSubscription = null;
  }
  /** Attaches this scroll strategy to an overlay. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(RepositionScrollStrategy, [{
    key: "attach",
    value: function attach(overlayRef) {
      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw getMatScrollStrategyAlreadyAttachedError();
      }

      this._overlayRef = overlayRef;
    }
    /** Enables repositioning of the attached overlay on scroll. */

  }, {
    key: "enable",
    value: function enable() {
      var _this3 = this;

      if (!this._scrollSubscription) {
        var throttle = this._config ? this._config.scrollThrottle : 0;
        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {
          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.


          if (_this3._config && _this3._config.autoClose) {
            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();

            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),
                width = _this3$_viewportRuler.width,
                height = _this3$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once
            // we have a way of exposing the trigger element to the scroll strategy.


            var parentRects = [{
              width: width,
              height: height,
              bottom: height,
              right: width,
              top: 0,
              left: 0
            }];

            if (isElementScrolledOutsideView(overlayRect, parentRects)) {
              _this3.disable();

              _this3._ngZone.run(function () {
                return _this3._overlayRef.detach();
              });
            }
          }
        });
      }
    }
    /** Disables repositioning of the attached overlay on scroll. */

  }, {
    key: "disable",
    value: function disable() {
      if (this._scrollSubscription) {
        this._scrollSubscription.unsubscribe();

        this._scrollSubscription = null;
      }
    }
  }, {
    key: "detach",
    value: function detach() {
      this.disable();
      this._overlayRef = null;
    }
  }]);

  return RepositionScrollStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Options for how an overlay will handle scrolling.
 *
 * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
 * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
 */


var ScrollStrategyOptions = function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {
  var _this4 = this;

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ScrollStrategyOptions);

  this._scrollDispatcher = _scrollDispatcher;
  this._viewportRuler = _viewportRuler;
  this._ngZone = _ngZone;
  /** Do nothing on scroll. */

  this.noop = function () {
    return new NoopScrollStrategy();
  };
  /**
   * Close the overlay as soon as the user scrolls.
   * @param config Configuration to be used inside the scroll strategy.
   */


  this.close = function (config) {
    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);
  };
  /** Block scrolling. */


  this.block = function () {
    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);
  };
  /**
   * Update the overlay's position on scroll.
   * @param config Configuration to be used inside the scroll strategy.
   * Allows debouncing the reposition calls.
   */


  this.reposition = function (config) {
    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);
  };

  this._document = document;
};

ScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {
  return new (t || ScrollStrategyOptions)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
};

ScrollStrategyOptions.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function ScrollStrategyOptions_Factory() {
    return new ScrollStrategyOptions(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
  },
  token: ScrollStrategyOptions,
  providedIn: "root"
});

ScrollStrategyOptions.ctorParameters = function () {
  return [{
    type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollDispatcher
  }, {
    type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](ScrollStrategyOptions, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollDispatcher
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Initial configuration used when creating an overlay. */


var OverlayConfig = function OverlayConfig(config) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayConfig);

  /** Strategy to be used when handling scroll events while the overlay is open. */
  this.scrollStrategy = new NoopScrollStrategy();
  /** Custom class to add to the overlay pane. */

  this.panelClass = '';
  /** Whether the overlay has a backdrop. */

  this.hasBackdrop = false;
  /** Custom class to add to the backdrop */

  this.backdropClass = 'cdk-overlay-dark-backdrop';
  /**
   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
   * Note that this usually doesn't include clicking on links (unless the user is using
   * the `HashLocationStrategy`).
   */

  this.disposeOnNavigation = false;

  if (config) {
    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,
    // loses the array generic type in the `for of`. But we *also* have to use `Array` because
    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`
    var configKeys = Object.keys(config);

    for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {
      var key = _configKeys[_i];

      if (config[key] !== undefined) {
        // TypeScript, as of version 3.5, sees the left-hand-side of this expression
        // as "I don't know *which* key this is, so the only valid value is the intersection
        // of all the posible values." In this case, that happens to be `undefined`. TypeScript
        // is not smart enough to see that the right-hand-side is actually an access of the same
        // exact type with the same exact key, meaning that the value type must be identical.
        // So we use `any` to work around this.
        this[key] = config[key];
      }
    }
  }
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** The points of the origin element and the overlay element to connect. */


var ConnectionPositionPair = function ConnectionPositionPair(origin, overlay,
/** Offset along the X axis. */
offsetX,
/** Offset along the Y axis. */
offsetY,
/** Class(es) to be applied to the panel while this position is active. */
panelClass) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ConnectionPositionPair);

  this.offsetX = offsetX;
  this.offsetY = offsetY;
  this.panelClass = panelClass;
  this.originX = origin.originX;
  this.originY = origin.originY;
  this.overlayX = overlay.overlayX;
  this.overlayY = overlay.overlayY;
};
/**
 * Set of properties regarding the position of the origin and overlay relative to the viewport
 * with respect to the containing Scrollable elements.
 *
 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
 *
 * The overlay and origin are outside view if there is no overlap between their bounding client
 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
 *
 *       -----------                    -----------
 *       | outside |                    | clipped |
 *       |  view   |              --------------------------
 *       |         |              |     |         |        |
 *       ----------               |     -----------        |
 *  --------------------------    |                        |
 *  |                        |    |      Scrollable        |
 *  |                        |    |                        |
 *  |                        |     --------------------------
 *  |      Scrollable        |
 *  |                        |
 *  --------------------------
 *
 *  @docs-private
 */


var ScrollingVisibility = function ScrollingVisibility() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ScrollingVisibility);
};
/** The change event emitted by the strategy when a fallback position is used. */


var ConnectedOverlayPositionChange = function ConnectedOverlayPositionChange(
/** The position used as a result of this change. */
connectionPair,
/** @docs-private */
scrollableViewProperties) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ConnectedOverlayPositionChange);

  this.connectionPair = connectionPair;
  this.scrollableViewProperties = scrollableViewProperties;
};

ConnectedOverlayPositionChange.ctorParameters = function () {
  return [{
    type: ConnectionPositionPair
  }, {
    type: ScrollingVisibility,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Optional
    }]
  }];
};
/**
 * Validates whether a vertical position property matches the expected values.
 * @param property Name of the property being validated.
 * @param value Value of the property being validated.
 * @docs-private
 */


function validateVerticalPosition(property, value) {
  if (value !== 'top' && value !== 'bottom' && value !== 'center') {
    throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"top\", \"bottom\" or \"center\".");
  }
}
/**
 * Validates whether a horizontal position property matches the expected values.
 * @param property Name of the property being validated.
 * @param value Value of the property being validated.
 * @docs-private
 */


function validateHorizontalPosition(property, value) {
  if (value !== 'start' && value !== 'end' && value !== 'center') {
    throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"start\", \"end\" or \"center\".");
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Service for dispatching events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */


var BaseOverlayDispatcher = /*#__PURE__*/function () {
  function BaseOverlayDispatcher(document) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, BaseOverlayDispatcher);

    /** Currently attached overlays in the order they were attached. */
    this._attachedOverlays = [];
    this._document = document;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(BaseOverlayDispatcher, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.detach();
    }
    /** Add a new overlay to the list of attached overlay refs. */

  }, {
    key: "add",
    value: function add(overlayRef) {
      // Ensure that we don't get the same overlay multiple times.
      this.remove(overlayRef);

      this._attachedOverlays.push(overlayRef);
    }
    /** Remove an overlay from the list of attached overlay refs. */

  }, {
    key: "remove",
    value: function remove(overlayRef) {
      var index = this._attachedOverlays.indexOf(overlayRef);

      if (index > -1) {
        this._attachedOverlays.splice(index, 1);
      } // Remove the global listener once there are no more overlays.


      if (this._attachedOverlays.length === 0) {
        this.detach();
      }
    }
  }]);

  return BaseOverlayDispatcher;
}();

BaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {
  return new (t || BaseOverlayDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
};

BaseOverlayDispatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function BaseOverlayDispatcher_Factory() {
    return new BaseOverlayDispatcher(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
  },
  token: BaseOverlayDispatcher,
  providedIn: "root"
});

BaseOverlayDispatcher.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](BaseOverlayDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */


var OverlayKeyboardDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(OverlayKeyboardDispatcher, _BaseOverlayDispatche);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(OverlayKeyboardDispatcher);

  function OverlayKeyboardDispatcher(document) {
    var _this5;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayKeyboardDispatcher);

    _this5 = _super.call(this, document);
    /** Keyboard event listener that will be attached to the body. */

    _this5._keydownListener = function (event) {
      var overlays = _this5._attachedOverlays;

      for (var i = overlays.length - 1; i > -1; i--) {
        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
        // We want to target the most recent overlay, rather than trying to match where the event came
        // from, because some components might open an overlay, but keep focus on a trigger element
        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
        // because we don't want overlays that don't handle keyboard events to block the ones below
        // them that do.
        if (overlays[i]._keydownEvents.observers.length > 0) {
          overlays[i]._keydownEvents.next(event);

          break;
        }
      }
    };

    return _this5;
  }
  /** Add a new overlay to the list of attached overlay refs. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(OverlayKeyboardDispatcher, [{
    key: "add",
    value: function add(overlayRef) {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(OverlayKeyboardDispatcher.prototype), "add", this).call(this, overlayRef); // Lazily start dispatcher once first overlay is added


      if (!this._isAttached) {
        this._document.body.addEventListener('keydown', this._keydownListener);

        this._isAttached = true;
      }
    }
    /** Detaches the global keyboard event listener. */

  }, {
    key: "detach",
    value: function detach() {
      if (this._isAttached) {
        this._document.body.removeEventListener('keydown', this._keydownListener);

        this._isAttached = false;
      }
    }
  }]);

  return OverlayKeyboardDispatcher;
}(BaseOverlayDispatcher);

OverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {
  return new (t || OverlayKeyboardDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
};

OverlayKeyboardDispatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function OverlayKeyboardDispatcher_Factory() {
    return new OverlayKeyboardDispatcher(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
  },
  token: OverlayKeyboardDispatcher,
  providedIn: "root"
});

OverlayKeyboardDispatcher.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](OverlayKeyboardDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Service for dispatching mouse click events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */


var OverlayOutsideClickDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(OverlayOutsideClickDispatcher, _BaseOverlayDispatche2);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(OverlayOutsideClickDispatcher);

  function OverlayOutsideClickDispatcher(document, _platform) {
    var _this6;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayOutsideClickDispatcher);

    _this6 = _super2.call(this, document);
    _this6._platform = _platform;
    _this6._cursorStyleIsSet = false;
    /** Click event listener that will be attached to the body propagate phase. */

    _this6._clickListener = function (event) {
      var target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__._getEventTarget)(event); // We copy the array because the original may be modified asynchronously if the
      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside
      // the for loop.


      var overlays = _this6._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.
      // We want to target all overlays for which the click could be considered as outside click.
      // As soon as we reach an overlay for which the click is not outside click we break off
      // the loop.


      for (var i = overlays.length - 1; i > -1; i--) {
        var overlayRef = overlays[i];

        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {
          continue;
        } // If it's a click inside the overlay, just break - we should do nothing
        // If it's an outside click dispatch the mouse event, and proceed with the next overlay


        if (overlayRef.overlayElement.contains(target)) {
          break;
        }

        overlayRef._outsidePointerEvents.next(event);
      }
    };

    return _this6;
  }
  /** Add a new overlay to the list of attached overlay refs. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(OverlayOutsideClickDispatcher, [{
    key: "add",
    value: function add(overlayRef) {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(OverlayOutsideClickDispatcher.prototype), "add", this).call(this, overlayRef); // Safari on iOS does not generate click events for non-interactive
      // elements. However, we want to receive a click for any element outside
      // the overlay. We can force a "clickable" state by setting
      // `cursor: pointer` on the document body. See:
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile
      // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html


      if (!this._isAttached) {
        var body = this._document.body;
        body.addEventListener('click', this._clickListener, true);
        body.addEventListener('auxclick', this._clickListener, true);
        body.addEventListener('contextmenu', this._clickListener, true); // click event is not fired on iOS. To make element "clickable" we are
        // setting the cursor to pointer

        if (this._platform.IOS && !this._cursorStyleIsSet) {
          this._cursorOriginalValue = body.style.cursor;
          body.style.cursor = 'pointer';
          this._cursorStyleIsSet = true;
        }

        this._isAttached = true;
      }
    }
    /** Detaches the global keyboard event listener. */

  }, {
    key: "detach",
    value: function detach() {
      if (this._isAttached) {
        var body = this._document.body;
        body.removeEventListener('click', this._clickListener, true);
        body.removeEventListener('auxclick', this._clickListener, true);
        body.removeEventListener('contextmenu', this._clickListener, true);

        if (this._platform.IOS && this._cursorStyleIsSet) {
          body.style.cursor = this._cursorOriginalValue;
          this._cursorStyleIsSet = false;
        }

        this._isAttached = false;
      }
    }
  }]);

  return OverlayOutsideClickDispatcher;
}(BaseOverlayDispatcher);

OverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {
  return new (t || OverlayOutsideClickDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
};

OverlayOutsideClickDispatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function OverlayOutsideClickDispatcher_Factory() {
    return new OverlayOutsideClickDispatcher(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
  },
  token: OverlayOutsideClickDispatcher,
  providedIn: "root"
});

OverlayOutsideClickDispatcher.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](OverlayOutsideClickDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var globalsForTest = typeof window !== 'undefined' ? window : {};
/**
 * Whether we're in a testing environment.
 * TODO(crisbeto): remove this once we have an overlay testing module or Angular starts tearing
 * down the testing `NgModule` (see https://github.com/angular/angular/issues/18831).
 */

var isTestEnvironment = typeof globalsForTest.__karma__ !== 'undefined' && !!globalsForTest.__karma__ || typeof globalsForTest.jasmine !== 'undefined' && !!globalsForTest.jasmine || typeof globalsForTest.jest !== 'undefined' && !!globalsForTest.jest || typeof globalsForTest.Mocha !== 'undefined' && !!globalsForTest.Mocha;
/** Container inside which all overlays will render. */

var OverlayContainer = /*#__PURE__*/function () {
  function OverlayContainer(document, _platform) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayContainer);

    this._platform = _platform;
    this._document = document;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(OverlayContainer, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      var container = this._containerElement;

      if (container && container.parentNode) {
        container.parentNode.removeChild(container);
      }
    }
    /**
     * This method returns the overlay container element. It will lazily
     * create the element the first time  it is called to facilitate using
     * the container in non-browser environments.
     * @returns the container element
     */

  }, {
    key: "getContainerElement",
    value: function getContainerElement() {
      if (!this._containerElement) {
        this._createContainer();
      }

      return this._containerElement;
    }
    /**
     * Create the overlay container element, which is simply a div
     * with the 'cdk-overlay-container' class on the document body.
     */

  }, {
    key: "_createContainer",
    value: function _createContainer() {
      var containerClass = 'cdk-overlay-container';

      if (this._platform.isBrowser || isTestEnvironment) {
        var oppositePlatformContainers = this._document.querySelectorAll(".".concat(containerClass, "[platform=\"server\"], ") + ".".concat(containerClass, "[platform=\"test\"]")); // Remove any old containers from the opposite platform.
        // This can happen when transitioning from the server to the client.


        for (var i = 0; i < oppositePlatformContainers.length; i++) {
          oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);
        }
      }

      var container = this._document.createElement('div');

      container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,
      // but at some point we added logic which clears the duplicate ones in order to avoid leaks.
      // The new logic was a little too aggressive since it was breaking some legitimate use cases.
      // To mitigate the problem we made it so that only containers from a different platform are
      // cleared, but the side-effect was that people started depending on the overly-aggressive
      // logic to clean up their tests for them. Until we can introduce an overlay-specific testing
      // module which does the cleanup, we try to detect that we're in a test environment and we
      // always clear the container. See #17006.
      // TODO(crisbeto): remove the test environment check once we have an overlay testing module.

      if (isTestEnvironment) {
        container.setAttribute('platform', 'test');
      } else if (!this._platform.isBrowser) {
        container.setAttribute('platform', 'server');
      }

      this._document.body.appendChild(container);

      this._containerElement = container;
    }
  }]);

  return OverlayContainer;
}();

OverlayContainer.ɵfac = function OverlayContainer_Factory(t) {
  return new (t || OverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
};

OverlayContainer.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function OverlayContainer_Factory() {
    return new OverlayContainer(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
  },
  token: OverlayContainer,
  providedIn: "root"
});

OverlayContainer.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](OverlayContainer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Reference to an overlay that has been created with the Overlay service.
 * Used to manipulate or dispose of said overlay.
 */


var OverlayRef = /*#__PURE__*/function () {
  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {
    var _this7 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayRef);

    this._portalOutlet = _portalOutlet;
    this._host = _host;
    this._pane = _pane;
    this._config = _config;
    this._ngZone = _ngZone;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._document = _document;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
    this._backdropElement = null;
    this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();
    this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();
    this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();
    this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;

    this._backdropClickHandler = function (event) {
      return _this7._backdropClick.next(event);
    };
    /** Stream of keydown events dispatched to this overlay. */


    this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();
    /** Stream of mouse outside events dispatched to this overlay. */

    this._outsidePointerEvents = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();

    if (_config.scrollStrategy) {
      this._scrollStrategy = _config.scrollStrategy;

      this._scrollStrategy.attach(this);
    }

    this._positionStrategy = _config.positionStrategy;
  }
  /** The overlay's HTML element */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(OverlayRef, [{
    key: "overlayElement",
    get: function get() {
      return this._pane;
    }
    /** The overlay's backdrop HTML element. */

  }, {
    key: "backdropElement",
    get: function get() {
      return this._backdropElement;
    }
    /**
     * Wrapper around the panel element. Can be used for advanced
     * positioning where a wrapper with specific styling is
     * required around the overlay pane.
     */

  }, {
    key: "hostElement",
    get: function get() {
      return this._host;
    }
    /**
     * Attaches content, given via a Portal, to the overlay.
     * If the overlay is configured to have a backdrop, it will be created.
     *
     * @param portal Portal instance to which to attach the overlay.
     * @returns The portal attachment result.
     */

  }, {
    key: "attach",
    value: function attach(portal) {
      var _this8 = this;

      var attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.


      if (!this._host.parentElement && this._previousHostParent) {
        this._previousHostParent.appendChild(this._host);
      }

      if (this._positionStrategy) {
        this._positionStrategy.attach(this);
      }

      this._updateStackingOrder();

      this._updateElementSize();

      this._updateElementDirection();

      if (this._scrollStrategy) {
        this._scrollStrategy.enable();
      } // Update the position once the zone is stable so that the overlay will be fully rendered
      // before attempting to position it, as the position may depend on the size of the rendered
      // content.


      this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.take)(1)).subscribe(function () {
        // The overlay could've been detached before the zone has stabilized.
        if (_this8.hasAttached()) {
          _this8.updatePosition();
        }
      }); // Enable pointer events for the overlay pane element.


      this._togglePointerEvents(true);

      if (this._config.hasBackdrop) {
        this._attachBackdrop();
      }

      if (this._config.panelClass) {
        this._toggleClasses(this._pane, this._config.panelClass, true);
      } // Only emit the `attachments` event once all other setup is done.


      this._attachments.next(); // Track this overlay by the keyboard dispatcher


      this._keyboardDispatcher.add(this);

      if (this._config.disposeOnNavigation) {
        this._locationChanges = this._location.subscribe(function () {
          return _this8.dispose();
        });
      }

      this._outsideClickDispatcher.add(this);

      return attachResult;
    }
    /**
     * Detaches an overlay from a portal.
     * @returns The portal detachment result.
     */

  }, {
    key: "detach",
    value: function detach() {
      if (!this.hasAttached()) {
        return;
      }

      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.
      // This is necessary because otherwise the pane element will cover the page and disable
      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.

      this._togglePointerEvents(false);

      if (this._positionStrategy && this._positionStrategy.detach) {
        this._positionStrategy.detach();
      }

      if (this._scrollStrategy) {
        this._scrollStrategy.disable();
      }

      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.


      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.


      this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets
      // rendered, even though it's transparent and unclickable which is why we remove it.


      this._detachContentWhenStable();

      this._locationChanges.unsubscribe();

      this._outsideClickDispatcher.remove(this);

      return detachmentResult;
    }
    /** Cleans up the overlay from the DOM. */

  }, {
    key: "dispose",
    value: function dispose() {
      var isAttached = this.hasAttached();

      if (this._positionStrategy) {
        this._positionStrategy.dispose();
      }

      this._disposeScrollStrategy();

      this.detachBackdrop();

      this._locationChanges.unsubscribe();

      this._keyboardDispatcher.remove(this);

      this._portalOutlet.dispose();

      this._attachments.complete();

      this._backdropClick.complete();

      this._keydownEvents.complete();

      this._outsidePointerEvents.complete();

      this._outsideClickDispatcher.remove(this);

      if (this._host && this._host.parentNode) {
        this._host.parentNode.removeChild(this._host);

        this._host = null;
      }

      this._previousHostParent = this._pane = null;

      if (isAttached) {
        this._detachments.next();
      }

      this._detachments.complete();
    }
    /** Whether the overlay has attached content. */

  }, {
    key: "hasAttached",
    value: function hasAttached() {
      return this._portalOutlet.hasAttached();
    }
    /** Gets an observable that emits when the backdrop has been clicked. */

  }, {
    key: "backdropClick",
    value: function backdropClick() {
      return this._backdropClick;
    }
    /** Gets an observable that emits when the overlay has been attached. */

  }, {
    key: "attachments",
    value: function attachments() {
      return this._attachments;
    }
    /** Gets an observable that emits when the overlay has been detached. */

  }, {
    key: "detachments",
    value: function detachments() {
      return this._detachments;
    }
    /** Gets an observable of keydown events targeted to this overlay. */

  }, {
    key: "keydownEvents",
    value: function keydownEvents() {
      return this._keydownEvents;
    }
    /** Gets an observable of pointer events targeted outside this overlay. */

  }, {
    key: "outsidePointerEvents",
    value: function outsidePointerEvents() {
      return this._outsidePointerEvents;
    }
    /** Gets the current overlay configuration, which is immutable. */

  }, {
    key: "getConfig",
    value: function getConfig() {
      return this._config;
    }
    /** Updates the position of the overlay based on the position strategy. */

  }, {
    key: "updatePosition",
    value: function updatePosition() {
      if (this._positionStrategy) {
        this._positionStrategy.apply();
      }
    }
    /** Switches to a new position strategy and updates the overlay position. */

  }, {
    key: "updatePositionStrategy",
    value: function updatePositionStrategy(strategy) {
      if (strategy === this._positionStrategy) {
        return;
      }

      if (this._positionStrategy) {
        this._positionStrategy.dispose();
      }

      this._positionStrategy = strategy;

      if (this.hasAttached()) {
        strategy.attach(this);
        this.updatePosition();
      }
    }
    /** Update the size properties of the overlay. */

  }, {
    key: "updateSize",
    value: function updateSize(sizeConfig) {
      this._config = Object.assign(Object.assign({}, this._config), sizeConfig);

      this._updateElementSize();
    }
    /** Sets the LTR/RTL direction for the overlay. */

  }, {
    key: "setDirection",
    value: function setDirection(dir) {
      this._config = Object.assign(Object.assign({}, this._config), {
        direction: dir
      });

      this._updateElementDirection();
    }
    /** Add a CSS class or an array of classes to the overlay pane. */

  }, {
    key: "addPanelClass",
    value: function addPanelClass(classes) {
      if (this._pane) {
        this._toggleClasses(this._pane, classes, true);
      }
    }
    /** Remove a CSS class or an array of classes from the overlay pane. */

  }, {
    key: "removePanelClass",
    value: function removePanelClass(classes) {
      if (this._pane) {
        this._toggleClasses(this._pane, classes, false);
      }
    }
    /**
     * Returns the layout direction of the overlay panel.
     */

  }, {
    key: "getDirection",
    value: function getDirection() {
      var direction = this._config.direction;

      if (!direction) {
        return 'ltr';
      }

      return typeof direction === 'string' ? direction : direction.value;
    }
    /** Switches to a new scroll strategy. */

  }, {
    key: "updateScrollStrategy",
    value: function updateScrollStrategy(strategy) {
      if (strategy === this._scrollStrategy) {
        return;
      }

      this._disposeScrollStrategy();

      this._scrollStrategy = strategy;

      if (this.hasAttached()) {
        strategy.attach(this);
        strategy.enable();
      }
    }
    /** Updates the text direction of the overlay panel. */

  }, {
    key: "_updateElementDirection",
    value: function _updateElementDirection() {
      this._host.setAttribute('dir', this.getDirection());
    }
    /** Updates the size of the overlay element based on the overlay config. */

  }, {
    key: "_updateElementSize",
    value: function _updateElementSize() {
      if (!this._pane) {
        return;
      }

      var style = this._pane.style;
      style.width = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.width);
      style.height = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.height);
      style.minWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.minWidth);
      style.minHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.minHeight);
      style.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.maxWidth);
      style.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(this._config.maxHeight);
    }
    /** Toggles the pointer events for the overlay pane element. */

  }, {
    key: "_togglePointerEvents",
    value: function _togglePointerEvents(enablePointer) {
      this._pane.style.pointerEvents = enablePointer ? '' : 'none';
    }
    /** Attaches a backdrop for this overlay. */

  }, {
    key: "_attachBackdrop",
    value: function _attachBackdrop() {
      var _this9 = this;

      var showingClass = 'cdk-overlay-backdrop-showing';
      this._backdropElement = this._document.createElement('div');

      this._backdropElement.classList.add('cdk-overlay-backdrop');

      if (this._config.backdropClass) {
        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
      } // Insert the backdrop before the pane in the DOM order,
      // in order to handle stacked overlays properly.


      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever
      // action desired when such a click occurs (usually closing the overlay).


      this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.


      if (typeof requestAnimationFrame !== 'undefined') {
        this._ngZone.runOutsideAngular(function () {
          requestAnimationFrame(function () {
            if (_this9._backdropElement) {
              _this9._backdropElement.classList.add(showingClass);
            }
          });
        });
      } else {
        this._backdropElement.classList.add(showingClass);
      }
    }
    /**
     * Updates the stacking order of the element, moving it to the top if necessary.
     * This is required in cases where one overlay was detached, while another one,
     * that should be behind it, was destroyed. The next time both of them are opened,
     * the stacking will be wrong, because the detached element's pane will still be
     * in its original DOM position.
     */

  }, {
    key: "_updateStackingOrder",
    value: function _updateStackingOrder() {
      if (this._host.nextSibling) {
        this._host.parentNode.appendChild(this._host);
      }
    }
    /** Detaches the backdrop (if any) associated with the overlay. */

  }, {
    key: "detachBackdrop",
    value: function detachBackdrop() {
      var _this10 = this;

      var backdropToDetach = this._backdropElement;

      if (!backdropToDetach) {
        return;
      }

      var timeoutId;

      var finishDetach = function finishDetach() {
        // It may not be attached to anything in certain cases (e.g. unit tests).
        if (backdropToDetach) {
          backdropToDetach.removeEventListener('click', _this10._backdropClickHandler);
          backdropToDetach.removeEventListener('transitionend', finishDetach);

          if (backdropToDetach.parentNode) {
            backdropToDetach.parentNode.removeChild(backdropToDetach);
          }
        } // It is possible that a new portal has been attached to this overlay since we started
        // removing the backdrop. If that is the case, only clear the backdrop reference if it
        // is still the same instance that we started to remove.


        if (_this10._backdropElement == backdropToDetach) {
          _this10._backdropElement = null;
        }

        if (_this10._config.backdropClass) {
          _this10._toggleClasses(backdropToDetach, _this10._config.backdropClass, false);
        }

        clearTimeout(timeoutId);
      };

      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');

      this._ngZone.runOutsideAngular(function () {
        backdropToDetach.addEventListener('transitionend', finishDetach);
      }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
      // In this case we make it unclickable and we try to remove it after a delay.


      backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.
      // If it were to run inside the Angular zone, every test that used Overlay would have to be
      // either async or fakeAsync.

      timeoutId = this._ngZone.runOutsideAngular(function () {
        return setTimeout(finishDetach, 500);
      });
    }
    /** Toggles a single CSS class or an array of classes on an element. */

  }, {
    key: "_toggleClasses",
    value: function _toggleClasses(element, cssClasses, isAdd) {
      var classList = element.classList;
      (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceArray)(cssClasses).forEach(function (cssClass) {
        // We can't do a spread here, because IE doesn't support setting multiple classes.
        // Also trying to add an empty string to a DOMTokenList will throw.
        if (cssClass) {
          isAdd ? classList.add(cssClass) : classList.remove(cssClass);
        }
      });
    }
    /** Detaches the overlay content next time the zone stabilizes. */

  }, {
    key: "_detachContentWhenStable",
    value: function _detachContentWhenStable() {
      var _this11 = this;

      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
      // be patched to run inside the zone, which will throw us into an infinite loop.
      this._ngZone.runOutsideAngular(function () {
        // We can't remove the host here immediately, because the overlay pane's content
        // might still be animating. This stream helps us avoid interrupting the animation
        // by waiting for the pane to become empty.
        var subscription = _this11._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.takeUntil)((0,rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)(_this11._attachments, _this11._detachments))).subscribe(function () {
          // Needs a couple of checks for the pane and host, because
          // they may have been removed by the time the zone stabilizes.
          if (!_this11._pane || !_this11._host || _this11._pane.children.length === 0) {
            if (_this11._pane && _this11._config.panelClass) {
              _this11._toggleClasses(_this11._pane, _this11._config.panelClass, false);
            }

            if (_this11._host && _this11._host.parentElement) {
              _this11._previousHostParent = _this11._host.parentElement;

              _this11._previousHostParent.removeChild(_this11._host);
            }

            subscription.unsubscribe();
          }
        });
      });
    }
    /** Disposes of a scroll strategy. */

  }, {
    key: "_disposeScrollStrategy",
    value: function _disposeScrollStrategy() {
      var scrollStrategy = this._scrollStrategy;

      if (scrollStrategy) {
        scrollStrategy.disable();

        if (scrollStrategy.detach) {
          scrollStrategy.detach();
        }
      }
    }
  }]);

  return OverlayRef;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: refactor clipping detection into a separate thing (part of scrolling module)
// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.

/** Class to be added to the overlay bounding box. */


var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
/** Regex used to split a string on its CSS units. */

var cssUnitPattern = /([A-Za-z%]+)$/;
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * implicit position relative some origin element. The relative position is defined in terms of
 * a point on the origin element that is connected to a point on the overlay element. For example,
 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
 * of the overlay.
 */

var FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {
  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, FlexibleConnectedPositionStrategy);

    this._viewportRuler = _viewportRuler;
    this._document = _document;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */

    this._lastBoundingBoxSize = {
      width: 0,
      height: 0
    };
    /** Whether the overlay was pushed in a previous positioning. */

    this._isPushed = false;
    /** Whether the overlay can be pushed on-screen on the initial open. */

    this._canPush = true;
    /** Whether the overlay can grow via flexible width/height after the initial open. */

    this._growAfterOpen = false;
    /** Whether the overlay's width and height can be constrained to fit within the viewport. */

    this._hasFlexibleDimensions = true;
    /** Whether the overlay position is locked. */

    this._positionLocked = false;
    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */

    this._viewportMargin = 0;
    /** The Scrollable containers used to check scrollable view properties on position change. */

    this._scrollables = [];
    /** Ordered list of preferred positions, from most to least desirable. */

    this._preferredPositions = [];
    /** Subject that emits whenever the position changes. */

    this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Subject();
    /** Subscription to viewport size changes. */

    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;
    /** Default offset for the overlay along the x axis. */

    this._offsetX = 0;
    /** Default offset for the overlay along the y axis. */

    this._offsetY = 0;
    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */

    this._appliedPanelClasses = [];
    /** Observable sequence of position changes. */

    this.positionChanges = this._positionChanges;
    this.setOrigin(connectedTo);
  }
  /** Ordered list of preferred positions, from most to least desirable. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(FlexibleConnectedPositionStrategy, [{
    key: "positions",
    get: function get() {
      return this._preferredPositions;
    }
    /** Attaches this position strategy to an overlay. */

  }, {
    key: "attach",
    value: function attach(overlayRef) {
      var _this12 = this;

      if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('This position strategy is already attached to an overlay');
      }

      this._validatePositions();

      overlayRef.hostElement.classList.add(boundingBoxClass);
      this._overlayRef = overlayRef;
      this._boundingBox = overlayRef.hostElement;
      this._pane = overlayRef.overlayElement;
      this._isDisposed = false;
      this._isInitialRender = true;
      this._lastPosition = null;

      this._resizeSubscription.unsubscribe();

      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {
        // When the window is resized, we want to trigger the next reposition as if it
        // was an initial render, in order for the strategy to pick a new optimal position,
        // otherwise position locking will cause it to stay at the old one.
        _this12._isInitialRender = true;

        _this12.apply();
      });
    }
    /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin best fits on-screen.
     *
     * The selection of a position goes as follows:
     *  - If any positions fit completely within the viewport as-is,
     *      choose the first position that does so.
     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,
     *      choose the position with the greatest available size modified by the positions' weight.
     *  - If pushing is enabled, take the position that went off-screen the least and push it
     *      on-screen.
     *  - If none of the previous criteria were met, use the position that goes off-screen the least.
     * @docs-private
     */

  }, {
    key: "apply",
    value: function apply() {
      // We shouldn't do anything if the strategy was disposed or we're on the server.
      if (this._isDisposed || !this._platform.isBrowser) {
        return;
      } // If the position has been applied already (e.g. when the overlay was opened) and the
      // consumer opted into locking in the position, re-use the old position, in order to
      // prevent the overlay from jumping around.


      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
        this.reapplyLastPosition();
        return;
      }

      this._clearPanelClasses();

      this._resetOverlayElementStyles();

      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position
      // the overlay relative to the origin.
      // We use the viewport rect to determine whether a position would go off-screen.


      this._viewportRect = this._getNarrowedViewportRect();
      this._originRect = this._getOriginRect();
      this._overlayRect = this._pane.getBoundingClientRect();
      var originRect = this._originRect;
      var overlayRect = this._overlayRect;
      var viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.

      var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.

      var fallback; // Go through each of the preferred positions looking for a good fit.
      // If a good fit is found, it will be applied immediately.

      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this._preferredPositions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var pos = _step.value;

          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.
          var originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
          // overlay in this position. We use the top-left corner for calculations and later translate
          // this into an appropriate (top, left, bottom, right) style.


          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.


          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.


          if (overlayFit.isCompletelyWithinViewport) {
            this._isPushed = false;

            this._applyPosition(pos, originPoint);

            return;
          } // If the overlay has flexible dimensions, we can use this position
          // so long as there's enough space for the minimum dimensions.


          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
            // Save positions where the overlay will fit with flexible dimensions. We will use these
            // if none of the positions fit *without* flexible dimensions.
            flexibleFits.push({
              position: pos,
              origin: originPoint,
              overlayRect: overlayRect,
              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
            });
            continue;
          } // If the current preferred position does not fit on the screen, remember the position
          // if it has more visible area on-screen than we've seen and move onto the next preferred
          // position.


          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
            fallback = {
              overlayFit: overlayFit,
              overlayPoint: overlayPoint,
              originPoint: originPoint,
              position: pos,
              overlayRect: overlayRect
            };
          }
        } // If there are any positions where the overlay would fit with flexible dimensions, choose the
        // one that has the greatest area available modified by the position's weight

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (flexibleFits.length) {
        var bestFit = null;
        var bestScore = -1;

        var _iterator2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(flexibleFits),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var fit = _step2.value;
            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);

            if (score > bestScore) {
              bestScore = score;
              bestFit = fit;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._isPushed = false;

        this._applyPosition(bestFit.position, bestFit.origin);

        return;
      } // When none of the preferred positions fit within the viewport, take the position
      // that went off-screen the least and attempt to push it on-screen.


      if (this._canPush) {
        // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
        this._isPushed = true;

        this._applyPosition(fallback.position, fallback.originPoint);

        return;
      } // All options for getting the overlay within the viewport have been exhausted, so go with the
      // position that went off-screen the least.


      this._applyPosition(fallback.position, fallback.originPoint);
    }
  }, {
    key: "detach",
    value: function detach() {
      this._clearPanelClasses();

      this._lastPosition = null;
      this._previousPushAmount = null;

      this._resizeSubscription.unsubscribe();
    }
    /** Cleanup after the element gets destroyed. */

  }, {
    key: "dispose",
    value: function dispose() {
      if (this._isDisposed) {
        return;
      } // We can't use `_resetBoundingBoxStyles` here, because it resets
      // some properties to zero, rather than removing them.


      if (this._boundingBox) {
        extendStyles(this._boundingBox.style, {
          top: '',
          left: '',
          right: '',
          bottom: '',
          height: '',
          width: '',
          alignItems: '',
          justifyContent: ''
        });
      }

      if (this._pane) {
        this._resetOverlayElementStyles();
      }

      if (this._overlayRef) {
        this._overlayRef.hostElement.classList.remove(boundingBoxClass);
      }

      this.detach();

      this._positionChanges.complete();

      this._overlayRef = this._boundingBox = null;
      this._isDisposed = true;
    }
    /**
     * This re-aligns the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     */

  }, {
    key: "reapplyLastPosition",
    value: function reapplyLastPosition() {
      if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
        this._originRect = this._getOriginRect();
        this._overlayRect = this._pane.getBoundingClientRect();
        this._viewportRect = this._getNarrowedViewportRect();
        var lastPosition = this._lastPosition || this._preferredPositions[0];

        var originPoint = this._getOriginPoint(this._originRect, lastPosition);

        this._applyPosition(lastPosition, originPoint);
      }
    }
    /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     */

  }, {
    key: "withScrollableContainers",
    value: function withScrollableContainers(scrollables) {
      this._scrollables = scrollables;
      return this;
    }
    /**
     * Adds new preferred positions.
     * @param positions List of positions options for this overlay.
     */

  }, {
    key: "withPositions",
    value: function withPositions(positions) {
      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear
      // it in order to avoid it being picked up if the consumer tries to re-apply.

      if (positions.indexOf(this._lastPosition) === -1) {
        this._lastPosition = null;
      }

      this._validatePositions();

      return this;
    }
    /**
     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
     * @param margin Required margin between the overlay and the viewport edge in pixels.
     */

  }, {
    key: "withViewportMargin",
    value: function withViewportMargin(margin) {
      this._viewportMargin = margin;
      return this;
    }
    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */

  }, {
    key: "withFlexibleDimensions",
    value: function withFlexibleDimensions() {
      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this._hasFlexibleDimensions = flexibleDimensions;
      return this;
    }
    /** Sets whether the overlay can grow after the initial open via flexible width/height. */

  }, {
    key: "withGrowAfterOpen",
    value: function withGrowAfterOpen() {
      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this._growAfterOpen = growAfterOpen;
      return this;
    }
    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */

  }, {
    key: "withPush",
    value: function withPush() {
      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this._canPush = canPush;
      return this;
    }
    /**
     * Sets whether the overlay's position should be locked in after it is positioned
     * initially. When an overlay is locked in, it won't attempt to reposition itself
     * when the position is re-applied (e.g. when the user scrolls away).
     * @param isLocked Whether the overlay should locked in.
     */

  }, {
    key: "withLockedPosition",
    value: function withLockedPosition() {
      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this._positionLocked = isLocked;
      return this;
    }
    /**
     * Sets the origin, relative to which to position the overlay.
     * Using an element origin is useful for building components that need to be positioned
     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
     * used for cases like contextual menus which open relative to the user's pointer.
     * @param origin Reference to the new origin.
     */

  }, {
    key: "setOrigin",
    value: function setOrigin(origin) {
      this._origin = origin;
      return this;
    }
    /**
     * Sets the default offset for the overlay's connection point on the x-axis.
     * @param offset New offset in the X axis.
     */

  }, {
    key: "withDefaultOffsetX",
    value: function withDefaultOffsetX(offset) {
      this._offsetX = offset;
      return this;
    }
    /**
     * Sets the default offset for the overlay's connection point on the y-axis.
     * @param offset New offset in the Y axis.
     */

  }, {
    key: "withDefaultOffsetY",
    value: function withDefaultOffsetY(offset) {
      this._offsetY = offset;
      return this;
    }
    /**
     * Configures that the position strategy should set a `transform-origin` on some elements
     * inside the overlay, depending on the current position that is being applied. This is
     * useful for the cases where the origin of an animation can change depending on the
     * alignment of the overlay.
     * @param selector CSS selector that will be used to find the target
     *    elements onto which to set the transform origin.
     */

  }, {
    key: "withTransformOriginOn",
    value: function withTransformOriginOn(selector) {
      this._transformOriginSelector = selector;
      return this;
    }
    /**
     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
     */

  }, {
    key: "_getOriginPoint",
    value: function _getOriginPoint(originRect, pos) {
      var x;

      if (pos.originX == 'center') {
        // Note: when centering we should always use the `left`
        // offset, otherwise the position will be wrong in RTL.
        x = originRect.left + originRect.width / 2;
      } else {
        var startX = this._isRtl() ? originRect.right : originRect.left;
        var endX = this._isRtl() ? originRect.left : originRect.right;
        x = pos.originX == 'start' ? startX : endX;
      }

      var y;

      if (pos.originY == 'center') {
        y = originRect.top + originRect.height / 2;
      } else {
        y = pos.originY == 'top' ? originRect.top : originRect.bottom;
      }

      return {
        x: x,
        y: y
      };
    }
    /**
     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
     * origin point to which the overlay should be connected.
     */

  }, {
    key: "_getOverlayPoint",
    value: function _getOverlayPoint(originPoint, overlayRect, pos) {
      // Calculate the (overlayStartX, overlayStartY), the start of the
      // potential overlay position relative to the origin point.
      var overlayStartX;

      if (pos.overlayX == 'center') {
        overlayStartX = -overlayRect.width / 2;
      } else if (pos.overlayX === 'start') {
        overlayStartX = this._isRtl() ? -overlayRect.width : 0;
      } else {
        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
      }

      var overlayStartY;

      if (pos.overlayY == 'center') {
        overlayStartY = -overlayRect.height / 2;
      } else {
        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
      } // The (x, y) coordinates of the overlay.


      return {
        x: originPoint.x + overlayStartX,
        y: originPoint.y + overlayStartY
      };
    }
    /** Gets how well an overlay at the given point will fit within the viewport. */

  }, {
    key: "_getOverlayFit",
    value: function _getOverlayFit(point, rawOverlayRect, viewport, position) {
      // Round the overlay rect when comparing against the
      // viewport, because the viewport is always rounded.
      var overlay = getRoundedBoundingClientRect(rawOverlayRect);
      var x = point.x,
          y = point.y;

      var offsetX = this._getOffset(position, 'x');

      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.


      if (offsetX) {
        x += offsetX;
      }

      if (offsetY) {
        y += offsetY;
      } // How much the overlay would overflow at this position, on each side.


      var leftOverflow = 0 - x;
      var rightOverflow = x + overlay.width - viewport.width;
      var topOverflow = 0 - y;
      var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.

      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);

      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);

      var visibleArea = visibleWidth * visibleHeight;
      return {
        visibleArea: visibleArea,
        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,
        fitsInViewportVertically: visibleHeight === overlay.height,
        fitsInViewportHorizontally: visibleWidth == overlay.width
      };
    }
    /**
     * Whether the overlay can fit within the viewport when it may resize either its width or height.
     * @param fit How well the overlay fits in the viewport at some position.
     * @param point The (x, y) coordinates of the overlat at some position.
     * @param viewport The geometry of the viewport.
     */

  }, {
    key: "_canFitWithFlexibleDimensions",
    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {
      if (this._hasFlexibleDimensions) {
        var availableHeight = viewport.bottom - point.y;
        var availableWidth = viewport.right - point.x;
        var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);
        var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);
        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;
        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;
        return verticalFit && horizontalFit;
      }

      return false;
    }
    /**
     * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the
     * right and bottom).
     *
     * @param start Starting point from which the overlay is pushed.
     * @param overlay Dimensions of the overlay.
     * @param scrollPosition Current viewport scroll position.
     * @returns The point at which to position the overlay after pushing. This is effectively a new
     *     originPoint.
     */

  }, {
    key: "_pushOverlayOnScreen",
    value: function _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {
      // If the position is locked and we've pushed the overlay already, reuse the previous push
      // amount, rather than pushing it again. If we were to continue pushing, the element would
      // remain in the viewport, which goes against the expectations when position locking is enabled.
      if (this._previousPushAmount && this._positionLocked) {
        return {
          x: start.x + this._previousPushAmount.x,
          y: start.y + this._previousPushAmount.y
        };
      } // Round the overlay rect when comparing against the
      // viewport, because the viewport is always rounded.


      var overlay = getRoundedBoundingClientRect(rawOverlayRect);
      var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each
      // side, which we'll use to decide which direction to push it.

      var overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);
      var overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);
      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.

      var pushX = 0;
      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever
      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
      // viewport and allow for the trailing end of the overlay to go out of bounds.

      if (overlay.width <= viewport.width) {
        pushX = overflowLeft || -overflowRight;
      } else {
        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;
      }

      if (overlay.height <= viewport.height) {
        pushY = overflowTop || -overflowBottom;
      } else {
        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;
      }

      this._previousPushAmount = {
        x: pushX,
        y: pushY
      };
      return {
        x: start.x + pushX,
        y: start.y + pushY
      };
    }
    /**
     * Applies a computed position to the overlay and emits a position change.
     * @param position The position preference
     * @param originPoint The point on the origin element where the overlay is connected.
     */

  }, {
    key: "_applyPosition",
    value: function _applyPosition(position, originPoint) {
      this._setTransformOrigin(position);

      this._setOverlayElementStyles(originPoint, position);

      this._setBoundingBoxStyles(originPoint, position);

      if (position.panelClass) {
        this._addPanelClasses(position.panelClass);
      } // Save the last connected position in case the position needs to be re-calculated.


      this._lastPosition = position; // Notify that the position has been changed along with its change properties.
      // We only emit if we've got any subscriptions, because the scroll visibility
      // calculcations can be somewhat expensive.

      if (this._positionChanges.observers.length) {
        var scrollableViewProperties = this._getScrollVisibility();

        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);

        this._positionChanges.next(changeEvent);
      }

      this._isInitialRender = false;
    }
    /** Sets the transform origin based on the configured selector and the passed-in position.  */

  }, {
    key: "_setTransformOrigin",
    value: function _setTransformOrigin(position) {
      if (!this._transformOriginSelector) {
        return;
      }

      var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);

      var xOrigin;
      var yOrigin = position.overlayY;

      if (position.overlayX === 'center') {
        xOrigin = 'center';
      } else if (this._isRtl()) {
        xOrigin = position.overlayX === 'start' ? 'right' : 'left';
      } else {
        xOrigin = position.overlayX === 'start' ? 'left' : 'right';
      }

      for (var i = 0; i < elements.length; i++) {
        elements[i].style.transformOrigin = "".concat(xOrigin, " ").concat(yOrigin);
      }
    }
    /**
     * Gets the position and size of the overlay's sizing container.
     *
     * This method does no measuring and applies no styles so that we can cheaply compute the
     * bounds for all positions and choose the best fit based on these results.
     */

  }, {
    key: "_calculateBoundingBoxRect",
    value: function _calculateBoundingBoxRect(origin, position) {
      var viewport = this._viewportRect;

      var isRtl = this._isRtl();

      var height, top, bottom;

      if (position.overlayY === 'top') {
        // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
        top = origin.y;
        height = viewport.height - top + this._viewportMargin;
      } else if (position.overlayY === 'bottom') {
        // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
        // the viewport margin back in, because the viewport rect is narrowed down to remove the
        // margin, whereas the `origin` position is calculated based on its `ClientRect`.
        bottom = viewport.height - origin.y + this._viewportMargin * 2;
        height = viewport.height - bottom + this._viewportMargin;
      } else {
        // If neither top nor bottom, it means that the overlay is vertically centered on the
        // origin point. Note that we want the position relative to the viewport, rather than
        // the page, which is why we don't use something like `viewport.bottom - origin.y` and
        // `origin.y - viewport.top`.
        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
        var previousHeight = this._lastBoundingBoxSize.height;
        height = smallestDistanceToViewportEdge * 2;
        top = origin.y - smallestDistanceToViewportEdge;

        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
          top = origin.y - previousHeight / 2;
        }
      } // The overlay is opening 'right-ward' (the content flows to the right).


      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).

      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;
      var width, left, right;

      if (isBoundedByLeftViewportEdge) {
        right = viewport.width - origin.x + this._viewportMargin;
        width = origin.x - this._viewportMargin;
      } else if (isBoundedByRightViewportEdge) {
        left = origin.x;
        width = viewport.right - origin.x;
      } else {
        // If neither start nor end, it means that the overlay is horizontally centered on the
        // origin point. Note that we want the position relative to the viewport, rather than
        // the page, which is why we don't use something like `viewport.right - origin.x` and
        // `origin.x - viewport.left`.
        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);

        var previousWidth = this._lastBoundingBoxSize.width;
        width = _smallestDistanceToViewportEdge * 2;
        left = origin.x - _smallestDistanceToViewportEdge;

        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
          left = origin.x - previousWidth / 2;
        }
      }

      return {
        top: top,
        left: left,
        bottom: bottom,
        right: right,
        width: width,
        height: height
      };
    }
    /**
     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
     * origin's connection point and stetches to the bounds of the viewport.
     *
     * @param origin The point on the origin element where the overlay is connected.
     * @param position The position preference
     */

  }, {
    key: "_setBoundingBoxStyles",
    value: function _setBoundingBoxStyles(origin, position) {
      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account
      // when applying a new size.


      if (!this._isInitialRender && !this._growAfterOpen) {
        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
      }

      var styles = {};

      if (this._hasExactPosition()) {
        styles.top = styles.left = '0';
        styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';
        styles.width = styles.height = '100%';
      } else {
        var maxHeight = this._overlayRef.getConfig().maxHeight;

        var maxWidth = this._overlayRef.getConfig().maxWidth;

        styles.height = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.height);
        styles.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.top);
        styles.bottom = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.bottom);
        styles.width = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.width);
        styles.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.left);
        styles.right = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(boundingBoxRect.right); // Push the pane content towards the proper direction.

        if (position.overlayX === 'center') {
          styles.alignItems = 'center';
        } else {
          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
        }

        if (position.overlayY === 'center') {
          styles.justifyContent = 'center';
        } else {
          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
        }

        if (maxHeight) {
          styles.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(maxHeight);
        }

        if (maxWidth) {
          styles.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(maxWidth);
        }
      }

      this._lastBoundingBoxSize = boundingBoxRect;
      extendStyles(this._boundingBox.style, styles);
    }
    /** Resets the styles for the bounding box so that a new positioning can be computed. */

  }, {
    key: "_resetBoundingBoxStyles",
    value: function _resetBoundingBoxStyles() {
      extendStyles(this._boundingBox.style, {
        top: '0',
        left: '0',
        right: '0',
        bottom: '0',
        height: '',
        width: '',
        alignItems: '',
        justifyContent: ''
      });
    }
    /** Resets the styles for the overlay pane so that a new positioning can be computed. */

  }, {
    key: "_resetOverlayElementStyles",
    value: function _resetOverlayElementStyles() {
      extendStyles(this._pane.style, {
        top: '',
        left: '',
        bottom: '',
        right: '',
        position: '',
        transform: ''
      });
    }
    /** Sets positioning styles to the overlay element. */

  }, {
    key: "_setOverlayElementStyles",
    value: function _setOverlayElementStyles(originPoint, position) {
      var styles = {};

      var hasExactPosition = this._hasExactPosition();

      var hasFlexibleDimensions = this._hasFlexibleDimensions;

      var config = this._overlayRef.getConfig();

      if (hasExactPosition) {
        var scrollPosition = this._viewportRuler.getViewportScrollPosition();

        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
      } else {
        styles.position = 'static';
      } // Use a transform to apply the offsets. We do this because the `center` positions rely on
      // being in the normal flex flow and setting a `top` / `left` at all will completely throw
      // off the position. We also can't use margins, because they won't have an effect in some
      // cases where the element doesn't have anything to "push off of". Finally, this works
      // better both with flexible and non-flexible positioning.


      var transformString = '';

      var offsetX = this._getOffset(position, 'x');

      var offsetY = this._getOffset(position, 'y');

      if (offsetX) {
        transformString += "translateX(".concat(offsetX, "px) ");
      }

      if (offsetY) {
        transformString += "translateY(".concat(offsetY, "px)");
      }

      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
      // we need these values to both be set to "100%" for the automatic flexible sizing to work.
      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.
      // Note that this doesn't apply when we have an exact position, in which case we do want to
      // apply them because they'll be cleared from the bounding box.

      if (config.maxHeight) {
        if (hasExactPosition) {
          styles.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(config.maxHeight);
        } else if (hasFlexibleDimensions) {
          styles.maxHeight = '';
        }
      }

      if (config.maxWidth) {
        if (hasExactPosition) {
          styles.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(config.maxWidth);
        } else if (hasFlexibleDimensions) {
          styles.maxWidth = '';
        }
      }

      extendStyles(this._pane.style, styles);
    }
    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */

  }, {
    key: "_getExactOverlayY",
    value: function _getExactOverlayY(position, originPoint, scrollPosition) {
      // Reset any existing styles. This is necessary in case the
      // preferred position has changed since the last `apply`.
      var styles = {
        top: '',
        bottom: ''
      };

      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

      if (this._isPushed) {
        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
      }

      var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an
      // autocomplete), mobile browsers will shift everything in order to put the input in the middle
      // of the screen and to make space for the virtual keyboard. We need to account for this offset,
      // otherwise our positioning will be thrown off.


      overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear
      // above or below the origin and the direction in which the element will expand.

      if (position.overlayY === 'bottom') {
        // When using `bottom`, we adjust the y position such that it is the distance
        // from the bottom of the viewport rather than the top.
        var documentHeight = this._document.documentElement.clientHeight;
        styles.bottom = "".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), "px");
      } else {
        styles.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(overlayPoint.y);
      }

      return styles;
    }
    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */

  }, {
    key: "_getExactOverlayX",
    value: function _getExactOverlayX(position, originPoint, scrollPosition) {
      // Reset any existing styles. This is necessary in case the preferred position has
      // changed since the last `apply`.
      var styles = {
        left: '',
        right: ''
      };

      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

      if (this._isPushed) {
        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
      } // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
      // or "after" the origin, which determines the direction in which the element will expand.
      // For the horizontal axis, the meaning of "before" and "after" change based on whether the
      // page is in RTL or LTR.


      var horizontalStyleProperty;

      if (this._isRtl()) {
        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
      } else {
        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
      } // When we're setting `right`, we adjust the x position such that it is the distance
      // from the right edge of the viewport rather than the left edge.


      if (horizontalStyleProperty === 'right') {
        var documentWidth = this._document.documentElement.clientWidth;
        styles.right = "".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), "px");
      } else {
        styles.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceCssPixelValue)(overlayPoint.x);
      }

      return styles;
    }
    /**
     * Gets the view properties of the trigger and overlay, including whether they are clipped
     * or completely outside the view of any of the strategy's scrollables.
     */

  }, {
    key: "_getScrollVisibility",
    value: function _getScrollVisibility() {
      // Note: needs fresh rects since the position could've changed.
      var originBounds = this._getOriginRect();

      var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
      // every time, we should be able to use the scrollTop of the containers if the size of those
      // containers hasn't changed.


      var scrollContainerBounds = this._scrollables.map(function (scrollable) {
        return scrollable.getElementRef().nativeElement.getBoundingClientRect();
      });

      return {
        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)
      };
    }
    /** Subtracts the amount that an element is overflowing on an axis from its length. */

  }, {
    key: "_subtractOverflows",
    value: function _subtractOverflows(length) {
      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        overflows[_key - 1] = arguments[_key];
      }

      return overflows.reduce(function (currentValue, currentOverflow) {
        return currentValue - Math.max(currentOverflow, 0);
      }, length);
    }
    /** Narrows the given viewport rect by the current _viewportMargin. */

  }, {
    key: "_getNarrowedViewportRect",
    value: function _getNarrowedViewportRect() {
      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
      // and `innerHeight` that do. This is necessary, because the overlay container uses
      // 100% `width` and `height` which don't include the scrollbar either.
      var width = this._document.documentElement.clientWidth;
      var height = this._document.documentElement.clientHeight;

      var scrollPosition = this._viewportRuler.getViewportScrollPosition();

      return {
        top: scrollPosition.top + this._viewportMargin,
        left: scrollPosition.left + this._viewportMargin,
        right: scrollPosition.left + width - this._viewportMargin,
        bottom: scrollPosition.top + height - this._viewportMargin,
        width: width - 2 * this._viewportMargin,
        height: height - 2 * this._viewportMargin
      };
    }
    /** Whether the we're dealing with an RTL context */

  }, {
    key: "_isRtl",
    value: function _isRtl() {
      return this._overlayRef.getDirection() === 'rtl';
    }
    /** Determines whether the overlay uses exact or flexible positioning. */

  }, {
    key: "_hasExactPosition",
    value: function _hasExactPosition() {
      return !this._hasFlexibleDimensions || this._isPushed;
    }
    /** Retrieves the offset of a position along the x or y axis. */

  }, {
    key: "_getOffset",
    value: function _getOffset(position, axis) {
      if (axis === 'x') {
        // We don't do something like `position['offset' + axis]` in
        // order to avoid breking minifiers that rename properties.
        return position.offsetX == null ? this._offsetX : position.offsetX;
      }

      return position.offsetY == null ? this._offsetY : position.offsetY;
    }
    /** Validates that the current position match the expected values. */

  }, {
    key: "_validatePositions",
    value: function _validatePositions() {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!this._preferredPositions.length) {
          throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
        } // TODO(crisbeto): remove these once Angular's template type
        // checking is advanced enough to catch these cases.


        this._preferredPositions.forEach(function (pair) {
          validateHorizontalPosition('originX', pair.originX);
          validateVerticalPosition('originY', pair.originY);
          validateHorizontalPosition('overlayX', pair.overlayX);
          validateVerticalPosition('overlayY', pair.overlayY);
        });
      }
    }
    /** Adds a single CSS class or an array of classes on the overlay panel. */

  }, {
    key: "_addPanelClasses",
    value: function _addPanelClasses(cssClasses) {
      var _this13 = this;

      if (this._pane) {
        (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceArray)(cssClasses).forEach(function (cssClass) {
          if (cssClass !== '' && _this13._appliedPanelClasses.indexOf(cssClass) === -1) {
            _this13._appliedPanelClasses.push(cssClass);

            _this13._pane.classList.add(cssClass);
          }
        });
      }
    }
    /** Clears the classes that the position strategy has applied from the overlay panel. */

  }, {
    key: "_clearPanelClasses",
    value: function _clearPanelClasses() {
      var _this14 = this;

      if (this._pane) {
        this._appliedPanelClasses.forEach(function (cssClass) {
          _this14._pane.classList.remove(cssClass);
        });

        this._appliedPanelClasses = [];
      }
    }
    /** Returns the ClientRect of the current origin. */

  }, {
    key: "_getOriginRect",
    value: function _getOriginRect() {
      var origin = this._origin;

      if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_11__.ElementRef) {
        return origin.nativeElement.getBoundingClientRect();
      } // Check for Element so SVG elements are also supported.


      if (origin instanceof Element) {
        return origin.getBoundingClientRect();
      }

      var width = origin.width || 0;
      var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.

      return {
        top: origin.y,
        bottom: origin.y + height,
        left: origin.x,
        right: origin.x + width,
        height: height,
        width: width
      };
    }
  }]);

  return FlexibleConnectedPositionStrategy;
}();
/** Shallow-extends a stylesheet object with another stylesheet object. */


function extendStyles(destination, source) {
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      destination[key] = source[key];
    }
  }

  return destination;
}
/**
 * Extracts the pixel value as a number from a value, if it's a number
 * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.
 */


function getPixelValue(input) {
  if (typeof input !== 'number' && input != null) {
    var _input$split = input.split(cssUnitPattern),
        _input$split2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_input$split, 2),
        value = _input$split2[0],
        units = _input$split2[1];

    return !units || units === 'px' ? parseFloat(value) : null;
  }

  return input || null;
}
/**
 * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to
 * the nearest pixel. This allows us to account for the cases where there may be sub-pixel
 * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage
 * size, see #21350).
 */


function getRoundedBoundingClientRect(clientRect) {
  return {
    top: Math.floor(clientRect.top),
    right: Math.floor(clientRect.right),
    bottom: Math.floor(clientRect.bottom),
    left: Math.floor(clientRect.left),
    width: Math.floor(clientRect.width),
    height: Math.floor(clientRect.height)
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * implicit position relative to some origin element. The relative position is defined in terms of
 * a point on the origin element that is connected to a point on the overlay element. For example,
 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
 * of the overlay.
 * @deprecated Use `FlexibleConnectedPositionStrategy` instead.
 * @breaking-change 8.0.0
 */


var ConnectedPositionStrategy = /*#__PURE__*/function () {
  function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ConnectedPositionStrategy);

    /** Ordered list of preferred positions, from most to least desirable. */
    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain
    // the extra logic, we create an instance of the positioning strategy that has some
    // defaults that make it behave as the old position strategy and to which we'll
    // proxy all of the API calls.

    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);
    this.withFallbackPosition(originPos, overlayPos);
    this.onPositionChange = this._positionStrategy.positionChanges;
  }
  /** Ordered list of preferred positions, from most to least desirable. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ConnectedPositionStrategy, [{
    key: "positions",
    get: function get() {
      return this._preferredPositions;
    }
    /** Attach this position strategy to an overlay. */

  }, {
    key: "attach",
    value: function attach(overlayRef) {
      this._overlayRef = overlayRef;

      this._positionStrategy.attach(overlayRef);

      if (this._direction) {
        overlayRef.setDirection(this._direction);
        this._direction = null;
      }
    }
    /** Disposes all resources used by the position strategy. */

  }, {
    key: "dispose",
    value: function dispose() {
      this._positionStrategy.dispose();
    }
    /** @docs-private */

  }, {
    key: "detach",
    value: function detach() {
      this._positionStrategy.detach();
    }
    /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin fits on-screen.
     * @docs-private
     */

  }, {
    key: "apply",
    value: function apply() {
      this._positionStrategy.apply();
    }
    /**
     * Re-positions the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     */

  }, {
    key: "recalculateLastPosition",
    value: function recalculateLastPosition() {
      this._positionStrategy.reapplyLastPosition();
    }
    /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     */

  }, {
    key: "withScrollableContainers",
    value: function withScrollableContainers(scrollables) {
      this._positionStrategy.withScrollableContainers(scrollables);
    }
    /**
     * Adds a new preferred fallback position.
     * @param originPos
     * @param overlayPos
     */

  }, {
    key: "withFallbackPosition",
    value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {
      var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);

      this._preferredPositions.push(position);

      this._positionStrategy.withPositions(this._preferredPositions);

      return this;
    }
    /**
     * Sets the layout direction so the overlay's position can be adjusted to match.
     * @param dir New layout direction.
     */

  }, {
    key: "withDirection",
    value: function withDirection(dir) {
      // Since the direction might be declared before the strategy is attached,
      // we save the value in a temporary property and we'll transfer it to the
      // overlay ref on attachment.
      if (this._overlayRef) {
        this._overlayRef.setDirection(dir);
      } else {
        this._direction = dir;
      }

      return this;
    }
    /**
     * Sets an offset for the overlay's connection point on the x-axis
     * @param offset New offset in the X axis.
     */

  }, {
    key: "withOffsetX",
    value: function withOffsetX(offset) {
      this._positionStrategy.withDefaultOffsetX(offset);

      return this;
    }
    /**
     * Sets an offset for the overlay's connection point on the y-axis
     * @param  offset New offset in the Y axis.
     */

  }, {
    key: "withOffsetY",
    value: function withOffsetY(offset) {
      this._positionStrategy.withDefaultOffsetY(offset);

      return this;
    }
    /**
     * Sets whether the overlay's position should be locked in after it is positioned
     * initially. When an overlay is locked in, it won't attempt to reposition itself
     * when the position is re-applied (e.g. when the user scrolls away).
     * @param isLocked Whether the overlay should locked in.
     */

  }, {
    key: "withLockedPosition",
    value: function withLockedPosition(isLocked) {
      this._positionStrategy.withLockedPosition(isLocked);

      return this;
    }
    /**
     * Overwrites the current set of positions with an array of new ones.
     * @param positions Position pairs to be set on the strategy.
     */

  }, {
    key: "withPositions",
    value: function withPositions(positions) {
      this._preferredPositions = positions.slice();

      this._positionStrategy.withPositions(this._preferredPositions);

      return this;
    }
    /**
     * Sets the origin element, relative to which to position the overlay.
     * @param origin Reference to the new origin element.
     */

  }, {
    key: "setOrigin",
    value: function setOrigin(origin) {
      this._positionStrategy.setOrigin(origin);

      return this;
    }
  }]);

  return ConnectedPositionStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Class to be added to the overlay pane wrapper. */


var wrapperClass = 'cdk-global-overlay-wrapper';
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * explicit position relative to the browser's viewport. We use flexbox, instead of
 * transforms, in order to avoid issues with subpixel rendering which can cause the
 * element to become blurry.
 */

var GlobalPositionStrategy = /*#__PURE__*/function () {
  function GlobalPositionStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, GlobalPositionStrategy);

    this._cssPosition = 'static';
    this._topOffset = '';
    this._bottomOffset = '';
    this._leftOffset = '';
    this._rightOffset = '';
    this._alignItems = '';
    this._justifyContent = '';
    this._width = '';
    this._height = '';
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(GlobalPositionStrategy, [{
    key: "attach",
    value: function attach(overlayRef) {
      var config = overlayRef.getConfig();
      this._overlayRef = overlayRef;

      if (this._width && !config.width) {
        overlayRef.updateSize({
          width: this._width
        });
      }

      if (this._height && !config.height) {
        overlayRef.updateSize({
          height: this._height
        });
      }

      overlayRef.hostElement.classList.add(wrapperClass);
      this._isDisposed = false;
    }
    /**
     * Sets the top position of the overlay. Clears any previously set vertical position.
     * @param value New top offset.
     */

  }, {
    key: "top",
    value: function top() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this._bottomOffset = '';
      this._topOffset = value;
      this._alignItems = 'flex-start';
      return this;
    }
    /**
     * Sets the left position of the overlay. Clears any previously set horizontal position.
     * @param value New left offset.
     */

  }, {
    key: "left",
    value: function left() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this._rightOffset = '';
      this._leftOffset = value;
      this._justifyContent = 'flex-start';
      return this;
    }
    /**
     * Sets the bottom position of the overlay. Clears any previously set vertical position.
     * @param value New bottom offset.
     */

  }, {
    key: "bottom",
    value: function bottom() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this._topOffset = '';
      this._bottomOffset = value;
      this._alignItems = 'flex-end';
      return this;
    }
    /**
     * Sets the right position of the overlay. Clears any previously set horizontal position.
     * @param value New right offset.
     */

  }, {
    key: "right",
    value: function right() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this._leftOffset = '';
      this._rightOffset = value;
      this._justifyContent = 'flex-end';
      return this;
    }
    /**
     * Sets the overlay width and clears any previously set width.
     * @param value New width for the overlay
     * @deprecated Pass the `width` through the `OverlayConfig`.
     * @breaking-change 8.0.0
     */

  }, {
    key: "width",
    value: function width() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (this._overlayRef) {
        this._overlayRef.updateSize({
          width: value
        });
      } else {
        this._width = value;
      }

      return this;
    }
    /**
     * Sets the overlay height and clears any previously set height.
     * @param value New height for the overlay
     * @deprecated Pass the `height` through the `OverlayConfig`.
     * @breaking-change 8.0.0
     */

  }, {
    key: "height",
    value: function height() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (this._overlayRef) {
        this._overlayRef.updateSize({
          height: value
        });
      } else {
        this._height = value;
      }

      return this;
    }
    /**
     * Centers the overlay horizontally with an optional offset.
     * Clears any previously set horizontal position.
     *
     * @param offset Overlay offset from the horizontal center.
     */

  }, {
    key: "centerHorizontally",
    value: function centerHorizontally() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.left(offset);
      this._justifyContent = 'center';
      return this;
    }
    /**
     * Centers the overlay vertically with an optional offset.
     * Clears any previously set vertical position.
     *
     * @param offset Overlay offset from the vertical center.
     */

  }, {
    key: "centerVertically",
    value: function centerVertically() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.top(offset);
      this._alignItems = 'center';
      return this;
    }
    /**
     * Apply the position to the element.
     * @docs-private
     */

  }, {
    key: "apply",
    value: function apply() {
      // Since the overlay ref applies the strategy asynchronously, it could
      // have been disposed before it ends up being applied. If that is the
      // case, we shouldn't do anything.
      if (!this._overlayRef || !this._overlayRef.hasAttached()) {
        return;
      }

      var styles = this._overlayRef.overlayElement.style;
      var parentStyles = this._overlayRef.hostElement.style;

      var config = this._overlayRef.getConfig();

      var width = config.width,
          height = config.height,
          maxWidth = config.maxWidth,
          maxHeight = config.maxHeight;
      var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');
      var shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');
      styles.position = this._cssPosition;
      styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;
      styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;
      styles.marginBottom = this._bottomOffset;
      styles.marginRight = this._rightOffset;

      if (shouldBeFlushHorizontally) {
        parentStyles.justifyContent = 'flex-start';
      } else if (this._justifyContent === 'center') {
        parentStyles.justifyContent = 'center';
      } else if (this._overlayRef.getConfig().direction === 'rtl') {
        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we
        // don't want that because our positioning is explicitly `left` and `right`, hence
        // why we do another inversion to ensure that the overlay stays in the same position.
        // TODO: reconsider this if we add `start` and `end` methods.
        if (this._justifyContent === 'flex-start') {
          parentStyles.justifyContent = 'flex-end';
        } else if (this._justifyContent === 'flex-end') {
          parentStyles.justifyContent = 'flex-start';
        }
      } else {
        parentStyles.justifyContent = this._justifyContent;
      }

      parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;
    }
    /**
     * Cleans up the DOM changes from the position strategy.
     * @docs-private
     */

  }, {
    key: "dispose",
    value: function dispose() {
      if (this._isDisposed || !this._overlayRef) {
        return;
      }

      var styles = this._overlayRef.overlayElement.style;
      var parent = this._overlayRef.hostElement;
      var parentStyles = parent.style;
      parent.classList.remove(wrapperClass);
      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
      this._overlayRef = null;
      this._isDisposed = true;
    }
  }]);

  return GlobalPositionStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Builder for overlay position strategy. */


var OverlayPositionBuilder = /*#__PURE__*/function () {
  function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayPositionBuilder);

    this._viewportRuler = _viewportRuler;
    this._document = _document;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
  }
  /**
   * Creates a global position strategy.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(OverlayPositionBuilder, [{
    key: "global",
    value: function global() {
      return new GlobalPositionStrategy();
    }
    /**
     * Creates a relative position strategy.
     * @param elementRef
     * @param originPos
     * @param overlayPos
     * @deprecated Use `flexibleConnectedTo` instead.
     * @breaking-change 8.0.0
     */

  }, {
    key: "connectedTo",
    value: function connectedTo(elementRef, originPos, overlayPos) {
      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);
    }
    /**
     * Creates a flexible position strategy.
     * @param origin Origin relative to which to position the overlay.
     */

  }, {
    key: "flexibleConnectedTo",
    value: function flexibleConnectedTo(origin) {
      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
    }
  }]);

  return OverlayPositionBuilder;
}();

OverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {
  return new (t || OverlayPositionBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayContainer));
};

OverlayPositionBuilder.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function OverlayPositionBuilder_Factory() {
    return new OverlayPositionBuilder(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayContainer));
  },
  token: OverlayPositionBuilder,
  providedIn: "root"
});

OverlayPositionBuilder.ctorParameters = function () {
  return [{
    type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
  }, {
    type: OverlayContainer
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](OverlayPositionBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ViewportRuler
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }, {
      type: OverlayContainer
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Next overlay unique ID. */


var nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver
// which needs to be different depending on where OverlayModule is imported.

/**
 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
 * used as a low-level building block for other components. Dialogs, tooltips, menus,
 * selects, etc. can all be built using overlays. The service should primarily be used by authors
 * of re-usable components rather than developers building end-user applications.
 *
 * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
 */

var Overlay = /*#__PURE__*/function () {
  function Overlay(
  /** Scrolling strategies that can be used when creating an overlay. */
  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, Overlay);

    this.scrollStrategies = scrollStrategies;
    this._overlayContainer = _overlayContainer;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._positionBuilder = _positionBuilder;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._injector = _injector;
    this._ngZone = _ngZone;
    this._document = _document;
    this._directionality = _directionality;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
  }
  /**
   * Creates an overlay.
   * @param config Configuration applied to the overlay.
   * @returns Reference to the created overlay.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(Overlay, [{
    key: "create",
    value: function create(config) {
      var host = this._createHostElement();

      var pane = this._createPaneElement(host);

      var portalOutlet = this._createPortalOutlet(pane);

      var overlayConfig = new OverlayConfig(config);
      overlayConfig.direction = overlayConfig.direction || this._directionality.value;
      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);
    }
    /**
     * Gets a position builder that can be used, via fluent API,
     * to construct and configure a position strategy.
     * @returns An overlay position builder.
     */

  }, {
    key: "position",
    value: function position() {
      return this._positionBuilder;
    }
    /**
     * Creates the DOM element for an overlay and appends it to the overlay container.
     * @returns Newly-created pane element
     */

  }, {
    key: "_createPaneElement",
    value: function _createPaneElement(host) {
      var pane = this._document.createElement('div');

      pane.id = "cdk-overlay-".concat(nextUniqueId++);
      pane.classList.add('cdk-overlay-pane');
      host.appendChild(pane);
      return pane;
    }
    /**
     * Creates the host element that wraps around an overlay
     * and can be used for advanced positioning.
     * @returns Newly-create host element.
     */

  }, {
    key: "_createHostElement",
    value: function _createHostElement() {
      var host = this._document.createElement('div');

      this._overlayContainer.getContainerElement().appendChild(host);

      return host;
    }
    /**
     * Create a DomPortalOutlet into which the overlay content can be loaded.
     * @param pane The DOM element to turn into a portal outlet.
     * @returns A portal outlet for the given DOM element.
     */

  }, {
    key: "_createPortalOutlet",
    value: function _createPortalOutlet(pane) {
      // We have to resolve the ApplicationRef later in order to allow people
      // to use overlay-based providers during app initialization.
      if (!this._appRef) {
        this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_11__.ApplicationRef);
      }

      return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);
    }
  }]);

  return Overlay;
}();

Overlay.ɵfac = function Overlay_Factory(t) {
  return new (t || Overlay)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](ScrollStrategyOptions), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayContainer), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayPositionBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayKeyboardDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.Location), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](OverlayOutsideClickDispatcher));
};

Overlay.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  token: Overlay,
  factory: Overlay.ɵfac
});

Overlay.ctorParameters = function () {
  return [{
    type: ScrollStrategyOptions
  }, {
    type: OverlayContainer
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ComponentFactoryResolver
  }, {
    type: OverlayPositionBuilder
  }, {
    type: OverlayKeyboardDispatcher
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injector
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality
  }, {
    type: _angular_common__WEBPACK_IMPORTED_MODULE_12__.Location
  }, {
    type: OverlayOutsideClickDispatcher
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](Overlay, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable
  }], function () {
    return [{
      type: ScrollStrategyOptions
    }, {
      type: OverlayContainer
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ComponentFactoryResolver
    }, {
      type: OverlayPositionBuilder
    }, {
      type: OverlayKeyboardDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injector
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_12__.Location
    }, {
      type: OverlayOutsideClickDispatcher
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Default set of positions for the overlay. Follows the behavior of a dropdown. */


var defaultPositionList = [{
  originX: 'start',
  originY: 'bottom',
  overlayX: 'start',
  overlayY: 'top'
}, {
  originX: 'start',
  originY: 'top',
  overlayX: 'start',
  overlayY: 'bottom'
}, {
  originX: 'end',
  originY: 'top',
  overlayX: 'end',
  overlayY: 'bottom'
}, {
  originX: 'end',
  originY: 'bottom',
  overlayX: 'end',
  overlayY: 'top'
}];
/** Injection token that determines the scroll handling while the connected overlay is open. */

var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.InjectionToken('cdk-connected-overlay-scroll-strategy');
/**
 * Directive applied to an element to make it usable as an origin for an Overlay using a
 * ConnectedPositionStrategy.
 */

var CdkOverlayOrigin = function CdkOverlayOrigin(
/** Reference to the element on which the directive is applied. */
elementRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkOverlayOrigin);

  this.elementRef = elementRef;
};

CdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {
  return new (t || CdkOverlayOrigin)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.ElementRef));
};

CdkOverlayOrigin.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineDirective"]({
  type: CdkOverlayOrigin,
  selectors: [["", "cdk-overlay-origin", ""], ["", "overlay-origin", ""], ["", "cdkOverlayOrigin", ""]],
  exportAs: ["cdkOverlayOrigin"]
});

CdkOverlayOrigin.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ElementRef
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](CdkOverlayOrigin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Directive,
    args: [{
      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
      exportAs: 'cdkOverlayOrigin'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ElementRef
    }];
  }, null);
})();
/**
 * Directive to facilitate declarative creation of an
 * Overlay using a FlexibleConnectedPositionStrategy.
 */


var CdkConnectedOverlay = /*#__PURE__*/function () {
  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkConnectedOverlay);

    this._overlay = _overlay;
    this._dir = _dir;
    this._hasBackdrop = false;
    this._lockPosition = false;
    this._growAfterOpen = false;
    this._flexibleDimensions = false;
    this._push = false;
    this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;
    this._attachSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;
    this._detachSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;
    this._positionSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription.EMPTY;
    /** Margin between the overlay and the viewport edges. */

    this.viewportMargin = 0;
    /** Whether the overlay is open. */

    this.open = false;
    /** Whether the overlay can be closed by user interaction. */

    this.disableClose = false;
    /** Event emitted when the backdrop is clicked. */

    this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    /** Event emitted when the position has changed. */

    this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    /** Event emitted when the overlay has been attached. */

    this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    /** Event emitted when the overlay has been detached. */

    this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    /** Emits when there are keyboard events that are targeted at the overlay. */

    this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    /** Emits when there are mouse outside click events that are targeted at the overlay. */

    this.overlayOutsideClick = new _angular_core__WEBPACK_IMPORTED_MODULE_11__.EventEmitter();
    this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__.TemplatePortal(templateRef, viewContainerRef);
    this._scrollStrategyFactory = scrollStrategyFactory;
    this.scrollStrategy = this._scrollStrategyFactory();
  }
  /** The offset in pixels for the overlay connection point on the x-axis */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CdkConnectedOverlay, [{
    key: "offsetX",
    get: function get() {
      return this._offsetX;
    },
    set: function set(offsetX) {
      this._offsetX = offsetX;

      if (this._position) {
        this._updatePositionStrategy(this._position);
      }
    }
    /** The offset in pixels for the overlay connection point on the y-axis */

  }, {
    key: "offsetY",
    get: function get() {
      return this._offsetY;
    },
    set: function set(offsetY) {
      this._offsetY = offsetY;

      if (this._position) {
        this._updatePositionStrategy(this._position);
      }
    }
    /** Whether or not the overlay should attach a backdrop. */

  }, {
    key: "hasBackdrop",
    get: function get() {
      return this._hasBackdrop;
    },
    set: function set(value) {
      this._hasBackdrop = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceBooleanProperty)(value);
    }
    /** Whether or not the overlay should be locked when scrolling. */

  }, {
    key: "lockPosition",
    get: function get() {
      return this._lockPosition;
    },
    set: function set(value) {
      this._lockPosition = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceBooleanProperty)(value);
    }
    /** Whether the overlay's width and height can be constrained to fit within the viewport. */

  }, {
    key: "flexibleDimensions",
    get: function get() {
      return this._flexibleDimensions;
    },
    set: function set(value) {
      this._flexibleDimensions = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceBooleanProperty)(value);
    }
    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */

  }, {
    key: "growAfterOpen",
    get: function get() {
      return this._growAfterOpen;
    },
    set: function set(value) {
      this._growAfterOpen = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceBooleanProperty)(value);
    }
    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */

  }, {
    key: "push",
    get: function get() {
      return this._push;
    },
    set: function set(value) {
      this._push = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_10__.coerceBooleanProperty)(value);
    }
    /** The associated overlay reference. */

  }, {
    key: "overlayRef",
    get: function get() {
      return this._overlayRef;
    }
    /** The element's layout direction. */

  }, {
    key: "dir",
    get: function get() {
      return this._dir ? this._dir.value : 'ltr';
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._attachSubscription.unsubscribe();

      this._detachSubscription.unsubscribe();

      this._backdropSubscription.unsubscribe();

      this._positionSubscription.unsubscribe();

      if (this._overlayRef) {
        this._overlayRef.dispose();
      }
    }
  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if (this._position) {
        this._updatePositionStrategy(this._position);

        this._overlayRef.updateSize({
          width: this.width,
          minWidth: this.minWidth,
          height: this.height,
          minHeight: this.minHeight
        });

        if (changes['origin'] && this.open) {
          this._position.apply();
        }
      }

      if (changes['open']) {
        this.open ? this._attachOverlay() : this._detachOverlay();
      }
    }
    /** Creates an overlay */

  }, {
    key: "_createOverlay",
    value: function _createOverlay() {
      var _this15 = this;

      if (!this.positions || !this.positions.length) {
        this.positions = defaultPositionList;
      }

      var overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());

      this._attachSubscription = overlayRef.attachments().subscribe(function () {
        return _this15.attach.emit();
      });
      this._detachSubscription = overlayRef.detachments().subscribe(function () {
        return _this15.detach.emit();
      });
      overlayRef.keydownEvents().subscribe(function (event) {
        _this15.overlayKeydown.next(event);

        if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_20__.ESCAPE && !_this15.disableClose && !(0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_20__.hasModifierKey)(event)) {
          event.preventDefault();

          _this15._detachOverlay();
        }
      });

      this._overlayRef.outsidePointerEvents().subscribe(function (event) {
        _this15.overlayOutsideClick.next(event);
      });
    }
    /** Builds the overlay config based on the directive's inputs */

  }, {
    key: "_buildConfig",
    value: function _buildConfig() {
      var positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();

      var overlayConfig = new OverlayConfig({
        direction: this._dir,
        positionStrategy: positionStrategy,
        scrollStrategy: this.scrollStrategy,
        hasBackdrop: this.hasBackdrop
      });

      if (this.width || this.width === 0) {
        overlayConfig.width = this.width;
      }

      if (this.height || this.height === 0) {
        overlayConfig.height = this.height;
      }

      if (this.minWidth || this.minWidth === 0) {
        overlayConfig.minWidth = this.minWidth;
      }

      if (this.minHeight || this.minHeight === 0) {
        overlayConfig.minHeight = this.minHeight;
      }

      if (this.backdropClass) {
        overlayConfig.backdropClass = this.backdropClass;
      }

      if (this.panelClass) {
        overlayConfig.panelClass = this.panelClass;
      }

      return overlayConfig;
    }
    /** Updates the state of a position strategy, based on the values of the directive inputs. */

  }, {
    key: "_updatePositionStrategy",
    value: function _updatePositionStrategy(positionStrategy) {
      var _this16 = this;

      var positions = this.positions.map(function (currentPosition) {
        return {
          originX: currentPosition.originX,
          originY: currentPosition.originY,
          overlayX: currentPosition.overlayX,
          overlayY: currentPosition.overlayY,
          offsetX: currentPosition.offsetX || _this16.offsetX,
          offsetY: currentPosition.offsetY || _this16.offsetY,
          panelClass: currentPosition.panelClass || undefined
        };
      });
      return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);
    }
    /** Returns the position strategy of the overlay to be set on the overlay config */

  }, {
    key: "_createPositionStrategy",
    value: function _createPositionStrategy() {
      var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);

      this._updatePositionStrategy(strategy);

      return strategy;
    }
    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */

  }, {
    key: "_attachOverlay",
    value: function _attachOverlay() {
      var _this17 = this;

      if (!this._overlayRef) {
        this._createOverlay();
      } else {
        // Update the overlay size, in case the directive's inputs have changed
        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
      }

      if (!this._overlayRef.hasAttached()) {
        this._overlayRef.attach(this._templatePortal);
      }

      if (this.hasBackdrop) {
        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {
          _this17.backdropClick.emit(event);
        });
      } else {
        this._backdropSubscription.unsubscribe();
      }

      this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting
      // together all the information for it can be expensive.


      if (this.positionChange.observers.length > 0) {
        this._positionSubscription = this._position.positionChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.takeWhile)(function () {
          return _this17.positionChange.observers.length > 0;
        })).subscribe(function (position) {
          _this17.positionChange.emit(position);

          if (_this17.positionChange.observers.length === 0) {
            _this17._positionSubscription.unsubscribe();
          }
        });
      }
    }
    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */

  }, {
    key: "_detachOverlay",
    value: function _detachOverlay() {
      if (this._overlayRef) {
        this._overlayRef.detach();
      }

      this._backdropSubscription.unsubscribe();

      this._positionSubscription.unsubscribe();
    }
  }]);

  return CdkConnectedOverlay;
}();

CdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {
  return new (t || CdkConnectedOverlay)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality, 8));
};

CdkConnectedOverlay.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineDirective"]({
  type: CdkConnectedOverlay,
  selectors: [["", "cdk-connected-overlay", ""], ["", "connected-overlay", ""], ["", "cdkConnectedOverlay", ""]],
  inputs: {
    viewportMargin: ["cdkConnectedOverlayViewportMargin", "viewportMargin"],
    open: ["cdkConnectedOverlayOpen", "open"],
    disableClose: ["cdkConnectedOverlayDisableClose", "disableClose"],
    scrollStrategy: ["cdkConnectedOverlayScrollStrategy", "scrollStrategy"],
    offsetX: ["cdkConnectedOverlayOffsetX", "offsetX"],
    offsetY: ["cdkConnectedOverlayOffsetY", "offsetY"],
    hasBackdrop: ["cdkConnectedOverlayHasBackdrop", "hasBackdrop"],
    lockPosition: ["cdkConnectedOverlayLockPosition", "lockPosition"],
    flexibleDimensions: ["cdkConnectedOverlayFlexibleDimensions", "flexibleDimensions"],
    growAfterOpen: ["cdkConnectedOverlayGrowAfterOpen", "growAfterOpen"],
    push: ["cdkConnectedOverlayPush", "push"],
    positions: ["cdkConnectedOverlayPositions", "positions"],
    origin: ["cdkConnectedOverlayOrigin", "origin"],
    positionStrategy: ["cdkConnectedOverlayPositionStrategy", "positionStrategy"],
    width: ["cdkConnectedOverlayWidth", "width"],
    height: ["cdkConnectedOverlayHeight", "height"],
    minWidth: ["cdkConnectedOverlayMinWidth", "minWidth"],
    minHeight: ["cdkConnectedOverlayMinHeight", "minHeight"],
    backdropClass: ["cdkConnectedOverlayBackdropClass", "backdropClass"],
    panelClass: ["cdkConnectedOverlayPanelClass", "panelClass"],
    transformOriginSelector: ["cdkConnectedOverlayTransformOriginOn", "transformOriginSelector"]
  },
  outputs: {
    backdropClick: "backdropClick",
    positionChange: "positionChange",
    attach: "attach",
    detach: "detach",
    overlayKeydown: "overlayKeydown",
    overlayOutsideClick: "overlayOutsideClick"
  },
  exportAs: ["cdkConnectedOverlay"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵNgOnChangesFeature"]]
});

CdkConnectedOverlay.ctorParameters = function () {
  return [{
    type: Overlay
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.TemplateRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewContainerRef
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
    }]
  }, {
    type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Optional
    }]
  }];
};

CdkConnectedOverlay.propDecorators = {
  origin: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayOrigin']
  }],
  positions: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayPositions']
  }],
  positionStrategy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayPositionStrategy']
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayOffsetX']
  }],
  offsetY: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayOffsetY']
  }],
  width: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayWidth']
  }],
  height: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayHeight']
  }],
  minWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayMinWidth']
  }],
  minHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayMinHeight']
  }],
  backdropClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayBackdropClass']
  }],
  panelClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayPanelClass']
  }],
  viewportMargin: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayViewportMargin']
  }],
  scrollStrategy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayScrollStrategy']
  }],
  open: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayOpen']
  }],
  disableClose: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayDisableClose']
  }],
  transformOriginSelector: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayTransformOriginOn']
  }],
  hasBackdrop: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayHasBackdrop']
  }],
  lockPosition: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayLockPosition']
  }],
  flexibleDimensions: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayFlexibleDimensions']
  }],
  growAfterOpen: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayGrowAfterOpen']
  }],
  push: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
    args: ['cdkConnectedOverlayPush']
  }],
  backdropClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }],
  positionChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }],
  attach: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }],
  detach: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }],
  overlayKeydown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }],
  overlayOutsideClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](CdkConnectedOverlay, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Directive,
    args: [{
      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
      exportAs: 'cdkConnectedOverlay'
    }]
  }], function () {
    return [{
      type: Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewContainerRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Optional
      }]
    }];
  }, {
    viewportMargin: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayViewportMargin']
    }],
    open: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayOpen']
    }],
    disableClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayDisableClose']
    }],
    backdropClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    positionChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    attach: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    detach: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    overlayKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    overlayOutsideClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Output
    }],
    scrollStrategy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayScrollStrategy']
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayOffsetX']
    }],
    offsetY: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayOffsetY']
    }],
    hasBackdrop: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayHasBackdrop']
    }],
    lockPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayLockPosition']
    }],
    flexibleDimensions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayFlexibleDimensions']
    }],
    growAfterOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayGrowAfterOpen']
    }],
    push: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayPush']
    }],
    positions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayPositions']
    }],
    origin: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayOrigin']
    }],
    positionStrategy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayPositionStrategy']
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayWidth']
    }],
    height: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayHeight']
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayMinWidth']
    }],
    minHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayMinHeight']
    }],
    backdropClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayBackdropClass']
    }],
    panelClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayPanelClass']
    }],
    transformOriginSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input,
      args: ['cdkConnectedOverlayTransformOriginOn']
    }]
  });
})();
/** @docs-private */


function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
  return function () {
    return overlay.scrollStrategies.reposition();
  };
}
/** @docs-private */


var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
  deps: [Overlay],
  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var OverlayModule = function OverlayModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, OverlayModule);
};

OverlayModule.ɵfac = function OverlayModule_Factory(t) {
  return new (t || OverlayModule)();
};

OverlayModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineNgModule"]({
  type: OverlayModule
});
OverlayModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjector"]({
  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],
  imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](OverlayModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.NgModule,
    args: [{
      imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule],
      exports: [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule],
      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],
      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵsetNgModuleScope"](OverlayModule, {
    declarations: function declarations() {
      return [CdkConnectedOverlay, CdkOverlayOrigin];
    },
    imports: function imports() {
      return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_19__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_18__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule];
    },
    exports: function exports() {
      return [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__.ScrollingModule];
    }
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Alternative to OverlayContainer that supports correct displaying of overlay elements in
 * Fullscreen mode
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
 *
 * Should be provided in the root component.
 */


var FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(FullscreenOverlayContainer, _OverlayContainer);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(FullscreenOverlayContainer);

  function FullscreenOverlayContainer(_document, platform) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, FullscreenOverlayContainer);

    return _super3.call(this, _document, platform);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(FullscreenOverlayContainer, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(FullscreenOverlayContainer.prototype), "ngOnDestroy", this).call(this);

      if (this._fullScreenEventName && this._fullScreenListener) {
        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
      }
    }
  }, {
    key: "_createContainer",
    value: function _createContainer() {
      var _this18 = this;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(FullscreenOverlayContainer.prototype), "_createContainer", this).call(this);

      this._adjustParentForFullscreenChange();

      this._addFullscreenChangeListener(function () {
        return _this18._adjustParentForFullscreenChange();
      });
    }
  }, {
    key: "_adjustParentForFullscreenChange",
    value: function _adjustParentForFullscreenChange() {
      if (!this._containerElement) {
        return;
      }

      var fullscreenElement = this.getFullscreenElement();
      var parent = fullscreenElement || this._document.body;
      parent.appendChild(this._containerElement);
    }
  }, {
    key: "_addFullscreenChangeListener",
    value: function _addFullscreenChangeListener(fn) {
      var eventName = this._getEventName();

      if (eventName) {
        if (this._fullScreenListener) {
          this._document.removeEventListener(eventName, this._fullScreenListener);
        }

        this._document.addEventListener(eventName, fn);

        this._fullScreenListener = fn;
      }
    }
  }, {
    key: "_getEventName",
    value: function _getEventName() {
      if (!this._fullScreenEventName) {
        var _document = this._document;

        if (_document.fullscreenEnabled) {
          this._fullScreenEventName = 'fullscreenchange';
        } else if (_document.webkitFullscreenEnabled) {
          this._fullScreenEventName = 'webkitfullscreenchange';
        } else if (_document.mozFullScreenEnabled) {
          this._fullScreenEventName = 'mozfullscreenchange';
        } else if (_document.msFullscreenEnabled) {
          this._fullScreenEventName = 'MSFullscreenChange';
        }
      }

      return this._fullScreenEventName;
    }
    /**
     * When the page is put into fullscreen mode, a specific element is specified.
     * Only that element and its children are visible when in fullscreen mode.
     */

  }, {
    key: "getFullscreenElement",
    value: function getFullscreenElement() {
      var _document = this._document;
      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;
    }
  }]);

  return FullscreenOverlayContainer;
}(OverlayContainer);

FullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {
  return new (t || FullscreenOverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
};

FullscreenOverlayContainer.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵdefineInjectable"]({
  factory: function FullscreenOverlayContainer_Factory() {
    return new FullscreenOverlayContainer(_angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform));
  },
  token: FullscreenOverlayContainer,
  providedIn: "root"
});

FullscreenOverlayContainer.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_11__["ɵsetClassMetadata"](FullscreenOverlayContainer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 34079:
/*!********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/platform.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": function() { return /* binding */ Platform; },
/* harmony export */   "PlatformModule": function() { return /* binding */ PlatformModule; },
/* harmony export */   "_getEventTarget": function() { return /* binding */ _getEventTarget; },
/* harmony export */   "_getFocusedElementPierceShadowDom": function() { return /* binding */ _getFocusedElementPierceShadowDom; },
/* harmony export */   "_getShadowRoot": function() { return /* binding */ _getShadowRoot; },
/* harmony export */   "_supportsShadowDom": function() { return /* binding */ _supportsShadowDom; },
/* harmony export */   "getRtlScrollAxisType": function() { return /* binding */ getRtlScrollAxisType; },
/* harmony export */   "getSupportedInputTypes": function() { return /* binding */ getSupportedInputTypes; },
/* harmony export */   "normalizePassiveListenerOptions": function() { return /* binding */ normalizePassiveListenerOptions; },
/* harmony export */   "supportsPassiveEventListeners": function() { return /* binding */ supportsPassiveEventListeners; },
/* harmony export */   "supportsScrollBehavior": function() { return /* binding */ supportsScrollBehavior; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 40093);




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Whether the current platform supports the V8 Break Iterator. The V8 check
// is necessary to detect all Blink based browsers.


var hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
// cause IE to throw. These cases are tied to particular versions of Windows and can happen if
// the consumer is providing a polyfilled `Map`. See:
// https://github.com/Microsoft/ChakraCore/issues/3189
// https://github.com/angular/components/issues/15687

try {
  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;
} catch (_a) {
  hasV8BreakIterator = false;
}
/**
 * Service to detect the current platform by comparing the userAgent strings and
 * checking browser-specific global properties.
 */


var Platform = function Platform(_platformId) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Platform);

  this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed
  // without the navigator, the following checks will fail. This is preferred because
  // sometimes the Document may be shimmed without the user's knowledge or intention

  /** Whether the Angular application is being rendered in the browser. */

  this.isBrowser = this._platformId ? (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(this._platformId) : typeof document === 'object' && !!document;
  /** Whether the current browser is Microsoft Edge. */

  this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
  /** Whether the current rendering engine is Microsoft Trident. */

  this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.

  /** Whether the current rendering engine is Blink. */

  this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
  // ensure that Webkit runs standalone and is not used as another engine's base.

  /** Whether the current rendering engine is WebKit. */

  this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
  /** Whether the current platform is Apple iOS. */

  this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify
  // them self as Gecko-like browsers and modify the userAgent's according to that.
  // Since we only cover one explicit Firefox case, we can simply check for Firefox
  // instead of having an unstable check for Gecko.

  /** Whether the current browser is Firefox. */

  this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
  /** Whether the current platform is Android. */
  // Trident on mobile adds the android platform to the userAgent to trick detections.

  this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
  // Safari browser should also use Webkit as its layout engine.

  /** Whether the current browser is Safari. */

  this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
};

Platform.ɵfac = function Platform_Factory(t) {
  return new (t || Platform)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.PLATFORM_ID));
};

Platform.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  factory: function Platform_Factory() {
    return new Platform(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.PLATFORM_ID));
  },
  token: Platform,
  providedIn: "root"
});

Platform.ctorParameters = function () {
  return [{
    type: Object,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__.PLATFORM_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](Platform, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__.PLATFORM_ID]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var PlatformModule = function PlatformModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, PlatformModule);
};

PlatformModule.ɵfac = function PlatformModule_Factory(t) {
  return new (t || PlatformModule)();
};

PlatformModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
  type: PlatformModule
});
PlatformModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](PlatformModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
    args: [{}]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result Set of input types support by the current browser. */


var supportedInputTypes;
/** Types of `<input>` that *might* be supported. */

var candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
// first changing it to something else:
// The specified value "" does not conform to the required format.
// The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
/** @returns The input types supported by this browser. */

function getSupportedInputTypes() {
  // Result is cached.
  if (supportedInputTypes) {
    return supportedInputTypes;
  } // We can't check if an input type is not supported until we're on the browser, so say that
  // everything is supported when not on the browser. We don't use `Platform` here since it's
  // just a helper function and can't inject it.


  if (typeof document !== 'object' || !document) {
    supportedInputTypes = new Set(candidateInputTypes);
    return supportedInputTypes;
  }

  var featureTestInput = document.createElement('input');
  supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {
    featureTestInput.setAttribute('type', value);
    return featureTestInput.type === value;
  }));
  return supportedInputTypes;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result of whether the user's browser supports passive event listeners. */


var supportsPassiveEvents;
/**
 * Checks whether the user's browser supports passive event listeners.
 * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
 */

function supportsPassiveEventListeners() {
  if (supportsPassiveEvents == null && typeof window !== 'undefined') {
    try {
      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
        get: function get() {
          return supportsPassiveEvents = true;
        }
      }));
    } finally {
      supportsPassiveEvents = supportsPassiveEvents || false;
    }
  }

  return supportsPassiveEvents;
}
/**
 * Normalizes an `AddEventListener` object to something that can be passed
 * to `addEventListener` on any browser, no matter whether it supports the
 * `options` parameter.
 * @param options Object to be normalized.
 */


function normalizePassiveListenerOptions(options) {
  return supportsPassiveEventListeners() ? options : !!options.capture;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */


var rtlScrollAxisType;
/** Cached result of the check that indicates whether the browser supports scroll behaviors. */

var scrollBehaviorSupported;
/** Check whether the browser supports scroll behaviors. */

function supportsScrollBehavior() {
  if (scrollBehaviorSupported == null) {
    // If we're not in the browser, it can't be supported. Also check for `Element`, because
    // some projects stub out the global `document` during SSR which can throw us off.
    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {
      scrollBehaviorSupported = false;
      return scrollBehaviorSupported;
    } // If the element can have a `scrollBehavior` style, we can be sure that it's supported.


    if ('scrollBehavior' in document.documentElement.style) {
      scrollBehaviorSupported = true;
    } else {
      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's
      // supported but it doesn't handle scroll behavior, or it has been polyfilled.
      var scrollToFunction = Element.prototype.scrollTo;

      if (scrollToFunction) {
        // We can detect if the function has been polyfilled by calling `toString` on it. Native
        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get
        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider
        // polyfilled functions as supporting scroll behavior.
        scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
      } else {
        scrollBehaviorSupported = false;
      }
    }
  }

  return scrollBehaviorSupported;
}
/**
 * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
 * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
 */


function getRtlScrollAxisType() {
  // We can't check unless we're on the browser. Just assume 'normal' if we're not.
  if (typeof document !== 'object' || !document) {
    return 0
    /* NORMAL */
    ;
  }

  if (rtlScrollAxisType == null) {
    // Create a 1px wide scrolling container and a 2px wide content element.
    var scrollContainer = document.createElement('div');
    var containerStyle = scrollContainer.style;
    scrollContainer.dir = 'rtl';
    containerStyle.width = '1px';
    containerStyle.overflow = 'auto';
    containerStyle.visibility = 'hidden';
    containerStyle.pointerEvents = 'none';
    containerStyle.position = 'absolute';
    var content = document.createElement('div');
    var contentStyle = content.style;
    contentStyle.width = '2px';
    contentStyle.height = '1px';
    scrollContainer.appendChild(content);
    document.body.appendChild(scrollContainer);
    rtlScrollAxisType = 0
    /* NORMAL */
    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
    // dealing with one of the other two types of browsers.

    if (scrollContainer.scrollLeft === 0) {
      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
      // return 0 when we read it again.
      scrollContainer.scrollLeft = 1;
      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1
      /* NEGATED */
      : 2
      /* INVERTED */
      ;
    }

    scrollContainer.parentNode.removeChild(scrollContainer);
  }

  return rtlScrollAxisType;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var shadowDomIsSupported;
/** Checks whether the user's browser support Shadow DOM. */

function _supportsShadowDom() {
  if (shadowDomIsSupported == null) {
    var head = typeof document !== 'undefined' ? document.head : null;
    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
  }

  return shadowDomIsSupported;
}
/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */


function _getShadowRoot(element) {
  if (_supportsShadowDom()) {
    var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some
    // teams have been able to hit this code path on unsupported browsers.

    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
      return rootNode;
    }
  }

  return null;
}
/**
 * Gets the currently-focused element on the page while
 * also piercing through Shadow DOM boundaries.
 */


function _getFocusedElementPierceShadowDom() {
  var activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;

  while (activeElement && activeElement.shadowRoot) {
    var newActiveElement = activeElement.shadowRoot.activeElement;

    if (newActiveElement === activeElement) {
      break;
    } else {
      activeElement = newActiveElement;
    }
  }

  return activeElement;
}
/** Gets the target of an event while accounting for Shadow DOM. */


function _getEventTarget(event) {
  // If an event is bound outside the Shadow DOM, the `event.target` will
  // point to the shadow root so we have to use `composedPath` instead.
  return event.composedPath ? event.composedPath()[0] : event.target;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 16529:
/*!******************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/portal.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasePortalHost": function() { return /* binding */ BasePortalHost; },
/* harmony export */   "BasePortalOutlet": function() { return /* binding */ BasePortalOutlet; },
/* harmony export */   "CdkPortal": function() { return /* binding */ CdkPortal; },
/* harmony export */   "CdkPortalOutlet": function() { return /* binding */ CdkPortalOutlet; },
/* harmony export */   "ComponentPortal": function() { return /* binding */ ComponentPortal; },
/* harmony export */   "DomPortal": function() { return /* binding */ DomPortal; },
/* harmony export */   "DomPortalHost": function() { return /* binding */ DomPortalHost; },
/* harmony export */   "DomPortalOutlet": function() { return /* binding */ DomPortalOutlet; },
/* harmony export */   "Portal": function() { return /* binding */ Portal; },
/* harmony export */   "PortalHostDirective": function() { return /* binding */ PortalHostDirective; },
/* harmony export */   "PortalInjector": function() { return /* binding */ PortalInjector; },
/* harmony export */   "PortalModule": function() { return /* binding */ PortalModule; },
/* harmony export */   "TemplatePortal": function() { return /* binding */ TemplatePortal; },
/* harmony export */   "TemplatePortalDirective": function() { return /* binding */ TemplatePortalDirective; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 40093);









/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Throws an exception when attempting to attach a null portal to a host.
 * @docs-private
 */



function throwNullPortalError() {
  throw Error('Must provide a portal to attach');
}
/**
 * Throws an exception when attempting to attach a portal to a host that is already attached.
 * @docs-private
 */


function throwPortalAlreadyAttachedError() {
  throw Error('Host already has a portal attached');
}
/**
 * Throws an exception when attempting to attach a portal to an already-disposed host.
 * @docs-private
 */


function throwPortalOutletAlreadyDisposedError() {
  throw Error('This PortalOutlet has already been disposed');
}
/**
 * Throws an exception when attempting to attach an unknown portal type.
 * @docs-private
 */


function throwUnknownPortalTypeError() {
  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');
}
/**
 * Throws an exception when attempting to attach a portal to a null host.
 * @docs-private
 */


function throwNullPortalOutletError() {
  throw Error('Attempting to attach a portal to a null PortalOutlet');
}
/**
 * Throws an exception when attempting to detach a portal that is not attached.
 * @docs-private
 */


function throwNoPortalAttachedError() {
  throw Error('Attempting to detach a portal that is not attached to a host');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A `Portal` is something that you want to render somewhere else.
 * It can be attach to / detached from a `PortalOutlet`.
 */


var Portal = /*#__PURE__*/function () {
  function Portal() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Portal);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Portal, [{
    key: "attach",
    value:
    /** Attach this portal to a host. */
    function attach(host) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (host == null) {
          throwNullPortalOutletError();
        }

        if (host.hasAttached()) {
          throwPortalAlreadyAttachedError();
        }
      }

      this._attachedHost = host;
      return host.attach(this);
    }
    /** Detach this portal from its host */

  }, {
    key: "detach",
    value: function detach() {
      var host = this._attachedHost;

      if (host != null) {
        this._attachedHost = null;
        host.detach();
      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
        throwNoPortalAttachedError();
      }
    }
    /** Whether this portal is attached to a host. */

  }, {
    key: "isAttached",
    get: function get() {
      return this._attachedHost != null;
    }
    /**
     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
     * the PortalOutlet when it is performing an `attach()` or `detach()`.
     */

  }, {
    key: "setAttachedHost",
    value: function setAttachedHost(host) {
      this._attachedHost = host;
    }
  }]);

  return Portal;
}();
/**
 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
 */


var ComponentPortal = /*#__PURE__*/function (_Portal) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(ComponentPortal, _Portal);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(ComponentPortal);

  function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ComponentPortal);

    _this = _super.call(this);
    _this.component = component;
    _this.viewContainerRef = viewContainerRef;
    _this.injector = injector;
    _this.componentFactoryResolver = componentFactoryResolver;
    return _this;
  }

  return ComponentPortal;
}(Portal);
/**
 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
 */


var TemplatePortal = /*#__PURE__*/function (_Portal2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(TemplatePortal, _Portal2);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(TemplatePortal);

  function TemplatePortal(template, viewContainerRef, context) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, TemplatePortal);

    _this2 = _super2.call(this);
    _this2.templateRef = template;
    _this2.viewContainerRef = viewContainerRef;
    _this2.context = context;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(TemplatePortal, [{
    key: "origin",
    get: function get() {
      return this.templateRef.elementRef;
    }
    /**
     * Attach the portal to the provided `PortalOutlet`.
     * When a context is provided it will override the `context` property of the `TemplatePortal`
     * instance.
     */

  }, {
    key: "attach",
    value: function attach(host) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;
      this.context = context;
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(TemplatePortal.prototype), "attach", this).call(this, host);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.context = undefined;
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(TemplatePortal.prototype), "detach", this).call(this);
    }
  }]);

  return TemplatePortal;
}(Portal);
/**
 * A `DomPortal` is a portal whose DOM element will be taken from its current position
 * in the DOM and moved into a portal outlet, when it is attached. On detach, the content
 * will be restored to its original position.
 */


var DomPortal = /*#__PURE__*/function (_Portal3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DomPortal, _Portal3);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(DomPortal);

  function DomPortal(element) {
    var _this3;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DomPortal);

    _this3 = _super3.call(this);
    _this3.element = element instanceof _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef ? element.nativeElement : element;
    return _this3;
  }

  return DomPortal;
}(Portal);
/**
 * Partial implementation of PortalOutlet that handles attaching
 * ComponentPortal and TemplatePortal.
 */


var BasePortalOutlet = /*#__PURE__*/function () {
  function BasePortalOutlet() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BasePortalOutlet);

    /** Whether this host has already been permanently disposed. */
    this._isDisposed = false; // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.

    this.attachDomPortal = null;
  }
  /** Whether this host has an attached portal. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(BasePortalOutlet, [{
    key: "hasAttached",
    value: function hasAttached() {
      return !!this._attachedPortal;
    }
    /** Attaches a portal. */

  }, {
    key: "attach",
    value: function attach(portal) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!portal) {
          throwNullPortalError();
        }

        if (this.hasAttached()) {
          throwPortalAlreadyAttachedError();
        }

        if (this._isDisposed) {
          throwPortalOutletAlreadyDisposedError();
        }
      }

      if (portal instanceof ComponentPortal) {
        this._attachedPortal = portal;
        return this.attachComponentPortal(portal);
      } else if (portal instanceof TemplatePortal) {
        this._attachedPortal = portal;
        return this.attachTemplatePortal(portal); // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.
      } else if (this.attachDomPortal && portal instanceof DomPortal) {
        this._attachedPortal = portal;
        return this.attachDomPortal(portal);
      }

      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        throwUnknownPortalTypeError();
      }
    }
    /** Detaches a previously attached portal. */

  }, {
    key: "detach",
    value: function detach() {
      if (this._attachedPortal) {
        this._attachedPortal.setAttachedHost(null);

        this._attachedPortal = null;
      }

      this._invokeDisposeFn();
    }
    /** Permanently dispose of this portal host. */

  }, {
    key: "dispose",
    value: function dispose() {
      if (this.hasAttached()) {
        this.detach();
      }

      this._invokeDisposeFn();

      this._isDisposed = true;
    }
    /** @docs-private */

  }, {
    key: "setDisposeFn",
    value: function setDisposeFn(fn) {
      this._disposeFn = fn;
    }
  }, {
    key: "_invokeDisposeFn",
    value: function _invokeDisposeFn() {
      if (this._disposeFn) {
        this._disposeFn();

        this._disposeFn = null;
      }
    }
  }]);

  return BasePortalOutlet;
}();
/**
 * @deprecated Use `BasePortalOutlet` instead.
 * @breaking-change 9.0.0
 */


var BasePortalHost = /*#__PURE__*/function (_BasePortalOutlet) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(BasePortalHost, _BasePortalOutlet);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(BasePortalHost);

  function BasePortalHost() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BasePortalHost);

    return _super4.apply(this, arguments);
  }

  return BasePortalHost;
}(BasePortalOutlet);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
 * application context.
 */


var DomPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DomPortalOutlet, _BasePortalOutlet2);

  var _super5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(DomPortalOutlet);

  function DomPortalOutlet(
  /** Element into which the content is projected. */
  outletElement, _componentFactoryResolver, _appRef, _defaultInjector,
  /**
   * @deprecated `_document` Parameter to be made required.
   * @breaking-change 10.0.0
   */
  _document) {
    var _thisSuper, _this4;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DomPortalOutlet);

    _this4 = _super5.call(this);
    _this4.outletElement = outletElement;
    _this4._componentFactoryResolver = _componentFactoryResolver;
    _this4._appRef = _appRef;
    _this4._defaultInjector = _defaultInjector;
    /**
     * Attaches a DOM portal by transferring its content into the outlet.
     * @param portal Portal to be attached.
     * @deprecated To be turned into a method.
     * @breaking-change 10.0.0
     */

    _this4.attachDomPortal = function (portal) {
      // @breaking-change 10.0.0 Remove check and error once the
      // `_document` constructor parameter is required.
      if (!_this4._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('Cannot attach DOM portal without _document constructor parameter');
      }

      var element = portal.element;

      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('DOM portal content must be attached to a parent node.');
      } // Anchor used to save the element's previous position so
      // that we can restore it when the portal is detached.


      var anchorNode = _this4._document.createComment('dom-portal');

      element.parentNode.insertBefore(anchorNode, element);

      _this4.outletElement.appendChild(element);

      _this4._attachedPortal = portal;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((_thisSuper = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this4), (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(DomPortalOutlet.prototype)), "setDisposeFn", _thisSuper).call(_thisSuper, function () {
        // We can't use `replaceWith` here because IE doesn't support it.
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };

    _this4._document = _document;
    return _this4;
  }
  /**
   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
   * @param portal Portal to be attached
   * @returns Reference to the created component.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(DomPortalOutlet, [{
    key: "attachComponentPortal",
    value: function attachComponentPortal(portal) {
      var _this5 = this;

      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
      var componentFactory = resolver.resolveComponentFactory(portal.component);
      var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point
      // for the component (in terms of Angular's component tree, not rendering).
      // When the ViewContainerRef is missing, we use the factory to create the component directly
      // and then manually attach the view to the application.

      if (portal.viewContainerRef) {
        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
        this.setDisposeFn(function () {
          return componentRef.destroy();
        });
      } else {
        componentRef = componentFactory.create(portal.injector || this._defaultInjector);

        this._appRef.attachView(componentRef.hostView);

        this.setDisposeFn(function () {
          _this5._appRef.detachView(componentRef.hostView);

          componentRef.destroy();
        });
      } // At this point the component has been instantiated, so we move it to the location in the DOM
      // where we want it to be rendered.


      this.outletElement.appendChild(this._getComponentRootNode(componentRef));
      this._attachedPortal = portal;
      return componentRef;
    }
    /**
     * Attaches a template portal to the DOM as an embedded view.
     * @param portal Portal to be attached.
     * @returns Reference to the created embedded view.
     */

  }, {
    key: "attachTemplatePortal",
    value: function attachTemplatePortal(portal) {
      var _this6 = this;

      var viewContainer = portal.viewContainerRef;
      var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context); // The method `createEmbeddedView` will add the view as a child of the viewContainer.
      // But for the DomPortalOutlet the view can be added everywhere in the DOM
      // (e.g Overlay Container) To move the view to the specified host element. We just
      // re-append the existing root nodes.

      viewRef.rootNodes.forEach(function (rootNode) {
        return _this6.outletElement.appendChild(rootNode);
      }); // Note that we want to detect changes after the nodes have been moved so that
      // any directives inside the portal that are looking at the DOM inside a lifecycle
      // hook won't be invoked too early.

      viewRef.detectChanges();
      this.setDisposeFn(function () {
        var index = viewContainer.indexOf(viewRef);

        if (index !== -1) {
          viewContainer.remove(index);
        }
      });
      this._attachedPortal = portal; // TODO(jelbourn): Return locals from view.

      return viewRef;
    }
    /**
     * Clears out a portal from the DOM.
     */

  }, {
    key: "dispose",
    value: function dispose() {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(DomPortalOutlet.prototype), "dispose", this).call(this);

      if (this.outletElement.parentNode != null) {
        this.outletElement.parentNode.removeChild(this.outletElement);
      }
    }
    /** Gets the root HTMLElement for an instantiated component. */

  }, {
    key: "_getComponentRootNode",
    value: function _getComponentRootNode(componentRef) {
      return componentRef.hostView.rootNodes[0];
    }
  }]);

  return DomPortalOutlet;
}(BasePortalOutlet);
/**
 * @deprecated Use `DomPortalOutlet` instead.
 * @breaking-change 9.0.0
 */


var DomPortalHost = /*#__PURE__*/function (_DomPortalOutlet) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DomPortalHost, _DomPortalOutlet);

  var _super6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(DomPortalHost);

  function DomPortalHost() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DomPortalHost);

    return _super6.apply(this, arguments);
  }

  return DomPortalHost;
}(DomPortalOutlet);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
 * the directive instance itself can be attached to a host, enabling declarative use of portals.
 */


var CdkPortal = /*#__PURE__*/function (_TemplatePortal) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(CdkPortal, _TemplatePortal);

  var _super7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(CdkPortal);

  function CdkPortal(templateRef, viewContainerRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CdkPortal);

    return _super7.call(this, templateRef, viewContainerRef);
  }

  return CdkPortal;
}(TemplatePortal);

CdkPortal.ɵfac = function CdkPortal_Factory(t) {
  return new (t || CdkPortal)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef));
};

CdkPortal.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: CdkPortal,
  selectors: [["", "cdkPortal", ""]],
  exportAs: ["cdkPortal"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

CdkPortal.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.TemplateRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](CdkPortal, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[cdkPortal]',
      exportAs: 'cdkPortal'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef
    }];
  }, null);
})();
/**
 * @deprecated Use `CdkPortal` instead.
 * @breaking-change 9.0.0
 */


var TemplatePortalDirective = /*#__PURE__*/function (_CdkPortal) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(TemplatePortalDirective, _CdkPortal);

  var _super8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(TemplatePortalDirective);

  function TemplatePortalDirective() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, TemplatePortalDirective);

    return _super8.apply(this, arguments);
  }

  return TemplatePortalDirective;
}(CdkPortal);

TemplatePortalDirective.ɵfac = /*@__PURE__*/function () {
  var ɵTemplatePortalDirective_BaseFactory;
  return function TemplatePortalDirective_Factory(t) {
    return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](TemplatePortalDirective)))(t || TemplatePortalDirective);
  };
}();

TemplatePortalDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: TemplatePortalDirective,
  selectors: [["", "cdk-portal", ""], ["", "portal", ""]],
  exportAs: ["cdkPortal"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([{
    provide: CdkPortal,
    useExisting: TemplatePortalDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](TemplatePortalDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[cdk-portal], [portal]',
      exportAs: 'cdkPortal',
      providers: [{
        provide: CdkPortal,
        useExisting: TemplatePortalDirective
      }]
    }]
  }], null, null);
})();
/**
 * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
 * directly attached to it, enabling declarative use.
 *
 * Usage:
 * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
 */


var CdkPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(CdkPortalOutlet, _BasePortalOutlet3);

  var _super9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(CdkPortalOutlet);

  function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef,
  /**
   * @deprecated `_document` parameter to be made required.
   * @breaking-change 9.0.0
   */
  _document) {
    var _thisSuper2, _this7;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CdkPortalOutlet);

    _this7 = _super9.call(this);
    _this7._componentFactoryResolver = _componentFactoryResolver;
    _this7._viewContainerRef = _viewContainerRef;
    /** Whether the portal component is initialized. */

    _this7._isInitialized = false;
    /** Emits when a portal is attached to the outlet. */

    _this7.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    /**
     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.
     * @param portal Portal to be attached.
     * @deprecated To be turned into a method.
     * @breaking-change 10.0.0
     */

    _this7.attachDomPortal = function (portal) {
      // @breaking-change 9.0.0 Remove check and error once the
      // `_document` constructor parameter is required.
      if (!_this7._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('Cannot attach DOM portal without _document constructor parameter');
      }

      var element = portal.element;

      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('DOM portal content must be attached to a parent node.');
      } // Anchor used to save the element's previous position so
      // that we can restore it when the portal is detached.


      var anchorNode = _this7._document.createComment('dom-portal');

      portal.setAttachedHost((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this7));
      element.parentNode.insertBefore(anchorNode, element);

      _this7._getRootNode().appendChild(element);

      _this7._attachedPortal = portal;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((_thisSuper2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this7), (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype)), "setDisposeFn", _thisSuper2).call(_thisSuper2, function () {
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };

    _this7._document = _document;
    return _this7;
  }
  /** Portal associated with the Portal outlet. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(CdkPortalOutlet, [{
    key: "portal",
    get: function get() {
      return this._attachedPortal;
    },
    set: function set(portal) {
      // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
      // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
      // and attach a portal programmatically in the parent component. When Angular does the first CD
      // round, it will fire the setter with empty string, causing the user's content to be cleared.
      if (this.hasAttached() && !portal && !this._isInitialized) {
        return;
      }

      if (this.hasAttached()) {
        (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype), "detach", this).call(this);
      }

      if (portal) {
        (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype), "attach", this).call(this, portal);
      }

      this._attachedPortal = portal;
    }
    /** Component or view reference that is attached to the portal. */

  }, {
    key: "attachedRef",
    get: function get() {
      return this._attachedRef;
    }
  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      this._isInitialized = true;
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype), "dispose", this).call(this);

      this._attachedPortal = null;
      this._attachedRef = null;
    }
    /**
     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
     *
     * @param portal Portal to be attached to the portal outlet.
     * @returns Reference to the created component.
     */

  }, {
    key: "attachComponentPortal",
    value: function attachComponentPortal(portal) {
      portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component
      // in the application tree. Otherwise use the location of this PortalOutlet.

      var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
      var componentFactory = resolver.resolveComponentFactory(portal.component);
      var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector); // If we're using a view container that's different from the injected one (e.g. when the portal
      // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered
      // inside of the alternate view container.

      if (viewContainerRef !== this._viewContainerRef) {
        this._getRootNode().appendChild(ref.hostView.rootNodes[0]);
      }

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype), "setDisposeFn", this).call(this, function () {
        return ref.destroy();
      });

      this._attachedPortal = portal;
      this._attachedRef = ref;
      this.attached.emit(ref);
      return ref;
    }
    /**
     * Attach the given TemplatePortal to this PortalHost as an embedded View.
     * @param portal Portal to be attached.
     * @returns Reference to the created embedded view.
     */

  }, {
    key: "attachTemplatePortal",
    value: function attachTemplatePortal(portal) {
      var _this8 = this;

      portal.setAttachedHost(this);

      var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(CdkPortalOutlet.prototype), "setDisposeFn", this).call(this, function () {
        return _this8._viewContainerRef.clear();
      });

      this._attachedPortal = portal;
      this._attachedRef = viewRef;
      this.attached.emit(viewRef);
      return viewRef;
    }
    /** Gets the root node of the portal outlet. */

  }, {
    key: "_getRootNode",
    value: function _getRootNode() {
      var nativeElement = this._viewContainerRef.element.nativeElement; // The directive could be set on a template which will result in a comment
      // node being the root. Use the comment's parent node if that is the case.

      return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;
    }
  }]);

  return CdkPortalOutlet;
}(BasePortalOutlet);

CdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) {
  return new (t || CdkPortalOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_8__.DOCUMENT));
};

CdkPortalOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: CdkPortalOutlet,
  selectors: [["", "cdkPortalOutlet", ""]],
  inputs: {
    portal: ["cdkPortalOutlet", "portal"]
  },
  outputs: {
    attached: "attached"
  },
  exportAs: ["cdkPortalOutlet"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

CdkPortalOutlet.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ComponentFactoryResolver
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.DOCUMENT]
    }]
  }];
};

CdkPortalOutlet.propDecorators = {
  attached: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](CdkPortalOutlet, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[cdkPortalOutlet]',
      exportAs: 'cdkPortalOutlet',
      inputs: ['portal: cdkPortalOutlet']
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ComponentFactoryResolver
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewContainerRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.DOCUMENT]
      }]
    }];
  }, {
    attached: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output
    }]
  });
})();
/**
 * @deprecated Use `CdkPortalOutlet` instead.
 * @breaking-change 9.0.0
 */


var PortalHostDirective = /*#__PURE__*/function (_CdkPortalOutlet) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(PortalHostDirective, _CdkPortalOutlet);

  var _super10 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(PortalHostDirective);

  function PortalHostDirective() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PortalHostDirective);

    return _super10.apply(this, arguments);
  }

  return PortalHostDirective;
}(CdkPortalOutlet);

PortalHostDirective.ɵfac = /*@__PURE__*/function () {
  var ɵPortalHostDirective_BaseFactory;
  return function PortalHostDirective_Factory(t) {
    return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](PortalHostDirective)))(t || PortalHostDirective);
  };
}();

PortalHostDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: PortalHostDirective,
  selectors: [["", "cdkPortalHost", ""], ["", "portalHost", ""]],
  inputs: {
    portal: ["cdkPortalHost", "portal"]
  },
  exportAs: ["cdkPortalHost"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([{
    provide: CdkPortalOutlet,
    useExisting: PortalHostDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](PortalHostDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[cdkPortalHost], [portalHost]',
      exportAs: 'cdkPortalHost',
      inputs: ['portal: cdkPortalHost'],
      providers: [{
        provide: CdkPortalOutlet,
        useExisting: PortalHostDirective
      }]
    }]
  }], null, null);
})();

var PortalModule = function PortalModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PortalModule);
};

PortalModule.ɵfac = function PortalModule_Factory(t) {
  return new (t || PortalModule)();
};

PortalModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: PortalModule
});
PortalModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](PortalModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
      declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](PortalModule, {
    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Custom injector to be used when providing custom
 * injection tokens to components inside a portal.
 * @docs-private
 * @deprecated Use `Injector.create` instead.
 * @breaking-change 11.0.0
 */


var PortalInjector = /*#__PURE__*/function () {
  function PortalInjector(_parentInjector, _customTokens) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PortalInjector);

    this._parentInjector = _parentInjector;
    this._customTokens = _customTokens;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(PortalInjector, [{
    key: "get",
    value: function get(token, notFoundValue) {
      var value = this._customTokens.get(token);

      if (typeof value !== 'undefined') {
        return value;
      }

      return this._parentInjector.get(token, notFoundValue);
    }
  }]);

  return PortalInjector;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 33715:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/scrolling.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkFixedSizeVirtualScroll": function() { return /* binding */ CdkFixedSizeVirtualScroll; },
/* harmony export */   "CdkScrollable": function() { return /* binding */ CdkScrollable; },
/* harmony export */   "CdkScrollableModule": function() { return /* binding */ CdkScrollableModule; },
/* harmony export */   "CdkVirtualForOf": function() { return /* binding */ CdkVirtualForOf; },
/* harmony export */   "CdkVirtualScrollViewport": function() { return /* binding */ CdkVirtualScrollViewport; },
/* harmony export */   "DEFAULT_RESIZE_TIME": function() { return /* binding */ DEFAULT_RESIZE_TIME; },
/* harmony export */   "DEFAULT_SCROLL_TIME": function() { return /* binding */ DEFAULT_SCROLL_TIME; },
/* harmony export */   "FixedSizeVirtualScrollStrategy": function() { return /* binding */ FixedSizeVirtualScrollStrategy; },
/* harmony export */   "ScrollDispatcher": function() { return /* binding */ ScrollDispatcher; },
/* harmony export */   "ScrollingModule": function() { return /* binding */ ScrollingModule; },
/* harmony export */   "VIRTUAL_SCROLL_STRATEGY": function() { return /* binding */ VIRTUAL_SCROLL_STRATEGY; },
/* harmony export */   "ViewportRuler": function() { return /* binding */ ViewportRuler; },
/* harmony export */   "_fixedSizeVirtualScrollStrategyFactory": function() { return /* binding */ _fixedSizeVirtualScrollStrategyFactory; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/coercion */ 20657);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ 81134);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 25160);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 82516);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs */ 90970);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rxjs */ 36317);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs */ 94283);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! rxjs */ 64674);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 83720);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 7494);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 9170);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs/operators */ 22663);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs/operators */ 1143);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs/operators */ 15347);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 79902);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs/operators */ 92597);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/platform */ 34079);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/cdk/bidi */ 65897);
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/cdk/collections */ 80198);



















/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** The injection token used to specify the virtual scrolling strategy. */





var _c0 = ["contentWrapper"];
var _c1 = ["*"];
var VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('VIRTUAL_SCROLL_STRATEGY');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Virtual scrolling strategy for lists with items of known fixed size. */

var FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {
  /**
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, FixedSizeVirtualScrollStrategy);

    this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** @docs-private Implemented as part of VirtualScrollStrategy. */

    this.scrolledIndexChange = this._scrolledIndexChange.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.distinctUntilChanged)());
    /** The attached viewport. */

    this._viewport = null;
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
  }
  /**
   * Attaches this scroll strategy to a viewport.
   * @param viewport The viewport to attach this strategy to.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(FixedSizeVirtualScrollStrategy, [{
    key: "attach",
    value: function attach(viewport) {
      this._viewport = viewport;

      this._updateTotalContentSize();

      this._updateRenderedRange();
    }
    /** Detaches this scroll strategy from the currently attached viewport. */

  }, {
    key: "detach",
    value: function detach() {
      this._scrolledIndexChange.complete();

      this._viewport = null;
    }
    /**
     * Update the item size and buffer size.
     * @param itemSize The size of the items in the virtually scrolling list.
     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
     */

  }, {
    key: "updateItemAndBufferSize",
    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
      if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
      }

      this._itemSize = itemSize;
      this._minBufferPx = minBufferPx;
      this._maxBufferPx = maxBufferPx;

      this._updateTotalContentSize();

      this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */

  }, {
    key: "onContentScrolled",
    value: function onContentScrolled() {
      this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */

  }, {
    key: "onDataLengthChanged",
    value: function onDataLengthChanged() {
      this._updateTotalContentSize();

      this._updateRenderedRange();
    }
    /** @docs-private Implemented as part of VirtualScrollStrategy. */

  }, {
    key: "onContentRendered",
    value: function onContentRendered() {}
    /** @docs-private Implemented as part of VirtualScrollStrategy. */

  }, {
    key: "onRenderedOffsetChanged",
    value: function onRenderedOffsetChanged() {}
    /**
     * Scroll to the offset for the given index.
     * @param index The index of the element to scroll to.
     * @param behavior The ScrollBehavior to use when scrolling.
     */

  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(index, behavior) {
      if (this._viewport) {
        this._viewport.scrollToOffset(index * this._itemSize, behavior);
      }
    }
    /** Update the viewport's total content size. */

  }, {
    key: "_updateTotalContentSize",
    value: function _updateTotalContentSize() {
      if (!this._viewport) {
        return;
      }

      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
    }
    /** Update the viewport's rendered range. */

  }, {
    key: "_updateRenderedRange",
    value: function _updateRenderedRange() {
      if (!this._viewport) {
        return;
      }

      var renderedRange = this._viewport.getRenderedRange();

      var newRange = {
        start: renderedRange.start,
        end: renderedRange.end
      };

      var viewportSize = this._viewport.getViewportSize();

      var dataLength = this._viewport.getDataLength();

      var scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.


      var firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list

      if (newRange.end > dataLength) {
        // We have to recalculate the first visible index based on new data length and viewport size.
        var maxVisibleItems = Math.ceil(viewportSize / this._itemSize);
        var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers
        // Current range must also be adjusted to cover the new position (bottom of new list).

        if (firstVisibleIndex != newVisibleIndex) {
          firstVisibleIndex = newVisibleIndex;
          scrollOffset = newVisibleIndex * this._itemSize;
          newRange.start = Math.floor(firstVisibleIndex);
        }

        newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
      }

      var startBuffer = scrollOffset - newRange.start * this._itemSize;

      if (startBuffer < this._minBufferPx && newRange.start != 0) {
        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
        newRange.start = Math.max(0, newRange.start - expandStart);
        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
      } else {
        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);

        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);

          if (expandEnd > 0) {
            newRange.end = Math.min(dataLength, newRange.end + expandEnd);
            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
          }
        }
      }

      this._viewport.setRenderedRange(newRange);

      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);

      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
    }
  }]);

  return FixedSizeVirtualScrollStrategy;
}();
/**
 * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
 * `FixedSizeVirtualScrollStrategy` from the given directive.
 * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
 *     `FixedSizeVirtualScrollStrategy` from.
 */


function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
  return fixedSizeDir._scrollStrategy;
}
/** A virtual scroll strategy that supports fixed-size items. */


var CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {
  function CdkFixedSizeVirtualScroll() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkFixedSizeVirtualScroll);

    this._itemSize = 20;
    this._minBufferPx = 100;
    this._maxBufferPx = 200;
    /** The scroll strategy used by this directive. */

    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
  /** The size of the items in the list (in pixels). */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CdkFixedSizeVirtualScroll, [{
    key: "itemSize",
    get: function get() {
      return this._itemSize;
    },
    set: function set(value) {
      this._itemSize = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceNumberProperty)(value);
    }
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     */

  }, {
    key: "minBufferPx",
    get: function get() {
      return this._minBufferPx;
    },
    set: function set(value) {
      this._minBufferPx = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceNumberProperty)(value);
    }
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     */

  }, {
    key: "maxBufferPx",
    get: function get() {
      return this._maxBufferPx;
    },
    set: function set(value) {
      this._maxBufferPx = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceNumberProperty)(value);
    }
  }, {
    key: "ngOnChanges",
    value: function ngOnChanges() {
      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
    }
  }]);

  return CdkFixedSizeVirtualScroll;
}();

CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {
  return new (t || CdkFixedSizeVirtualScroll)();
};

CdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: CdkFixedSizeVirtualScroll,
  selectors: [["cdk-virtual-scroll-viewport", "itemSize", ""]],
  inputs: {
    itemSize: "itemSize",
    minBufferPx: "minBufferPx",
    maxBufferPx: "maxBufferPx"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: VIRTUAL_SCROLL_STRATEGY,
    useFactory: _fixedSizeVirtualScrollStrategyFactory,
    deps: [(0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
      return CdkFixedSizeVirtualScroll;
    })]
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});
CdkFixedSizeVirtualScroll.propDecorators = {
  itemSize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  minBufferPx: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  maxBufferPx: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CdkFixedSizeVirtualScroll, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: 'cdk-virtual-scroll-viewport[itemSize]',
      providers: [{
        provide: VIRTUAL_SCROLL_STRATEGY,
        useFactory: _fixedSizeVirtualScrollStrategyFactory,
        deps: [(0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
          return CdkFixedSizeVirtualScroll;
        })]
      }]
    }]
  }], function () {
    return [];
  }, {
    itemSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    minBufferPx: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    maxBufferPx: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Time in ms to throttle the scrolling events by default. */


var DEFAULT_SCROLL_TIME = 20;
/**
 * Service contained all registered Scrollable references and emits an event when any one of the
 * Scrollable references emit a scrolled event.
 */

var ScrollDispatcher = /*#__PURE__*/function () {
  function ScrollDispatcher(_ngZone, _platform, document) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ScrollDispatcher);

    this._ngZone = _ngZone;
    this._platform = _platform;
    /** Subject for notifying that a registered scrollable reference element has been scrolled. */

    this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** Keeps track of the global `scroll` and `resize` subscriptions. */

    this._globalSubscription = null;
    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */

    this._scrolledCount = 0;
    /**
     * Map of all the scrollable references that are registered with the service and their
     * scroll event subscriptions.
     */

    this.scrollContainers = new Map();
    this._document = document;
  }
  /**
   * Registers a scrollable instance with the service and listens for its scrolled events. When the
   * scrollable is scrolled, the service emits the event to its scrolled observable.
   * @param scrollable Scrollable instance to be registered.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ScrollDispatcher, [{
    key: "register",
    value: function register(scrollable) {
      var _this = this;

      if (!this.scrollContainers.has(scrollable)) {
        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(function () {
          return _this._scrolled.next(scrollable);
        }));
      }
    }
    /**
     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
     * @param scrollable Scrollable instance to be deregistered.
     */

  }, {
    key: "deregister",
    value: function deregister(scrollable) {
      var scrollableReference = this.scrollContainers.get(scrollable);

      if (scrollableReference) {
        scrollableReference.unsubscribe();
        this.scrollContainers.delete(scrollable);
      }
    }
    /**
     * Returns an observable that emits an event whenever any of the registered Scrollable
     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
     * to override the default "throttle" time.
     *
     * **Note:** in order to avoid hitting change detection for every scroll event,
     * all of the events emitted from this stream will be run outside the Angular zone.
     * If you need to update any data bindings as a result of a scroll event, you have
     * to run the callback using `NgZone.run`.
     */

  }, {
    key: "scrolled",
    value: function scrolled() {
      var _this2 = this;

      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;

      if (!this._platform.isBrowser) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.of)();
      }

      return new rxjs__WEBPACK_IMPORTED_MODULE_13__.Observable(function (observer) {
        if (!_this2._globalSubscription) {
          _this2._addGlobalListener();
        } // In the case of a 0ms delay, use an observable without auditTime
        // since it does add a perceptible delay in processing overhead.


        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.auditTime)(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);
        _this2._scrolledCount++;
        return function () {
          subscription.unsubscribe();
          _this2._scrolledCount--;

          if (!_this2._scrolledCount) {
            _this2._removeGlobalListener();
          }
        };
      });
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      var _this3 = this;

      this._removeGlobalListener();

      this.scrollContainers.forEach(function (_, container) {
        return _this3.deregister(container);
      });

      this._scrolled.complete();
    }
    /**
     * Returns an observable that emits whenever any of the
     * scrollable ancestors of an element are scrolled.
     * @param elementOrElementRef Element whose ancestors to listen for.
     * @param auditTimeInMs Time to throttle the scroll events.
     */

  }, {
    key: "ancestorScrolled",
    value: function ancestorScrolled(elementOrElementRef, auditTimeInMs) {
      var ancestors = this.getAncestorScrollContainers(elementOrElementRef);
      return this.scrolled(auditTimeInMs).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.filter)(function (target) {
        return !target || ancestors.indexOf(target) > -1;
      }));
    }
    /** Returns all registered Scrollables that contain the provided element. */

  }, {
    key: "getAncestorScrollContainers",
    value: function getAncestorScrollContainers(elementOrElementRef) {
      var _this4 = this;

      var scrollingContainers = [];
      this.scrollContainers.forEach(function (_subscription, scrollable) {
        if (_this4._scrollableContainsElement(scrollable, elementOrElementRef)) {
          scrollingContainers.push(scrollable);
        }
      });
      return scrollingContainers;
    }
    /** Use defaultView of injected document if available or fallback to global window reference */

  }, {
    key: "_getWindow",
    value: function _getWindow() {
      return this._document.defaultView || window;
    }
    /** Returns true if the element is contained within the provided Scrollable. */

  }, {
    key: "_scrollableContainsElement",
    value: function _scrollableContainsElement(scrollable, elementOrElementRef) {
      var element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(elementOrElementRef);
      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements
      // are the scrollable's element.

      do {
        if (element == scrollableElement) {
          return true;
        }
      } while (element = element.parentElement);

      return false;
    }
    /** Sets up the global scroll listeners. */

  }, {
    key: "_addGlobalListener",
    value: function _addGlobalListener() {
      var _this5 = this;

      this._globalSubscription = this._ngZone.runOutsideAngular(function () {
        var window = _this5._getWindow();

        return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.fromEvent)(window.document, 'scroll').subscribe(function () {
          return _this5._scrolled.next();
        });
      });
    }
    /** Cleans up the global scroll listener. */

  }, {
    key: "_removeGlobalListener",
    value: function _removeGlobalListener() {
      if (this._globalSubscription) {
        this._globalSubscription.unsubscribe();

        this._globalSubscription = null;
      }
    }
  }]);

  return ScrollDispatcher;
}();

ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {
  return new (t || ScrollDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT, 8));
};

ScrollDispatcher.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  factory: function ScrollDispatcher_Factory() {
    return new ScrollDispatcher(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT, 8));
  },
  token: ScrollDispatcher,
  providedIn: "root"
});

ScrollDispatcher.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
  }, {
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](ScrollDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Sends an event when the directive's element is scrolled. Registers itself with the
 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
 * can be listened to through the service.
 */


var CdkScrollable = /*#__PURE__*/function () {
  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {
    var _this6 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkScrollable);

    this.elementRef = elementRef;
    this.scrollDispatcher = scrollDispatcher;
    this.ngZone = ngZone;
    this.dir = dir;
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Observable(function (observer) {
      return _this6.ngZone.runOutsideAngular(function () {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.fromEvent)(_this6.elementRef.nativeElement, 'scroll').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.takeUntil)(_this6._destroyed)).subscribe(observer);
      });
    });
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CdkScrollable, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      this.scrollDispatcher.register(this);
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.scrollDispatcher.deregister(this);

      this._destroyed.next();

      this._destroyed.complete();
    }
    /** Returns observable that emits when a scroll event is fired on the host element. */

  }, {
    key: "elementScrolled",
    value: function elementScrolled() {
      return this._elementScrolled;
    }
    /** Gets the ElementRef for the viewport. */

  }, {
    key: "getElementRef",
    value: function getElementRef() {
      return this.elementRef;
    }
    /**
     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
     * left and right always refer to the left and right side of the scrolling container irrespective
     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
     * in an RTL context.
     * @param options specified the offsets to scroll to.
     */

  }, {
    key: "scrollTo",
    value: function scrollTo(options) {
      var el = this.elementRef.nativeElement;
      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.

      if (options.left == null) {
        options.left = isRtl ? options.end : options.start;
      }

      if (options.right == null) {
        options.right = isRtl ? options.start : options.end;
      } // Rewrite the bottom offset as a top offset.


      if (options.bottom != null) {
        options.top = el.scrollHeight - el.clientHeight - options.bottom;
      } // Rewrite the right offset as a left offset.


      if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.getRtlScrollAxisType)() != 0
      /* NORMAL */
      ) {
        if (options.left != null) {
          options.right = el.scrollWidth - el.clientWidth - options.left;
        }

        if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.getRtlScrollAxisType)() == 2
        /* INVERTED */
        ) {
          options.left = options.right;
        } else if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.getRtlScrollAxisType)() == 1
        /* NEGATED */
        ) {
          options.left = options.right ? -options.right : options.right;
        }
      } else {
        if (options.right != null) {
          options.left = el.scrollWidth - el.clientWidth - options.right;
        }
      }

      this._applyScrollToOptions(options);
    }
  }, {
    key: "_applyScrollToOptions",
    value: function _applyScrollToOptions(options) {
      var el = this.elementRef.nativeElement;

      if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.supportsScrollBehavior)()) {
        el.scrollTo(options);
      } else {
        if (options.top != null) {
          el.scrollTop = options.top;
        }

        if (options.left != null) {
          el.scrollLeft = options.left;
        }
      }
    }
    /**
     * Measures the scroll offset relative to the specified edge of the viewport. This method can be
     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
     * about what scrollLeft means in RTL. The values returned by this method are normalized such that
     * left and right always refer to the left and right side of the scrolling container irrespective
     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
     * in an RTL context.
     * @param from The edge to measure from.
     */

  }, {
    key: "measureScrollOffset",
    value: function measureScrollOffset(from) {
      var LEFT = 'left';
      var RIGHT = 'right';
      var el = this.elementRef.nativeElement;

      if (from == 'top') {
        return el.scrollTop;
      }

      if (from == 'bottom') {
        return el.scrollHeight - el.clientHeight - el.scrollTop;
      } // Rewrite start & end as left or right offsets.


      var isRtl = this.dir && this.dir.value == 'rtl';

      if (from == 'start') {
        from = isRtl ? RIGHT : LEFT;
      } else if (from == 'end') {
        from = isRtl ? LEFT : RIGHT;
      }

      if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.getRtlScrollAxisType)() == 2
      /* INVERTED */
      ) {
        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
        // 0 when scrolled all the way right.
        if (from == LEFT) {
          return el.scrollWidth - el.clientWidth - el.scrollLeft;
        } else {
          return el.scrollLeft;
        }
      } else if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.getRtlScrollAxisType)() == 1
      /* NEGATED */
      ) {
        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
        // 0 when scrolled all the way right.
        if (from == LEFT) {
          return el.scrollLeft + el.scrollWidth - el.clientWidth;
        } else {
          return -el.scrollLeft;
        }
      } else {
        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
        // (scrollWidth - clientWidth) when scrolled all the way right.
        if (from == LEFT) {
          return el.scrollLeft;
        } else {
          return el.scrollWidth - el.clientWidth - el.scrollLeft;
        }
      }
    }
  }]);

  return CdkScrollable;
}();

CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {
  return new (t || CdkScrollable)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality, 8));
};

CdkScrollable.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: CdkScrollable,
  selectors: [["", "cdk-scrollable", ""], ["", "cdkScrollable", ""]]
});

CdkScrollable.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
  }, {
    type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CdkScrollable, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: '[cdk-scrollable], [cdkScrollable]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }, {
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Time in ms to throttle the resize events by default. */


var DEFAULT_RESIZE_TIME = 20;
/**
 * Simple utility for getting the bounds of the browser viewport.
 * @docs-private
 */

var ViewportRuler = /*#__PURE__*/function () {
  function ViewportRuler(_platform, ngZone, document) {
    var _this7 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ViewportRuler);

    this._platform = _platform;
    /** Stream of viewport change events. */

    this._change = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** Event listener that will be used to handle the viewport change events. */

    this._changeListener = function (event) {
      _this7._change.next(event);
    };

    this._document = document;
    ngZone.runOutsideAngular(function () {
      if (_platform.isBrowser) {
        var _window = _this7._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's
        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.


        _window.addEventListener('resize', _this7._changeListener);

        _window.addEventListener('orientationchange', _this7._changeListener);
      } // Clear the cached position so that the viewport is re-measured next time it is required.
      // We don't need to keep track of the subscription, because it is completed on destroy.


      _this7.change().subscribe(function () {
        return _this7._viewportSize = null;
      });
    });
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(ViewportRuler, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._platform.isBrowser) {
        var _window2 = this._getWindow();

        _window2.removeEventListener('resize', this._changeListener);

        _window2.removeEventListener('orientationchange', this._changeListener);
      }

      this._change.complete();
    }
    /** Returns the viewport's width and height. */

  }, {
    key: "getViewportSize",
    value: function getViewportSize() {
      if (!this._viewportSize) {
        this._updateViewportSize();
      }

      var output = {
        width: this._viewportSize.width,
        height: this._viewportSize.height
      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.

      if (!this._platform.isBrowser) {
        this._viewportSize = null;
      }

      return output;
    }
    /** Gets a ClientRect for the viewport's bounds. */

  }, {
    key: "getViewportRect",
    value: function getViewportRect() {
      // Use the document element's bounding rect rather than the window scroll properties
      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
      // conceptual viewports. Under most circumstances these viewports are equivalent, but they
      // can disagree when the page is pinch-zoomed (on devices that support touch).
      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
      // We use the documentElement instead of the body because, by default (without a css reset)
      // browsers typically give the document body an 8px margin, which is not included in
      // getBoundingClientRect().
      var scrollPosition = this.getViewportScrollPosition();

      var _this$getViewportSize = this.getViewportSize(),
          width = _this$getViewportSize.width,
          height = _this$getViewportSize.height;

      return {
        top: scrollPosition.top,
        left: scrollPosition.left,
        bottom: scrollPosition.top + height,
        right: scrollPosition.left + width,
        height: height,
        width: width
      };
    }
    /** Gets the (top, left) scroll position of the viewport. */

  }, {
    key: "getViewportScrollPosition",
    value: function getViewportScrollPosition() {
      // While we can get a reference to the fake document
      // during SSR, it doesn't have getBoundingClientRect.
      if (!this._platform.isBrowser) {
        return {
          top: 0,
          left: 0
        };
      } // The top-left-corner of the viewport is determined by the scroll position of the document
      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
      // whether `document.body` or `document.documentElement` is the scrolled element, so reading
      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
      // `document.documentElement` works consistently, where the `top` and `left` values will
      // equal negative the scroll position.


      var document = this._document;

      var window = this._getWindow();

      var documentElement = document.documentElement;
      var documentRect = documentElement.getBoundingClientRect();
      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
      return {
        top: top,
        left: left
      };
    }
    /**
     * Returns a stream that emits whenever the size of the viewport changes.
     * This stream emits outside of the Angular zone.
     * @param throttleTime Time in milliseconds to throttle the stream.
     */

  }, {
    key: "change",
    value: function change() {
      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;
      return throttleTime > 0 ? this._change.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.auditTime)(throttleTime)) : this._change;
    }
    /** Use defaultView of injected document if available or fallback to global window reference */

  }, {
    key: "_getWindow",
    value: function _getWindow() {
      return this._document.defaultView || window;
    }
    /** Updates the cached viewport size. */

  }, {
    key: "_updateViewportSize",
    value: function _updateViewportSize() {
      var window = this._getWindow();

      this._viewportSize = this._platform.isBrowser ? {
        width: window.innerWidth,
        height: window.innerHeight
      } : {
        width: 0,
        height: 0
      };
    }
  }]);

  return ViewportRuler;
}();

ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {
  return new (t || ViewportRuler)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT, 8));
};

ViewportRuler.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  factory: function ViewportRuler_Factory() {
    return new ViewportRuler(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT, 8));
  },
  token: ViewportRuler,
  providedIn: "root"
});

ViewportRuler.ctorParameters = function () {
  return [{
    type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](ViewportRuler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.Platform
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_18__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Checks if the given ranges are equal. */


function rangesEqual(r1, r2) {
  return r1.start == r2.start && r1.end == r2.end;
}
/**
 * Scheduler to be used for scroll events. Needs to fall back to
 * something that doesn't rely on requestAnimationFrame on environments
 * that don't support it (e.g. server-side rendering).
 */


var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_21__.animationFrame : rxjs__WEBPACK_IMPORTED_MODULE_22__.asap;
/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */

var CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(CdkVirtualScrollViewport, _CdkScrollable);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(CdkVirtualScrollViewport);

  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {
    var _this8;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkVirtualScrollViewport);

    _this8 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);
    _this8.elementRef = elementRef;
    _this8._changeDetectorRef = _changeDetectorRef;
    _this8._scrollStrategy = _scrollStrategy;
    /** Emits when the viewport is detached from a CdkVirtualForOf. */

    _this8._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** Emits when the rendered range changes. */

    _this8._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    _this8._orientation = 'vertical';
    _this8._appendOnly = false; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
    // depending on how the strategy calculates the scrolled index, it may come at a cost to
    // performance.

    /** Emits when the index of the first element visible in the viewport changes. */

    _this8.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_13__.Observable(function (observer) {
      return _this8._scrollStrategy.scrolledIndexChange.subscribe(function (index) {
        return Promise.resolve().then(function () {
          return _this8.ngZone.run(function () {
            return observer.next(index);
          });
        });
      });
    });
    /** A stream that emits whenever the rendered range changes. */

    _this8.renderedRangeStream = _this8._renderedRangeSubject;
    /**
     * The total size of all content (in pixels), including content that is not currently rendered.
     */

    _this8._totalContentSize = 0;
    /** A string representing the `style.width` property value to be used for the spacer element. */

    _this8._totalContentWidth = '';
    /** A string representing the `style.height` property value to be used for the spacer element. */

    _this8._totalContentHeight = '';
    /** The currently rendered range of indices. */

    _this8._renderedRange = {
      start: 0,
      end: 0
    };
    /** The length of the data bound to this viewport (in number of items). */

    _this8._dataLength = 0;
    /** The size of the viewport (in pixels). */

    _this8._viewportSize = 0;
    /** The last rendered content offset that was set. */

    _this8._renderedContentOffset = 0;
    /**
     * Whether the last rendered content offset was to the end of the content (and therefore needs to
     * be rewritten as an offset to the start of the content).
     */

    _this8._renderedContentOffsetNeedsRewrite = false;
    /** Whether there is a pending change detection cycle. */

    _this8._isChangeDetectionPending = false;
    /** A list of functions to run after the next change detection cycle. */

    _this8._runAfterChangeDetection = [];
    /** Subscription to changes in the viewport size. */

    _this8._viewportChanges = rxjs__WEBPACK_IMPORTED_MODULE_23__.Subscription.EMPTY;

    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
    }

    _this8._viewportChanges = viewportRuler.change().subscribe(function () {
      _this8.checkViewportSize();
    });
    return _this8;
  }
  /** The direction the viewport scrolls. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CdkVirtualScrollViewport, [{
    key: "orientation",
    get: function get() {
      return this._orientation;
    },
    set: function set(orientation) {
      if (this._orientation !== orientation) {
        this._orientation = orientation;

        this._calculateSpacerSize();
      }
    }
    /**
     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items
     * will be removed.
     */

  }, {
    key: "appendOnly",
    get: function get() {
      return this._appendOnly;
    },
    set: function set(value) {
      this._appendOnly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
    }
  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      var _this9 = this;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(CdkVirtualScrollViewport.prototype), "ngOnInit", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows
      // the Viewport to be rendered with the correct size before we measure. We run this outside the
      // zone to avoid causing more change detection cycles. We handle the change detection loop
      // ourselves instead.


      this.ngZone.runOutsideAngular(function () {
        return Promise.resolve().then(function () {
          _this9._measureViewportSize();

          _this9._scrollStrategy.attach(_this9);

          _this9.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.
          (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_24__.startWith)(null), // Collect multiple events into one until the next animation frame. This way if
          // there are multiple scroll events in the same frame we only need to recheck
          // our layout once.
          (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.auditTime)(0, SCROLL_SCHEDULER)).subscribe(function () {
            return _this9._scrollStrategy.onContentScrolled();
          });

          _this9._markChangeDetectionNeeded();
        });
      });
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.detach();

      this._scrollStrategy.detach(); // Complete all subjects


      this._renderedRangeSubject.complete();

      this._detachedSubject.complete();

      this._viewportChanges.unsubscribe();

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(CdkVirtualScrollViewport.prototype), "ngOnDestroy", this).call(this);
    }
    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */

  }, {
    key: "attach",
    value: function attach(forOf) {
      var _this10 = this;

      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('CdkVirtualScrollViewport is already attached.');
      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
      // changes. Run outside the zone to avoid triggering change detection, since we're managing the
      // change detection loop ourselves.


      this.ngZone.runOutsideAngular(function () {
        _this10._forOf = forOf;

        _this10._forOf.dataStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.takeUntil)(_this10._detachedSubject)).subscribe(function (data) {
          var newLength = data.length;

          if (newLength !== _this10._dataLength) {
            _this10._dataLength = newLength;

            _this10._scrollStrategy.onDataLengthChanged();
          }

          _this10._doChangeDetection();
        });
      });
    }
    /** Detaches the current `CdkVirtualForOf`. */

  }, {
    key: "detach",
    value: function detach() {
      this._forOf = null;

      this._detachedSubject.next();
    }
    /** Gets the length of the data bound to this viewport (in number of items). */

  }, {
    key: "getDataLength",
    value: function getDataLength() {
      return this._dataLength;
    }
    /** Gets the size of the viewport (in pixels). */

  }, {
    key: "getViewportSize",
    value: function getViewportSize() {
      return this._viewportSize;
    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
    // cycle happens. I'm being careful to only call it after the render cycle is complete and before
    // setting it to something else, but its error prone and should probably be split into
    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.

    /** Get the current rendered range of items. */

  }, {
    key: "getRenderedRange",
    value: function getRenderedRange() {
      return this._renderedRange;
    }
    /**
     * Sets the total size of all content (in pixels), including content that is not currently
     * rendered.
     */

  }, {
    key: "setTotalContentSize",
    value: function setTotalContentSize(size) {
      if (this._totalContentSize !== size) {
        this._totalContentSize = size;

        this._calculateSpacerSize();

        this._markChangeDetectionNeeded();
      }
    }
    /** Sets the currently rendered range of indices. */

  }, {
    key: "setRenderedRange",
    value: function setRenderedRange(range) {
      var _this11 = this;

      if (!rangesEqual(this._renderedRange, range)) {
        if (this.appendOnly) {
          range = {
            start: 0,
            end: Math.max(this._renderedRange.end, range.end)
          };
        }

        this._renderedRangeSubject.next(this._renderedRange = range);

        this._markChangeDetectionNeeded(function () {
          return _this11._scrollStrategy.onContentRendered();
        });
      }
    }
    /**
     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
     */

  }, {
    key: "getOffsetToRenderedContentStart",
    value: function getOffsetToRenderedContentStart() {
      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
    }
    /**
     * Sets the offset from the start of the viewport to either the start or end of the rendered data
     * (in pixels).
     */

  }, {
    key: "setRenderedContentOffset",
    value: function setRenderedContentOffset(offset) {
      var _this12 = this;

      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';
      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
      // in the negative direction.
      var isRtl = this.dir && this.dir.value == 'rtl';
      var isHorizontal = this.orientation == 'horizontal';
      var axis = isHorizontal ? 'X' : 'Y';
      var axisDirection = isHorizontal && isRtl ? -1 : 1;
      var transform = "translate".concat(axis, "(").concat(Number(axisDirection * offset), "px)");
      this._renderedContentOffset = offset;

      if (to === 'to-end') {
        transform += " translate".concat(axis, "(-100%)"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
        // expand upward).

        this._renderedContentOffsetNeedsRewrite = true;
      }

      if (this._renderedContentTransform != transform) {
        // We know this value is safe because we parse `offset` with `Number()` before passing it
        // into the string.
        this._renderedContentTransform = transform;

        this._markChangeDetectionNeeded(function () {
          if (_this12._renderedContentOffsetNeedsRewrite) {
            _this12._renderedContentOffset -= _this12.measureRenderedContentSize();
            _this12._renderedContentOffsetNeedsRewrite = false;

            _this12.setRenderedContentOffset(_this12._renderedContentOffset);
          } else {
            _this12._scrollStrategy.onRenderedOffsetChanged();
          }
        });
      }
    }
    /**
     * Scrolls to the given offset from the start of the viewport. Please note that this is not always
     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
     * direction, this would be the equivalent of setting a fictional `scrollRight` property.
     * @param offset The offset to scroll to.
     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
     */

  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(offset) {
      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
      var options = {
        behavior: behavior
      };

      if (this.orientation === 'horizontal') {
        options.start = offset;
      } else {
        options.top = offset;
      }

      this.scrollTo(options);
    }
    /**
     * Scrolls to the offset for the given index.
     * @param index The index of the element to scroll to.
     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
     */

  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(index) {
      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';

      this._scrollStrategy.scrollToIndex(index, behavior);
    }
    /**
     * Gets the current scroll offset from the start of the viewport (in pixels).
     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
     *     in horizontal mode.
     */

  }, {
    key: "measureScrollOffset",
    value: function measureScrollOffset(from) {
      return from ? (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(CdkVirtualScrollViewport.prototype), "measureScrollOffset", this).call(this, from) : (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(CdkVirtualScrollViewport.prototype), "measureScrollOffset", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');
    }
    /** Measure the combined size of all of the rendered items. */

  }, {
    key: "measureRenderedContentSize",
    value: function measureRenderedContentSize() {
      var contentEl = this._contentWrapper.nativeElement;
      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
    }
    /**
     * Measure the total combined size of the given range. Throws if the range includes items that are
     * not rendered.
     */

  }, {
    key: "measureRangeSize",
    value: function measureRangeSize(range) {
      if (!this._forOf) {
        return 0;
      }

      return this._forOf.measureRangeSize(range, this.orientation);
    }
    /** Update the viewport dimensions and re-render. */

  }, {
    key: "checkViewportSize",
    value: function checkViewportSize() {
      // TODO: Cleanup later when add logic for handling content resize
      this._measureViewportSize();

      this._scrollStrategy.onDataLengthChanged();
    }
    /** Measure the viewport size. */

  }, {
    key: "_measureViewportSize",
    value: function _measureViewportSize() {
      var viewportEl = this.elementRef.nativeElement;
      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;
    }
    /** Queue up change detection to run. */

  }, {
    key: "_markChangeDetectionNeeded",
    value: function _markChangeDetectionNeeded(runAfter) {
      var _this13 = this;

      if (runAfter) {
        this._runAfterChangeDetection.push(runAfter);
      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
      // properties sequentially we only have to run `_doChangeDetection` once at the end.


      if (!this._isChangeDetectionPending) {
        this._isChangeDetectionPending = true;
        this.ngZone.runOutsideAngular(function () {
          return Promise.resolve().then(function () {
            _this13._doChangeDetection();
          });
        });
      }
    }
    /** Run change detection. */

  }, {
    key: "_doChangeDetection",
    value: function _doChangeDetection() {
      var _this14 = this;

      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because
      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
      // the `Number` function first to coerce it to a numeric value.

      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
      // from the root, since the repeated items are content projected in. Calling `detectChanges`
      // instead does not properly check the projected content.

      this.ngZone.run(function () {
        return _this14._changeDetectorRef.markForCheck();
      });
      var runAfterChangeDetection = this._runAfterChangeDetection;
      this._runAfterChangeDetection = [];

      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(runAfterChangeDetection),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fn = _step.value;
          fn();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /** Calculates the `style.width` and `style.height` for the spacer element. */

  }, {
    key: "_calculateSpacerSize",
    value: function _calculateSpacerSize() {
      this._totalContentHeight = this.orientation === 'horizontal' ? '' : "".concat(this._totalContentSize, "px");
      this._totalContentWidth = this.orientation === 'horizontal' ? "".concat(this._totalContentSize, "px") : '';
    }
  }]);

  return CdkVirtualScrollViewport;
}(CdkScrollable);

CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {
  return new (t || CdkVirtualScrollViewport)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](VIRTUAL_SCROLL_STRATEGY, 8), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ViewportRuler));
};

CdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineComponent"]({
  type: CdkVirtualScrollViewport,
  selectors: [["cdk-virtual-scroll-viewport"]],
  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵviewQuery"](_c0, 7);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵloadQuery"]()) && (ctx._contentWrapper = _t.first);
    }
  },
  hostAttrs: [1, "cdk-virtual-scroll-viewport"],
  hostVars: 4,
  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵclassProp"]("cdk-virtual-scroll-orientation-horizontal", ctx.orientation === "horizontal")("cdk-virtual-scroll-orientation-vertical", ctx.orientation !== "horizontal");
    }
  },
  inputs: {
    orientation: "orientation",
    appendOnly: "appendOnly"
  },
  outputs: {
    scrolledIndexChange: "scrolledIndexChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: CdkScrollable,
    useExisting: CdkVirtualScrollViewport
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵInheritDefinitionFeature"]],
  ngContentSelectors: _c1,
  decls: 4,
  vars: 4,
  consts: [[1, "cdk-virtual-scroll-content-wrapper"], ["contentWrapper", ""], [1, "cdk-virtual-scroll-spacer"]],
  template: function CdkVirtualScrollViewport_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵprojection"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](3, "div", 2);
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵstyleProp"]("width", ctx._totalContentWidth)("height", ctx._totalContentHeight);
    }
  },
  styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\n"],
  encapsulation: 2,
  changeDetection: 0
});

CdkVirtualScrollViewport.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [VIRTUAL_SCROLL_STRATEGY]
    }]
  }, {
    type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }]
  }, {
    type: ScrollDispatcher
  }, {
    type: ViewportRuler
  }];
};

CdkVirtualScrollViewport.propDecorators = {
  orientation: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  appendOnly: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  scrolledIndexChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
  }],
  _contentWrapper: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
    args: ['contentWrapper', {
      static: true
    }]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CdkVirtualScrollViewport, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Component,
    args: [{
      selector: 'cdk-virtual-scroll-viewport',
      template: "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n",
      host: {
        'class': 'cdk-virtual-scroll-viewport',
        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"'
      },
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewEncapsulation.None,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: CdkScrollable,
        useExisting: CdkVirtualScrollViewport
      }],
      styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [VIRTUAL_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }]
    }, {
      type: ScrollDispatcher
    }, {
      type: ViewportRuler
    }];
  }, {
    scrolledIndexChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
    }],
    orientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    appendOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    _contentWrapper: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
      args: ['contentWrapper', {
        static: true
      }]
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Helper to extract the offset of a DOM Node in a certain direction. */


function getOffset(orientation, direction, node) {
  var el = node;

  if (!el.getBoundingClientRect) {
    return 0;
  }

  var rect = el.getBoundingClientRect();

  if (orientation === 'horizontal') {
    return direction === 'start' ? rect.left : rect.right;
  }

  return direction === 'start' ? rect.top : rect.bottom;
}
/**
 * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
 * container.
 */


var CdkVirtualForOf = /*#__PURE__*/function () {
  function CdkVirtualForOf(
  /** The view container to add items to. */
  _viewContainerRef,
  /** The template to use when stamping out new items. */
  _template,
  /** The set of available differs. */
  _differs,
  /** The strategy used to render items in the virtual scroll viewport. */
  _viewRepeater,
  /** The virtual scrolling viewport that these items are being rendered in. */
  _viewport, ngZone) {
    var _this15 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkVirtualForOf);

    this._viewContainerRef = _viewContainerRef;
    this._template = _template;
    this._differs = _differs;
    this._viewRepeater = _viewRepeater;
    this._viewport = _viewport;
    /** Emits when the rendered view of the data changes. */

    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** Subject that emits when a new DataSource instance is given. */

    this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    /** Emits whenever the data in the current DataSource changes. */

    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_24__.startWith)(null), // Bundle up the previous and current data sources so we can work with both.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.pairwise)(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the
    // new one, passing back a stream of data changes which we run through `switchMap` to give
    // us a data stream that emits the latest data from whatever the current `DataSource` is.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.switchMap)(function (_ref) {
      var _ref2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_ref, 2),
          prev = _ref2[0],
          cur = _ref2[1];

      return _this15._changeDataSource(prev, cur);
    }), // Replay the last emitted data when someone subscribes.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_27__.shareReplay)(1));
    /** The differ used to calculate changes to the data. */

    this._differ = null;
    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */

    this._needsUpdate = false;
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__.Subject();
    this.dataStream.subscribe(function (data) {
      _this15._data = data;

      _this15._onRenderedDataChange();
    });

    this._viewport.renderedRangeStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.takeUntil)(this._destroyed)).subscribe(function (range) {
      _this15._renderedRange = range;
      ngZone.run(function () {
        return _this15.viewChange.next(_this15._renderedRange);
      });

      _this15._onRenderedDataChange();
    });

    this._viewport.attach(this);
  }
  /** The DataSource to display. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__.default)(CdkVirtualForOf, [{
    key: "cdkVirtualForOf",
    get: function get() {
      return this._cdkVirtualForOf;
    },
    set: function set(value) {
      this._cdkVirtualForOf = value;

      if ((0,_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__.isDataSource)(value)) {
        this._dataSourceChanges.next(value);
      } else {
        // If value is an an NgIterable, convert it to an array.
        this._dataSourceChanges.next(new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__.ArrayDataSource((0,rxjs__WEBPACK_IMPORTED_MODULE_29__.isObservable)(value) ? value : Array.from(value || [])));
      }
    }
    /**
     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
     * the item and produces a value to be used as the item's identity when tracking changes.
     */

  }, {
    key: "cdkVirtualForTrackBy",
    get: function get() {
      return this._cdkVirtualForTrackBy;
    },
    set: function set(fn) {
      var _this16 = this;

      this._needsUpdate = true;
      this._cdkVirtualForTrackBy = fn ? function (index, item) {
        return fn(index + (_this16._renderedRange ? _this16._renderedRange.start : 0), item);
      } : undefined;
    }
    /** The template used to stamp out new elements. */

  }, {
    key: "cdkVirtualForTemplate",
    set: function set(value) {
      if (value) {
        this._needsUpdate = true;
        this._template = value;
      }
    }
    /**
     * The size of the cache used to store templates that are not being used for re-use later.
     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
     */

  }, {
    key: "cdkVirtualForTemplateCacheSize",
    get: function get() {
      return this._viewRepeater.viewCacheSize;
    },
    set: function set(size) {
      this._viewRepeater.viewCacheSize = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceNumberProperty)(size);
    }
    /**
     * Measures the combined size (width for horizontal orientation, height for vertical) of all items
     * in the specified range. Throws an error if the range includes items that are not currently
     * rendered.
     */

  }, {
    key: "measureRangeSize",
    value: function measureRangeSize(range, orientation) {
      if (range.start >= range.end) {
        return 0;
      }

      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error("Error: attempted to measure an item that isn't rendered.");
      } // The index into the list of rendered views for the first item in the range.


      var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.

      var rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting
      // the top of the first node from the bottom of the last one.

      var firstNode;
      var lastNode; // Find the first node by starting from the beginning and going forwards.

      for (var i = 0; i < rangeLen; i++) {
        var view = this._viewContainerRef.get(i + renderedStartIndex);

        if (view && view.rootNodes.length) {
          firstNode = lastNode = view.rootNodes[0];
          break;
        }
      } // Find the last node by starting from the end and going backwards.


      for (var _i = rangeLen - 1; _i > -1; _i--) {
        var _view = this._viewContainerRef.get(_i + renderedStartIndex);

        if (_view && _view.rootNodes.length) {
          lastNode = _view.rootNodes[_view.rootNodes.length - 1];
          break;
        }
      }

      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this._differ && this._needsUpdate) {
        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
        // this list being rendered (can use simpler algorithm) vs needs update due to data actually
        // changing (need to do this diff).
        var changes = this._differ.diff(this._renderedItems);

        if (!changes) {
          this._updateContext();
        } else {
          this._applyChanges(changes);
        }

        this._needsUpdate = false;
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._viewport.detach();

      this._dataSourceChanges.next(undefined);

      this._dataSourceChanges.complete();

      this.viewChange.complete();

      this._destroyed.next();

      this._destroyed.complete();

      this._viewRepeater.detach();
    }
    /** React to scroll state changes in the viewport. */

  }, {
    key: "_onRenderedDataChange",
    value: function _onRenderedDataChange() {
      var _this17 = this;

      if (!this._renderedRange) {
        return;
      }

      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);

      if (!this._differ) {
        // Use a wrapper function for the `trackBy` so any new values are
        // picked up automatically without having to recreate the differ.
        this._differ = this._differs.find(this._renderedItems).create(function (index, item) {
          return _this17.cdkVirtualForTrackBy ? _this17.cdkVirtualForTrackBy(index, item) : item;
        });
      }

      this._needsUpdate = true;
    }
    /** Swap out one `DataSource` for another. */

  }, {
    key: "_changeDataSource",
    value: function _changeDataSource(oldDs, newDs) {
      if (oldDs) {
        oldDs.disconnect(this);
      }

      this._needsUpdate = true;
      return newDs ? newDs.connect(this) : (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.of)();
    }
    /** Update the `CdkVirtualForOfContext` for all views. */

  }, {
    key: "_updateContext",
    value: function _updateContext() {
      var count = this._data.length;
      var i = this._viewContainerRef.length;

      while (i--) {
        var view = this._viewContainerRef.get(i);

        view.context.index = this._renderedRange.start + i;
        view.context.count = count;

        this._updateComputedContextProperties(view.context);

        view.detectChanges();
      }
    }
    /** Apply changes to the DOM. */

  }, {
    key: "_applyChanges",
    value: function _applyChanges(changes) {
      var _this18 = this;

      this._viewRepeater.applyChanges(changes, this._viewContainerRef, function (record, _adjustedPreviousIndex, currentIndex) {
        return _this18._getEmbeddedViewArgs(record, currentIndex);
      }, function (record) {
        return record.item;
      }); // Update $implicit for any items that had an identity change.


      changes.forEachIdentityChange(function (record) {
        var view = _this18._viewContainerRef.get(record.currentIndex);

        view.context.$implicit = record.item;
      }); // Update the context variables on all items.

      var count = this._data.length;
      var i = this._viewContainerRef.length;

      while (i--) {
        var view = this._viewContainerRef.get(i);

        view.context.index = this._renderedRange.start + i;
        view.context.count = count;

        this._updateComputedContextProperties(view.context);
      }
    }
    /** Update the computed properties on the `CdkVirtualForOfContext`. */

  }, {
    key: "_updateComputedContextProperties",
    value: function _updateComputedContextProperties(context) {
      context.first = context.index === 0;
      context.last = context.index === context.count - 1;
      context.even = context.index % 2 === 0;
      context.odd = !context.even;
    }
  }, {
    key: "_getEmbeddedViewArgs",
    value: function _getEmbeddedViewArgs(record, index) {
      // Note that it's important that we insert the item directly at the proper index,
      // rather than inserting it and the moving it in place, because if there's a directive
      // on the same node that injects the `ViewContainerRef`, Angular will insert another
      // comment node which can throw off the move when it's being repeated for all items.
      return {
        templateRef: this._template,
        context: {
          $implicit: record.item,
          // It's guaranteed that the iterable is not "undefined" or "null" because we only
          // generate views for elements if the "cdkVirtualForOf" iterable has elements.
          cdkVirtualForOf: this._cdkVirtualForOf,
          index: -1,
          count: -1,
          first: false,
          last: false,
          odd: false,
          even: false
        },
        index: index
      };
    }
  }]);

  return CdkVirtualForOf;
}();

CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {
  return new (t || CdkVirtualForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._VIEW_REPEATER_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](CdkVirtualScrollViewport, 4), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone));
};

CdkVirtualForOf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: CdkVirtualForOf,
  selectors: [["", "cdkVirtualFor", "", "cdkVirtualForOf", ""]],
  inputs: {
    cdkVirtualForOf: "cdkVirtualForOf",
    cdkVirtualForTrackBy: "cdkVirtualForTrackBy",
    cdkVirtualForTemplate: "cdkVirtualForTemplate",
    cdkVirtualForTemplateCacheSize: "cdkVirtualForTemplateCacheSize"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._VIEW_REPEATER_STRATEGY,
    useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._RecycleViewRepeaterStrategy
  }])]
});

CdkVirtualForOf.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.TemplateRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.IterableDiffers
  }, {
    type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._RecycleViewRepeaterStrategy,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._VIEW_REPEATER_STRATEGY]
    }]
  }, {
    type: CdkVirtualScrollViewport,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.SkipSelf
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
  }];
};

CdkVirtualForOf.propDecorators = {
  cdkVirtualForOf: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  cdkVirtualForTrackBy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  cdkVirtualForTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  cdkVirtualForTemplateCacheSize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CdkVirtualForOf, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: '[cdkVirtualFor][cdkVirtualForOf]',
      providers: [{
        provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._VIEW_REPEATER_STRATEGY,
        useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._RecycleViewRepeaterStrategy
      }]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.IterableDiffers
    }, {
      type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._RecycleViewRepeaterStrategy,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_28__._VIEW_REPEATER_STRATEGY]
      }]
    }, {
      type: CdkVirtualScrollViewport,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.SkipSelf
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone
    }];
  }, {
    cdkVirtualForOf: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    cdkVirtualForTrackBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    cdkVirtualForTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    cdkVirtualForTemplateCacheSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var CdkScrollableModule = function CdkScrollableModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CdkScrollableModule);
};

CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {
  return new (t || CdkScrollableModule)();
};

CdkScrollableModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineNgModule"]({
  type: CdkScrollableModule
});
CdkScrollableModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CdkScrollableModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule,
    args: [{
      exports: [CdkScrollable],
      declarations: [CdkScrollable]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsetNgModuleScope"](CdkScrollableModule, {
    declarations: [CdkScrollable],
    exports: [CdkScrollable]
  });
})();
/**
 * @docs-primary-export
 */


var ScrollingModule = function ScrollingModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, ScrollingModule);
};

ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {
  return new (t || ScrollingModule)();
};

ScrollingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineNgModule"]({
  type: ScrollingModule
});
ScrollingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjector"]({
  imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.PlatformModule, CdkScrollableModule], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, CdkScrollableModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](ScrollingModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule,
    args: [{
      imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.PlatformModule, CdkScrollableModule],
      exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],
      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsetNgModuleScope"](ScrollingModule, {
    declarations: function declarations() {
      return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];
    },
    imports: function imports() {
      return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_17__.PlatformModule, CdkScrollableModule];
    },
    exports: function exports() {
      return [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_20__.BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];
    }
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 40093:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/common/fesm2015/common.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "APP_BASE_HREF": function() { return /* binding */ APP_BASE_HREF; },
/* harmony export */   "AsyncPipe": function() { return /* binding */ AsyncPipe; },
/* harmony export */   "CommonModule": function() { return /* binding */ CommonModule; },
/* harmony export */   "CurrencyPipe": function() { return /* binding */ CurrencyPipe; },
/* harmony export */   "DOCUMENT": function() { return /* binding */ DOCUMENT; },
/* harmony export */   "DatePipe": function() { return /* binding */ DatePipe; },
/* harmony export */   "DecimalPipe": function() { return /* binding */ DecimalPipe; },
/* harmony export */   "FormStyle": function() { return /* binding */ FormStyle; },
/* harmony export */   "FormatWidth": function() { return /* binding */ FormatWidth; },
/* harmony export */   "HashLocationStrategy": function() { return /* binding */ HashLocationStrategy; },
/* harmony export */   "I18nPluralPipe": function() { return /* binding */ I18nPluralPipe; },
/* harmony export */   "I18nSelectPipe": function() { return /* binding */ I18nSelectPipe; },
/* harmony export */   "JsonPipe": function() { return /* binding */ JsonPipe; },
/* harmony export */   "KeyValuePipe": function() { return /* binding */ KeyValuePipe; },
/* harmony export */   "LOCATION_INITIALIZED": function() { return /* binding */ LOCATION_INITIALIZED; },
/* harmony export */   "Location": function() { return /* binding */ Location; },
/* harmony export */   "LocationStrategy": function() { return /* binding */ LocationStrategy; },
/* harmony export */   "LowerCasePipe": function() { return /* binding */ LowerCasePipe; },
/* harmony export */   "NgClass": function() { return /* binding */ NgClass; },
/* harmony export */   "NgComponentOutlet": function() { return /* binding */ NgComponentOutlet; },
/* harmony export */   "NgForOf": function() { return /* binding */ NgForOf; },
/* harmony export */   "NgForOfContext": function() { return /* binding */ NgForOfContext; },
/* harmony export */   "NgIf": function() { return /* binding */ NgIf; },
/* harmony export */   "NgIfContext": function() { return /* binding */ NgIfContext; },
/* harmony export */   "NgLocaleLocalization": function() { return /* binding */ NgLocaleLocalization; },
/* harmony export */   "NgLocalization": function() { return /* binding */ NgLocalization; },
/* harmony export */   "NgPlural": function() { return /* binding */ NgPlural; },
/* harmony export */   "NgPluralCase": function() { return /* binding */ NgPluralCase; },
/* harmony export */   "NgStyle": function() { return /* binding */ NgStyle; },
/* harmony export */   "NgSwitch": function() { return /* binding */ NgSwitch; },
/* harmony export */   "NgSwitchCase": function() { return /* binding */ NgSwitchCase; },
/* harmony export */   "NgSwitchDefault": function() { return /* binding */ NgSwitchDefault; },
/* harmony export */   "NgTemplateOutlet": function() { return /* binding */ NgTemplateOutlet; },
/* harmony export */   "NumberFormatStyle": function() { return /* binding */ NumberFormatStyle; },
/* harmony export */   "NumberSymbol": function() { return /* binding */ NumberSymbol; },
/* harmony export */   "PathLocationStrategy": function() { return /* binding */ PathLocationStrategy; },
/* harmony export */   "PercentPipe": function() { return /* binding */ PercentPipe; },
/* harmony export */   "PlatformLocation": function() { return /* binding */ PlatformLocation; },
/* harmony export */   "Plural": function() { return /* binding */ Plural; },
/* harmony export */   "SlicePipe": function() { return /* binding */ SlicePipe; },
/* harmony export */   "TitleCasePipe": function() { return /* binding */ TitleCasePipe; },
/* harmony export */   "TranslationWidth": function() { return /* binding */ TranslationWidth; },
/* harmony export */   "UpperCasePipe": function() { return /* binding */ UpperCasePipe; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "ViewportScroller": function() { return /* binding */ ViewportScroller; },
/* harmony export */   "WeekDay": function() { return /* binding */ WeekDay; },
/* harmony export */   "XhrFactory": function() { return /* binding */ XhrFactory; },
/* harmony export */   "formatCurrency": function() { return /* binding */ formatCurrency; },
/* harmony export */   "formatDate": function() { return /* binding */ formatDate; },
/* harmony export */   "formatNumber": function() { return /* binding */ formatNumber; },
/* harmony export */   "formatPercent": function() { return /* binding */ formatPercent; },
/* harmony export */   "getCurrencySymbol": function() { return /* binding */ getCurrencySymbol; },
/* harmony export */   "getLocaleCurrencyCode": function() { return /* binding */ getLocaleCurrencyCode; },
/* harmony export */   "getLocaleCurrencyName": function() { return /* binding */ getLocaleCurrencyName; },
/* harmony export */   "getLocaleCurrencySymbol": function() { return /* binding */ getLocaleCurrencySymbol; },
/* harmony export */   "getLocaleDateFormat": function() { return /* binding */ getLocaleDateFormat; },
/* harmony export */   "getLocaleDateTimeFormat": function() { return /* binding */ getLocaleDateTimeFormat; },
/* harmony export */   "getLocaleDayNames": function() { return /* binding */ getLocaleDayNames; },
/* harmony export */   "getLocaleDayPeriods": function() { return /* binding */ getLocaleDayPeriods; },
/* harmony export */   "getLocaleDirection": function() { return /* binding */ getLocaleDirection; },
/* harmony export */   "getLocaleEraNames": function() { return /* binding */ getLocaleEraNames; },
/* harmony export */   "getLocaleExtraDayPeriodRules": function() { return /* binding */ getLocaleExtraDayPeriodRules; },
/* harmony export */   "getLocaleExtraDayPeriods": function() { return /* binding */ getLocaleExtraDayPeriods; },
/* harmony export */   "getLocaleFirstDayOfWeek": function() { return /* binding */ getLocaleFirstDayOfWeek; },
/* harmony export */   "getLocaleId": function() { return /* binding */ getLocaleId; },
/* harmony export */   "getLocaleMonthNames": function() { return /* binding */ getLocaleMonthNames; },
/* harmony export */   "getLocaleNumberFormat": function() { return /* binding */ getLocaleNumberFormat; },
/* harmony export */   "getLocaleNumberSymbol": function() { return /* binding */ getLocaleNumberSymbol; },
/* harmony export */   "getLocalePluralCase": function() { return /* binding */ getLocalePluralCase; },
/* harmony export */   "getLocaleTimeFormat": function() { return /* binding */ getLocaleTimeFormat; },
/* harmony export */   "getLocaleWeekEndRange": function() { return /* binding */ getLocaleWeekEndRange; },
/* harmony export */   "getNumberOfCurrencyDigits": function() { return /* binding */ getNumberOfCurrencyDigits; },
/* harmony export */   "isPlatformBrowser": function() { return /* binding */ isPlatformBrowser; },
/* harmony export */   "isPlatformServer": function() { return /* binding */ isPlatformServer; },
/* harmony export */   "isPlatformWorkerApp": function() { return /* binding */ isPlatformWorkerApp; },
/* harmony export */   "isPlatformWorkerUi": function() { return /* binding */ isPlatformWorkerUi; },
/* harmony export */   "registerLocaleData": function() { return /* binding */ registerLocaleData; },
/* harmony export */   "ɵBrowserPlatformLocation": function() { return /* binding */ BrowserPlatformLocation; },
/* harmony export */   "ɵDomAdapter": function() { return /* binding */ DomAdapter; },
/* harmony export */   "ɵNullViewportScroller": function() { return /* binding */ NullViewportScroller; },
/* harmony export */   "ɵPLATFORM_BROWSER_ID": function() { return /* binding */ PLATFORM_BROWSER_ID; },
/* harmony export */   "ɵPLATFORM_SERVER_ID": function() { return /* binding */ PLATFORM_SERVER_ID; },
/* harmony export */   "ɵPLATFORM_WORKER_APP_ID": function() { return /* binding */ PLATFORM_WORKER_APP_ID; },
/* harmony export */   "ɵPLATFORM_WORKER_UI_ID": function() { return /* binding */ PLATFORM_WORKER_UI_ID; },
/* harmony export */   "ɵangular_packages_common_common_a": function() { return /* binding */ useBrowserPlatformLocation; },
/* harmony export */   "ɵangular_packages_common_common_b": function() { return /* binding */ createBrowserPlatformLocation; },
/* harmony export */   "ɵangular_packages_common_common_c": function() { return /* binding */ createLocation; },
/* harmony export */   "ɵangular_packages_common_common_d": function() { return /* binding */ provideLocationStrategy; },
/* harmony export */   "ɵangular_packages_common_common_e": function() { return /* binding */ COMMON_DIRECTIVES; },
/* harmony export */   "ɵangular_packages_common_common_f": function() { return /* binding */ COMMON_PIPES; },
/* harmony export */   "ɵgetDOM": function() { return /* binding */ getDOM; },
/* harmony export */   "ɵparseCookieValue": function() { return /* binding */ parseCookieValue; },
/* harmony export */   "ɵsetRootDomAdapter": function() { return /* binding */ setRootDomAdapter; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 91477);







/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _DOM = null;

function getDOM() {
  return _DOM;
}

function setDOM(adapter) {
  _DOM = adapter;
}

function setRootDomAdapter(adapter) {
  if (!_DOM) {
    _DOM = adapter;
  }
}
/* tslint:disable:requireParameterType */

/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */


var DomAdapter = function DomAdapter() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DomAdapter);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application in a Web Worker).
 *
 * @publicApi
 */


var DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.InjectionToken('DocumentToken');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This class should not be used directly by an application developer. Instead, use
 * {@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be
 * platform-agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms that Angular supports. For example, `@angular/platform-browser` provides an
 * implementation specific to the browser environment, while `@angular/platform-server` provides
 * one suitable for use with server-side rendering.
 *
 * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
 * when they need to interact with the DOM APIs like pushState, popState, etc.
 *
 * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
 * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
 * Router} /
 * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`
 * class, they are all platform-agnostic.
 *
 * @publicApi
 */

var PlatformLocation = /*#__PURE__*/function () {
  function PlatformLocation() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PlatformLocation);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(PlatformLocation, [{
    key: "historyGo",
    value: function historyGo(relativePosition) {
      throw new Error('Not implemented');
    }
  }]);

  return PlatformLocation;
}();

PlatformLocation.ɵfac = function PlatformLocation_Factory(t) {
  return new (t || PlatformLocation)();
};

PlatformLocation.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"])({
  factory: useBrowserPlatformLocation,
  token: PlatformLocation,
  providedIn: "platform"
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](PlatformLocation, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable,
    args: [{
      providedIn: 'platform',
      // See #23917
      useFactory: useBrowserPlatformLocation
    }]
  }], null, null);
})();

function useBrowserPlatformLocation() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(BrowserPlatformLocation);
}
/**
 * @description
 * Indicates when a location is initialized.
 *
 * @publicApi
 */


var LOCATION_INITIALIZED = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.InjectionToken('Location Initialized');
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {@link Location}.
 */

var BrowserPlatformLocation = /*#__PURE__*/function (_PlatformLocation) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserPlatformLocation, _PlatformLocation);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(BrowserPlatformLocation);

  function BrowserPlatformLocation(_doc) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BrowserPlatformLocation);

    _this = _super.call(this);
    _this._doc = _doc;

    _this._init();

    return _this;
  } // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it

  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(BrowserPlatformLocation, [{
    key: "_init",
    value: function _init() {
      this.location = window.location;
      this._history = window.history;
    }
  }, {
    key: "getBaseHrefFromDOM",
    value: function getBaseHrefFromDOM() {
      return getDOM().getBaseHref(this._doc);
    }
  }, {
    key: "onPopState",
    value: function onPopState(fn) {
      var window = getDOM().getGlobalEventTarget(this._doc, 'window');
      window.addEventListener('popstate', fn, false);
      return function () {
        return window.removeEventListener('popstate', fn);
      };
    }
  }, {
    key: "onHashChange",
    value: function onHashChange(fn) {
      var window = getDOM().getGlobalEventTarget(this._doc, 'window');
      window.addEventListener('hashchange', fn, false);
      return function () {
        return window.removeEventListener('hashchange', fn);
      };
    }
  }, {
    key: "href",
    get: function get() {
      return this.location.href;
    }
  }, {
    key: "protocol",
    get: function get() {
      return this.location.protocol;
    }
  }, {
    key: "hostname",
    get: function get() {
      return this.location.hostname;
    }
  }, {
    key: "port",
    get: function get() {
      return this.location.port;
    }
  }, {
    key: "pathname",
    get: function get() {
      return this.location.pathname;
    },
    set: function set(newPath) {
      this.location.pathname = newPath;
    }
  }, {
    key: "search",
    get: function get() {
      return this.location.search;
    }
  }, {
    key: "hash",
    get: function get() {
      return this.location.hash;
    }
  }, {
    key: "pushState",
    value: function pushState(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this.location.hash = url;
      }
    }
  }, {
    key: "replaceState",
    value: function replaceState(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this.location.hash = url;
      }
    }
  }, {
    key: "forward",
    value: function forward() {
      this._history.forward();
    }
  }, {
    key: "back",
    value: function back() {
      this._history.back();
    }
  }, {
    key: "historyGo",
    value: function historyGo() {
      var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      this._history.go(relativePosition);
    }
  }, {
    key: "getState",
    value: function getState() {
      return this._history.state;
    }
  }]);

  return BrowserPlatformLocation;
}(PlatformLocation);

BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) {
  return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](DOCUMENT));
};

BrowserPlatformLocation.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"])({
  factory: createBrowserPlatformLocation,
  token: BrowserPlatformLocation,
  providedIn: "platform"
});

BrowserPlatformLocation.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](BrowserPlatformLocation, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable,
    args: [{
      providedIn: 'platform',
      // See #23917
      useFactory: createBrowserPlatformLocation
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();

function supportsState() {
  return !!window.history.pushState;
}

function createBrowserPlatformLocation() {
  return new BrowserPlatformLocation((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(DOCUMENT));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Joins two parts of a URL with a slash if needed.
 *
 * @param start  URL string
 * @param end    URL string
 *
 *
 * @returns The joined URL string.
 */


function joinWithSlash(start, end) {
  if (start.length == 0) {
    return end;
  }

  if (end.length == 0) {
    return start;
  }

  var slashes = 0;

  if (start.endsWith('/')) {
    slashes++;
  }

  if (end.startsWith('/')) {
    slashes++;
  }

  if (slashes == 2) {
    return start + end.substring(1);
  }

  if (slashes == 1) {
    return start + end;
  }

  return start + '/' + end;
}
/**
 * Removes a trailing slash from a URL string if needed.
 * Looks for the first occurrence of either `#`, `?`, or the end of the
 * line as `/` characters and removes the trailing slash if one exists.
 *
 * @param url URL string.
 *
 * @returns The URL string, modified if needed.
 */


function stripTrailingSlash(url) {
  var match = url.match(/#|\?|$/);
  var pathEndIdx = match && match.index || url.length;
  var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
}
/**
 * Normalizes URL parameters by prepending with `?` if needed.
 *
 * @param  params String of URL parameters.
 *
 * @returns The normalized URL parameters string.
 */


function normalizeQueryParams(params) {
  return params && params[0] !== '?' ? '?' + params : params;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Enables the `Location` service to read route state from the browser's URL.
 * Angular provides two strategies:
 * `HashLocationStrategy` and `PathLocationStrategy`.
 *
 * Applications should use the `Router` or `Location` services to
 * interact with application route state.
 *
 * For instance, `HashLocationStrategy` produces URLs like
 * <code class="no-auto-link">http://example.com#/foo</code>,
 * and `PathLocationStrategy` produces
 * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
 *
 * See these two classes for more.
 *
 * @publicApi
 */


var LocationStrategy = /*#__PURE__*/function () {
  function LocationStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, LocationStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(LocationStrategy, [{
    key: "historyGo",
    value: function historyGo(relativePosition) {
      throw new Error('Not implemented');
    }
  }]);

  return LocationStrategy;
}();

LocationStrategy.ɵfac = function LocationStrategy_Factory(t) {
  return new (t || LocationStrategy)();
};

LocationStrategy.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"])({
  factory: provideLocationStrategy,
  token: LocationStrategy,
  providedIn: "root"
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](LocationStrategy, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable,
    args: [{
      providedIn: 'root',
      useFactory: provideLocationStrategy
    }]
  }], null, null);
})();

function provideLocationStrategy(platformLocation) {
  // See #23917
  var location = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(DOCUMENT).location;
  return new PathLocationStrategy((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(PlatformLocation), location && location.origin || '');
}
/**
 * A predefined [DI token](guide/glossary#di-token) for the base href
 * to be used with the `PathLocationStrategy`.
 * The base href is the URL prefix that should be preserved when generating
 * and recognizing URLs.
 *
 * @usageNotes
 *
 * The following example shows how to use this token to configure the root app injector
 * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @publicApi
 */


var APP_BASE_HREF = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.InjectionToken('appBaseHref');
/**
 * @description
 * A {@link LocationStrategy} used to configure the {@link Location} service to
 * represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
 * or add a `<base href>` element to the document.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,
 * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.
 *
 * Similarly, if you add `<base href='/my/app/'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Note that when using `PathLocationStrategy`, neither the query nor
 * the fragment in the `<base href>` will be preserved, as outlined
 * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * @publicApi
 */

var PathLocationStrategy = /*#__PURE__*/function (_LocationStrategy) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(PathLocationStrategy, _LocationStrategy);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(PathLocationStrategy);

  function PathLocationStrategy(_platformLocation, href) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PathLocationStrategy);

    _this2 = _super2.call(this);
    _this2._platformLocation = _platformLocation;
    _this2._removeListenerFns = [];

    if (href == null) {
      href = _this2._platformLocation.getBaseHrefFromDOM();
    }

    if (href == null) {
      throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
    }

    _this2._baseHref = href;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(PathLocationStrategy, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      while (this._removeListenerFns.length) {
        this._removeListenerFns.pop()();
      }
    }
  }, {
    key: "onPopState",
    value: function onPopState(fn) {
      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
    }
  }, {
    key: "getBaseHref",
    value: function getBaseHref() {
      return this._baseHref;
    }
  }, {
    key: "prepareExternalUrl",
    value: function prepareExternalUrl(internal) {
      return joinWithSlash(this._baseHref, internal);
    }
  }, {
    key: "path",
    value: function path() {
      var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
      var hash = this._platformLocation.hash;
      return hash && includeHash ? "".concat(pathname).concat(hash) : pathname;
    }
  }, {
    key: "pushState",
    value: function pushState(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

      this._platformLocation.pushState(state, title, externalUrl);
    }
  }, {
    key: "replaceState",
    value: function replaceState(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

      this._platformLocation.replaceState(state, title, externalUrl);
    }
  }, {
    key: "forward",
    value: function forward() {
      this._platformLocation.forward();
    }
  }, {
    key: "back",
    value: function back() {
      this._platformLocation.back();
    }
  }, {
    key: "historyGo",
    value: function historyGo() {
      var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var _a, _b;

      (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }
  }]);

  return PathLocationStrategy;
}(LocationStrategy);

PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) {
  return new (t || PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](APP_BASE_HREF, 8));
};

PathLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
  token: PathLocationStrategy,
  factory: PathLocationStrategy.ɵfac
});

PathLocationStrategy.ctorParameters = function () {
  return [{
    type: PlatformLocation
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [APP_BASE_HREF]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](PathLocationStrategy, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable
  }], function () {
    return [{
      type: PlatformLocation
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * A {@link LocationStrategy} used to configure the {@link Location} service to
 * represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * @publicApi
 */


var HashLocationStrategy = /*#__PURE__*/function (_LocationStrategy2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(HashLocationStrategy, _LocationStrategy2);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(HashLocationStrategy);

  function HashLocationStrategy(_platformLocation, _baseHref) {
    var _this3;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HashLocationStrategy);

    _this3 = _super3.call(this);
    _this3._platformLocation = _platformLocation;
    _this3._baseHref = '';
    _this3._removeListenerFns = [];

    if (_baseHref != null) {
      _this3._baseHref = _baseHref;
    }

    return _this3;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HashLocationStrategy, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      while (this._removeListenerFns.length) {
        this._removeListenerFns.pop()();
      }
    }
  }, {
    key: "onPopState",
    value: function onPopState(fn) {
      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
    }
  }, {
    key: "getBaseHref",
    value: function getBaseHref() {
      return this._baseHref;
    }
  }, {
    key: "path",
    value: function path() {
      var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      // the hash value is always prefixed with a `#`
      // and if it is empty then it will stay empty
      var path = this._platformLocation.hash;
      if (path == null) path = '#';
      return path.length > 0 ? path.substring(1) : path;
    }
  }, {
    key: "prepareExternalUrl",
    value: function prepareExternalUrl(internal) {
      var url = joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? '#' + url : url;
    }
  }, {
    key: "pushState",
    value: function pushState(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }

      this._platformLocation.pushState(state, title, url);
    }
  }, {
    key: "replaceState",
    value: function replaceState(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }

      this._platformLocation.replaceState(state, title, url);
    }
  }, {
    key: "forward",
    value: function forward() {
      this._platformLocation.forward();
    }
  }, {
    key: "back",
    value: function back() {
      this._platformLocation.back();
    }
  }, {
    key: "historyGo",
    value: function historyGo() {
      var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var _a, _b;

      (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }
  }]);

  return HashLocationStrategy;
}(LocationStrategy);

HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) {
  return new (t || HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](APP_BASE_HREF, 8));
};

HashLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
  token: HashLocationStrategy,
  factory: HashLocationStrategy.ɵfac
});

HashLocationStrategy.ctorParameters = function () {
  return [{
    type: PlatformLocation
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [APP_BASE_HREF]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](HashLocationStrategy, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable
  }], function () {
    return [{
      type: PlatformLocation
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * A service that applications can use to interact with a browser's URL.
 *
 * Depending on the `LocationStrategy` used, `Location` persists
 * to the URL's path or the URL's hash segment.
 *
 * @usageNotes
 *
 * It's better to use the `Router.navigate()` service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 *
 * <code-example path='common/location/ts/path_location_component.ts'
 * region='LocationComponent'></code-example>
 *
 * @publicApi
 */


var Location = /*#__PURE__*/function () {
  function Location(platformStrategy, platformLocation) {
    var _this4 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Location);

    /** @internal */
    this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    /** @internal */

    this._urlChangeListeners = [];
    this._platformStrategy = platformStrategy;

    var browserBaseHref = this._platformStrategy.getBaseHref();

    this._platformLocation = platformLocation;
    this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));

    this._platformStrategy.onPopState(function (ev) {
      _this4._subject.emit({
        'url': _this4.path(true),
        'pop': true,
        'state': ev.state,
        'type': ev.type
      });
    });
  }
  /**
   * Normalizes the URL path for this location.
   *
   * @param includeHash True to include an anchor fragment in the path.
   *
   * @returns The normalized URL path.
   */
  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
  // removed.


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Location, [{
    key: "path",
    value: function path() {
      var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return this.normalize(this._platformStrategy.path(includeHash));
    }
    /**
     * Reports the current state of the location history.
     * @returns The current value of the `history.state` object.
     */

  }, {
    key: "getState",
    value: function getState() {
      return this._platformLocation.getState();
    }
    /**
     * Normalizes the given path and compares to the current normalized path.
     *
     * @param path The given URL path.
     * @param query Query parameters.
     *
     * @returns True if the given URL path is equal to the current normalized path, false
     * otherwise.
     */

  }, {
    key: "isCurrentPathEqualTo",
    value: function isCurrentPathEqualTo(path) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return this.path() == this.normalize(path + normalizeQueryParams(query));
    }
    /**
     * Normalizes a URL path by stripping any trailing slashes.
     *
     * @param url String representing a URL.
     *
     * @returns The normalized URL string.
     */

  }, {
    key: "normalize",
    value: function normalize(url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    }
    /**
     * Normalizes an external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), adds one
     * before normalizing. Adds a hash if `HashLocationStrategy` is
     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     *
     * @param url String representing a URL.
     *
     * @returns  A normalized platform-specific URL.
     */

  }, {
    key: "prepareExternalUrl",
    value: function prepareExternalUrl(url) {
      if (url && url[0] !== '/') {
        url = '/' + url;
      }

      return this._platformStrategy.prepareExternalUrl(url);
    } // TODO: rename this method to pushState

    /**
     * Changes the browser's URL to a normalized version of a given URL, and pushes a
     * new item onto the platform's history.
     *
     * @param path  URL path to normalize.
     * @param query Query parameters.
     * @param state Location history state.
     *
     */

  }, {
    key: "go",
    value: function go(path) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._platformStrategy.pushState(state, '', path, query);

      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Changes the browser's URL to a normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     *
     * @param path  URL path to normalize.
     * @param query Query parameters.
     * @param state Location history state.
     */

  }, {
    key: "replaceState",
    value: function replaceState(path) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._platformStrategy.replaceState(state, '', path, query);

      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Navigates forward in the platform's history.
     */

  }, {
    key: "forward",
    value: function forward() {
      this._platformStrategy.forward();
    }
    /**
     * Navigates back in the platform's history.
     */

  }, {
    key: "back",
    value: function back() {
      this._platformStrategy.back();
    }
    /**
     * Navigate to a specific page from session history, identified by its relative position to the
     * current page.
     *
     * @param relativePosition  Position of the target page in the history relative to the current
     *     page.
     * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
     * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
     * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
     * when `relativePosition` equals 0.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
     */

  }, {
    key: "historyGo",
    value: function historyGo() {
      var relativePosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var _a, _b;

      (_b = (_a = this._platformStrategy).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }
    /**
     * Registers a URL change listener. Use to catch updates performed by the Angular
     * framework that are not detectible through "popstate" or "hashchange" events.
     *
     * @param fn The change handler function, which take a URL and a location history state.
     */

  }, {
    key: "onUrlChange",
    value: function onUrlChange(fn) {
      var _this5 = this;

      this._urlChangeListeners.push(fn);

      if (!this._urlChangeSubscription) {
        this._urlChangeSubscription = this.subscribe(function (v) {
          _this5._notifyUrlChangeListeners(v.url, v.state);
        });
      }
    }
    /** @internal */

  }, {
    key: "_notifyUrlChangeListeners",
    value: function _notifyUrlChangeListeners() {
      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var state = arguments.length > 1 ? arguments[1] : undefined;

      this._urlChangeListeners.forEach(function (fn) {
        return fn(url, state);
      });
    }
    /**
     * Subscribes to the platform's `popState` events.
     *
     * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
     * `Location.onUrlChange()` to subscribe to URL changes instead.
     *
     * @param value Event that is triggered when the state history changes.
     * @param exception The exception to throw.
     *
     * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
     *
     * @returns Subscribed events.
     */

  }, {
    key: "subscribe",
    value: function subscribe(onNext, onThrow, onReturn) {
      return this._subject.subscribe({
        next: onNext,
        error: onThrow,
        complete: onReturn
      });
    }
  }]);

  return Location;
}();

Location.ɵfac = function Location_Factory(t) {
  return new (t || Location)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](PlatformLocation));
};
/**
 * Normalizes URL parameters by prepending with `?` if needed.
 *
 * @param  params String of URL parameters.
 *
 * @returns The normalized URL parameters string.
 */


Location.normalizeQueryParams = normalizeQueryParams;
/**
 * Joins two parts of a URL with a slash if needed.
 *
 * @param start  URL string
 * @param end    URL string
 *
 *
 * @returns The joined URL string.
 */

Location.joinWithSlash = joinWithSlash;
/**
 * Removes a trailing slash from a URL string if needed.
 * Looks for the first occurrence of either `#`, `?`, or the end of the
 * line as `/` characters and removes the trailing slash if one exists.
 *
 * @param url URL string.
 *
 * @returns The URL string, modified if needed.
 */

Location.stripTrailingSlash = stripTrailingSlash;
Location.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"])({
  factory: createLocation,
  token: Location,
  providedIn: "root"
});

Location.ctorParameters = function () {
  return [{
    type: LocationStrategy
  }, {
    type: PlatformLocation
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](Location, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable,
    args: [{
      providedIn: 'root',
      // See #23917
      useFactory: createLocation
    }]
  }], function () {
    return [{
      type: LocationStrategy
    }, {
      type: PlatformLocation
    }];
  }, null);
})();

function createLocation() {
  return new Location((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(LocationStrategy), (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(PlatformLocation));
}

function _stripBaseHref(baseHref, url) {
  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}

function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, '');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** @internal */


var CURRENCIES_EN = {
  "ADP": [undefined, undefined, 0],
  "AFN": [undefined, undefined, 0],
  "ALL": [undefined, undefined, 0],
  "AMD": [undefined, undefined, 2],
  "AOA": [undefined, "Kz"],
  "ARS": [undefined, "$"],
  "AUD": ["A$", "$"],
  "BAM": [undefined, "KM"],
  "BBD": [undefined, "$"],
  "BDT": [undefined, "৳"],
  "BHD": [undefined, undefined, 3],
  "BIF": [undefined, undefined, 0],
  "BMD": [undefined, "$"],
  "BND": [undefined, "$"],
  "BOB": [undefined, "Bs"],
  "BRL": ["R$"],
  "BSD": [undefined, "$"],
  "BWP": [undefined, "P"],
  "BYN": [undefined, "р.", 2],
  "BYR": [undefined, undefined, 0],
  "BZD": [undefined, "$"],
  "CAD": ["CA$", "$", 2],
  "CHF": [undefined, undefined, 2],
  "CLF": [undefined, undefined, 4],
  "CLP": [undefined, "$", 0],
  "CNY": ["CN¥", "¥"],
  "COP": [undefined, "$", 2],
  "CRC": [undefined, "₡", 2],
  "CUC": [undefined, "$"],
  "CUP": [undefined, "$"],
  "CZK": [undefined, "Kč", 2],
  "DJF": [undefined, undefined, 0],
  "DKK": [undefined, "kr", 2],
  "DOP": [undefined, "$"],
  "EGP": [undefined, "E£"],
  "ESP": [undefined, "₧", 0],
  "EUR": ["€"],
  "FJD": [undefined, "$"],
  "FKP": [undefined, "£"],
  "GBP": ["£"],
  "GEL": [undefined, "₾"],
  "GIP": [undefined, "£"],
  "GNF": [undefined, "FG", 0],
  "GTQ": [undefined, "Q"],
  "GYD": [undefined, "$", 2],
  "HKD": ["HK$", "$"],
  "HNL": [undefined, "L"],
  "HRK": [undefined, "kn"],
  "HUF": [undefined, "Ft", 2],
  "IDR": [undefined, "Rp", 2],
  "ILS": ["₪"],
  "INR": ["₹"],
  "IQD": [undefined, undefined, 0],
  "IRR": [undefined, undefined, 0],
  "ISK": [undefined, "kr", 0],
  "ITL": [undefined, undefined, 0],
  "JMD": [undefined, "$"],
  "JOD": [undefined, undefined, 3],
  "JPY": ["¥", undefined, 0],
  "KHR": [undefined, "៛"],
  "KMF": [undefined, "CF", 0],
  "KPW": [undefined, "₩", 0],
  "KRW": ["₩", undefined, 0],
  "KWD": [undefined, undefined, 3],
  "KYD": [undefined, "$"],
  "KZT": [undefined, "₸"],
  "LAK": [undefined, "₭", 0],
  "LBP": [undefined, "L£", 0],
  "LKR": [undefined, "Rs"],
  "LRD": [undefined, "$"],
  "LTL": [undefined, "Lt"],
  "LUF": [undefined, undefined, 0],
  "LVL": [undefined, "Ls"],
  "LYD": [undefined, undefined, 3],
  "MGA": [undefined, "Ar", 0],
  "MGF": [undefined, undefined, 0],
  "MMK": [undefined, "K", 0],
  "MNT": [undefined, "₮", 2],
  "MRO": [undefined, undefined, 0],
  "MUR": [undefined, "Rs", 2],
  "MXN": ["MX$", "$"],
  "MYR": [undefined, "RM"],
  "NAD": [undefined, "$"],
  "NGN": [undefined, "₦"],
  "NIO": [undefined, "C$"],
  "NOK": [undefined, "kr", 2],
  "NPR": [undefined, "Rs"],
  "NZD": ["NZ$", "$"],
  "OMR": [undefined, undefined, 3],
  "PHP": [undefined, "₱"],
  "PKR": [undefined, "Rs", 2],
  "PLN": [undefined, "zł"],
  "PYG": [undefined, "₲", 0],
  "RON": [undefined, "lei"],
  "RSD": [undefined, undefined, 0],
  "RUB": [undefined, "₽"],
  "RUR": [undefined, "р."],
  "RWF": [undefined, "RF", 0],
  "SBD": [undefined, "$"],
  "SEK": [undefined, "kr", 2],
  "SGD": [undefined, "$"],
  "SHP": [undefined, "£"],
  "SLL": [undefined, undefined, 0],
  "SOS": [undefined, undefined, 0],
  "SRD": [undefined, "$"],
  "SSP": [undefined, "£"],
  "STD": [undefined, undefined, 0],
  "STN": [undefined, "Db"],
  "SYP": [undefined, "£", 0],
  "THB": [undefined, "฿"],
  "TMM": [undefined, undefined, 0],
  "TND": [undefined, undefined, 3],
  "TOP": [undefined, "T$"],
  "TRL": [undefined, undefined, 0],
  "TRY": [undefined, "₺"],
  "TTD": [undefined, "$"],
  "TWD": ["NT$", "$", 2],
  "TZS": [undefined, undefined, 2],
  "UAH": [undefined, "₴"],
  "UGX": [undefined, undefined, 0],
  "USD": ["$"],
  "UYI": [undefined, undefined, 0],
  "UYU": [undefined, "$"],
  "UYW": [undefined, undefined, 4],
  "UZS": [undefined, undefined, 2],
  "VEF": [undefined, "Bs", 2],
  "VND": ["₫", undefined, 0],
  "VUV": [undefined, undefined, 0],
  "XAF": ["FCFA", undefined, 0],
  "XCD": ["EC$", "$"],
  "XOF": ["CFA", undefined, 0],
  "XPF": ["CFPF", undefined, 0],
  "XXX": ["¤"],
  "YER": [undefined, undefined, 0],
  "ZAR": [undefined, "R"],
  "ZMK": [undefined, undefined, 0],
  "ZMW": [undefined, "ZK"],
  "ZWD": [undefined, undefined, 0]
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Format styles that can be used to represent numbers.
 * @see `getLocaleNumberFormat()`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */

var NumberFormatStyle;

(function (NumberFormatStyle) {
  NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
  NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
  NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
  NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
})(NumberFormatStyle || (NumberFormatStyle = {}));
/**
 * Plurality cases used for translating plurals to different languages.
 *
 * @see `NgPlural`
 * @see `NgPluralCase`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


var Plural;

(function (Plural) {
  Plural[Plural["Zero"] = 0] = "Zero";
  Plural[Plural["One"] = 1] = "One";
  Plural[Plural["Two"] = 2] = "Two";
  Plural[Plural["Few"] = 3] = "Few";
  Plural[Plural["Many"] = 4] = "Many";
  Plural[Plural["Other"] = 5] = "Other";
})(Plural || (Plural = {}));
/**
 * Context-dependant translation forms for strings.
 * Typically the standalone version is for the nominative form of the word,
 * and the format version is used for the genitive case.
 * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


var FormStyle;

(function (FormStyle) {
  FormStyle[FormStyle["Format"] = 0] = "Format";
  FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
})(FormStyle || (FormStyle = {}));
/**
 * String widths available for translations.
 * The specific character widths are locale-specific.
 * Examples are given for the word "Sunday" in English.
 *
 * @publicApi
 */


var TranslationWidth;

(function (TranslationWidth) {
  /** 1 character for `en-US`. For example: 'S' */
  TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
  /** 3 characters for `en-US`. For example: 'Sun' */

  TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
  /** Full length for `en-US`. For example: "Sunday" */

  TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
  /** 2 characters for `en-US`, For example: "Su" */

  TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
})(TranslationWidth || (TranslationWidth = {}));
/**
 * String widths available for date-time formats.
 * The specific character widths are locale-specific.
 * Examples are given for `en-US`.
 *
 * @see `getLocaleDateFormat()`
 * @see `getLocaleTimeFormat()`
 * @see `getLocaleDateTimeFormat()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * @publicApi
 */


var FormatWidth;

(function (FormatWidth) {
  /**
   * For `en-US`, 'M/d/yy, h:mm a'`
   * (Example: `6/15/15, 9:03 AM`)
   */
  FormatWidth[FormatWidth["Short"] = 0] = "Short";
  /**
   * For `en-US`, `'MMM d, y, h:mm:ss a'`
   * (Example: `Jun 15, 2015, 9:03:01 AM`)
   */

  FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
  /**
   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
   */

  FormatWidth[FormatWidth["Long"] = 2] = "Long";
  /**
   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
   */

  FormatWidth[FormatWidth["Full"] = 3] = "Full";
})(FormatWidth || (FormatWidth = {}));
/**
 * Symbols that can be used to replace placeholders in number patterns.
 * Examples are based on `en-US` values.
 *
 * @see `getLocaleNumberSymbol()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


var NumberSymbol;

(function (NumberSymbol) {
  /**
   * Decimal separator.
   * For `en-US`, the dot character.
   * Example: 2,345`.`67
   */
  NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
  /**
   * Grouping separator, typically for thousands.
   * For `en-US`, the comma character.
   * Example: 2`,`345.67
   */

  NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
  /**
   * List-item separator.
   * Example: "one, two, and three"
   */

  NumberSymbol[NumberSymbol["List"] = 2] = "List";
  /**
   * Sign for percentage (out of 100).
   * Example: 23.4%
   */

  NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
  /**
   * Sign for positive numbers.
   * Example: +23
   */

  NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
  /**
   * Sign for negative numbers.
   * Example: -23
   */

  NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
  /**
   * Computer notation for exponential value (n times a power of 10).
   * Example: 1.2E3
   */

  NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
  /**
   * Human-readable format of exponential.
   * Example: 1.2x103
   */

  NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
  /**
   * Sign for permille (out of 1000).
   * Example: 23.4‰
   */

  NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
  /**
   * Infinity, can be used with plus and minus.
   * Example: ∞, +∞, -∞
   */

  NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
  /**
   * Not a number.
   * Example: NaN
   */

  NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
  /**
   * Symbol used between time units.
   * Example: 10:52
   */

  NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
  /**
   * Decimal separator for currency values (fallback to `Decimal`).
   * Example: $2,345.67
   */

  NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
  /**
   * Group separator for currency values (fallback to `Group`).
   * Example: $2,345.67
   */

  NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
})(NumberSymbol || (NumberSymbol = {}));
/**
 * The value for each day of the week, based on the `en-US` locale
 *
 * @publicApi
 */


var WeekDay;

(function (WeekDay) {
  WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
  WeekDay[WeekDay["Monday"] = 1] = "Monday";
  WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
  WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
  WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
  WeekDay[WeekDay["Friday"] = 5] = "Friday";
  WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
})(WeekDay || (WeekDay = {}));
/**
 * Retrieves the locale ID from the currently loaded locale.
 * The loaded locale could be, for example, a global one rather than a regional one.
 * @param locale A locale code, such as `fr-FR`.
 * @returns The locale code. For example, `fr`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleId(locale) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].LocaleId];
}
/**
 * Retrieves day period strings for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleDayPeriods(locale, formStyle, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var amPmData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DayPeriodsStandalone]];
  var amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
/**
 * Retrieves days of the week for the given locale, using the Gregorian calendar.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized name strings.
 * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleDayNames(locale, formStyle, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var daysData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DaysStandalone]];
  var days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
/**
 * Retrieves months of the year for the given locale, using the Gregorian calendar.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized name strings.
 * For example,  `[January, February, ...]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleMonthNames(locale, formStyle, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var monthsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].MonthsStandalone]];
  var months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
/**
 * Retrieves Gregorian-calendar eras for the given locale.
 * @param locale A locale code for the locale format rules to use.
 * @param width The required character width.

 * @returns An array of localized era strings.
 * For example, `[AD, BC]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleEraNames(locale, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var erasData = data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].Eras];
  return getLastDefinedValue(erasData, width);
}
/**
 * Retrieves the first day of the week for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns A day index number, using the 0-based week-day index for `en-US`
 * (Sunday = 0, Monday = 1, ...).
 * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleFirstDayOfWeek(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].FirstDayOfWeek];
}
/**
 * Range of week days that are considered the week-end for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The range of day values, `[startDay, endDay]`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleWeekEndRange(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].WeekendRange];
}
/**
 * Retrieves a localized date-value formating string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formating string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleDateFormat(locale, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DateFormat], width);
}
/**
 * Retrieves a localized time-value formatting string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formatting string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)

 * @publicApi
 */


function getLocaleTimeFormat(locale, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].TimeFormat], width);
}
/**
 * Retrieves a localized date-time formatting string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formatting string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleDateTimeFormat(locale, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var dateTimeFormatData = data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
/**
 * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
 * @param locale The locale code.
 * @param symbol The symbol to localize.
 * @returns The character for the localized symbol.
 * @see `NumberSymbol`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleNumberSymbol(locale, symbol) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  var res = data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].NumberSymbols][symbol];

  if (typeof res === 'undefined') {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Group];
    }
  }

  return res;
}
/**
 * Retrieves a number format for a given locale.
 *
 * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
 * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
 * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
 *
 * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
 * that stand for the decimal separator, and so on, and are NOT real characters.
 * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
 * your language the decimal point is written with a comma. The symbols should be replaced by the
 * local equivalents, using the appropriate `NumberSymbol` for your language.
 *
 * Here are the special characters used in number patterns:
 *
 * | Symbol | Meaning |
 * |--------|---------|
 * | . | Replaced automatically by the character used for the decimal point. |
 * | , | Replaced by the "grouping" (thousands) separator. |
 * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
 * | # | Replaced by a digit (or nothing if there aren't enough). |
 * | ¤ | Replaced by a currency symbol, such as $ or USD. |
 * | % | Marks a percent format. The % symbol may change position, but must be retained. |
 * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
 * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
 *
 * @param locale A locale code for the locale format rules to use.
 * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
 * @returns The localized format string.
 * @see `NumberFormatStyle`
 * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleNumberFormat(locale, type) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].NumberFormats][type];
}
/**
 * Retrieves the symbol used to represent the currency for the main country
 * corresponding to a given locale. For example, '$' for `en-US`.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The localized symbol character,
 * or `null` if the main country cannot be determined.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleCurrencySymbol(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].CurrencySymbol] || null;
}
/**
 * Retrieves the name of the currency for the main country corresponding
 * to a given locale. For example, 'US Dollar' for `en-US`.
 * @param locale A locale code for the locale format rules to use.
 * @returns The currency name,
 * or `null` if the main country cannot be determined.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleCurrencyName(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].CurrencyName] || null;
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * @param locale The code of the locale whose currency code we want.
 * @returns The code of the default currency for the given locale.
 *
 * @publicApi
 */


function getLocaleCurrencyCode(locale) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵgetLocaleCurrencyCode"])(locale);
}
/**
 * Retrieves the currency values for a given locale.
 * @param locale A locale code for the locale format rules to use.
 * @returns The currency values.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 */


function getLocaleCurrencies(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].Currencies];
}
/**
 * @alias core/ɵgetLocalePluralCase
 * @publicApi
 */


var getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵgetLocalePluralCase"];

function checkFullData(data) {
  if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].ExtraData]) {
    throw new Error("Missing extra locale data for the locale \"".concat(data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].LocaleId], "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more."));
  }
}
/**
 * Retrieves locale-specific rules used to determine which day period to use
 * when more than one period is defined for a locale.
 *
 * There is a rule for each defined day period. The
 * first rule is applied to the first day period and so on.
 * Fall back to AM/PM when no rules are available.
 *
 * A rule can specify a period as time range, or as a single time value.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n#i18n-pipes).
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
 * or null if no periods are available.
 *
 * @see `getLocaleExtraDayPeriods()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleExtraDayPeriodRules(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  checkFullData(data);
  var rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].ExtraData][2
  /* ExtraDayPeriodsRules */
  ] || [];
  return rules.map(function (rule) {
    if (typeof rule === 'string') {
      return extractTime(rule);
    }

    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
/**
 * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
 * in different languages.
 * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n#i18n-pipes).
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns The translated day-period strings.
 * @see `getLocaleExtraDayPeriodRules()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLocaleExtraDayPeriods(locale, formStyle, width) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  checkFullData(data);
  var dayPeriodsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].ExtraData][0
  /* ExtraDayPeriodFormats */
  ], data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].ExtraData][1
  /* ExtraDayPeriodStandalone */
  ]];
  var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
/**
 * Retrieves the writing direction of a specified locale
 * @param locale A locale code for the locale format rules to use.
 * @publicApi
 * @returns 'rtl' or 'ltr'
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 */


function getLocaleDirection(locale) {
  var data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵLocaleDataIndex"].Directionality];
}
/**
 * Retrieves the first value that is defined in an array, going backwards from an index position.
 *
 * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
 * add the first value to the locale data arrays, and add other values only if they are different.
 *
 * @param data The data array to retrieve from.
 * @param index A 0-based index into the array to start from.
 * @returns The value immediately before the given index position.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getLastDefinedValue(data, index) {
  for (var i = index; i > -1; i--) {
    if (typeof data[i] !== 'undefined') {
      return data[i];
    }
  }

  throw new Error('Locale data API: locale data undefined');
}
/**
 * Extracts the hours and minutes from a string like "15:45"
 */


function extractTime(time) {
  var _time$split = time.split(':'),
      _time$split2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_time$split, 2),
      h = _time$split2[0],
      m = _time$split2[1];

  return {
    hours: +h,
    minutes: +m
  };
}
/**
 * Retrieves the currency symbol for a given currency code.
 *
 * For example, for the default `en-US` locale, the code `USD` can
 * be represented by the narrow symbol `$` or the wide symbol `US$`.
 *
 * @param code The currency code.
 * @param format The format, `wide` or `narrow`.
 * @param locale A locale code for the locale format rules to use.
 *
 * @returns The symbol, or the currency code if no symbol is available.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function getCurrencySymbol(code, format) {
  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';
  var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  var symbolNarrow = currency[1
  /* SymbolNarrow */
  ];

  if (format === 'narrow' && typeof symbolNarrow === 'string') {
    return symbolNarrow;
  }

  return currency[0
  /* Symbol */
  ] || code;
} // Most currencies have cents, that's why the default is 2


var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
/**
 * Reports the number of decimal digits for a given currency.
 * The value depends upon the presence of cents in that particular currency.
 *
 * @param code The currency code.
 * @returns The number of decimal digits, typically 0 or 2.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */

function getNumberOfCurrencyDigits(code) {
  var digits;
  var currency = CURRENCIES_EN[code];

  if (currency) {
    digits = currency[2
    /* NbOfDigits */
    ];
  }

  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/; //    1        2       3         4          5          6          7          8  9     10      11

var NAMED_FORMATS = {};
var DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
var ZoneWidth;

(function (ZoneWidth) {
  ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
  ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
  ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
  ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
})(ZoneWidth || (ZoneWidth = {}));

var DateType;

(function (DateType) {
  DateType[DateType["FullYear"] = 0] = "FullYear";
  DateType[DateType["Month"] = 1] = "Month";
  DateType[DateType["Date"] = 2] = "Date";
  DateType[DateType["Hours"] = 3] = "Hours";
  DateType[DateType["Minutes"] = 4] = "Minutes";
  DateType[DateType["Seconds"] = 5] = "Seconds";
  DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
  DateType[DateType["Day"] = 7] = "Day";
})(DateType || (DateType = {}));

var TranslationType;

(function (TranslationType) {
  TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
  TranslationType[TranslationType["Days"] = 1] = "Days";
  TranslationType[TranslationType["Months"] = 2] = "Months";
  TranslationType[TranslationType["Eras"] = 3] = "Eras";
})(TranslationType || (TranslationType = {}));
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a date according to locale rules.
 *
 * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
 * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
 * @param format The date-time components to include. See `DatePipe` for details.
 * @param locale A locale code for the locale format rules to use.
 * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
 * or a standard UTC/GMT or continental US time zone abbreviation.
 * If not specified, uses host system settings.
 *
 * @returns The formatted date string.
 *
 * @see `DatePipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function formatDate(value, format, locale, timezone) {
  var date = toDate(value);
  var namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  var parts = [];
  var match;

  while (format) {
    match = DATE_FORMATS_SPLIT.exec(format);

    if (match) {
      parts = parts.concat(match.slice(1));
      var part = parts.pop();

      if (!part) {
        break;
      }

      format = part;
    } else {
      parts.push(format);
      break;
    }
  }

  var dateTimezoneOffset = date.getTimezoneOffset();

  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone, true);
  }

  var text = '';
  parts.forEach(function (value) {
    var dateFormatter = getDateFormatter(value);
    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
  });
  return text;
}
/**
 * Create a new Date object with the given date value, and the time set to midnight.
 *
 * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.
 * See: https://github.com/angular/angular/issues/40377
 *
 * Note that this function returns a Date object whose time is midnight in the current locale's
 * timezone. In the future we might want to change this to be midnight in UTC, but this would be a
 * considerable breaking change.
 */


function createDate(year, month, date) {
  // The `newDate` is set to midnight (UTC) on January 1st 1970.
  // - In PST this will be December 31st 1969 at 4pm.
  // - In GMT this will be January 1st 1970 at 1am.
  // Note that they even have different years, dates and months!
  var newDate = new Date(0); // `setFullYear()` allows years like 0001 to be set correctly. This function does not
  // change the internal time of the date.
  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).
  // - In PST this will now be September 20, 2019 at 4pm
  // - In GMT this will now be September 20, 2019 at 1am

  newDate.setFullYear(year, month, date); // We want the final date to be at local midnight, so we reset the time.
  // - In PST this will now be September 20, 2019 at 12am
  // - In GMT this will now be September 20, 2019 at 12am

  newDate.setHours(0, 0, 0);
  return newDate;
}

function getNamedFormat(locale, format) {
  var localeId = getLocaleId(locale);
  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};

  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }

  var formatValue = '';

  switch (format) {
    case 'shortDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
      break;

    case 'mediumDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;

    case 'longDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
      break;

    case 'fullDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
      break;

    case 'shortTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;

    case 'mediumTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;

    case 'longTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;

    case 'fullTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;

    case 'short':
      var shortTime = getNamedFormat(locale, 'shortTime');
      var shortDate = getNamedFormat(locale, 'shortDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
      break;

    case 'medium':
      var mediumTime = getNamedFormat(locale, 'mediumTime');
      var mediumDate = getNamedFormat(locale, 'mediumDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
      break;

    case 'long':
      var longTime = getNamedFormat(locale, 'longTime');
      var longDate = getNamedFormat(locale, 'longDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
      break;

    case 'full':
      var fullTime = getNamedFormat(locale, 'fullTime');
      var fullDate = getNamedFormat(locale, 'fullDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
      break;
  }

  if (formatValue) {
    NAMED_FORMATS[localeId][format] = formatValue;
  }

  return formatValue;
}

function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function (match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }

  return str;
}

function padNumber(num, digits) {
  var minusSign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
  var trim = arguments.length > 3 ? arguments[3] : undefined;
  var negWrap = arguments.length > 4 ? arguments[4] : undefined;
  var neg = '';

  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }

  var strNum = String(num);

  while (strNum.length < digits) {
    strNum = '0' + strNum;
  }

  if (trim) {
    strNum = strNum.substr(strNum.length - digits);
  }

  return neg + strNum;
}

function formatFractionalSeconds(milliseconds, digits) {
  var strMs = padNumber(milliseconds, 3);
  return strMs.substr(0, digits);
}
/**
 * Returns a date formatter that transforms a date into its locale digit representation
 */


function dateGetter(name, size) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var trim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var negWrap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return function (date, locale) {
    var part = getDatePart(name, date);

    if (offset > 0 || part > -offset) {
      part += offset;
    }

    if (name === DateType.Hours) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === DateType.FractionalSeconds) {
      return formatFractionalSeconds(part, size);
    }

    var localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}

function getDatePart(part, date) {
  switch (part) {
    case DateType.FullYear:
      return date.getFullYear();

    case DateType.Month:
      return date.getMonth();

    case DateType.Date:
      return date.getDate();

    case DateType.Hours:
      return date.getHours();

    case DateType.Minutes:
      return date.getMinutes();

    case DateType.Seconds:
      return date.getSeconds();

    case DateType.FractionalSeconds:
      return date.getMilliseconds();

    case DateType.Day:
      return date.getDay();

    default:
      throw new Error("Unknown DateType value \"".concat(part, "\"."));
  }
}
/**
 * Returns a date formatter that transforms a date into its locale string representation
 */


function dateStrGetter(name, width) {
  var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FormStyle.Format;
  var extended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return function (date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
/**
 * Returns the locale translation of a date for a given form, type and width
 */


function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case TranslationType.Months:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];

    case TranslationType.Days:
      return getLocaleDayNames(locale, form, width)[date.getDay()];

    case TranslationType.DayPeriods:
      var currentHours = date.getHours();
      var currentMinutes = date.getMinutes();

      if (extended) {
        var rules = getLocaleExtraDayPeriodRules(locale);
        var dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        var index = rules.findIndex(function (rule) {
          if (Array.isArray(rule)) {
            // morning, afternoon, evening, night
            var _rule = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(rule, 2),
                from = _rule[0],
                to = _rule[1];

            var afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;
            var beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes; // We must account for normal rules that span a period during the day (e.g. 6am-9am)
            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.
            // 10pm - 5am) where `from` is greater (later!) than `to`.
            //
            // In the first case the current time must be BOTH after `from` AND before `to`
            // (e.g. 8am is after 6am AND before 10am).
            //
            // In the second case the current time must be EITHER after `from` OR before `to`
            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is
            // after 10pm).

            if (from.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            // noon or midnight
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }

          return false;
        });

        if (index !== -1) {
          return dayPeriods[index];
        }
      } // if no rules for the day periods, we use am/pm by default


      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];

    case TranslationType.Eras:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];

    default:
      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
      // However Closure Compiler does not understand that and reports an error in typed mode.
      // The `throw new Error` below works around the problem, and the unexpected: never variable
      // makes sure tsc still checks this code is unreachable.
      var unexpected = name;
      throw new Error("unexpected translation type ".concat(unexpected));
  }
}
/**
 * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
 * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
 * extended = +04:30)
 */


function timeZoneGetter(width) {
  return function (date, locale, offset) {
    var zone = -1 * offset;
    var minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);

    switch (width) {
      case ZoneWidth.Short:
        return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);

      case ZoneWidth.ShortGMT:
        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);

      case ZoneWidth.Long:
        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);

      case ZoneWidth.Extended:
        if (offset === 0) {
          return 'Z';
        } else {
          return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);
        }

      default:
        throw new Error("Unknown zone width \"".concat(width, "\""));
    }
  };
}

var JANUARY = 0;
var THURSDAY = 4;

function getFirstThursdayOfYear(year) {
  var firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}

function getThursdayThisWeek(datetime) {
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
}

function weekGetter(size) {
  var monthBased = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return function (date, locale) {
    var result;

    if (monthBased) {
      var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      var today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      var thisThurs = getThursdayThisWeek(date); // Some days of a year are part of next year according to ISO 8601.
      // Compute the firstThurs from the year of this week's Thursday

      var firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      var diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
    }

    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
/**
 * Returns a date formatter that provides the week-numbering year for the input date.
 */


function weekNumberingYearGetter(size) {
  var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return function (date, locale) {
    var thisThurs = getThursdayThisWeek(date);
    var weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}

var DATE_FORMATS = {}; // Based on CLDR formats:
// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
// See also explanations: http://cldr.unicode.org/translation/date-time
// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x

function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }

  var formatter;

  switch (format) {
    // Era name (AD/BC)
    case 'G':
    case 'GG':
    case 'GGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
      break;

    case 'GGGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
      break;

    case 'GGGGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
      break;
    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)

    case 'y':
      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
      break;
    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)

    case 'yy':
      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
      break;
    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)

    case 'yyy':
      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
      break;
    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)

    case 'yyyy':
      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
      break;
    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)

    case 'Y':
      formatter = weekNumberingYearGetter(1);
      break;
    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
    // 2010 => 10)

    case 'YY':
      formatter = weekNumberingYearGetter(2, true);
      break;
    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
    // 2010 => 2010)

    case 'YYY':
      formatter = weekNumberingYearGetter(3);
      break;
    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)

    case 'YYYY':
      formatter = weekNumberingYearGetter(4);
      break;
    // Month of the year (1-12), numeric

    case 'M':
    case 'L':
      formatter = dateGetter(DateType.Month, 1, 1);
      break;

    case 'MM':
    case 'LL':
      formatter = dateGetter(DateType.Month, 2, 1);
      break;
    // Month of the year (January, ...), string, format

    case 'MMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
      break;

    case 'MMMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
      break;

    case 'MMMMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
      break;
    // Month of the year (January, ...), string, standalone

    case 'LLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;

    case 'LLLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
      break;

    case 'LLLLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    // Week of the year (1, ... 52)

    case 'w':
      formatter = weekGetter(1);
      break;

    case 'ww':
      formatter = weekGetter(2);
      break;
    // Week of the month (1, ...)

    case 'W':
      formatter = weekGetter(1, true);
      break;
    // Day of the month (1-31)

    case 'd':
      formatter = dateGetter(DateType.Date, 1);
      break;

    case 'dd':
      formatter = dateGetter(DateType.Date, 2);
      break;
    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)

    case 'c':
    case 'cc':
      formatter = dateGetter(DateType.Day, 1);
      break;

    case 'ccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;

    case 'cccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);
      break;

    case 'ccccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);
      break;

    case 'cccccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);
      break;
    // Day of the Week

    case 'E':
    case 'EE':
    case 'EEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
      break;

    case 'EEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
      break;

    case 'EEEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
      break;

    case 'EEEEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
      break;
    // Generic period of the day (am-pm)

    case 'a':
    case 'aa':
    case 'aaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
      break;

    case 'aaaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
      break;

    case 'aaaaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
      break;
    // Extended period of the day (midnight, at night, ...), standalone

    case 'b':
    case 'bb':
    case 'bbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;

    case 'bbbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;

    case 'bbbbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    // Extended period of the day (midnight, night, ...), standalone

    case 'B':
    case 'BB':
    case 'BBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;

    case 'BBBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
      break;

    case 'BBBBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    // Hour in AM/PM, (1-12)

    case 'h':
      formatter = dateGetter(DateType.Hours, 1, -12);
      break;

    case 'hh':
      formatter = dateGetter(DateType.Hours, 2, -12);
      break;
    // Hour of the day (0-23)

    case 'H':
      formatter = dateGetter(DateType.Hours, 1);
      break;
    // Hour in day, padded (00-23)

    case 'HH':
      formatter = dateGetter(DateType.Hours, 2);
      break;
    // Minute of the hour (0-59)

    case 'm':
      formatter = dateGetter(DateType.Minutes, 1);
      break;

    case 'mm':
      formatter = dateGetter(DateType.Minutes, 2);
      break;
    // Second of the minute (0-59)

    case 's':
      formatter = dateGetter(DateType.Seconds, 1);
      break;

    case 'ss':
      formatter = dateGetter(DateType.Seconds, 2);
      break;
    // Fractional second

    case 'S':
      formatter = dateGetter(DateType.FractionalSeconds, 1);
      break;

    case 'SS':
      formatter = dateGetter(DateType.FractionalSeconds, 2);
      break;

    case 'SSS':
      formatter = dateGetter(DateType.FractionalSeconds, 3);
      break;
    // Timezone ISO8601 short format (-0430)

    case 'Z':
    case 'ZZ':
    case 'ZZZ':
      formatter = timeZoneGetter(ZoneWidth.Short);
      break;
    // Timezone ISO8601 extended format (-04:30)

    case 'ZZZZZ':
      formatter = timeZoneGetter(ZoneWidth.Extended);
      break;
    // Timezone GMT short format (GMT+4)

    case 'O':
    case 'OO':
    case 'OOO': // Should be location, but fallback to format O instead because we don't have the data yet

    case 'z':
    case 'zz':
    case 'zzz':
      formatter = timeZoneGetter(ZoneWidth.ShortGMT);
      break;
    // Timezone GMT long format (GMT+0430)

    case 'OOOO':
    case 'ZZZZ': // Should be location, but fallback to format O instead because we don't have the data yet

    case 'zzzz':
      formatter = timeZoneGetter(ZoneWidth.Long);
      break;

    default:
      return null;
  }

  DATE_FORMATS[format] = formatter;
  return formatter;
}

function timezoneToOffset(timezone, fallback) {
  // Support: IE 11 only, Edge 13-15+
  // IE/Edge do not "understand" colon (`:`) in timezone
  timezone = timezone.replace(/:/g, '');
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}

function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}

function convertTimezoneToLocal(date, timezone, reverse) {
  var reverseValue = reverse ? -1 : 1;
  var dateTimezoneOffset = date.getTimezoneOffset();
  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
/**
 * Converts a value to date.
 *
 * Supported input formats:
 * - `Date`
 * - number: timestamp
 * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
 *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
 *   Note: ISO strings without time return a date without timeoffset.
 *
 * Throws if unable to convert to a date.
 */


function toDate(value) {
  if (isDate(value)) {
    return value;
  }

  if (typeof value === 'number' && !isNaN(value)) {
    return new Date(value);
  }

  if (typeof value === 'string') {
    value = value.trim();

    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      /* For ISO Strings without time the day, month and year must be extracted from the ISO String
      before Date creation to avoid time offset and errors in the new Date.
      If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
      date, some browsers (e.g. IE 9) will throw an invalid Date error.
      If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
      is applied.
      Note: ISO months are 0 for January, 1 for February, ... */
      var _value$split$map = value.split('-').map(function (val) {
        return +val;
      }),
          _value$split$map2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_value$split$map, 3),
          y = _value$split$map2[0],
          _value$split$map2$ = _value$split$map2[1],
          m = _value$split$map2$ === void 0 ? 1 : _value$split$map2$,
          _value$split$map2$2 = _value$split$map2[2],
          d = _value$split$map2$2 === void 0 ? 1 : _value$split$map2$2;

      return createDate(y, m - 1, d);
    }

    var parsedNb = parseFloat(value); // any string that only contains numbers, like "1234" but not like "1234hello"

    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }

    var match;

    if (match = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match);
    }
  }

  var date = new Date(value);

  if (!isDate(date)) {
    throw new Error("Unable to convert \"".concat(value, "\" into a date"));
  }

  return date;
}
/**
 * Converts a date in ISO8601 to a Date.
 * Used instead of `Date.parse` because of browser discrepancies.
 */


function isoStringToDate(match) {
  var date = new Date(0);
  var tzHour = 0;
  var tzMin = 0; // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"

  var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
  var timeSetter = match[8] ? date.setUTCHours : date.setHours; // if there is a timezone defined like "+01:00" or "+0100"

  if (match[9]) {
    tzHour = Number(match[9] + match[10]);
    tzMin = Number(match[9] + match[11]);
  }

  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
  var h = Number(match[4] || 0) - tzHour;
  var m = Number(match[5] || 0) - tzMin;
  var s = Number(match[6] || 0); // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)
  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`
  // becomes `999ms`.

  var ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);
  timeSetter.call(date, h, m, s, ms);
  return date;
}

function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
var MAX_DIGITS = 22;
var DECIMAL_SEP = '.';
var ZERO_CHAR = '0';
var PATTERN_SEP = ';';
var GROUP_SEP = ',';
var DIGIT_CHAR = '#';
var CURRENCY_CHAR = '¤';
var PERCENT_CHAR = '%';
/**
 * Transforms a number to a locale string based on a style and a format.
 */

function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo) {
  var isPercent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
  var formattedText = '';
  var isZero = false;

  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    var parsedNumber = parseNumber(value);

    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }

    var minInt = pattern.minInt;
    var minFraction = pattern.minFrac;
    var maxFraction = pattern.maxFrac;

    if (digitsInfo) {
      var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

      if (parts === null) {
        throw new Error("".concat(digitsInfo, " is not a valid digit info"));
      }

      var minIntPart = parts[1];
      var minFractionPart = parts[3];
      var maxFractionPart = parts[5];

      if (minIntPart != null) {
        minInt = parseIntAutoRadix(minIntPart);
      }

      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix(minFractionPart);
      }

      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }

    roundNumber(parsedNumber, minFraction, maxFraction);
    var digits = parsedNumber.digits;
    var integerLen = parsedNumber.integerLen;
    var exponent = parsedNumber.exponent;
    var decimals = [];
    isZero = digits.every(function (d) {
      return !d;
    }); // pad zeros for small numbers

    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    } // pad zeros for small numbers


    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    } // extract decimals digits


    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    } // format the integer digits with grouping separators


    var groups = [];

    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
    }

    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
    }

    if (digits.length) {
      groups.unshift(digits.join(''));
    }

    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol)); // append the decimal digits

    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
    }

    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
    }
  }

  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }

  return formattedText;
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as currency using locale rules.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param currency A string containing the currency symbol or its name,
 * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
 * of the function.
 * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
 * currency code, such as `USD` for the US dollar and `EUR` for the euro.
 * Used to determine the number of digits in the decimal part.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted currency value.
 *
 * @see `formatNumber()`
 * @see `DecimalPipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  var format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency) // if we have 2 time the currency character, the second one is ignored
  .replace(CURRENCY_CHAR, '') // If there is a spacing between currency character and the value and
  // the currency character is supressed by passing an empty string, the
  // spacing character would remain as part of the string. Then we
  // should remove it.
  .trim();
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as a percentage according to locale rules.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted percentage value.
 *
 * @see `formatNumber()`
 * @see `DecimalPipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * @publicApi
 *
 */


function formatPercent(value, locale, digitsInfo) {
  var format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as text, with group sizing, separator, and other
 * parameters based on the locale.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted text string.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * @publicApi
 */


function formatNumber(value, locale, digitsInfo) {
  var format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}

function parseNumberFormat(format) {
  var minusSign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
  var p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: '',
    posSuf: '',
    negPre: '',
    negSuf: '',
    gSize: 0,
    lgSize: 0
  };
  var patternParts = format.split(PATTERN_SEP);
  var positive = patternParts[0];
  var negative = patternParts[1];
  var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],
      integer = positiveParts[0],
      fraction = positiveParts[1] || '';
  p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));

  for (var i = 0; i < fraction.length; i++) {
    var ch = fraction.charAt(i);

    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }

  var groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;

  if (negative) {
    var trunkLen = positive.length - p.posPre.length - p.posSuf.length,
        pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substr(0, pos).replace(/'/g, '');
    p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }

  return p;
} // Transforms a parsed number into a percentage by multiplying it by 100


function toPercent(parsedNumber) {
  // if the number is 0, don't do anything
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  } // Getting the current number of decimals


  var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;

  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }

    parsedNumber.integerLen += 2;
  }

  return parsedNumber;
}
/**
 * Parses a number.
 * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
 */


function parseNumber(num) {
  var numStr = Math.abs(num) + '';
  var exponent = 0,
      digits,
      integerLen;
  var i, j, zeros; // Decimal point?

  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, '');
  } // Exponential form?


  if ((i = numStr.search(/e/i)) > 0) {
    // Work out the exponent.
    if (integerLen < 0) integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    // There was no decimal point or exponent so it is an integer.
    integerLen = numStr.length;
  } // Count the number of leading zeros.


  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
    /* empty */
  }

  if (i === (zeros = numStr.length)) {
    // The digits are all zero.
    digits = [0];
    integerLen = 1;
  } else {
    // Count the number of trailing zeros
    zeros--;

    while (numStr.charAt(zeros) === ZERO_CHAR) {
      zeros--;
    } // Trailing zeros are insignificant so ignore them


    integerLen -= i;
    digits = []; // Convert string to array of digits without leading/trailing zeros.

    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  } // If the number overflows the maximum allowed digits then use an exponent.


  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }

  return {
    digits: digits,
    exponent: exponent,
    integerLen: integerLen
  };
}
/**
 * Round the parsed number to the specified number of decimal places
 * This function changes the parsedNumber in-place
 */


function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new Error("The minimum number of digits after fraction (".concat(minFrac, ") is higher than the maximum (").concat(maxFrac, ")."));
  }

  var digits = parsedNumber.digits;
  var fractionLen = digits.length - parsedNumber.integerLen;
  var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac); // The index of the digit to where rounding is to occur

  var roundAt = fractionSize + parsedNumber.integerLen;
  var digit = digits[roundAt];

  if (roundAt > 0) {
    // Drop fractional digits beyond `roundAt`
    digits.splice(Math.max(parsedNumber.integerLen, roundAt)); // Set non-fractional digits beyond `roundAt` to 0

    for (var j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    // We rounded to zero so reset the parsedNumber
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;

    for (var i = 1; i < roundAt; i++) {
      digits[i] = 0;
    }
  }

  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (var k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }

      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  } // Pad out with zeros to get the required fraction length


  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) {
    digits.push(0);
  }

  var dropTrailingZeros = fractionSize !== 0; // Minimal length = nb of decimals required + current nb of integers
  // Any number besides that is optional and can be removed if it's a trailing 0

  var minLen = minFrac + parsedNumber.integerLen; // Do any carrying, e.g. a digit was rounded up to 10

  var carry = digits.reduceRight(function (carry, d, i, digits) {
    d = d + carry;
    digits[i] = d < 10 ? d : d - 10; // d % 10

    if (dropTrailingZeros) {
      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
      if (digits[i] === 0 && i >= minLen) {
        digits.pop();
      } else {
        dropTrailingZeros = false;
      }
    }

    return d >= 10 ? 1 : 0; // Math.floor(d / 10);
  }, 0);

  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}

function parseIntAutoRadix(text) {
  var result = parseInt(text);

  if (isNaN(result)) {
    throw new Error('Invalid integer literal when parsing ' + text);
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var NgLocalization = function NgLocalization() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgLocalization);
};
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 */


function getPluralCategory(value, cases, ngLocalization, locale) {
  var key = "=".concat(value);

  if (cases.indexOf(key) > -1) {
    return key;
  }

  key = ngLocalization.getPluralCategory(value, locale);

  if (cases.indexOf(key) > -1) {
    return key;
  }

  if (cases.indexOf('other') > -1) {
    return 'other';
  }

  throw new Error("No plural message found for value \"".concat(value, "\""));
}
/**
 * Returns the plural case based on the locale
 *
 * @publicApi
 */


var NgLocaleLocalization = /*#__PURE__*/function (_NgLocalization) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(NgLocaleLocalization, _NgLocalization);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(NgLocaleLocalization);

  function NgLocaleLocalization(locale) {
    var _this6;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgLocaleLocalization);

    _this6 = _super4.call(this);
    _this6.locale = locale;
    return _this6;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgLocaleLocalization, [{
    key: "getPluralCategory",
    value: function getPluralCategory(value, locale) {
      var plural = getLocalePluralCase(locale || this.locale)(value);

      switch (plural) {
        case Plural.Zero:
          return 'zero';

        case Plural.One:
          return 'one';

        case Plural.Two:
          return 'two';

        case Plural.Few:
          return 'few';

        case Plural.Many:
          return 'many';

        default:
          return 'other';
      }
    }
  }]);

  return NgLocaleLocalization;
}(NgLocalization);

NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) {
  return new (t || NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID));
};

NgLocaleLocalization.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
  token: NgLocaleLocalization,
  factory: NgLocaleLocalization.ɵfac
});

NgLocaleLocalization.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgLocaleLocalization, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Register global data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
 *
 * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
 *
 * @publicApi
 */


function registerLocaleData(data, localeId, extraData) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵregisterLocaleData"])(data, localeId, extraData);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);

  var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__.default)(cookieStr.split(';')),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var cookie = _step.value;
      var eqIndex = cookie.indexOf('=');

      var _ref2 = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          _ref3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_ref2, 2),
          cookieName = _ref3[0],
          cookieValue = _ref3[1];

      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * @description
 *
 * Adds and removes CSS classes on an HTML element.
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * @publicApi
 */


var NgClass = /*#__PURE__*/function () {
  function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgClass);

    this._iterableDiffers = _iterableDiffers;
    this._keyValueDiffers = _keyValueDiffers;
    this._ngEl = _ngEl;
    this._renderer = _renderer;
    this._iterableDiffer = null;
    this._keyValueDiffer = null;
    this._initialClasses = [];
    this._rawClass = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgClass, [{
    key: "klass",
    set: function set(value) {
      this._removeClasses(this._initialClasses);

      this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];

      this._applyClasses(this._initialClasses);

      this._applyClasses(this._rawClass);
    }
  }, {
    key: "ngClass",
    set: function set(value) {
      this._removeClasses(this._rawClass);

      this._applyClasses(this._initialClasses);

      this._iterableDiffer = null;
      this._keyValueDiffer = null;
      this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;

      if (this._rawClass) {
        if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵisListLikeIterable"])(this._rawClass)) {
          this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
        } else {
          this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
        }
      }
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this._iterableDiffer) {
        var iterableChanges = this._iterableDiffer.diff(this._rawClass);

        if (iterableChanges) {
          this._applyIterableChanges(iterableChanges);
        }
      } else if (this._keyValueDiffer) {
        var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);

        if (keyValueChanges) {
          this._applyKeyValueChanges(keyValueChanges);
        }
      }
    }
  }, {
    key: "_applyKeyValueChanges",
    value: function _applyKeyValueChanges(changes) {
      var _this7 = this;

      changes.forEachAddedItem(function (record) {
        return _this7._toggleClass(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function (record) {
        return _this7._toggleClass(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function (record) {
        if (record.previousValue) {
          _this7._toggleClass(record.key, false);
        }
      });
    }
  }, {
    key: "_applyIterableChanges",
    value: function _applyIterableChanges(changes) {
      var _this8 = this;

      changes.forEachAddedItem(function (record) {
        if (typeof record.item === 'string') {
          _this8._toggleClass(record.item, true);
        } else {
          throw new Error("NgClass can only toggle CSS classes expressed as strings, got ".concat((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵstringify"])(record.item)));
        }
      });
      changes.forEachRemovedItem(function (record) {
        return _this8._toggleClass(record.item, false);
      });
    }
    /**
     * Applies a collection of CSS classes to the DOM element.
     *
     * For argument of type Set and Array CSS class names contained in those collections are always
     * added.
     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
     * for truthy and removed for falsy).
     */

  }, {
    key: "_applyClasses",
    value: function _applyClasses(rawClassVal) {
      var _this9 = this;

      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          rawClassVal.forEach(function (klass) {
            return _this9._toggleClass(klass, true);
          });
        } else {
          Object.keys(rawClassVal).forEach(function (klass) {
            return _this9._toggleClass(klass, !!rawClassVal[klass]);
          });
        }
      }
    }
    /**
     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
     * purposes.
     */

  }, {
    key: "_removeClasses",
    value: function _removeClasses(rawClassVal) {
      var _this10 = this;

      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          rawClassVal.forEach(function (klass) {
            return _this10._toggleClass(klass, false);
          });
        } else {
          Object.keys(rawClassVal).forEach(function (klass) {
            return _this10._toggleClass(klass, false);
          });
        }
      }
    }
  }, {
    key: "_toggleClass",
    value: function _toggleClass(klass, enabled) {
      var _this11 = this;

      klass = klass.trim();

      if (klass) {
        klass.split(/\s+/g).forEach(function (klass) {
          if (enabled) {
            _this11._renderer.addClass(_this11._ngEl.nativeElement, klass);
          } else {
            _this11._renderer.removeClass(_this11._ngEl.nativeElement, klass);
          }
        });
      }
    }
  }]);

  return NgClass;
}();

NgClass.ɵfac = function NgClass_Factory(t) {
  return new (t || NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2));
};

NgClass.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgClass,
  selectors: [["", "ngClass", ""]],
  inputs: {
    klass: ["class", "klass"],
    ngClass: "ngClass"
  }
});

NgClass.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2
  }];
};

NgClass.propDecorators = {
  klass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
    args: ['class']
  }],
  ngClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
    args: ['ngClass']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgClass, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngClass]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2
    }];
  }, {
    klass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
      args: ['class']
    }],
    ngClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
      args: ['ngClass']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Instantiates a {@link Component} type and inserts its Host View into the current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will be destroyed.
 *
 * @usageNotes
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if it exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow loading another
 * module dynamically, then loading a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 *
 * ### A simple example
 *
 * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 *
 * @publicApi
 * @ngModule CommonModule
 */


var NgComponentOutlet = /*#__PURE__*/function () {
  function NgComponentOutlet(_viewContainerRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgComponentOutlet);

    this._viewContainerRef = _viewContainerRef;
    this._componentRef = null;
    this._moduleRef = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgComponentOutlet, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this._viewContainerRef.clear();

      this._componentRef = null;

      if (this.ngComponentOutlet) {
        var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;

        if (changes['ngComponentOutletNgModuleFactory']) {
          if (this._moduleRef) this._moduleRef.destroy();

          if (this.ngComponentOutletNgModuleFactory) {
            var parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_6__.NgModuleRef);
            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
          } else {
            this._moduleRef = null;
          }
        }

        var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_6__.ComponentFactoryResolver);
        var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
        this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._moduleRef) this._moduleRef.destroy();
    }
  }]);

  return NgComponentOutlet;
}();

NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) {
  return new (t || NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef));
};

NgComponentOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgComponentOutlet,
  selectors: [["", "ngComponentOutlet", ""]],
  inputs: {
    ngComponentOutlet: "ngComponentOutlet",
    ngComponentOutletInjector: "ngComponentOutletInjector",
    ngComponentOutletContent: "ngComponentOutletContent",
    ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵNgOnChangesFeature"]]
});

NgComponentOutlet.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }];
};

NgComponentOutlet.propDecorators = {
  ngComponentOutlet: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngComponentOutletInjector: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngComponentOutletContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngComponentOutletNgModuleFactory: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgComponentOutlet, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngComponentOutlet]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }];
  }, {
    ngComponentOutlet: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngComponentOutletInjector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngComponentOutletContent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngComponentOutletNgModuleFactory: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var NgForOfContext = /*#__PURE__*/function () {
  function NgForOfContext($implicit, ngForOf, index, count) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgForOfContext);

    this.$implicit = $implicit;
    this.ngForOf = ngForOf;
    this.index = index;
    this.count = count;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgForOfContext, [{
    key: "first",
    get: function get() {
      return this.index === 0;
    }
  }, {
    key: "last",
    get: function get() {
      return this.index === this.count - 1;
    }
  }, {
    key: "even",
    get: function get() {
      return this.index % 2 === 0;
    }
  }, {
    key: "odd",
    get: function get() {
      return !this.even;
    }
  }]);

  return NgForOfContext;
}();
/**
 * A [structural directive](guide/structural-directives) that renders
 * a template for each item in a collection.
 * The directive is placed on an element, which becomes the parent
 * of the cloned templates.
 *
 * The `ngForOf` directive is generally used in the
 * [shorthand form](guide/structural-directives#asterisk) `*ngFor`.
 * In this form, the template to be rendered for each iteration is the content
 * of an anchor element containing the directive.
 *
 * The following example shows the shorthand syntax with some options,
 * contained in an `<li>` element.
 *
 * ```
 * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
 * ```
 *
 * The shorthand form expands into a long form that uses the `ngForOf` selector
 * on an `<ng-template>` element.
 * The content of the `<ng-template>` element is the `<li>` element that held the
 * short-form directive.
 *
 * Here is the expanded version of the short-form example.
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * Angular automatically expands the shorthand syntax as it compiles the template.
 * The context for each embedded view is logically merged to the current component
 * context according to its lexical position.
 *
 * When using the shorthand syntax, Angular allows only [one structural directive
 * on an element](guide/built-in-directives#one-per-element).
 * If you want to iterate conditionally, for example,
 * put the `*ngIf` on a container element that wraps the `*ngFor` element.
 * For futher discussion, see
 * [Structural Directives](guide/built-in-directives#one-per-element).
 *
 * @usageNotes
 *
 * ### Local variables
 *
 * `NgForOf` provides exported values that can be aliased to local variables.
 * For example:
 *
 *  ```
 * <li *ngFor="let user of users; index as i; first as isFirst">
 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
 * </li>
 * ```
 *
 * The following exported values can be aliased to local variables:
 *
 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
 * more complex then a property access, for example when using the async pipe (`userStreams |
 * async`).
 * - `index: number`: The index of the current item in the iterable.
 * - `count: number`: The length of the iterable.
 * - `first: boolean`: True when the item is the first item in the iterable.
 * - `last: boolean`: True when the item is the last item in the iterable.
 * - `even: boolean`: True when the item has an even index in the iterable.
 * - `odd: boolean`: True when the item has an odd index in the iterable.
 *
 * ### Change propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
 *
 * The identities of elements in the iterator can change while the data does not.
 * This can happen, for example, if the iterator is produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
 * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted).
 *
 * To avoid this expensive operation, you can customize the default tracking algorithm.
 * by supplying the `trackBy` option to `NgForOf`.
 * `trackBy` takes a function that has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * @see [Structural Directives](guide/structural-directives)
 * @ngModule CommonModule
 * @publicApi
 */


var NgForOf = /*#__PURE__*/function () {
  function NgForOf(_viewContainer, _template, _differs) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgForOf);

    this._viewContainer = _viewContainer;
    this._template = _template;
    this._differs = _differs;
    this._ngForOf = null;
    this._ngForOfDirty = true;
    this._differ = null;
  }
  /**
   * The value of the iterable expression, which can be used as a
   * [template input variable](guide/structural-directives#shorthand).
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgForOf, [{
    key: "ngForOf",
    set: function set(ngForOf) {
      this._ngForOf = ngForOf;
      this._ngForOfDirty = true;
    }
    /**
     * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
     *
     * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
     * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
     * as the key.
     *
     * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
     * it produces for these items.
     *
     * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
     * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
     * primary key), and this iterable could be updated with new object instances that still
     * represent the same underlying entity (for example, when data is re-fetched from the server,
     * and the iterable is recreated and re-rendered, but most of the data is still the same).
     *
     * @see `TrackByFunction`
     */

  }, {
    key: "ngForTrackBy",
    get: function get() {
      return this._trackByFn;
    }
    /**
     * A reference to the template that is stamped out for each item in the iterable.
     * @see [template reference variable](guide/template-reference-variables)
     */
    ,
    set: function set(fn) {
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
        // TODO(vicb): use a log service once there is a public one available
        if (console && console.warn) {
          console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), ". ") + "See https://angular.io/api/common/NgForOf#change-propagation for more information.");
        }
      }

      this._trackByFn = fn;
    }
  }, {
    key: "ngForTemplate",
    set: function set(value) {
      // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
      // The current type is too restrictive; a template that just uses index, for example,
      // should be acceptable.
      if (value) {
        this._template = value;
      }
    }
    /**
     * Applies the changes when needed.
     */

  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this._ngForOfDirty) {
        this._ngForOfDirty = false; // React on ngForOf changes only once all inputs have been initialized

        var value = this._ngForOf;

        if (!this._differ && value) {
          try {
            this._differ = this._differs.find(value).create(this.ngForTrackBy);
          } catch (_a) {
            throw new Error("Cannot find a differ supporting object '".concat(value, "' of type '").concat(getTypeName(value), "'. NgFor only supports binding to Iterables such as Arrays."));
          }
        }
      }

      if (this._differ) {
        var changes = this._differ.diff(this._ngForOf);

        if (changes) this._applyChanges(changes);
      }
    }
  }, {
    key: "_applyChanges",
    value: function _applyChanges(changes) {
      var _this12 = this;

      var insertTuples = [];
      changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
        if (item.previousIndex == null) {
          // NgForOf is never "null" or "undefined" here because the differ detected
          // that a new item needs to be inserted from the iterable. This implies that
          // there is an iterable value for "_ngForOf".
          var view = _this12._viewContainer.createEmbeddedView(_this12._template, new NgForOfContext(null, _this12._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);

          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        } else if (currentIndex == null) {
          _this12._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
        } else if (adjustedPreviousIndex !== null) {
          var _view = _this12._viewContainer.get(adjustedPreviousIndex);

          _this12._viewContainer.move(_view, currentIndex);

          var _tuple = new RecordViewTuple(item, _view);

          insertTuples.push(_tuple);
        }
      });

      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }

      for (var _i = 0, ilen = this._viewContainer.length; _i < ilen; _i++) {
        var viewRef = this._viewContainer.get(_i);

        viewRef.context.index = _i;
        viewRef.context.count = ilen;
        viewRef.context.ngForOf = this._ngForOf;
      }

      changes.forEachIdentityChange(function (record) {
        var viewRef = _this12._viewContainer.get(record.currentIndex);

        viewRef.context.$implicit = record.item;
      });
    }
  }, {
    key: "_perViewChange",
    value: function _perViewChange(view, record) {
      view.context.$implicit = record.item;
    }
    /**
     * Asserts the correct type of the context for the template that `NgForOf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgForOf` structural directive renders its template with a specific context type.
     */

  }], [{
    key: "ngTemplateContextGuard",
    value: function ngTemplateContextGuard(dir, ctx) {
      return true;
    }
  }]);

  return NgForOf;
}();

NgForOf.ɵfac = function NgForOf_Factory(t) {
  return new (t || NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers));
};

NgForOf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgForOf,
  selectors: [["", "ngFor", "", "ngForOf", ""]],
  inputs: {
    ngForOf: "ngForOf",
    ngForTrackBy: "ngForTrackBy",
    ngForTemplate: "ngForTemplate"
  }
});

NgForOf.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers
  }];
};

NgForOf.propDecorators = {
  ngForOf: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngForTrackBy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngForTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgForOf, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngFor][ngForOf]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.IterableDiffers
    }];
  }, {
    ngForOf: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngForTrackBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngForTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();

var RecordViewTuple = function RecordViewTuple(record, view) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RecordViewTuple);

  this.record = record;
  this.view = view;
};

function getTypeName(type) {
  return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A structural directive that conditionally includes a template based on the value of
 * an expression coerced to Boolean.
 * When the expression evaluates to true, Angular renders the template
 * provided in a `then` clause, and when  false or null,
 * Angular renders the template provided in an optional `else` clause. The default
 * template for the `else` clause is blank.
 *
 * A [shorthand form](guide/structural-directives#asterisk) of the directive,
 * `*ngIf="condition"`, is generally used, provided
 * as an attribute of the anchor element for the inserted template.
 * Angular expands this into a more explicit version, in which the anchor element
 * is contained in an `<ng-template>` element.
 *
 * Simple form with shorthand syntax:
 *
 * ```
 * <div *ngIf="condition">Content to render when condition is true.</div>
 * ```
 *
 * Simple form with expanded syntax:
 *
 * ```
 * <ng-template [ngIf]="condition"><div>Content to render when condition is
 * true.</div></ng-template>
 * ```
 *
 * Form with an "else" block:
 *
 * ```
 * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Shorthand form with "then" and "else" blocks:
 *
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Form with storing the value locally:
 *
 * ```
 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
 * <ng-template #elseBlock>Content to render when value is null.</ng-template>
 * ```
 *
 * @usageNotes
 *
 * The `*ngIf` directive is most commonly used to conditionally show an inline template,
 * as seen in the following  example.
 * The default `else` template is blank.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * ### Showing an alternative template using `else`
 *
 * To display a template when `expression` evaluates to false, use an `else` template
 * binding as shown in the following example.
 * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
 * The template can be defined anywhere in the component view, but is typically placed right after
 * `ngIf` for readability.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * ### Using an external `then` template
 *
 * In the previous example, the then-clause template is specified inline, as the content of the
 * tag that contains the `ngIf` directive. You can also specify a template that is defined
 * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
 * change which template to use at runtime, as shown in the following example.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * ### Storing a conditional result in a variable
 *
 * You might want to show a set of properties from the same object. If you are waiting
 * for asynchronous data, the object can be undefined.
 * In this case, you can use `ngIf` and store the result of the condition in a local
 * variable as shown in the following example.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfAs'}
 *
 * This code uses only one `AsyncPipe`, so only one subscription is created.
 * The conditional statement stores the result of `userStream|async` in the local variable `user`.
 * You can then bind the local `user` repeatedly.
 *
 * The conditional displays the data only if `userStream` returns a value,
 * so you don't need to use the
 * safe-navigation-operator (`?.`)
 * to guard against null values when accessing properties.
 * You can display an alternative template while waiting for the data.
 *
 * ### Shorthand syntax
 *
 * The shorthand syntax `*ngIf` expands into two separate template specifications
 * for the "then" and "else" clauses. For example, consider the following shorthand statement,
 * that is meant to show a loading page while waiting for data to be loaded.
 *
 * ```
 * <div class="hero-list" *ngIf="heroes else loading">
 *  ...
 * </div>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * You can see that the "else" clause references the `<ng-template>`
 * with the `#loading` label, and the template for the "then" clause
 * is provided as the content of the anchor element.
 *
 * However, when Angular expands the shorthand syntax, it creates
 * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
 * The anchor element containing the template for the "then" clause becomes
 * the content of this unlabeled `<ng-template>` tag.
 *
 * ```
 * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
 *  <div class="hero-list">
 *   ...
 *  </div>
 * </ng-template>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * The presence of the implicit template object has implications for the nesting of
 * structural directives. For more on this subject, see
 * [Structural Directives](https://angular.io/guide/built-in-directives#one-per-element).
 *
 * @ngModule CommonModule
 * @publicApi
 */


var NgIf = /*#__PURE__*/function () {
  function NgIf(_viewContainer, templateRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgIf);

    this._viewContainer = _viewContainer;
    this._context = new NgIfContext();
    this._thenTemplateRef = null;
    this._elseTemplateRef = null;
    this._thenViewRef = null;
    this._elseViewRef = null;
    this._thenTemplateRef = templateRef;
  }
  /**
   * The Boolean expression to evaluate as the condition for showing a template.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgIf, [{
    key: "ngIf",
    set: function set(condition) {
      this._context.$implicit = this._context.ngIf = condition;

      this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to true.
     */

  }, {
    key: "ngIfThen",
    set: function set(templateRef) {
      assertTemplate('ngIfThen', templateRef);
      this._thenTemplateRef = templateRef;
      this._thenViewRef = null; // clear previous view if any.

      this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to false.
     */

  }, {
    key: "ngIfElse",
    set: function set(templateRef) {
      assertTemplate('ngIfElse', templateRef);
      this._elseTemplateRef = templateRef;
      this._elseViewRef = null; // clear previous view if any.

      this._updateView();
    }
  }, {
    key: "_updateView",
    value: function _updateView() {
      if (this._context.$implicit) {
        if (!this._thenViewRef) {
          this._viewContainer.clear();

          this._elseViewRef = null;

          if (this._thenTemplateRef) {
            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
          }
        }
      } else {
        if (!this._elseViewRef) {
          this._viewContainer.clear();

          this._thenViewRef = null;

          if (this._elseTemplateRef) {
            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
          }
        }
      }
    }
    /**
     * Asserts the correct type of the context for the template that `NgIf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgIf` structural directive renders its template with a specific context type.
     */

  }], [{
    key: "ngTemplateContextGuard",
    value: function ngTemplateContextGuard(dir, ctx) {
      return true;
    }
  }]);

  return NgIf;
}();

NgIf.ɵfac = function NgIf_Factory(t) {
  return new (t || NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef));
};

NgIf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgIf,
  selectors: [["", "ngIf", ""]],
  inputs: {
    ngIf: "ngIf",
    ngIfThen: "ngIfThen",
    ngIfElse: "ngIfElse"
  }
});

NgIf.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
  }];
};

NgIf.propDecorators = {
  ngIf: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngIfThen: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngIfElse: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgIf, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngIf]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
    }];
  }, {
    ngIf: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngIfThen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngIfElse: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @publicApi
 */


var NgIfContext = function NgIfContext() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgIfContext);

  this.$implicit = null;
  this.ngIf = null;
};

function assertTemplate(property, templateRef) {
  var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);

  if (!isTemplateRefOrNull) {
    throw new Error("".concat(property, " must be a TemplateRef, but received '").concat((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵstringify"])(templateRef), "'."));
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SwitchView = /*#__PURE__*/function () {
  function SwitchView(_viewContainerRef, _templateRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SwitchView);

    this._viewContainerRef = _viewContainerRef;
    this._templateRef = _templateRef;
    this._created = false;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(SwitchView, [{
    key: "create",
    value: function create() {
      this._created = true;

      this._viewContainerRef.createEmbeddedView(this._templateRef);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._created = false;

      this._viewContainerRef.clear();
    }
  }, {
    key: "enforceState",
    value: function enforceState(created) {
      if (created && !this._created) {
        this.create();
      } else if (!created && this._created) {
        this.destroy();
      }
    }
  }]);

  return SwitchView;
}();
/**
 * @ngModule CommonModule
 *
 * @description
 * The `[ngSwitch]` directive on a container specifies an expression to match against.
 * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
 * - Every view that matches is rendered.
 * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
 * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
 * or `ngSwitchDefault` directive are preserved at the location.
 *
 * @usageNotes
 * Define a container element for the directive, and specify the switch expression
 * to match against as an attribute:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 * ```
 *
 * Within the container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * ...
 *    <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * ### Usage Examples
 *
 * The following example shows how to use more than one case to display the same view:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <!-- the same view can be shown in more than one case -->
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *   <!--default case when there are no matches -->
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * The following example shows how cases can be nested:
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 *
 * @publicApi
 * @see `NgSwitchCase`
 * @see `NgSwitchDefault`
 * @see [Structural Directives](guide/structural-directives)
 *
 */


var NgSwitch = /*#__PURE__*/function () {
  function NgSwitch() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgSwitch);

    this._defaultUsed = false;
    this._caseCount = 0;
    this._lastCaseCheckIndex = 0;
    this._lastCasesMatched = false;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgSwitch, [{
    key: "ngSwitch",
    set: function set(newValue) {
      this._ngSwitch = newValue;

      if (this._caseCount === 0) {
        this._updateDefaultCases(true);
      }
    }
    /** @internal */

  }, {
    key: "_addCase",
    value: function _addCase() {
      return this._caseCount++;
    }
    /** @internal */

  }, {
    key: "_addDefault",
    value: function _addDefault(view) {
      if (!this._defaultViews) {
        this._defaultViews = [];
      }

      this._defaultViews.push(view);
    }
    /** @internal */

  }, {
    key: "_matchCase",
    value: function _matchCase(value) {
      var matched = value == this._ngSwitch;
      this._lastCasesMatched = this._lastCasesMatched || matched;
      this._lastCaseCheckIndex++;

      if (this._lastCaseCheckIndex === this._caseCount) {
        this._updateDefaultCases(!this._lastCasesMatched);

        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
      }

      return matched;
    }
  }, {
    key: "_updateDefaultCases",
    value: function _updateDefaultCases(useDefault) {
      if (this._defaultViews && useDefault !== this._defaultUsed) {
        this._defaultUsed = useDefault;

        for (var i = 0; i < this._defaultViews.length; i++) {
          var defaultView = this._defaultViews[i];
          defaultView.enforceState(useDefault);
        }
      }
    }
  }]);

  return NgSwitch;
}();

NgSwitch.ɵfac = function NgSwitch_Factory(t) {
  return new (t || NgSwitch)();
};

NgSwitch.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgSwitch,
  selectors: [["", "ngSwitch", ""]],
  inputs: {
    ngSwitch: "ngSwitch"
  }
});
NgSwitch.propDecorators = {
  ngSwitch: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgSwitch, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngSwitch]'
    }]
  }], function () {
    return [];
  }, {
    ngSwitch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @ngModule CommonModule
 *
 * @description
 * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
 * When the expressions match, the given `NgSwitchCase` template is rendered.
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * @usageNotes
 *
 * Within a switch container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   ...
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * Each switch-case statement contains an in-line HTML template or template reference
 * that defines the subtree to be selected if the value of the match expression
 * matches the value of the switch expression.
 *
 * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
 * This means that the empty string, `""` matches 0.
 *
 * @publicApi
 * @see `NgSwitch`
 * @see `NgSwitchDefault`
 *
 */


var NgSwitchCase = /*#__PURE__*/function () {
  function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgSwitchCase);

    this.ngSwitch = ngSwitch;

    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');
    }

    ngSwitch._addCase();

    this._view = new SwitchView(viewContainer, templateRef);
  }
  /**
   * Performs case matching. For internal use only.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgSwitchCase, [{
    key: "ngDoCheck",
    value: function ngDoCheck() {
      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
    }
  }]);

  return NgSwitchCase;
}();

NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) {
  return new (t || NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](NgSwitch, 9));
};

NgSwitchCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgSwitchCase,
  selectors: [["", "ngSwitchCase", ""]],
  inputs: {
    ngSwitchCase: "ngSwitchCase"
  }
});

NgSwitchCase.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
    }]
  }];
};

NgSwitchCase.propDecorators = {
  ngSwitchCase: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgSwitchCase, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngSwitchCase]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
    }, {
      type: NgSwitch,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
      }]
    }];
  }, {
    ngSwitchCase: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Creates a view that is rendered when no `NgSwitchCase` expressions
 * match the `NgSwitch` expression.
 * This statement should be the final case in an `NgSwitch`.
 *
 * @publicApi
 * @see `NgSwitch`
 * @see `NgSwitchCase`
 *
 */


var NgSwitchDefault = function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgSwitchDefault);

  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
    throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');
  }

  ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
};

NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) {
  return new (t || NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](NgSwitch, 9));
};

NgSwitchDefault.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgSwitchDefault,
  selectors: [["", "ngSwitchDefault", ""]]
});

NgSwitchDefault.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgSwitchDefault, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngSwitchDefault]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
    }, {
      type: NgSwitch,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
      }]
    }];
  }, null);
})();

function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵRuntimeError"]("305"
  /* TEMPLATE_STRUCTURE_ERROR */
  , "An element with the \"".concat(attrName, "\" attribute ") + "(matching the \"".concat(directiveName, "\" directive) must be located inside an element with the \"ngSwitch\" attribute ") + "(matching \"NgSwitch\" directive)");
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * @description
 *
 * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * @publicApi
 */


var NgPlural = /*#__PURE__*/function () {
  function NgPlural(_localization) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgPlural);

    this._localization = _localization;
    this._caseViews = {};
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgPlural, [{
    key: "ngPlural",
    set: function set(value) {
      this._switchValue = value;

      this._updateView();
    }
  }, {
    key: "addCase",
    value: function addCase(value, switchView) {
      this._caseViews[value] = switchView;
    }
  }, {
    key: "_updateView",
    value: function _updateView() {
      this._clearViews();

      var cases = Object.keys(this._caseViews);
      var key = getPluralCategory(this._switchValue, cases, this._localization);

      this._activateView(this._caseViews[key]);
    }
  }, {
    key: "_clearViews",
    value: function _clearViews() {
      if (this._activeView) this._activeView.destroy();
    }
  }, {
    key: "_activateView",
    value: function _activateView(view) {
      if (view) {
        this._activeView = view;

        this._activeView.create();
      }
    }
  }]);

  return NgPlural;
}();

NgPlural.ɵfac = function NgPlural_Factory(t) {
  return new (t || NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](NgLocalization));
};

NgPlural.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgPlural,
  selectors: [["", "ngPlural", ""]],
  inputs: {
    ngPlural: "ngPlural"
  }
});

NgPlural.ctorParameters = function () {
  return [{
    type: NgLocalization
  }];
};

NgPlural.propDecorators = {
  ngPlural: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgPlural, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngPlural]'
    }]
  }], function () {
    return [{
      type: NgLocalization
    }];
  }, {
    ngPlural: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Creates a view that will be added/removed from the parent {@link NgPlural} when the
 * given expression matches the plural expression according to CLDR rules.
 *
 * @usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 *```
 *
 * See {@link NgPlural} for more details and example.
 *
 * @publicApi
 */


var NgPluralCase = function NgPluralCase(value, template, viewContainer, ngPlural) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgPluralCase);

  this.value = value;
  var isANumber = !isNaN(Number(value));
  ngPlural.addCase(isANumber ? "=".concat(value) : value, new SwitchView(viewContainer, template));
};

NgPluralCase.ɵfac = function NgPluralCase_Factory(t) {
  return new (t || NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](NgPlural, 1));
};

NgPluralCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgPluralCase,
  selectors: [["", "ngPluralCase", ""]]
});

NgPluralCase.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Attribute,
      args: ['ngPluralCase']
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }, {
    type: NgPlural,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgPluralCase, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngPluralCase]'
    }]
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Attribute,
        args: ['ngPluralCase']
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }, {
      type: NgPlural,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Host
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 *
 * Set the font of the containing element to the result of an expression.
 *
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 * ```
 *
 * Set the width of the containing element to a pixel value returned by an expression.
 *
 * ```
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 * ```
 *
 * Set a collection of style values using an expression that returns key-value pairs.
 *
 * ```
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * @description
 *
 * An attribute directive that updates styles for the containing HTML element.
 * Sets one or more style properties, specified as colon-separated key-value pairs.
 * The key is a style name, with an optional `.<unit>` suffix
 * (such as 'top.px', 'font-style.em').
 * The value is an expression to be evaluated.
 * The resulting non-null value, expressed in the given unit,
 * is assigned to the given style property.
 * If the result of evaluation is null, the corresponding style is removed.
 *
 * @publicApi
 */


var NgStyle = /*#__PURE__*/function () {
  function NgStyle(_ngEl, _differs, _renderer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgStyle);

    this._ngEl = _ngEl;
    this._differs = _differs;
    this._renderer = _renderer;
    this._ngStyle = null;
    this._differ = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgStyle, [{
    key: "ngStyle",
    set: function set(values) {
      this._ngStyle = values;

      if (!this._differ && values) {
        this._differ = this._differs.find(values).create();
      }
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this._differ) {
        var changes = this._differ.diff(this._ngStyle);

        if (changes) {
          this._applyChanges(changes);
        }
      }
    }
  }, {
    key: "_setStyle",
    value: function _setStyle(nameAndUnit, value) {
      var _nameAndUnit$split = nameAndUnit.split('.'),
          _nameAndUnit$split2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_nameAndUnit$split, 2),
          name = _nameAndUnit$split2[0],
          unit = _nameAndUnit$split2[1];

      value = value != null && unit ? "".concat(value).concat(unit) : value;

      if (value != null) {
        this._renderer.setStyle(this._ngEl.nativeElement, name, value);
      } else {
        this._renderer.removeStyle(this._ngEl.nativeElement, name);
      }
    }
  }, {
    key: "_applyChanges",
    value: function _applyChanges(changes) {
      var _this13 = this;

      changes.forEachRemovedItem(function (record) {
        return _this13._setStyle(record.key, null);
      });
      changes.forEachAddedItem(function (record) {
        return _this13._setStyle(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function (record) {
        return _this13._setStyle(record.key, record.currentValue);
      });
    }
  }]);

  return NgStyle;
}();

NgStyle.ɵfac = function NgStyle_Factory(t) {
  return new (t || NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2));
};

NgStyle.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgStyle,
  selectors: [["", "ngStyle", ""]],
  inputs: {
    ngStyle: "ngStyle"
  }
});

NgStyle.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2
  }];
};

NgStyle.propDecorators = {
  ngStyle: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
    args: ['ngStyle']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgStyle, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngStyle]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Renderer2
    }];
  }, {
    ngStyle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input,
      args: ['ngStyle']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Inserts an embedded view from a prepared `TemplateRef`.
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * @usageNotes
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * Using the key `$implicit` in the context object will set its value as default.
 *
 * ### Example
 *
 * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * @publicApi
 */


var NgTemplateOutlet = /*#__PURE__*/function () {
  function NgTemplateOutlet(_viewContainerRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgTemplateOutlet);

    this._viewContainerRef = _viewContainerRef;
    this._viewRef = null;
    /**
     * A context object to attach to the {@link EmbeddedViewRef}. This should be an
     * object, the object's keys will be available for binding by the local template `let`
     * declarations.
     * Using the key `$implicit` in the context object will set its value as default.
     */

    this.ngTemplateOutletContext = null;
    /**
     * A string defining the template reference and optionally the context object for the template.
     */

    this.ngTemplateOutlet = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NgTemplateOutlet, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if (changes['ngTemplateOutlet']) {
        var viewContainerRef = this._viewContainerRef;

        if (this._viewRef) {
          viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
        }

        this._viewRef = this.ngTemplateOutlet ? viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) : null;
      } else if (this._viewRef && changes['ngTemplateOutletContext'] && this.ngTemplateOutletContext) {
        this._viewRef.context = this.ngTemplateOutletContext;
      }
    }
  }]);

  return NgTemplateOutlet;
}();

NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) {
  return new (t || NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef));
};

NgTemplateOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineDirective"]({
  type: NgTemplateOutlet,
  selectors: [["", "ngTemplateOutlet", ""]],
  inputs: {
    ngTemplateOutletContext: "ngTemplateOutletContext",
    ngTemplateOutlet: "ngTemplateOutlet"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵNgOnChangesFeature"]]
});

NgTemplateOutlet.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
  }];
};

NgTemplateOutlet.propDecorators = {
  ngTemplateOutletContext: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }],
  ngTemplateOutlet: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](NgTemplateOutlet, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Directive,
    args: [{
      selector: '[ngTemplateOutlet]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ViewContainerRef
    }];
  }, {
    ngTemplateOutletContext: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }],
    ngTemplateOutlet: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */


var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function invalidPipeArgumentError(type, value) {
  return Error("InvalidPipeArgument: '".concat(value, "' for pipe '").concat((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵstringify"])(type), "'"));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SubscribableStrategy = /*#__PURE__*/function () {
  function SubscribableStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SubscribableStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(SubscribableStrategy, [{
    key: "createSubscription",
    value: function createSubscription(async, updateLatestValue) {
      return async.subscribe({
        next: updateLatestValue,
        error: function error(e) {
          throw e;
        }
      });
    }
  }, {
    key: "dispose",
    value: function dispose(subscription) {
      subscription.unsubscribe();
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(subscription) {
      subscription.unsubscribe();
    }
  }]);

  return SubscribableStrategy;
}();

var PromiseStrategy = /*#__PURE__*/function () {
  function PromiseStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PromiseStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(PromiseStrategy, [{
    key: "createSubscription",
    value: function createSubscription(async, updateLatestValue) {
      return async.then(updateLatestValue, function (e) {
        throw e;
      });
    }
  }, {
    key: "dispose",
    value: function dispose(subscription) {}
  }, {
    key: "onDestroy",
    value: function onDestroy(subscription) {}
  }]);

  return PromiseStrategy;
}();

var _promiseStrategy = new PromiseStrategy();

var _subscribableStrategy = new SubscribableStrategy();
/**
 * @ngModule CommonModule
 * @description
 *
 * Unwraps a value from an asynchronous primitive.
 *
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 * @usageNotes
 *
 * ### Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * @publicApi
 */


var AsyncPipe = /*#__PURE__*/function () {
  function AsyncPipe(_ref) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AsyncPipe);

    this._ref = _ref;
    this._latestValue = null;
    this._subscription = null;
    this._obj = null;
    this._strategy = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(AsyncPipe, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._subscription) {
        this._dispose();
      }
    }
  }, {
    key: "transform",
    value: function transform(obj) {
      if (!this._obj) {
        if (obj) {
          this._subscribe(obj);
        }

        return this._latestValue;
      }

      if (obj !== this._obj) {
        this._dispose();

        return this.transform(obj);
      }

      return this._latestValue;
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(obj) {
      var _this14 = this;

      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, function (value) {
        return _this14._updateLatestValue(obj, value);
      });
    }
  }, {
    key: "_selectStrategy",
    value: function _selectStrategy(obj) {
      if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵisPromise"])(obj)) {
        return _promiseStrategy;
      }

      if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵisSubscribable"])(obj)) {
        return _subscribableStrategy;
      }

      throw invalidPipeArgumentError(AsyncPipe, obj);
    }
  }, {
    key: "_dispose",
    value: function _dispose() {
      this._strategy.dispose(this._subscription);

      this._latestValue = null;
      this._subscription = null;
      this._obj = null;
    }
  }, {
    key: "_updateLatestValue",
    value: function _updateLatestValue(async, value) {
      if (async === this._obj) {
        this._latestValue = value;

        this._ref.markForCheck();
      }
    }
  }]);

  return AsyncPipe;
}();

AsyncPipe.ɵfac = function AsyncPipe_Factory(t) {
  return new (t || AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.ChangeDetectorRef, 16));
};

AsyncPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "async",
  type: AsyncPipe,
  pure: false
});

AsyncPipe.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ChangeDetectorRef
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](AsyncPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'async',
      pure: false
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.ChangeDetectorRef
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Transforms text to all lower case.
 *
 * @see `UpperCasePipe`
 * @see `TitleCasePipe`
 * @usageNotes
 *
 * The following example defines a view that allows the user to enter
 * text, and then uses the pipe to convert the input text to all lower case.
 *
 * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
 *
 * @ngModule CommonModule
 * @publicApi
 */


var LowerCasePipe = /*#__PURE__*/function () {
  function LowerCasePipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, LowerCasePipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(LowerCasePipe, [{
    key: "transform",
    value: function transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(LowerCasePipe, value);
      }

      return value.toLowerCase();
    }
  }]);

  return LowerCasePipe;
}();

LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) {
  return new (t || LowerCasePipe)();
};

LowerCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "lowercase",
  type: LowerCasePipe,
  pure: true
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](LowerCasePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'lowercase'
    }]
  }], null, null);
})(); //
// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
// can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
// (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
// transpilation of this functionality down to ES5 without external tool, the only solution is
// to use already transpiled form. Example can be found here -
// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
//


var unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;
/**
 * Transforms text to title case.
 * Capitalizes the first letter of each word and transforms the
 * rest of the word to lower case.
 * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
 *
 * @see `LowerCasePipe`
 * @see `UpperCasePipe`
 *
 * @usageNotes
 * The following example shows the result of transforming various strings into title case.
 *
 * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
 *
 * @ngModule CommonModule
 * @publicApi
 */

var TitleCasePipe = /*#__PURE__*/function () {
  function TitleCasePipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, TitleCasePipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(TitleCasePipe, [{
    key: "transform",
    value: function transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(TitleCasePipe, value);
      }

      return value.replace(unicodeWordMatch, function (txt) {
        return txt[0].toUpperCase() + txt.substr(1).toLowerCase();
      });
    }
  }]);

  return TitleCasePipe;
}();

TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) {
  return new (t || TitleCasePipe)();
};

TitleCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "titlecase",
  type: TitleCasePipe,
  pure: true
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](TitleCasePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'titlecase'
    }]
  }], null, null);
})();
/**
 * Transforms text to all upper case.
 * @see `LowerCasePipe`
 * @see `TitleCasePipe`
 *
 * @ngModule CommonModule
 * @publicApi
 */


var UpperCasePipe = /*#__PURE__*/function () {
  function UpperCasePipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, UpperCasePipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(UpperCasePipe, [{
    key: "transform",
    value: function transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(UpperCasePipe, value);
      }

      return value.toUpperCase();
    }
  }]);

  return UpperCasePipe;
}();

UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) {
  return new (t || UpperCasePipe)();
};

UpperCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "uppercase",
  type: UpperCasePipe,
  pure: true
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](UpperCasePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'uppercase'
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// clang-format off

/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a date value according to locale rules.
 *
 * `DatePipe` is executed only when it detects a pure change to the input value.
 * A pure change is either a change to a primitive input value
 * (such as `String`, `Number`, `Boolean`, or `Symbol`),
 * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).
 *
 * Note that mutating a `Date` object does not cause the pipe to be rendered again.
 * To ensure that the pipe is executed, you must create a new `Date` object.
 *
 * Only the `en-US` locale data comes with Angular. To localize dates
 * in another language, you must import the corresponding locale data.
 * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
 *
 * @see `formatDate()`
 *
 *
 * @usageNotes
 *
 * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
 * reformat the date on every change-detection cycle, treat the date as an immutable object
 * and change the reference when the pipe needs to run again.
 *
 * ### Pre-defined format options
 *
 * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |
 * |---------------|-------------------------------------|-------------------------------------------------|
 * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |
 * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |
 * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |
 * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |
 * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |
 * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |
 * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |
 * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |
 * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |
 * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |
 * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |
 * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |
 *
 * ### Custom format options
 *
 * You can construct a format string using symbols to specify the components
 * of a date-time value, as described in the following table.
 * Format details depend on the locale.
 * Fields marked with (*) are only available in the extra data set for the given locale.
 *
 *  | Field type          | Format      | Description                                                   | Example Value                                              |
 *  |-------------------- |-------------|---------------------------------------------------------------|------------------------------------------------------------|
 *  | Era                 | G, GG & GGG | Abbreviated                                                   | AD                                                         |
 *  |                     | GGGG        | Wide                                                          | Anno Domini                                                |
 *  |                     | GGGGG       | Narrow                                                        | A                                                          |
 *  | Year                | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                     | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                     | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                     | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                     | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                     | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                     | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Month               | M           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                     | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                     | MMM         | Abbreviated                                                   | Sep                                                        |
 *  |                     | MMMM        | Wide                                                          | September                                                  |
 *  |                     | MMMMM       | Narrow                                                        | S                                                          |
 *  | Month standalone    | L           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                     | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                     | LLL         | Abbreviated                                                   | Sep                                                        |
 *  |                     | LLLL        | Wide                                                          | September                                                  |
 *  |                     | LLLLL       | Narrow                                                        | S                                                          |
 *  | Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |
 *  |                     | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
 *  | Week of month       | W           | Numeric: 1 digit                                              | 1... 5                                                     |
 *  | Day of month        | d           | Numeric: minimum digits                                       | 1                                                          |
 *  |                     | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |
 *  | Week day            | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
 *  |                     | EEEE        | Wide                                                          | Tuesday                                                    |
 *  |                     | EEEEE       | Narrow                                                        | T                                                          |
 *  |                     | EEEEEE      | Short                                                         | Tu                                                         |
 *  | Week day standalone | c, cc       | Numeric: 1 digit                                              | 2                                                          |
 *  |                     | ccc         | Abbreviated                                                   | Tue                                                        |
 *  |                     | cccc        | Wide                                                          | Tuesday                                                    |
 *  |                     | ccccc       | Narrow                                                        | T                                                          |
 *  |                     | cccccc      | Short                                                         | Tu                                                         |
 *  | Period              | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
 *  |                     | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
 *  |                     | aaaaa       | Narrow                                                        | a/p                                                        |
 *  | Period*             | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
 *  |                     | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                     | BBBBB       | Narrow                                                        | md                                                         |
 *  | Period standalone*  | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
 *  |                     | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                     | bbbbb       | Narrow                                                        | md                                                         |
 *  | Hour 1-12           | h           | Numeric: minimum digits                                       | 1, 12                                                      |
 *  |                     | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
 *  | Hour 0-23           | H           | Numeric: minimum digits                                       | 0, 23                                                      |
 *  |                     | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
 *  | Minute              | m           | Numeric: minimum digits                                       | 8, 59                                                      |
 *  |                     | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
 *  | Second              | s           | Numeric: minimum digits                                       | 0... 59                                                    |
 *  |                     | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
 *  | Fractional seconds  | S           | Numeric: 1 digit                                              | 0... 9                                                     |
 *  |                     | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
 *  |                     | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
 *  | Zone                | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
 *  |                     | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
 *  |                     | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
 *  |                     | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
 *  |                     | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
 *  |                     | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
 *  |                     | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
 *
 *
 * ### Format examples
 *
 * These examples transform a date into various formats,
 * assuming that `dateObj` is a JavaScript `Date` object for
 * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
 * given in the local time for the `en-US` locale.
 *
 * ```
 * {{ dateObj | date }}               // output is 'Jun 15, 2015'
 * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
 * ```
 *
 * ### Usage example
 *
 * The following component uses a date pipe to display the current date in different formats.
 *
 * ```
 * @Component({
 *  selector: 'date-pipe',
 *  template: `<div>
 *    <p>Today is {{today | date}}</p>
 *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
 *    <p>The time is {{today | date:'h:mm a z'}}</p>
 *  </div>`
 * })
 * // Get the current date and time as a date-time value.
 * export class DatePipeComponent {
 *   today: number = Date.now();
 * }
 * ```
 *
 * @publicApi
 */
// clang-format on


var DatePipe = /*#__PURE__*/function () {
  function DatePipe(locale) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DatePipe);

    this.locale = locale;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DatePipe, [{
    key: "transform",
    value: function transform(value) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';
      var timezone = arguments.length > 2 ? arguments[2] : undefined;
      var locale = arguments.length > 3 ? arguments[3] : undefined;
      if (value == null || value === '' || value !== value) return null;

      try {
        return formatDate(value, format, locale || this.locale, timezone);
      } catch (error) {
        throw invalidPipeArgumentError(DatePipe, error.message);
      }
    }
  }]);

  return DatePipe;
}();

DatePipe.ɵfac = function DatePipe_Factory(t) {
  return new (t || DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID, 16));
};

DatePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "date",
  type: DatePipe,
  pure: true
});

DatePipe.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](DatePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'date',
      pure: true
    }]
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _INTERPOLATION_REGEXP = /#/g;
/**
 * @ngModule CommonModule
 * @description
 *
 * Maps a value to a string that pluralizes the value according to locale rules.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * @publicApi
 */

var I18nPluralPipe = /*#__PURE__*/function () {
  function I18nPluralPipe(_localization) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, I18nPluralPipe);

    this._localization = _localization;
  }
  /**
   * @param value the number to be formatted
   * @param pluralMap an object that mimics the ICU format, see
   * http://userguide.icu-project.org/formatparse/messages.
   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
   * default).
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(I18nPluralPipe, [{
    key: "transform",
    value: function transform(value, pluralMap, locale) {
      if (value == null) return '';

      if (typeof pluralMap !== 'object' || pluralMap === null) {
        throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
      }

      var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
      return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    }
  }]);

  return I18nPluralPipe;
}();

I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) {
  return new (t || I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](NgLocalization, 16));
};

I18nPluralPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "i18nPlural",
  type: I18nPluralPipe,
  pure: true
});

I18nPluralPipe.ctorParameters = function () {
  return [{
    type: NgLocalization
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](I18nPluralPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'i18nPlural',
      pure: true
    }]
  }], function () {
    return [{
      type: NgLocalization
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Generic selector that displays the string that matches the current value.
 *
 * If none of the keys of the `mapping` match the `value`, then the content
 * of the `other` key is returned when present, otherwise an empty string is returned.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 * @publicApi
 */


var I18nSelectPipe = /*#__PURE__*/function () {
  function I18nSelectPipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, I18nSelectPipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(I18nSelectPipe, [{
    key: "transform",
    value:
    /**
     * @param value a string to be internationalized.
     * @param mapping an object that indicates the text that should be displayed
     * for different values of the provided `value`.
     */
    function transform(value, mapping) {
      if (value == null) return '';

      if (typeof mapping !== 'object' || typeof value !== 'string') {
        throw invalidPipeArgumentError(I18nSelectPipe, mapping);
      }

      if (mapping.hasOwnProperty(value)) {
        return mapping[value];
      }

      if (mapping.hasOwnProperty('other')) {
        return mapping['other'];
      }

      return '';
    }
  }]);

  return I18nSelectPipe;
}();

I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) {
  return new (t || I18nSelectPipe)();
};

I18nSelectPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "i18nSelect",
  type: I18nSelectPipe,
  pure: true
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](I18nSelectPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'i18nSelect',
      pure: true
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Converts a value into its JSON-format representation.  Useful for debugging.
 *
 * @usageNotes
 *
 * The following component uses a JSON pipe to convert an object
 * to JSON format, and displays the string in both formats for comparison.
 *
 * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * @publicApi
 */


var JsonPipe = /*#__PURE__*/function () {
  function JsonPipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, JsonPipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(JsonPipe, [{
    key: "transform",
    value:
    /**
     * @param value A value of any type to convert into a JSON-format string.
     */
    function transform(value) {
      return JSON.stringify(value, null, 2);
    }
  }]);

  return JsonPipe;
}();

JsonPipe.ɵfac = function JsonPipe_Factory(t) {
  return new (t || JsonPipe)();
};

JsonPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "json",
  type: JsonPipe,
  pure: false
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](JsonPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'json',
      pure: false
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function makeKeyValuePair(key, value) {
  return {
    key: key,
    value: value
  };
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms Object or Map into an array of key value pairs.
 *
 * The output array will be ordered by keys.
 * By default the comparator will be by Unicode point value.
 * You can optionally pass a compareFn if your keys are complex types.
 *
 * @usageNotes
 * ### Examples
 *
 * This examples show how an Object or a Map can be iterated by ngFor with the use of this
 * keyvalue pipe.
 *
 * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
 *
 * @publicApi
 */


var KeyValuePipe = /*#__PURE__*/function () {
  function KeyValuePipe(differs) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, KeyValuePipe);

    this.differs = differs;
    this.keyValues = [];
    this.compareFn = defaultComparator;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(KeyValuePipe, [{
    key: "transform",
    value: function transform(input) {
      var _this15 = this;

      var compareFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultComparator;

      if (!input || !(input instanceof Map) && typeof input !== 'object') {
        return null;
      }

      if (!this.differ) {
        // make a differ for whatever type we've been passed in
        this.differ = this.differs.find(input).create();
      }

      var differChanges = this.differ.diff(input);
      var compareFnChanged = compareFn !== this.compareFn;

      if (differChanges) {
        this.keyValues = [];
        differChanges.forEachItem(function (r) {
          _this15.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
        });
      }

      if (differChanges || compareFnChanged) {
        this.keyValues.sort(compareFn);
        this.compareFn = compareFn;
      }

      return this.keyValues;
    }
  }]);

  return KeyValuePipe;
}();

KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {
  return new (t || KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers, 16));
};

KeyValuePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "keyvalue",
  type: KeyValuePipe,
  pure: false
});

KeyValuePipe.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](KeyValuePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'keyvalue',
      pure: false
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.KeyValueDiffers
    }];
  }, null);
})();

function defaultComparator(keyValueA, keyValueB) {
  var a = keyValueA.key;
  var b = keyValueB.key; // if same exit with 0;

  if (a === b) return 0; // make sure that undefined are at the end of the sort.

  if (a === undefined) return 1;
  if (b === undefined) return -1; // make sure that nulls are at the end of the sort.

  if (a === null) return 1;
  if (b === null) return -1;

  if (typeof a == 'string' && typeof b == 'string') {
    return a < b ? -1 : 1;
  }

  if (typeof a == 'number' && typeof b == 'number') {
    return a - b;
  }

  if (typeof a == 'boolean' && typeof b == 'boolean') {
    return a < b ? -1 : 1;
  } // `a` and `b` are of different types. Compare their string values.


  var aString = String(a);
  var bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a value according to digit options and locale rules.
 * Locale determines group sizing and separator,
 * decimal point character, and other locale-specific configurations.
 *
 * @see `formatNumber()`
 *
 * @usageNotes
 *
 * ### digitsInfo
 *
 * The value's decimal representation is specified by the `digitsInfo`
 * parameter, written in the following format:<br>
 *
 * ```
 * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
 * ```
 *
 *  - `minIntegerDigits`:
 * The minimum number of integer digits before the decimal point.
 * Default is 1.
 *
 * - `minFractionDigits`:
 * The minimum number of digits after the decimal point.
 * Default is 0.
 *
 *  - `maxFractionDigits`:
 * The maximum number of digits after the decimal point.
 * Default is 3.
 *
 * If the formatted value is truncated it will be rounded using the "to-nearest" method:
 *
 * ```
 * {{3.6 | number: '1.0-0'}}
 * <!--will output '4'-->
 *
 * {{-3.6 | number:'1.0-0'}}
 * <!--will output '-4'-->
 * ```
 *
 * ### locale
 *
 * `locale` will format a value according to locale rules.
 * Locale determines group sizing and separator,
 * decimal point character, and other locale-specific configurations.
 *
 * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
 *
 * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
 *
 * ### Example
 *
 * The following code shows how the pipe transforms values
 * according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
 *
 * @publicApi
 */


var DecimalPipe = /*#__PURE__*/function () {
  function DecimalPipe(_locale) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DecimalPipe);

    this._locale = _locale;
  }
  /**
   * @param value The value to be formatted.
   * @param digitsInfo Sets digit and decimal representation.
   * [See more](#digitsinfo).
   * @param locale Specifies what locale format rules to use.
   * [See more](#locale).
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DecimalPipe, [{
    key: "transform",
    value: function transform(value, digitsInfo, locale) {
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      try {
        var num = strToNumber(value);
        return formatNumber(num, locale, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(DecimalPipe, error.message);
      }
    }
  }]);

  return DecimalPipe;
}();

DecimalPipe.ɵfac = function DecimalPipe_Factory(t) {
  return new (t || DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID, 16));
};

DecimalPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "number",
  type: DecimalPipe,
  pure: true
});

DecimalPipe.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](DecimalPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'number'
    }]
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
      }]
    }];
  }, null);
})();
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms a number to a percentage
 * string, formatted according to locale rules that determine group sizing and
 * separator, decimal-point character, and other locale-specific
 * configurations.
 *
 * @see `formatPercent()`
 *
 * @usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
 *
 * @publicApi
 */


var PercentPipe = /*#__PURE__*/function () {
  function PercentPipe(_locale) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PercentPipe);

    this._locale = _locale;
  }
  /**
   *
   * @param value The number to be formatted as a percentage.
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `0`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `0`.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(PercentPipe, [{
    key: "transform",
    value: function transform(value, digitsInfo, locale) {
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      try {
        var num = strToNumber(value);
        return formatPercent(num, locale, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(PercentPipe, error.message);
      }
    }
  }]);

  return PercentPipe;
}();

PercentPipe.ɵfac = function PercentPipe_Factory(t) {
  return new (t || PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID, 16));
};

PercentPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "percent",
  type: PercentPipe,
  pure: true
});

PercentPipe.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](PercentPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'percent'
    }]
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
      }]
    }];
  }, null);
})();
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms a number to a currency string, formatted according to locale rules
 * that determine group sizing and separator, decimal-point character,
 * and other locale-specific configurations.
 *
 * {@a currency-code-deprecation}
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v11 the default currency code will be taken from the current locale identified by
 * the `LOCALE_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for
 * more information.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * @see `getCurrencySymbol()`
 * @see `formatCurrency()`
 *
 * @usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
 *
 * @publicApi
 */


var CurrencyPipe = /*#__PURE__*/function () {
  function CurrencyPipe(_locale) {
    var _defaultCurrencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CurrencyPipe);

    this._locale = _locale;
    this._defaultCurrencyCode = _defaultCurrencyCode;
  }
  /**
   *
   * @param value The number to be formatted as currency.
   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
   * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
   * configured using the `DEFAULT_CURRENCY_CODE` injection token.
   * @param display The format for the currency indicator. One of the following:
   *   - `code`: Show the code (such as `USD`).
   *   - `symbol`(default): Show the symbol (such as `$`).
   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
   * currency.
   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
   * locale has no narrow symbol, uses the standard symbol for the locale.
   *   - String: Use the given string value instead of a code or a symbol.
   * For example, an empty string will suppress the currency & symbol.
   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
   *
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `2`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `2`.
   * If not provided, the number will be formatted with the proper amount of digits,
   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(CurrencyPipe, [{
    key: "transform",
    value: function transform(value) {
      var currencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._defaultCurrencyCode;
      var display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'symbol';
      var digitsInfo = arguments.length > 3 ? arguments[3] : undefined;
      var locale = arguments.length > 4 ? arguments[4] : undefined;
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      if (typeof display === 'boolean') {
        if ((typeof ngDevMode === 'undefined' || ngDevMode) && console && console.warn) {
          console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
        }

        display = display ? 'symbol' : 'code';
      }

      var currency = currencyCode || this._defaultCurrencyCode;

      if (display !== 'code') {
        if (display === 'symbol' || display === 'symbol-narrow') {
          currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
        } else {
          currency = display;
        }
      }

      try {
        var num = strToNumber(value);
        return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(CurrencyPipe, error.message);
      }
    }
  }]);

  return CurrencyPipe;
}();

CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) {
  return new (t || CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID, 16), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_CURRENCY_CODE, 16));
};

CurrencyPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "currency",
  type: CurrencyPipe,
  pure: true
});

CurrencyPipe.ctorParameters = function () {
  return [{
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_CURRENCY_CODE]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](CurrencyPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'currency'
    }]
  }], function () {
    return [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.LOCALE_ID]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_CURRENCY_CODE]
      }]
    }];
  }, null);
})();

function isValue(value) {
  return !(value == null || value === '' || value !== value);
}
/**
 * Transforms a string into a number (if needed).
 */


function strToNumber(value) {
  // Convert strings to numbers
  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }

  if (typeof value !== 'number') {
    throw new Error("".concat(value, " is not a number"));
  }

  return value;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Creates a new `Array` or `String` containing a subset (slice) of the elements.
 *
 * @usageNotes
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on an `Array`, the returned `Array` is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ### List Example
 *
 * This `ngFor` example:
 *
 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 * ```html
 * <li>b</li>
 * <li>c</li>
 * ```
 *
 * ### String Examples
 *
 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * @publicApi
 */


var SlicePipe = /*#__PURE__*/function () {
  function SlicePipe() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SlicePipe);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(SlicePipe, [{
    key: "transform",
    value: function transform(value, start, end) {
      if (value == null) return null;

      if (!this.supports(value)) {
        throw invalidPipeArgumentError(SlicePipe, value);
      }

      return value.slice(start, end);
    }
  }, {
    key: "supports",
    value: function supports(obj) {
      return typeof obj === 'string' || Array.isArray(obj);
    }
  }]);

  return SlicePipe;
}();

SlicePipe.ɵfac = function SlicePipe_Factory(t) {
  return new (t || SlicePipe)();
};

SlicePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefinePipe"]({
  name: "slice",
  type: SlicePipe,
  pure: false
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](SlicePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Pipe,
    args: [{
      name: 'slice',
      pure: false
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */


var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This does not contain the location providers,
// as they need some platform specific implementations to work.

/**
 * Exports all the basic Angular directives and pipes,
 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * * The `providers` options configure the NgModule's injector to provide
 * localization dependencies to members.
 * * The `exports` options make the declared directives and pipes available for import
 * by other NgModules.
 *
 * @publicApi
 */

var CommonModule = function CommonModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CommonModule);
};

CommonModule.ɵfac = function CommonModule_Factory(t) {
  return new (t || CommonModule)();
};

CommonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineNgModule"]({
  type: CommonModule
});
CommonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjector"]({
  providers: [{
    provide: NgLocalization,
    useClass: NgLocaleLocalization
  }]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵsetClassMetadata"](CommonModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.NgModule,
    args: [{
      declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
      exports: [COMMON_DIRECTIVES, COMMON_PIPES],
      providers: [{
        provide: NgLocalization,
        useClass: NgLocaleLocalization
      }]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵsetNgModuleScope"](CommonModule, {
    declarations: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe],
    exports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var PLATFORM_BROWSER_ID = 'browser';
var PLATFORM_SERVER_ID = 'server';
var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * @publicApi
 */

function isPlatformBrowser(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * @publicApi
 */


function isPlatformServer(platformId) {
  return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * @publicApi
 */


function isPlatformWorkerApp(platformId) {
  return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * @publicApi
 */


function isPlatformWorkerUi(platformId) {
  return platformId === PLATFORM_WORKER_UI_ID;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.Version('12.2.3');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
 *
 * @publicApi
 */

var ViewportScroller = function ViewportScroller() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ViewportScroller);
}; // De-sugared tree-shakable injection
// See #23917

/** @nocollapse */


ViewportScroller.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"])({
  token: ViewportScroller,
  providedIn: 'root',
  factory: function factory() {
    return new BrowserViewportScroller((0,_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"])(DOCUMENT), window);
  }
});
/**
 * Manages the scroll position for a browser window.
 */

var BrowserViewportScroller = /*#__PURE__*/function () {
  function BrowserViewportScroller(document, window) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BrowserViewportScroller);

    this.document = document;
    this.window = window;

    this.offset = function () {
      return [0, 0];
    };
  }
  /**
   * Configures the top offset used when scrolling to an anchor.
   * @param offset A position in screen coordinates (a tuple with x and y values)
   * or a function that returns the top offset position.
   *
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(BrowserViewportScroller, [{
    key: "setOffset",
    value: function setOffset(offset) {
      if (Array.isArray(offset)) {
        this.offset = function () {
          return offset;
        };
      } else {
        this.offset = offset;
      }
    }
    /**
     * Retrieves the current scroll position.
     * @returns The position in screen coordinates.
     */

  }, {
    key: "getScrollPosition",
    value: function getScrollPosition() {
      if (this.supportsScrolling()) {
        return [this.window.pageXOffset, this.window.pageYOffset];
      } else {
        return [0, 0];
      }
    }
    /**
     * Sets the scroll position.
     * @param position The new position in screen coordinates.
     */

  }, {
    key: "scrollToPosition",
    value: function scrollToPosition(position) {
      if (this.supportsScrolling()) {
        this.window.scrollTo(position[0], position[1]);
      }
    }
    /**
     * Scrolls to an element and attempts to focus the element.
     *
     * Note that the function name here is misleading in that the target string may be an ID for a
     * non-anchor element.
     *
     * @param target The ID of an element or name of the anchor.
     *
     * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
     * @see https://html.spec.whatwg.org/#scroll-to-fragid
     */

  }, {
    key: "scrollToAnchor",
    value: function scrollToAnchor(target) {
      if (!this.supportsScrolling()) {
        return;
      } // TODO(atscott): The correct behavior for `getElementsByName` would be to also verify that the
      // element is an anchor. However, this could be considered a breaking change and should be
      // done in a major version.


      var elSelected = findAnchorFromDocument(this.document, target);

      if (elSelected) {
        this.scrollToElement(elSelected); // After scrolling to the element, the spec dictates that we follow the focus steps for the
        // target. Rather than following the robust steps, simply attempt focus.

        this.attemptFocus(elSelected);
      }
    }
    /**
     * Disables automatic scroll restoration provided by the browser.
     */

  }, {
    key: "setHistoryScrollRestoration",
    value: function setHistoryScrollRestoration(scrollRestoration) {
      if (this.supportScrollRestoration()) {
        var history = this.window.history;

        if (history && history.scrollRestoration) {
          history.scrollRestoration = scrollRestoration;
        }
      }
    }
    /**
     * Scrolls to an element using the native offset and the specified offset set on this scroller.
     *
     * The offset can be used when we know that there is a floating header and scrolling naively to an
     * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
     */

  }, {
    key: "scrollToElement",
    value: function scrollToElement(el) {
      var rect = el.getBoundingClientRect();
      var left = rect.left + this.window.pageXOffset;
      var top = rect.top + this.window.pageYOffset;
      var offset = this.offset();
      this.window.scrollTo(left - offset[0], top - offset[1]);
    }
    /**
     * Calls `focus` on the `focusTarget` and returns `true` if the element was focused successfully.
     *
     * If `false`, further steps may be necessary to determine a valid substitute to be focused
     * instead.
     *
     * @see https://html.spec.whatwg.org/#get-the-focusable-area
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus
     * @see https://html.spec.whatwg.org/#focusable-area
     */

  }, {
    key: "attemptFocus",
    value: function attemptFocus(focusTarget) {
      focusTarget.focus();
      return this.document.activeElement === focusTarget;
    }
    /**
     * We only support scroll restoration when we can get a hold of window.
     * This means that we do not support this behavior when running in a web worker.
     *
     * Lifting this restriction right now would require more changes in the dom adapter.
     * Since webworkers aren't widely used, we will lift it once RouterScroller is
     * battle-tested.
     */

  }, {
    key: "supportScrollRestoration",
    value: function supportScrollRestoration() {
      try {
        if (!this.supportsScrolling()) {
          return false;
        } // The `scrollRestoration` property could be on the `history` instance or its prototype.


        var scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) || getScrollRestorationProperty(Object.getPrototypeOf(this.window.history)); // We can write to the `scrollRestoration` property if it is a writable data field or it has a
        // setter function.

        return !!scrollRestorationDescriptor && !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);
      } catch (_a) {
        return false;
      }
    }
  }, {
    key: "supportsScrolling",
    value: function supportsScrolling() {
      try {
        return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;
      } catch (_a) {
        return false;
      }
    }
  }]);

  return BrowserViewportScroller;
}();

function getScrollRestorationProperty(obj) {
  return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');
}

function findAnchorFromDocument(document, target) {
  var documentResult = document.getElementById(target) || document.getElementsByName(target)[0];

  if (documentResult) {
    return documentResult;
  } // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we
  // have to traverse the DOM manually and do the lookup through the shadow roots.


  if (typeof document.createTreeWalker === 'function' && document.body && (document.body.createShadowRoot || document.body.attachShadow)) {
    var treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);
    var currentNode = treeWalker.currentNode;

    while (currentNode) {
      var shadowRoot = currentNode.shadowRoot;

      if (shadowRoot) {
        // Note that `ShadowRoot` doesn't support `getElementsByName`
        // so we have to fall back to `querySelector`.
        var result = shadowRoot.getElementById(target) || shadowRoot.querySelector("[name=\"".concat(target, "\"]"));

        if (result) {
          return result;
        }
      }

      currentNode = treeWalker.nextNode();
    }
  }

  return null;
}
/**
 * Provides an empty implementation of the viewport scroller.
 */


var NullViewportScroller = /*#__PURE__*/function () {
  function NullViewportScroller() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NullViewportScroller);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NullViewportScroller, [{
    key: "setOffset",
    value:
    /**
     * Empty implementation
     */
    function setOffset(offset) {}
    /**
     * Empty implementation
     */

  }, {
    key: "getScrollPosition",
    value: function getScrollPosition() {
      return [0, 0];
    }
    /**
     * Empty implementation
     */

  }, {
    key: "scrollToPosition",
    value: function scrollToPosition(position) {}
    /**
     * Empty implementation
     */

  }, {
    key: "scrollToAnchor",
    value: function scrollToAnchor(anchor) {}
    /**
     * Empty implementation
     */

  }, {
    key: "setHistoryScrollRestoration",
    value: function setHistoryScrollRestoration(scrollRestoration) {}
  }]);

  return NullViewportScroller;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * @publicApi
 */


var XhrFactory = function XhrFactory() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, XhrFactory);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 34301:
/*!*******************************************************!*\
  !*** ./node_modules/@angular/common/fesm2015/http.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTTP_INTERCEPTORS": function() { return /* binding */ HTTP_INTERCEPTORS; },
/* harmony export */   "HttpBackend": function() { return /* binding */ HttpBackend; },
/* harmony export */   "HttpClient": function() { return /* binding */ HttpClient; },
/* harmony export */   "HttpClientJsonpModule": function() { return /* binding */ HttpClientJsonpModule; },
/* harmony export */   "HttpClientModule": function() { return /* binding */ HttpClientModule; },
/* harmony export */   "HttpClientXsrfModule": function() { return /* binding */ HttpClientXsrfModule; },
/* harmony export */   "HttpContext": function() { return /* binding */ HttpContext; },
/* harmony export */   "HttpContextToken": function() { return /* binding */ HttpContextToken; },
/* harmony export */   "HttpErrorResponse": function() { return /* binding */ HttpErrorResponse; },
/* harmony export */   "HttpEventType": function() { return /* binding */ HttpEventType; },
/* harmony export */   "HttpHandler": function() { return /* binding */ HttpHandler; },
/* harmony export */   "HttpHeaderResponse": function() { return /* binding */ HttpHeaderResponse; },
/* harmony export */   "HttpHeaders": function() { return /* binding */ HttpHeaders; },
/* harmony export */   "HttpParams": function() { return /* binding */ HttpParams; },
/* harmony export */   "HttpRequest": function() { return /* binding */ HttpRequest; },
/* harmony export */   "HttpResponse": function() { return /* binding */ HttpResponse; },
/* harmony export */   "HttpResponseBase": function() { return /* binding */ HttpResponseBase; },
/* harmony export */   "HttpUrlEncodingCodec": function() { return /* binding */ HttpUrlEncodingCodec; },
/* harmony export */   "HttpXhrBackend": function() { return /* binding */ HttpXhrBackend; },
/* harmony export */   "HttpXsrfTokenExtractor": function() { return /* binding */ HttpXsrfTokenExtractor; },
/* harmony export */   "JsonpClientBackend": function() { return /* binding */ JsonpClientBackend; },
/* harmony export */   "JsonpInterceptor": function() { return /* binding */ JsonpInterceptor; },
/* harmony export */   "XhrFactory": function() { return /* binding */ XhrFactory; },
/* harmony export */   "ɵHttpInterceptingHandler": function() { return /* binding */ HttpInterceptingHandler; },
/* harmony export */   "ɵangular_packages_common_http_http_a": function() { return /* binding */ NoopInterceptor; },
/* harmony export */   "ɵangular_packages_common_http_http_b": function() { return /* binding */ JsonpCallbackContext; },
/* harmony export */   "ɵangular_packages_common_http_http_c": function() { return /* binding */ jsonpCallbackContext; },
/* harmony export */   "ɵangular_packages_common_http_http_d": function() { return /* binding */ XSRF_COOKIE_NAME; },
/* harmony export */   "ɵangular_packages_common_http_http_e": function() { return /* binding */ XSRF_HEADER_NAME; },
/* harmony export */   "ɵangular_packages_common_http_http_f": function() { return /* binding */ HttpXsrfCookieExtractor; },
/* harmony export */   "ɵangular_packages_common_http_http_g": function() { return /* binding */ HttpXsrfInterceptor; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 81134);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 25160);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 56816);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 9170);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 33927);







/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 * @publicApi
 */




var HttpHandler = function HttpHandler() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpHandler);
};
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 * @publicApi
 */


var HttpBackend = function HttpBackend() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpBackend);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents the header configuration options for an HTTP request.
 * Instances are immutable. Modifying methods return a cloned
 * instance with the change. The original object is never changed.
 *
 * @publicApi
 */


var HttpHeaders = /*#__PURE__*/function () {
  /**  Constructs a new HTTP header object with the given values.*/
  function HttpHeaders(headers) {
    var _this = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpHeaders);

    /**
     * Internal map of lowercased header names to the normalized
     * form of the name (the form seen first).
     */
    this.normalizedNames = new Map();
    /**
     * Queued updates to be materialized the next initialization.
     */

    this.lazyUpdate = null;

    if (!headers) {
      this.headers = new Map();
    } else if (typeof headers === 'string') {
      this.lazyInit = function () {
        _this.headers = new Map();
        headers.split('\n').forEach(function (line) {
          var index = line.indexOf(':');

          if (index > 0) {
            var name = line.slice(0, index);
            var key = name.toLowerCase();
            var value = line.slice(index + 1).trim();

            _this.maybeSetNormalizedName(name, key);

            if (_this.headers.has(key)) {
              _this.headers.get(key).push(value);
            } else {
              _this.headers.set(key, [value]);
            }
          }
        });
      };
    } else {
      this.lazyInit = function () {
        _this.headers = new Map();
        Object.keys(headers).forEach(function (name) {
          var values = headers[name];
          var key = name.toLowerCase();

          if (typeof values === 'string') {
            values = [values];
          }

          if (values.length > 0) {
            _this.headers.set(key, values);

            _this.maybeSetNormalizedName(name, key);
          }
        });
      };
    }
  }
  /**
   * Checks for existence of a given header.
   *
   * @param name The header name to check for existence.
   *
   * @returns True if the header exists, false otherwise.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpHeaders, [{
    key: "has",
    value: function has(name) {
      this.init();
      return this.headers.has(name.toLowerCase());
    }
    /**
     * Retrieves the first value of a given header.
     *
     * @param name The header name.
     *
     * @returns The value string if the header exists, null otherwise
     */

  }, {
    key: "get",
    value: function get(name) {
      this.init();
      var values = this.headers.get(name.toLowerCase());
      return values && values.length > 0 ? values[0] : null;
    }
    /**
     * Retrieves the names of the headers.
     *
     * @returns A list of header names.
     */

  }, {
    key: "keys",
    value: function keys() {
      this.init();
      return Array.from(this.normalizedNames.values());
    }
    /**
     * Retrieves a list of values for a given header.
     *
     * @param name The header name from which to retrieve values.
     *
     * @returns A string of values if the header exists, null otherwise.
     */

  }, {
    key: "getAll",
    value: function getAll(name) {
      this.init();
      return this.headers.get(name.toLowerCase()) || null;
    }
    /**
     * Appends a new value to the existing set of values for a header
     * and returns them in a clone of the original instance.
     *
     * @param name The header name for which to append the values.
     * @param value The value to append.
     *
     * @returns A clone of the HTTP headers object with the value appended to the given header.
     */

  }, {
    key: "append",
    value: function append(name, value) {
      return this.clone({
        name: name,
        value: value,
        op: 'a'
      });
    }
    /**
     * Sets or modifies a value for a given header in a clone of the original instance.
     * If the header already exists, its value is replaced with the given value
     * in the returned object.
     *
     * @param name The header name.
     * @param value The value or values to set or overide for the given header.
     *
     * @returns A clone of the HTTP headers object with the newly set header value.
     */

  }, {
    key: "set",
    value: function set(name, value) {
      return this.clone({
        name: name,
        value: value,
        op: 's'
      });
    }
    /**
     * Deletes values for a given header in a clone of the original instance.
     *
     * @param name The header name.
     * @param value The value or values to delete for the given header.
     *
     * @returns A clone of the HTTP headers object with the given value deleted.
     */

  }, {
    key: "delete",
    value: function _delete(name, value) {
      return this.clone({
        name: name,
        value: value,
        op: 'd'
      });
    }
  }, {
    key: "maybeSetNormalizedName",
    value: function maybeSetNormalizedName(name, lcName) {
      if (!this.normalizedNames.has(lcName)) {
        this.normalizedNames.set(lcName, name);
      }
    }
  }, {
    key: "init",
    value: function init() {
      var _this2 = this;

      if (!!this.lazyInit) {
        if (this.lazyInit instanceof HttpHeaders) {
          this.copyFrom(this.lazyInit);
        } else {
          this.lazyInit();
        }

        this.lazyInit = null;

        if (!!this.lazyUpdate) {
          this.lazyUpdate.forEach(function (update) {
            return _this2.applyUpdate(update);
          });
          this.lazyUpdate = null;
        }
      }
    }
  }, {
    key: "copyFrom",
    value: function copyFrom(other) {
      var _this3 = this;

      other.init();
      Array.from(other.headers.keys()).forEach(function (key) {
        _this3.headers.set(key, other.headers.get(key));

        _this3.normalizedNames.set(key, other.normalizedNames.get(key));
      });
    }
  }, {
    key: "clone",
    value: function clone(update) {
      var clone = new HttpHeaders();
      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;
      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
      return clone;
    }
  }, {
    key: "applyUpdate",
    value: function applyUpdate(update) {
      var key = update.name.toLowerCase();

      switch (update.op) {
        case 'a':
        case 's':
          var value = update.value;

          if (typeof value === 'string') {
            value = [value];
          }

          if (value.length === 0) {
            return;
          }

          this.maybeSetNormalizedName(update.name, key);
          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
          base.push.apply(base, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(value));
          this.headers.set(key, base);
          break;

        case 'd':
          var toDelete = update.value;

          if (!toDelete) {
            this.headers.delete(key);
            this.normalizedNames.delete(key);
          } else {
            var existing = this.headers.get(key);

            if (!existing) {
              return;
            }

            existing = existing.filter(function (value) {
              return toDelete.indexOf(value) === -1;
            });

            if (existing.length === 0) {
              this.headers.delete(key);
              this.normalizedNames.delete(key);
            } else {
              this.headers.set(key, existing);
            }
          }

          break;
      }
    }
    /**
     * @internal
     */

  }, {
    key: "forEach",
    value: function forEach(fn) {
      var _this4 = this;

      this.init();
      Array.from(this.normalizedNames.keys()).forEach(function (key) {
        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));
      });
    }
  }]);

  return HttpHeaders;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides encoding and decoding of URL parameter and query-string values.
 *
 * Serializes and parses URL parameter keys and values to encode and decode them.
 * If you pass URL query parameters without encoding,
 * the query parameters can be misinterpreted at the receiving end.
 *
 *
 * @publicApi
 */


var HttpUrlEncodingCodec = /*#__PURE__*/function () {
  function HttpUrlEncodingCodec() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpUrlEncodingCodec);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpUrlEncodingCodec, [{
    key: "encodeKey",
    value:
    /**
     * Encodes a key name for a URL parameter or query-string.
     * @param key The key name.
     * @returns The encoded key name.
     */
    function encodeKey(key) {
      return standardEncoding(key);
    }
    /**
     * Encodes the value of a URL parameter or query-string.
     * @param value The value.
     * @returns The encoded value.
     */

  }, {
    key: "encodeValue",
    value: function encodeValue(value) {
      return standardEncoding(value);
    }
    /**
     * Decodes an encoded URL parameter or query-string key.
     * @param key The encoded key name.
     * @returns The decoded key name.
     */

  }, {
    key: "decodeKey",
    value: function decodeKey(key) {
      return decodeURIComponent(key);
    }
    /**
     * Decodes an encoded URL parameter or query-string value.
     * @param value The encoded value.
     * @returns The decoded value.
     */

  }, {
    key: "decodeValue",
    value: function decodeValue(value) {
      return decodeURIComponent(value);
    }
  }]);

  return HttpUrlEncodingCodec;
}();

function paramParser(rawParams, codec) {
  var map = new Map();

  if (rawParams.length > 0) {
    // The `window.location.search` can be used while creating an instance of the `HttpParams` class
    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`
    // may start with the `?` char, so we strip it if it's present.
    var params = rawParams.replace(/^\?/, '').split('&');
    params.forEach(function (param) {
      var eqIdx = param.indexOf('=');

      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],
          _ref2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__.default)(_ref, 2),
          key = _ref2[0],
          val = _ref2[1];

      var list = map.get(key) || [];
      list.push(val);
      map.set(key, list);
    });
  }

  return map;
}
/**
 * Encode input string with standard encodeURIComponent and then un-encode specific characters.
 */


var STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
var STANDARD_ENCODING_REPLACEMENTS = {
  '40': '@',
  '3A': ':',
  '24': '$',
  '2C': ',',
  '3B': ';',
  '2B': '+',
  '3D': '=',
  '3F': '?',
  '2F': '/'
};

function standardEncoding(v) {
  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {
    var _a;

    return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s;
  });
}

function valueToString(value) {
  return "".concat(value);
}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable; all mutation operations return a new instance.
 *
 * @publicApi
 */


var HttpParams = /*#__PURE__*/function () {
  function HttpParams() {
    var _this5 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpParams);

    this.updates = null;
    this.cloneFrom = null;
    this.encoder = options.encoder || new HttpUrlEncodingCodec();

    if (!!options.fromString) {
      if (!!options.fromObject) {
        throw new Error("Cannot specify both fromString and fromObject.");
      }

      this.map = paramParser(options.fromString, this.encoder);
    } else if (!!options.fromObject) {
      this.map = new Map();
      Object.keys(options.fromObject).forEach(function (key) {
        var value = options.fromObject[key];

        _this5.map.set(key, Array.isArray(value) ? value : [value]);
      });
    } else {
      this.map = null;
    }
  }
  /**
   * Reports whether the body includes one or more values for a given parameter.
   * @param param The parameter name.
   * @returns True if the parameter has one or more values,
   * false if it has no value or is not present.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpParams, [{
    key: "has",
    value: function has(param) {
      this.init();
      return this.map.has(param);
    }
    /**
     * Retrieves the first value for a parameter.
     * @param param The parameter name.
     * @returns The first value of the given parameter,
     * or `null` if the parameter is not present.
     */

  }, {
    key: "get",
    value: function get(param) {
      this.init();
      var res = this.map.get(param);
      return !!res ? res[0] : null;
    }
    /**
     * Retrieves all values for a  parameter.
     * @param param The parameter name.
     * @returns All values in a string array,
     * or `null` if the parameter not present.
     */

  }, {
    key: "getAll",
    value: function getAll(param) {
      this.init();
      return this.map.get(param) || null;
    }
    /**
     * Retrieves all the parameters for this body.
     * @returns The parameter names in a string array.
     */

  }, {
    key: "keys",
    value: function keys() {
      this.init();
      return Array.from(this.map.keys());
    }
    /**
     * Appends a new value to existing values for a parameter.
     * @param param The parameter name.
     * @param value The new value to add.
     * @return A new body with the appended value.
     */

  }, {
    key: "append",
    value: function append(param, value) {
      return this.clone({
        param: param,
        value: value,
        op: 'a'
      });
    }
    /**
     * Constructs a new body with appended values for the given parameter name.
     * @param params parameters and values
     * @return A new body with the new value.
     */

  }, {
    key: "appendAll",
    value: function appendAll(params) {
      var updates = [];
      Object.keys(params).forEach(function (param) {
        var value = params[param];

        if (Array.isArray(value)) {
          value.forEach(function (_value) {
            updates.push({
              param: param,
              value: _value,
              op: 'a'
            });
          });
        } else {
          updates.push({
            param: param,
            value: value,
            op: 'a'
          });
        }
      });
      return this.clone(updates);
    }
    /**
     * Replaces the value for a parameter.
     * @param param The parameter name.
     * @param value The new value.
     * @return A new body with the new value.
     */

  }, {
    key: "set",
    value: function set(param, value) {
      return this.clone({
        param: param,
        value: value,
        op: 's'
      });
    }
    /**
     * Removes a given value or all values from a parameter.
     * @param param The parameter name.
     * @param value The value to remove, if provided.
     * @return A new body with the given value removed, or with all values
     * removed if no value is specified.
     */

  }, {
    key: "delete",
    value: function _delete(param, value) {
      return this.clone({
        param: param,
        value: value,
        op: 'd'
      });
    }
    /**
     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     */

  }, {
    key: "toString",
    value: function toString() {
      var _this6 = this;

      this.init();
      return this.keys().map(function (key) {
        var eKey = _this6.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`
        // `b: []` produces `''`
        // `c: ['1', '2']` produces `'c=1&c=2'`


        return _this6.map.get(key).map(function (value) {
          return eKey + '=' + _this6.encoder.encodeValue(value);
        }).join('&');
      }) // filter out empty values because `b: []` produces `''`
      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
      .filter(function (param) {
        return param !== '';
      }).join('&');
    }
  }, {
    key: "clone",
    value: function clone(update) {
      var clone = new HttpParams({
        encoder: this.encoder
      });
      clone.cloneFrom = this.cloneFrom || this;
      clone.updates = (this.updates || []).concat(update);
      return clone;
    }
  }, {
    key: "init",
    value: function init() {
      var _this7 = this;

      if (this.map === null) {
        this.map = new Map();
      }

      if (this.cloneFrom !== null) {
        this.cloneFrom.init();
        this.cloneFrom.keys().forEach(function (key) {
          return _this7.map.set(key, _this7.cloneFrom.map.get(key));
        });
        this.updates.forEach(function (update) {
          switch (update.op) {
            case 'a':
            case 's':
              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];
              base.push(valueToString(update.value));

              _this7.map.set(update.param, base);

              break;

            case 'd':
              if (update.value !== undefined) {
                var _base = _this7.map.get(update.param) || [];

                var idx = _base.indexOf(valueToString(update.value));

                if (idx !== -1) {
                  _base.splice(idx, 1);
                }

                if (_base.length > 0) {
                  _this7.map.set(update.param, _base);
                } else {
                  _this7.map.delete(update.param);
                }
              } else {
                _this7.map.delete(update.param);

                break;
              }

          }
        });
        this.cloneFrom = this.updates = null;
      }
    }
  }]);

  return HttpParams;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A token used to manipulate and access values stored in `HttpContext`.
 *
 * @publicApi
 */


var HttpContextToken = function HttpContextToken(defaultValue) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpContextToken);

  this.defaultValue = defaultValue;
};
/**
 * Http context stores arbitrary user defined values and ensures type safety without
 * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.
 *
 * This context is mutable and is shared between cloned requests unless explicitly specified.
 *
 * @usageNotes
 *
 * ### Usage Example
 *
 * ```typescript
 * // inside cache.interceptors.ts
 * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);
 *
 * export class CacheInterceptor implements HttpInterceptor {
 *
 *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {
 *     if (req.context.get(IS_CACHE_ENABLED) === true) {
 *       return ...;
 *     }
 *     return delegate.handle(req);
 *   }
 * }
 *
 * // inside a service
 *
 * this.httpClient.get('/api/weather', {
 *   context: new HttpContext().set(IS_CACHE_ENABLED, true)
 * }).subscribe(...);
 * ```
 *
 * @publicApi
 */


var HttpContext = /*#__PURE__*/function () {
  function HttpContext() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpContext);

    this.map = new Map();
  }
  /**
   * Store a value in the context. If a value is already present it will be overwritten.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   * @param value The value to store.
   *
   * @returns A reference to itself for easy chaining.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpContext, [{
    key: "set",
    value: function set(token, value) {
      this.map.set(token, value);
      return this;
    }
    /**
     * Retrieve the value associated with the given token.
     *
     * @param token The reference to an instance of `HttpContextToken`.
     *
     * @returns The stored value or default if one is defined.
     */

  }, {
    key: "get",
    value: function get(token) {
      if (!this.map.has(token)) {
        this.map.set(token, token.defaultValue());
      }

      return this.map.get(token);
    }
    /**
     * Delete the value associated with the given token.
     *
     * @param token The reference to an instance of `HttpContextToken`.
     *
     * @returns A reference to itself for easy chaining.
     */

  }, {
    key: "delete",
    value: function _delete(token) {
      this.map.delete(token);
      return this;
    }
    /**
     * @returns a list of tokens currently stored in the context.
     */

  }, {
    key: "keys",
    value: function keys() {
      return this.map.keys();
    }
  }]);

  return HttpContext;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Determine whether the given HTTP method may include a body.
 */


function mightHaveBody(method) {
  switch (method) {
    case 'DELETE':
    case 'GET':
    case 'HEAD':
    case 'OPTIONS':
    case 'JSONP':
      return false;

    default:
      return true;
  }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 */


function isArrayBuffer(value) {
  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 */


function isBlob(value) {
  return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 */


function isFormData(value) {
  return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * Safely assert whether the given value is a URLSearchParams instance.
 *
 * In some execution environments URLSearchParams is not defined.
 */


function isUrlSearchParams(value) {
  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 * @publicApi
 */


var HttpRequest = /*#__PURE__*/function () {
  function HttpRequest(method, url, third, fourth) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpRequest);

    this.url = url;
    /**
     * The request body, or `null` if one isn't set.
     *
     * Bodies are not enforced to be immutable, as they can include a reference to any
     * user-defined data type. However, interceptors should take care to preserve
     * idempotence by treating them as such.
     */

    this.body = null;
    /**
     * Whether this request should be made in a way that exposes progress events.
     *
     * Progress events are expensive (change detection runs on each event) and so
     * they should only be requested if the consumer intends to monitor them.
     */

    this.reportProgress = false;
    /**
     * Whether this request should be sent with outgoing credentials (cookies).
     */

    this.withCredentials = false;
    /**
     * The expected response type of the server.
     *
     * This is used to parse the response appropriately before returning it to
     * the requestee.
     */

    this.responseType = 'json';
    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit
    // options, if any.

    var options; // Check whether a body argument is expected. The only valid way to omit
    // the body argument is to use a known no-body method like GET.

    if (mightHaveBody(this.method) || !!fourth) {
      // Body is the third argument, options are the fourth.
      this.body = third !== undefined ? third : null;
      options = fourth;
    } else {
      // No body required, options are the third argument. The body stays null.
      options = third;
    } // If options have been passed, interpret them.


    if (options) {
      // Normalize reportProgress and withCredentials.
      this.reportProgress = !!options.reportProgress;
      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.

      if (!!options.responseType) {
        this.responseType = options.responseType;
      } // Override headers if they're provided.


      if (!!options.headers) {
        this.headers = options.headers;
      }

      if (!!options.context) {
        this.context = options.context;
      }

      if (!!options.params) {
        this.params = options.params;
      }
    } // If no headers have been passed in, construct a new HttpHeaders instance.


    if (!this.headers) {
      this.headers = new HttpHeaders();
    } // If no context have been passed in, construct a new HttpContext instance.


    if (!this.context) {
      this.context = new HttpContext();
    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.


    if (!this.params) {
      this.params = new HttpParams();
      this.urlWithParams = url;
    } else {
      // Encode the parameters to a string in preparation for inclusion in the URL.
      var params = this.params.toString();

      if (params.length === 0) {
        // No parameters, the visible URL is just the URL given at creation time.
        this.urlWithParams = url;
      } else {
        // Does the URL already have query parameters? Look for '?'.
        var qIdx = url.indexOf('?'); // There are 3 cases to handle:
        // 1) No existing parameters -> append '?' followed by params.
        // 2) '?' exists and is followed by existing query string ->
        //    append '&' followed by params.
        // 3) '?' exists at the end of the url -> append params directly.
        // This basically amounts to determining the character, if any, with
        // which to join the URL and parameters.

        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';
        this.urlWithParams = url + sep + params;
      }
    }
  }
  /**
   * Transform the free-form body into a serialized format suitable for
   * transmission to the server.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpRequest, [{
    key: "serializeBody",
    value: function serializeBody() {
      // If no body is present, no need to serialize it.
      if (this.body === null) {
        return null;
      } // Check whether the body is already in a serialized form. If so,
      // it can just be returned directly.


      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {
        return this.body;
      } // Check whether the body is an instance of HttpUrlEncodedParams.


      if (this.body instanceof HttpParams) {
        return this.body.toString();
      } // Check whether the body is an object or array, and serialize with JSON if so.


      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {
        return JSON.stringify(this.body);
      } // Fall back on toString() for everything else.


      return this.body.toString();
    }
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     */

  }, {
    key: "detectContentTypeHeader",
    value: function detectContentTypeHeader() {
      // An empty body has no content type.
      if (this.body === null) {
        return null;
      } // FormData bodies rely on the browser's content type assignment.


      if (isFormData(this.body)) {
        return null;
      } // Blobs usually have their own content type. If it doesn't, then
      // no type can be inferred.


      if (isBlob(this.body)) {
        return this.body.type || null;
      } // Array buffers have unknown contents and thus no type can be inferred.


      if (isArrayBuffer(this.body)) {
        return null;
      } // Technically, strings could be a form of JSON data, but it's safe enough
      // to assume they're plain strings.


      if (typeof this.body === 'string') {
        return 'text/plain';
      } // `HttpUrlEncodedParams` has its own content-type.


      if (this.body instanceof HttpParams) {
        return 'application/x-www-form-urlencoded;charset=UTF-8';
      } // Arrays, objects, boolean and numbers will be encoded as JSON.


      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {
        return 'application/json';
      } // No type could be inferred.


      return null;
    }
  }, {
    key: "clone",
    value: function clone() {
      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _a; // For method, url, and responseType, take the current value unless
      // it is overridden in the update hash.


      var method = update.method || this.method;
      var url = update.url || this.url;
      var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means
      // whatever current body is present is being overridden with an empty
      // body, whereas an `undefined` value in update.body implies no
      // override.

      var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between
      // `false` and `undefined` in the update args.

      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;
      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or
      // `setParams` are used.

      var headers = update.headers || this.headers;
      var params = update.params || this.params; // Pass on context if needed

      var context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.

      if (update.setHeaders !== undefined) {
        // Set every requested header.
        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {
          return headers.set(name, update.setHeaders[name]);
        }, headers);
      } // Check whether the caller has asked to set params.


      if (update.setParams) {
        // Set every requested param.
        params = Object.keys(update.setParams).reduce(function (params, param) {
          return params.set(param, update.setParams[param]);
        }, params);
      } // Finally, construct the new HttpRequest using the pieces from above.


      return new HttpRequest(method, url, body, {
        params: params,
        headers: headers,
        context: context,
        reportProgress: reportProgress,
        responseType: responseType,
        withCredentials: withCredentials
      });
    }
  }]);

  return HttpRequest;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Type enumeration for the different kinds of `HttpEvent`.
 *
 * @publicApi
 */


var HttpEventType;

(function (HttpEventType) {
  /**
   * The request was sent out over the wire.
   */
  HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
  /**
   * An upload progress event was received.
   */

  HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
  /**
   * The response status code and headers were received.
   */

  HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
  /**
   * A download progress event was received.
   */

  HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
  /**
   * The full response including the body was received.
   */

  HttpEventType[HttpEventType["Response"] = 4] = "Response";
  /**
   * A custom event from an interceptor or a backend.
   */

  HttpEventType[HttpEventType["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 * @publicApi
 */


var HttpResponseBase =
/**
 * Super-constructor for all responses.
 *
 * The single parameter accepted is an initialization hash. Any properties
 * of the response passed there will override the default values.
 */
function HttpResponseBase(init) {
  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpResponseBase);

  // If the hash has values passed, use them to initialize the response.
  // Otherwise use the default values.
  this.headers = init.headers || new HttpHeaders();
  this.status = init.status !== undefined ? init.status : defaultStatus;
  this.statusText = init.statusText || defaultStatusText;
  this.url = init.url || null; // Cache the ok value to avoid defining a getter.

  this.ok = this.status >= 200 && this.status < 300;
};
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 * @publicApi
 */


var HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(HttpHeaderResponse, _HttpResponseBase);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(HttpHeaderResponse);

  /**
   * Create a new `HttpHeaderResponse` with the given parameters.
   */
  function HttpHeaderResponse() {
    var _this8;

    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpHeaderResponse);

    _this8 = _super.call(this, init);
    _this8.type = HttpEventType.ResponseHeader;
    return _this8;
  }
  /**
   * Copy this `HttpHeaderResponse`, overriding its contents with the
   * given parameter hash.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpHeaderResponse, [{
    key: "clone",
    value: function clone() {
      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Perform a straightforward initialization of the new HttpHeaderResponse,
      // overriding the current parameters with new ones if given.
      return new HttpHeaderResponse({
        headers: update.headers || this.headers,
        status: update.status !== undefined ? update.status : this.status,
        statusText: update.statusText || this.statusText,
        url: update.url || this.url || undefined
      });
    }
  }]);

  return HttpHeaderResponse;
}(HttpResponseBase);
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 * @publicApi
 */


var HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(HttpResponse, _HttpResponseBase2);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(HttpResponse);

  /**
   * Construct a new `HttpResponse`.
   */
  function HttpResponse() {
    var _this9;

    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpResponse);

    _this9 = _super2.call(this, init);
    _this9.type = HttpEventType.Response;
    _this9.body = init.body !== undefined ? init.body : null;
    return _this9;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpResponse, [{
    key: "clone",
    value: function clone() {
      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new HttpResponse({
        body: update.body !== undefined ? update.body : this.body,
        headers: update.headers || this.headers,
        status: update.status !== undefined ? update.status : this.status,
        statusText: update.statusText || this.statusText,
        url: update.url || this.url || undefined
      });
    }
  }]);

  return HttpResponse;
}(HttpResponseBase);
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 * @publicApi
 */


var HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(HttpErrorResponse, _HttpResponseBase3);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(HttpErrorResponse);

  function HttpErrorResponse(init) {
    var _this10;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpErrorResponse);

    // Initialize with a default status of 0 / Unknown Error.
    _this10 = _super3.call(this, init, 0, 'Unknown Error');
    _this10.name = 'HttpErrorResponse';
    /**
     * Errors are never okay, even when the status code is in the 2xx success range.
     */

    _this10.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was
    // a protocol-level failure of some sort. Either the request failed in transit
    // or the server returned an unsuccessful status code.

    if (_this10.status >= 200 && _this10.status < 300) {
      _this10.message = "Http failure during parsing for ".concat(init.url || '(unknown url)');
    } else {
      _this10.message = "Http failure response for ".concat(init.url || '(unknown url)', ": ").concat(init.status, " ").concat(init.statusText);
    }

    _this10.error = init.error || null;
    return _this10;
  }

  return HttpErrorResponse;
}(HttpResponseBase);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. This function clones the object and adds the body.
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.
 *
 */


function addBody(options, body) {
  return {
    body: body,
    headers: options.headers,
    context: options.context,
    observe: options.observe,
    params: options.params,
    reportProgress: options.reportProgress,
    responseType: options.responseType,
    withCredentials: options.withCredentials
  };
}
/**
 * Performs HTTP requests.
 * This service is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies based on
 * the signature that is called (mainly the values of `observe` and `responseType`).
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.

 *
 * @usageNotes
 * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
 *
 * ### HTTP Request Example
 *
 * ```
 *  // GET heroes whose name contains search term
 * searchHeroes(term: string): observable<Hero[]>{
 *
 *  const params = new HttpParams({fromString: 'name=term'});
 *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
 * }
 * ```
 *
 * Alternatively, the parameter string can be used without invoking HttpParams
 * by directly joining to the URL.
 * ```
 * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});
 * ```
 *
 *
 * ### JSONP Example
 * ```
 * requestJsonp(url, callback = 'callback') {
 *  return this.httpClient.jsonp(this.heroesURL, callback);
 * }
 * ```
 *
 * ### PATCH Example
 * ```
 * // PATCH one of the heroes' name
 * patchHero (id: number, heroName: string): Observable<{}> {
 * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
 *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
 *    .pipe(catchError(this.handleError('patchHero')));
 * }
 * ```
 *
 * @see [HTTP Guide](guide/http)
 * @see [HTTP Request](api/common/http/HttpRequest)
 *
 * @publicApi
 */


var HttpClient = /*#__PURE__*/function () {
  function HttpClient(handler) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpClient);

    this.handler = handler;
  }
  /**
   * Constructs an observable for a generic HTTP request that, when subscribed,
   * fires the request through the chain of registered interceptors and on to the
   * server.
   *
   * You can pass an `HttpRequest` directly as the only parameter. In this case,
   * the call returns an observable of the raw `HttpEvent` stream.
   *
   * Alternatively you can pass an HTTP method as the first parameter,
   * a URL string as the second, and an options hash containing the request body as the third.
   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
   * type of returned observable.
   *   * The `responseType` value determines how a successful response body is parsed.
   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
   * object as a type parameter to the call.
   *
   * The `observe` value determines the return type, according to what you are interested in
   * observing.
   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
   * progress events by default.
   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
   * where the `T` parameter depends on the `responseType` and any optionally provided type
   * parameter.
   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
   *
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpClient, [{
    key: "request",
    value: function request(first, url) {
      var _this11 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var req; // First, check whether the primary argument is an instance of `HttpRequest`.

      if (first instanceof HttpRequest) {
        // It is. The other arguments must be undefined (per the signatures) and can be
        // ignored.
        req = first;
      } else {
        // It's a string, so it represents a URL. Construct a request based on it,
        // and incorporate the remaining arguments (assuming `GET` unless a method is
        // provided.
        // Figure out the headers.
        var headers = undefined;

        if (options.headers instanceof HttpHeaders) {
          headers = options.headers;
        } else {
          headers = new HttpHeaders(options.headers);
        } // Sort out parameters.


        var params = undefined;

        if (!!options.params) {
          if (options.params instanceof HttpParams) {
            params = options.params;
          } else {
            params = new HttpParams({
              fromObject: options.params
            });
          }
        } // Construct the request.


        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {
          headers: headers,
          context: options.context,
          params: params,
          reportProgress: options.reportProgress,
          // By default, JSON is assumed to be returned for all calls.
          responseType: options.responseType || 'json',
          withCredentials: options.withCredentials
        });
      } // Start with an Observable.of() the initial request, and run the handler (which
      // includes all interceptors) inside a concatMap(). This way, the handler runs
      // inside an Observable chain, which causes interceptors to be re-run on every
      // subscription (this also makes retries re-run the handler, including interceptors).


      var events$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(req).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.concatMap)(function (req) {
        return _this11.handler.handle(req);
      })); // If coming via the API signature which accepts a previously constructed HttpRequest,
      // the only option is to get the event stream. Otherwise, return the event stream if
      // that is what was requested.

      if (first instanceof HttpRequest || options.observe === 'events') {
        return events$;
      } // The requested stream contains either the full response or the body. In either
      // case, the first step is to filter the event stream to extract a stream of
      // responses(s).


      var res$ = events$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(function (event) {
        return event instanceof HttpResponse;
      })); // Decide which stream to return.

      switch (options.observe || 'body') {
        case 'body':
          // The requested stream is the body. Map the response stream to the response
          // body. This could be done more simply, but a misbehaving interceptor might
          // transform the response body into a different format and ignore the requested
          // responseType. Guard against this by validating that the response is of the
          // requested type.
          switch (req.responseType) {
            case 'arraybuffer':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(function (res) {
                // Validate that the body is an ArrayBuffer.
                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                  throw new Error('Response is not an ArrayBuffer.');
                }

                return res.body;
              }));

            case 'blob':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(function (res) {
                // Validate that the body is a Blob.
                if (res.body !== null && !(res.body instanceof Blob)) {
                  throw new Error('Response is not a Blob.');
                }

                return res.body;
              }));

            case 'text':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(function (res) {
                // Validate that the body is a string.
                if (res.body !== null && typeof res.body !== 'string') {
                  throw new Error('Response is not a string.');
                }

                return res.body;
              }));

            case 'json':
            default:
              // No validation needed for JSON responses, as they can be of any type.
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(function (res) {
                return res.body;
              }));
          }

        case 'response':
          // The response stream was requested directly, so return it.
          return res$;

        default:
          // Guard against new future observe types being added.
          throw new Error("Unreachable: unhandled observe type ".concat(options.observe, "}"));
      }
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `DELETE` request to execute on the server. See the individual overloads for
     * details on the return type.
     *
     * @param url     The endpoint URL.
     * @param options The HTTP options to send with the request.
     *
     */

  }, {
    key: "delete",
    value: function _delete(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.request('DELETE', url, options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `GET` request to execute on the server. See the individual overloads for
     * details on the return type.
     */

  }, {
    key: "get",
    value: function get(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.request('GET', url, options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `HEAD` request to execute on the server. The `HEAD` method returns
     * meta information about the resource without transferring the
     * resource itself. See the individual overloads for
     * details on the return type.
     */

  }, {
    key: "head",
    value: function head(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.request('HEAD', url, options);
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes a request with the special method
     * `JSONP` to be dispatched via the interceptor pipeline.
     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
     * API endpoints that don't support newer,
     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
     * requests even if the API endpoint is not located on the same domain (origin) as the client-side
     * application making the request.
     * The endpoint API must support JSONP callback for JSONP requests to work.
     * The resource API returns the JSON response wrapped in a callback function.
     * You can pass the callback function name as one of the query parameters.
     * Note that JSONP requests can only be used with `GET` requests.
     *
     * @param url The resource URL.
     * @param callbackParam The callback function name.
     *
     */

  }, {
    key: "jsonp",
    value: function jsonp(url, callbackParam) {
      return this.request('JSONP', url, {
        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
        observe: 'body',
        responseType: 'json'
      });
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes the configured
     * `OPTIONS` request to execute on the server. This method allows the client
     * to determine the supported HTTP methods and other capabilites of an endpoint,
     * without implying a resource action. See the individual overloads for
     * details on the return type.
     */

  }, {
    key: "options",
    value: function options(url) {
      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.request('OPTIONS', url, _options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PATCH` request to execute on the server. See the individual overloads for
     * details on the return type.
     */

  }, {
    key: "patch",
    value: function patch(url, body) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request('PATCH', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `POST` request to execute on the server. The server responds with the location of
     * the replaced resource. See the individual overloads for
     * details on the return type.
     */

  }, {
    key: "post",
    value: function post(url, body) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request('POST', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
     * with a new set of values.
     * See the individual overloads for details on the return type.
     */

  }, {
    key: "put",
    value: function put(url, body) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request('PUT', url, addBody(options, body));
    }
  }]);

  return HttpClient;
}();

HttpClient.ɵfac = function HttpClient_Factory(t) {
  return new (t || HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](HttpHandler));
};

HttpClient.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: HttpClient,
  factory: HttpClient.ɵfac
});

HttpClient.ctorParameters = function () {
  return [{
    type: HttpHandler
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpClient, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: HttpHandler
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 *
 */


var HttpInterceptorHandler = /*#__PURE__*/function () {
  function HttpInterceptorHandler(next, interceptor) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpInterceptorHandler);

    this.next = next;
    this.interceptor = interceptor;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpInterceptorHandler, [{
    key: "handle",
    value: function handle(req) {
      return this.interceptor.intercept(req, this.next);
    }
  }]);

  return HttpInterceptorHandler;
}();
/**
 * A multi-provider token that represents the array of registered
 * `HttpInterceptor` objects.
 *
 * @publicApi
 */


var HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('HTTP_INTERCEPTORS');

var NoopInterceptor = /*#__PURE__*/function () {
  function NoopInterceptor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NoopInterceptor);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NoopInterceptor, [{
    key: "intercept",
    value: function intercept(req, next) {
      return next.handle(req);
    }
  }]);

  return NoopInterceptor;
}();

NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {
  return new (t || NoopInterceptor)();
};

NoopInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: NoopInterceptor,
  factory: NoopInterceptor.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](NoopInterceptor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.


var nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.

var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.

var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 */

var JsonpCallbackContext = function JsonpCallbackContext() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, JsonpCallbackContext);
};
/**
 * Processes an `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 * @see `HttpHandler`
 * @see `HttpXhrBackend`
 *
 * @publicApi
 */


var JsonpClientBackend = /*#__PURE__*/function () {
  function JsonpClientBackend(callbackMap, document) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, JsonpClientBackend);

    this.callbackMap = callbackMap;
    this.document = document;
    /**
     * A resolved promise that can be used to schedule microtasks in the event handlers.
     */

    this.resolvedPromise = Promise.resolve();
  }
  /**
   * Get the name of the next callback method, by incrementing the global `nextRequestId`.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(JsonpClientBackend, [{
    key: "nextCallback",
    value: function nextCallback() {
      return "ng_jsonp_callback_".concat(nextRequestId++);
    }
    /**
     * Processes a JSONP request and returns an event stream of the results.
     * @param req The request object.
     * @returns An observable of the response events.
     *
     */

  }, {
    key: "handle",
    value: function handle(req) {
      var _this12 = this;

      // Firstly, check both the method and response type. If either doesn't match
      // then the request was improperly routed here and cannot be handled.
      if (req.method !== 'JSONP') {
        throw new Error(JSONP_ERR_WRONG_METHOD);
      } else if (req.responseType !== 'json') {
        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
      } // Everything else happens inside the Observable boundary.


      return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (observer) {
        // The first step to make a request is to generate the callback name, and replace the
        // callback placeholder in the URL with the name. Care has to be taken here to ensure
        // a trailing &, if matched, gets inserted back into the URL in the correct place.
        var callback = _this12.nextCallback();

        var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=".concat(callback, "$1")); // Construct the <script> tag and point it at the URL.

        var node = _this12.document.createElement('script');

        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables
        // are closed over and track state across those callbacks.
        // The response object, if one has been received, or null otherwise.

        var body = null; // Whether the response callback has been called.

        var finished = false; // Whether the request has been cancelled (and thus any other callbacks)
        // should be ignored.

        var cancelled = false; // Set the response callback in this.callbackMap (which will be the window
        // object in the browser. The script being loaded via the <script> tag will
        // eventually call this callback.

        _this12.callbackMap[callback] = function (data) {
          // Data has been received from the JSONP script. Firstly, delete this callback.
          delete _this12.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.

          if (cancelled) {
            return;
          } // Set state to indicate data was received.


          body = data;
          finished = true;
        }; // cleanup() is a utility closure that removes the <script> from the page and
        // the response callback from the window. This logic is used in both the
        // success, error, and cancellation paths, so it's extracted out for convenience.


        var cleanup = function cleanup() {
          // Remove the <script> tag if it's still on the page.
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          } // Remove the response callback from the callbackMap (window object in the
          // browser).


          delete _this12.callbackMap[callback];
        }; // onLoad() is the success callback which runs after the response callback
        // if the JSONP script loads successfully. The event itself is unimportant.
        // If something went wrong, onLoad() may run without the response callback
        // having been invoked.


        var onLoad = function onLoad(event) {
          // Do nothing if the request has been cancelled.
          if (cancelled) {
            return;
          } // We wrap it in an extra Promise, to ensure the microtask
          // is scheduled after the loaded endpoint has executed any potential microtask itself,
          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496


          _this12.resolvedPromise.then(function () {
            // Cleanup the page.
            cleanup(); // Check whether the response callback has run.

            if (!finished) {
              // It hasn't, something went wrong with the request. Return an error via
              // the Observable error path. All JSONP errors have status 0.
              observer.error(new HttpErrorResponse({
                url: url,
                status: 0,
                statusText: 'JSONP Error',
                error: new Error(JSONP_ERR_NO_CALLBACK)
              }));
              return;
            } // Success. body either contains the response body or null if none was
            // returned.


            observer.next(new HttpResponse({
              body: body,
              status: 200
              /* Ok */
              ,
              statusText: 'OK',
              url: url
            })); // Complete the stream, the response is over.

            observer.complete();
          });
        }; // onError() is the error callback, which runs if the script returned generates
        // a Javascript error. It emits the error via the Observable error channel as
        // a HttpErrorResponse.


        var onError = function onError(error) {
          // If the request was already cancelled, no need to emit anything.
          if (cancelled) {
            return;
          }

          cleanup(); // Wrap the error in a HttpErrorResponse.

          observer.error(new HttpErrorResponse({
            error: error,
            status: 0,
            statusText: 'JSONP Error',
            url: url
          }));
        }; // Subscribe to both the success (load) and error events on the <script> tag,
        // and add it to the page.


        node.addEventListener('load', onLoad);
        node.addEventListener('error', onError);

        _this12.document.body.appendChild(node); // The request has now been successfully sent.


        observer.next({
          type: HttpEventType.Sent
        }); // Cancellation handler.

        return function () {
          // Track the cancellation so event listeners won't do anything even if already scheduled.
          cancelled = true; // Remove the event listeners so they won't run if the events later fire.

          node.removeEventListener('load', onLoad);
          node.removeEventListener('error', onError); // And finally, clean up the page.

          cleanup();
        };
      });
    }
  }]);

  return JsonpClientBackend;
}();

JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {
  return new (t || JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT));
};

JsonpClientBackend.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: JsonpClientBackend,
  factory: JsonpClientBackend.ɵfac
});

JsonpClientBackend.ctorParameters = function () {
  return [{
    type: JsonpCallbackContext
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](JsonpClientBackend, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: JsonpCallbackContext
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * Identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 * @see `HttpInterceptor`
 *
 * @publicApi
 */


var JsonpInterceptor = /*#__PURE__*/function () {
  function JsonpInterceptor(jsonp) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, JsonpInterceptor);

    this.jsonp = jsonp;
  }
  /**
   * Identifies and handles a given JSONP request.
   * @param req The outgoing request object to handle.
   * @param next The next interceptor in the chain, or the backend
   * if no interceptors remain in the chain.
   * @returns An observable of the event stream.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(JsonpInterceptor, [{
    key: "intercept",
    value: function intercept(req, next) {
      if (req.method === 'JSONP') {
        return this.jsonp.handle(req);
      } // Fall through for normal HTTP requests.


      return next.handle(req);
    }
  }]);

  return JsonpInterceptor;
}();

JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {
  return new (t || JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](JsonpClientBackend));
};

JsonpInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: JsonpInterceptor,
  factory: JsonpInterceptor.ɵfac
});

JsonpInterceptor.ctorParameters = function () {
  return [{
    type: JsonpClientBackend
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](JsonpInterceptor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: JsonpClientBackend
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 */

function getResponseUrl(xhr) {
  if ('responseURL' in xhr && xhr.responseURL) {
    return xhr.responseURL;
  }

  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
    return xhr.getResponseHeader('X-Request-URL');
  }

  return null;
}
/**
 * Uses `XMLHttpRequest` to send requests to a backend server.
 * @see `HttpHandler`
 * @see `JsonpClientBackend`
 *
 * @publicApi
 */


var HttpXhrBackend = /*#__PURE__*/function () {
  function HttpXhrBackend(xhrFactory) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpXhrBackend);

    this.xhrFactory = xhrFactory;
  }
  /**
   * Processes a request and returns a stream of response events.
   * @param req The request object.
   * @returns An observable of the response events.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpXhrBackend, [{
    key: "handle",
    value: function handle(req) {
      var _this13 = this;

      // Quick check to give a better error message when a user attempts to use
      // HttpClient.jsonp() without installing the HttpClientJsonpModule
      if (req.method === 'JSONP') {
        throw new Error("Attempted to construct Jsonp request without HttpClientJsonpModule installed.");
      } // Everything happens on Observable subscription.


      return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (observer) {
        // Start by setting up the XHR object with request method, URL, and withCredentials flag.
        var xhr = _this13.xhrFactory.build();

        xhr.open(req.method, req.urlWithParams);

        if (!!req.withCredentials) {
          xhr.withCredentials = true;
        } // Add all the requested headers.


        req.headers.forEach(function (name, values) {
          return xhr.setRequestHeader(name, values.join(','));
        }); // Add an Accept header if one isn't present already.

        if (!req.headers.has('Accept')) {
          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
        } // Auto-detect the Content-Type header if one isn't present already.


        if (!req.headers.has('Content-Type')) {
          var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.

          if (detectedType !== null) {
            xhr.setRequestHeader('Content-Type', detectedType);
          }
        } // Set the responseType if one was requested.


        if (req.responseType) {
          var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server
          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
          // xhr.response will be null, and xhr.responseText cannot be accessed to
          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
          // is parsed by first requesting text and then applying JSON.parse.

          xhr.responseType = responseType !== 'json' ? responseType : 'text';
        } // Serialize the request body if one is present. If not, this will be set to null.


        var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered
        // in two events - the HttpHeaderResponse event and the full HttpResponse
        // event. However, since response headers don't change in between these
        // two events, it doesn't make sense to parse them twice. So headerResponse
        // caches the data extracted from the response whenever it's first parsed,
        // to ensure parsing isn't duplicated.

        var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
        // state, and memoizes it into headerResponse.

        var partialFromXhr = function partialFromXhr() {
          if (headerResponse !== null) {
            return headerResponse;
          } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).


          var status = xhr.status === 1223 ? 204
          /* NoContent */
          : xhr.status;
          var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.

          var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the
          // request URL.

          var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.

          headerResponse = new HttpHeaderResponse({
            headers: headers,
            status: status,
            statusText: statusText,
            url: url
          });
          return headerResponse;
        }; // Next, a few closures are defined for the various events which XMLHttpRequest can
        // emit. This allows them to be unregistered as event listeners later.
        // First up is the load event, which represents a response being fully available.


        var onLoad = function onLoad() {
          // Read response state from the memoized partial data.
          var _partialFromXhr = partialFromXhr(),
              headers = _partialFromXhr.headers,
              status = _partialFromXhr.status,
              statusText = _partialFromXhr.statusText,
              url = _partialFromXhr.url; // The body will be read out if present.


          var body = null;

          if (status !== 204
          /* NoContent */
          ) {
            // Use XMLHttpRequest.response if set, responseText otherwise.
            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
          } // Normalize another potential bug (this one comes from CORS).


          if (status === 0) {
            status = !!body ? 200
            /* Ok */
            : 0;
          } // ok determines whether the response will be transmitted on the event or
          // error channel. Unsuccessful status codes (not 2xx) will always be errors,
          // but a successful status code can still result in an error if the user
          // asked for JSON data and the body cannot be parsed as such.


          var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser
          // will have done that already).

          if (req.responseType === 'json' && typeof body === 'string') {
            // Save the original body, before attempting XSSI prefix stripping.
            var originalBody = body;
            body = body.replace(XSSI_PREFIX, '');

            try {
              // Attempt the parse. If it fails, a parse error should be delivered to the user.
              body = body !== '' ? JSON.parse(body) : null;
            } catch (error) {
              // Since the JSON.parse failed, it's reasonable to assume this might not have been a
              // JSON response. Restore the original body (including any XSSI prefix) to deliver
              // a better error response.
              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably
              // just isn't JSON. Otherwise, deliver the parsing error to the user.

              if (ok) {
                // Even though the response status was 2xx, this is still an error.
                ok = false; // The parse error contains the text of the body that failed to parse.

                body = {
                  error: error,
                  text: body
                };
              }
            }
          }

          if (ok) {
            // A successful response is delivered on the event stream.
            observer.next(new HttpResponse({
              body: body,
              headers: headers,
              status: status,
              statusText: statusText,
              url: url || undefined
            })); // The full body has been received and delivered, no further events
            // are possible. This request is complete.

            observer.complete();
          } else {
            // An unsuccessful request is delivered on the error channel.
            observer.error(new HttpErrorResponse({
              // The error in this case is the response body (error from the server).
              error: body,
              headers: headers,
              status: status,
              statusText: statusText,
              url: url || undefined
            }));
          }
        }; // The onError callback is called when something goes wrong at the network level.
        // Connection timeout, DNS error, offline, etc. These are actual errors, and are
        // transmitted on the error channel.


        var onError = function onError(error) {
          var _partialFromXhr2 = partialFromXhr(),
              url = _partialFromXhr2.url;

          var res = new HttpErrorResponse({
            error: error,
            status: xhr.status || 0,
            statusText: xhr.statusText || 'Unknown Error',
            url: url || undefined
          });
          observer.error(res);
        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event
        // has been sent on the stream. This is necessary to track if progress
        // is enabled since the event will be sent on only the first download
        // progerss event.


        var sentHeaders = false; // The download progress event handler, which is only registered if
        // progress events are enabled.

        var onDownProgress = function onDownProgress(event) {
          // Send the HttpResponseHeaders event if it hasn't been sent already.
          if (!sentHeaders) {
            observer.next(partialFromXhr());
            sentHeaders = true;
          } // Start building the download progress event to deliver on the response
          // event stream.


          var progressEvent = {
            type: HttpEventType.DownloadProgress,
            loaded: event.loaded
          }; // Set the total number of bytes in the event if it's available.

          if (event.lengthComputable) {
            progressEvent.total = event.total;
          } // If the request was for text content and a partial response is
          // available on XMLHttpRequest, include it in the progress event
          // to allow for streaming reads.


          if (req.responseType === 'text' && !!xhr.responseText) {
            progressEvent.partialText = xhr.responseText;
          } // Finally, fire the event.


          observer.next(progressEvent);
        }; // The upload progress event handler, which is only registered if
        // progress events are enabled.


        var onUpProgress = function onUpProgress(event) {
          // Upload progress events are simpler. Begin building the progress
          // event.
          var progress = {
            type: HttpEventType.UploadProgress,
            loaded: event.loaded
          }; // If the total number of bytes being uploaded is available, include
          // it.

          if (event.lengthComputable) {
            progress.total = event.total;
          } // Send the event.


          observer.next(progress);
        }; // By default, register for load and error events.


        xhr.addEventListener('load', onLoad);
        xhr.addEventListener('error', onError);
        xhr.addEventListener('timeout', onError);
        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.

        if (req.reportProgress) {
          // Download progress is always enabled if requested.
          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.

          if (reqBody !== null && xhr.upload) {
            xhr.upload.addEventListener('progress', onUpProgress);
          }
        } // Fire the request, and notify the event stream that it was fired.


        xhr.send(reqBody);
        observer.next({
          type: HttpEventType.Sent
        }); // This is the return from the Observable function, which is the
        // request cancellation handler.

        return function () {
          // On a cancellation, remove all registered event listeners.
          xhr.removeEventListener('error', onError);
          xhr.removeEventListener('abort', onError);
          xhr.removeEventListener('load', onLoad);
          xhr.removeEventListener('timeout', onError);

          if (req.reportProgress) {
            xhr.removeEventListener('progress', onDownProgress);

            if (reqBody !== null && xhr.upload) {
              xhr.upload.removeEventListener('progress', onUpProgress);
            }
          } // Finally, abort the in-flight request.


          if (xhr.readyState !== xhr.DONE) {
            xhr.abort();
          }
        };
      });
    }
  }]);

  return HttpXhrBackend;
}();

HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {
  return new (t || HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.XhrFactory));
};

HttpXhrBackend.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: HttpXhrBackend,
  factory: HttpXhrBackend.ɵfac
});

HttpXhrBackend.ctorParameters = function () {
  return [{
    type: _angular_common__WEBPACK_IMPORTED_MODULE_12__.XhrFactory
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpXhrBackend, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: _angular_common__WEBPACK_IMPORTED_MODULE_12__.XhrFactory
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('XSRF_COOKIE_NAME');
var XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 * @publicApi
 */

var HttpXsrfTokenExtractor = function HttpXsrfTokenExtractor() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpXsrfTokenExtractor);
};
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */


var HttpXsrfCookieExtractor = /*#__PURE__*/function () {
  function HttpXsrfCookieExtractor(doc, platform, cookieName) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpXsrfCookieExtractor);

    this.doc = doc;
    this.platform = platform;
    this.cookieName = cookieName;
    this.lastCookieString = '';
    this.lastToken = null;
    /**
     * @internal for testing
     */

    this.parseCount = 0;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpXsrfCookieExtractor, [{
    key: "getToken",
    value: function getToken() {
      if (this.platform === 'server') {
        return null;
      }

      var cookieString = this.doc.cookie || '';

      if (cookieString !== this.lastCookieString) {
        this.parseCount++;
        this.lastToken = (0,_angular_common__WEBPACK_IMPORTED_MODULE_12__["ɵparseCookieValue"])(cookieString, this.cookieName);
        this.lastCookieString = cookieString;
      }

      return this.lastToken;
    }
  }]);

  return HttpXsrfCookieExtractor;
}();

HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {
  return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](XSRF_COOKIE_NAME));
};

HttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: HttpXsrfCookieExtractor,
  factory: HttpXsrfCookieExtractor.ɵfac
});

HttpXsrfCookieExtractor.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_10__.PLATFORM_ID]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
      args: [XSRF_COOKIE_NAME]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpXsrfCookieExtractor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_12__.DOCUMENT]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_10__.PLATFORM_ID]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [XSRF_COOKIE_NAME]
      }]
    }];
  }, null);
})();
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */


var HttpXsrfInterceptor = /*#__PURE__*/function () {
  function HttpXsrfInterceptor(tokenService, headerName) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpXsrfInterceptor);

    this.tokenService = tokenService;
    this.headerName = headerName;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpXsrfInterceptor, [{
    key: "intercept",
    value: function intercept(req, next) {
      var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.
      // Non-mutating requests don't require a token, and absolute URLs require special handling
      // anyway as the cookie set
      // on our origin is not the same as the token expected by another origin.

      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
        return next.handle(req);
      }

      var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.

      if (token !== null && !req.headers.has(this.headerName)) {
        req = req.clone({
          headers: req.headers.set(this.headerName, token)
        });
      }

      return next.handle(req);
    }
  }]);

  return HttpXsrfInterceptor;
}();

HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {
  return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](HttpXsrfTokenExtractor), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](XSRF_HEADER_NAME));
};

HttpXsrfInterceptor.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: HttpXsrfInterceptor,
  factory: HttpXsrfInterceptor.ɵfac
});

HttpXsrfInterceptor.ctorParameters = function () {
  return [{
    type: HttpXsrfTokenExtractor
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
      args: [XSRF_HEADER_NAME]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpXsrfInterceptor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: HttpXsrfTokenExtractor
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [XSRF_HEADER_NAME]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An injectable `HttpHandler` that applies multiple interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * The interceptors are loaded lazily from the injector, to allow
 * interceptors to themselves inject classes depending indirectly
 * on `HttpInterceptingHandler` itself.
 * @see `HttpInterceptor`
 */


var HttpInterceptingHandler = /*#__PURE__*/function () {
  function HttpInterceptingHandler(backend, injector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpInterceptingHandler);

    this.backend = backend;
    this.injector = injector;
    this.chain = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpInterceptingHandler, [{
    key: "handle",
    value: function handle(req) {
      if (this.chain === null) {
        var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
        this.chain = interceptors.reduceRight(function (next, interceptor) {
          return new HttpInterceptorHandler(next, interceptor);
        }, this.backend);
      }

      return this.chain.handle(req);
    }
  }]);

  return HttpInterceptingHandler;
}();

HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {
  return new (t || HttpInterceptingHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.Injector));
};

HttpInterceptingHandler.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: HttpInterceptingHandler,
  factory: HttpInterceptingHandler.ɵfac
});

HttpInterceptingHandler.ctorParameters = function () {
  return [{
    type: HttpBackend
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injector
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpInterceptingHandler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable
  }], function () {
    return [{
      type: HttpBackend
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injector
    }];
  }, null);
})();
/**
 * Constructs an `HttpHandler` that applies interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * Use as a factory function within `HttpClientModule`.
 *
 *
 */


function interceptingHandler(backend) {
  var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!interceptors) {
    return backend;
  }

  return interceptors.reduceRight(function (next, interceptor) {
    return new HttpInterceptorHandler(next, interceptor);
  }, backend);
}
/**
 * Factory function that determines where to store JSONP callbacks.
 *
 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
 * in test environments. In that case, callbacks are stored on an anonymous object instead.
 *
 *
 */


function jsonpCallbackContext() {
  if (typeof window === 'object') {
    return window;
  }

  return {};
}
/**
 * Configures XSRF protection support for outgoing requests.
 *
 * For a server that supports a cookie-based XSRF protection system,
 * use directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no names are supplied, the default cookie name is `XSRF-TOKEN`
 * and the default header name is `X-XSRF-TOKEN`.
 *
 * @publicApi
 */


var HttpClientXsrfModule = /*#__PURE__*/function () {
  function HttpClientXsrfModule() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpClientXsrfModule);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(HttpClientXsrfModule, null, [{
    key: "disable",
    value:
    /**
     * Disable the default XSRF protection.
     */
    function disable() {
      return {
        ngModule: HttpClientXsrfModule,
        providers: [{
          provide: HttpXsrfInterceptor,
          useClass: NoopInterceptor
        }]
      };
    }
    /**
     * Configure XSRF protection.
     * @param options An object that can specify either or both
     * cookie name or header name.
     * - Cookie name default is `XSRF-TOKEN`.
     * - Header name default is `X-XSRF-TOKEN`.
     *
     */

  }, {
    key: "withOptions",
    value: function withOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        ngModule: HttpClientXsrfModule,
        providers: [options.cookieName ? {
          provide: XSRF_COOKIE_NAME,
          useValue: options.cookieName
        } : [], options.headerName ? {
          provide: XSRF_HEADER_NAME,
          useValue: options.headerName
        } : []]
      };
    }
  }]);

  return HttpClientXsrfModule;
}();

HttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {
  return new (t || HttpClientXsrfModule)();
};

HttpClientXsrfModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: HttpClientXsrfModule
});
HttpClientXsrfModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [HttpXsrfInterceptor, {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpXsrfInterceptor,
    multi: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }, {
    provide: XSRF_COOKIE_NAME,
    useValue: 'XSRF-TOKEN'
  }, {
    provide: XSRF_HEADER_NAME,
    useValue: 'X-XSRF-TOKEN'
  }]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpClientXsrfModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgModule,
    args: [{
      providers: [HttpXsrfInterceptor, {
        provide: HTTP_INTERCEPTORS,
        useExisting: HttpXsrfInterceptor,
        multi: true
      }, {
        provide: HttpXsrfTokenExtractor,
        useClass: HttpXsrfCookieExtractor
      }, {
        provide: XSRF_COOKIE_NAME,
        useValue: 'XSRF-TOKEN'
      }, {
        provide: XSRF_HEADER_NAME,
        useValue: 'X-XSRF-TOKEN'
      }]
    }]
  }], null, null);
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * @publicApi
 */


var HttpClientModule = function HttpClientModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpClientModule);
};

HttpClientModule.ɵfac = function HttpClientModule_Factory(t) {
  return new (t || HttpClientModule)();
};

HttpClientModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: HttpClientModule
});
HttpClientModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [HttpClient, {
    provide: HttpHandler,
    useClass: HttpInterceptingHandler
  }, HttpXhrBackend, {
    provide: HttpBackend,
    useExisting: HttpXhrBackend
  }],
  imports: [[HttpClientXsrfModule.withOptions({
    cookieName: 'XSRF-TOKEN',
    headerName: 'X-XSRF-TOKEN'
  })]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpClientModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgModule,
    args: [{
      /**
       * Optional configuration for XSRF protection.
       */
      imports: [HttpClientXsrfModule.withOptions({
        cookieName: 'XSRF-TOKEN',
        headerName: 'X-XSRF-TOKEN'
      })],

      /**
       * Configures the [dependency injector](guide/glossary#injector) where it is imported
       * with supporting services for HTTP communications.
       */
      providers: [HttpClient, {
        provide: HttpHandler,
        useClass: HttpInterceptingHandler
      }, HttpXhrBackend, {
        provide: HttpBackend,
        useExisting: HttpXhrBackend
      }]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵsetNgModuleScope"](HttpClientModule, {
    imports: [HttpClientXsrfModule]
  });
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for JSONP.
 * Without this module, Jsonp requests reach the backend
 * with method JSONP, where they are rejected.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * @publicApi
 */


var HttpClientJsonpModule = function HttpClientJsonpModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HttpClientJsonpModule);
};

HttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {
  return new (t || HttpClientJsonpModule)();
};

HttpClientJsonpModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: HttpClientJsonpModule
});
HttpClientJsonpModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [JsonpClientBackend, {
    provide: JsonpCallbackContext,
    useFactory: jsonpCallbackContext
  }, {
    provide: HTTP_INTERCEPTORS,
    useClass: JsonpInterceptor,
    multi: true
  }]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](HttpClientJsonpModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgModule,
    args: [{
      providers: [JsonpClientBackend, {
        provide: JsonpCallbackContext,
        useFactory: jsonpCallbackContext
      }, {
        provide: HTTP_INTERCEPTORS,
        useClass: JsonpInterceptor,
        multi: true
      }]
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * @publicApi
 * @see `XhrFactory`
 * @deprecated
 * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.
 */


var XhrFactory = _angular_common__WEBPACK_IMPORTED_MODULE_12__.XhrFactory;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 91477:
/*!*****************************************************!*\
  !*** ./node_modules/@angular/core/fesm2015/core.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANALYZE_FOR_ENTRY_COMPONENTS": function() { return /* binding */ ANALYZE_FOR_ENTRY_COMPONENTS; },
/* harmony export */   "APP_BOOTSTRAP_LISTENER": function() { return /* binding */ APP_BOOTSTRAP_LISTENER; },
/* harmony export */   "APP_ID": function() { return /* binding */ APP_ID; },
/* harmony export */   "APP_INITIALIZER": function() { return /* binding */ APP_INITIALIZER; },
/* harmony export */   "ApplicationInitStatus": function() { return /* binding */ ApplicationInitStatus; },
/* harmony export */   "ApplicationModule": function() { return /* binding */ ApplicationModule; },
/* harmony export */   "ApplicationRef": function() { return /* binding */ ApplicationRef; },
/* harmony export */   "Attribute": function() { return /* binding */ Attribute; },
/* harmony export */   "COMPILER_OPTIONS": function() { return /* binding */ COMPILER_OPTIONS; },
/* harmony export */   "CUSTOM_ELEMENTS_SCHEMA": function() { return /* binding */ CUSTOM_ELEMENTS_SCHEMA; },
/* harmony export */   "ChangeDetectionStrategy": function() { return /* binding */ ChangeDetectionStrategy; },
/* harmony export */   "ChangeDetectorRef": function() { return /* binding */ ChangeDetectorRef; },
/* harmony export */   "Compiler": function() { return /* binding */ Compiler; },
/* harmony export */   "CompilerFactory": function() { return /* binding */ CompilerFactory; },
/* harmony export */   "Component": function() { return /* binding */ Component; },
/* harmony export */   "ComponentFactory": function() { return /* binding */ ComponentFactory; },
/* harmony export */   "ComponentFactoryResolver": function() { return /* binding */ ComponentFactoryResolver; },
/* harmony export */   "ComponentRef": function() { return /* binding */ ComponentRef; },
/* harmony export */   "ContentChild": function() { return /* binding */ ContentChild; },
/* harmony export */   "ContentChildren": function() { return /* binding */ ContentChildren; },
/* harmony export */   "DEFAULT_CURRENCY_CODE": function() { return /* binding */ DEFAULT_CURRENCY_CODE; },
/* harmony export */   "DebugElement": function() { return /* binding */ DebugElement; },
/* harmony export */   "DebugEventListener": function() { return /* binding */ DebugEventListener; },
/* harmony export */   "DebugNode": function() { return /* binding */ DebugNode; },
/* harmony export */   "DefaultIterableDiffer": function() { return /* binding */ DefaultIterableDiffer; },
/* harmony export */   "Directive": function() { return /* binding */ Directive; },
/* harmony export */   "ElementRef": function() { return /* binding */ ElementRef; },
/* harmony export */   "EmbeddedViewRef": function() { return /* binding */ EmbeddedViewRef; },
/* harmony export */   "ErrorHandler": function() { return /* binding */ ErrorHandler; },
/* harmony export */   "EventEmitter": function() { return /* binding */ EventEmitter; },
/* harmony export */   "Host": function() { return /* binding */ Host; },
/* harmony export */   "HostBinding": function() { return /* binding */ HostBinding; },
/* harmony export */   "HostListener": function() { return /* binding */ HostListener; },
/* harmony export */   "INJECTOR": function() { return /* binding */ INJECTOR$1; },
/* harmony export */   "Inject": function() { return /* binding */ Inject; },
/* harmony export */   "InjectFlags": function() { return /* binding */ InjectFlags; },
/* harmony export */   "Injectable": function() { return /* binding */ Injectable; },
/* harmony export */   "InjectionToken": function() { return /* binding */ InjectionToken; },
/* harmony export */   "Injector": function() { return /* binding */ Injector; },
/* harmony export */   "Input": function() { return /* binding */ Input; },
/* harmony export */   "IterableDiffers": function() { return /* binding */ IterableDiffers; },
/* harmony export */   "KeyValueDiffers": function() { return /* binding */ KeyValueDiffers; },
/* harmony export */   "LOCALE_ID": function() { return /* binding */ LOCALE_ID$1; },
/* harmony export */   "MissingTranslationStrategy": function() { return /* binding */ MissingTranslationStrategy; },
/* harmony export */   "ModuleWithComponentFactories": function() { return /* binding */ ModuleWithComponentFactories; },
/* harmony export */   "NO_ERRORS_SCHEMA": function() { return /* binding */ NO_ERRORS_SCHEMA; },
/* harmony export */   "NgModule": function() { return /* binding */ NgModule; },
/* harmony export */   "NgModuleFactory": function() { return /* binding */ NgModuleFactory; },
/* harmony export */   "NgModuleFactoryLoader": function() { return /* binding */ NgModuleFactoryLoader; },
/* harmony export */   "NgModuleRef": function() { return /* binding */ NgModuleRef; },
/* harmony export */   "NgProbeToken": function() { return /* binding */ NgProbeToken; },
/* harmony export */   "NgZone": function() { return /* binding */ NgZone; },
/* harmony export */   "Optional": function() { return /* binding */ Optional; },
/* harmony export */   "Output": function() { return /* binding */ Output; },
/* harmony export */   "PACKAGE_ROOT_URL": function() { return /* binding */ PACKAGE_ROOT_URL; },
/* harmony export */   "PLATFORM_ID": function() { return /* binding */ PLATFORM_ID; },
/* harmony export */   "PLATFORM_INITIALIZER": function() { return /* binding */ PLATFORM_INITIALIZER; },
/* harmony export */   "Pipe": function() { return /* binding */ Pipe; },
/* harmony export */   "PlatformRef": function() { return /* binding */ PlatformRef; },
/* harmony export */   "Query": function() { return /* binding */ Query; },
/* harmony export */   "QueryList": function() { return /* binding */ QueryList; },
/* harmony export */   "ReflectiveInjector": function() { return /* binding */ ReflectiveInjector; },
/* harmony export */   "ReflectiveKey": function() { return /* binding */ ReflectiveKey; },
/* harmony export */   "Renderer2": function() { return /* binding */ Renderer2; },
/* harmony export */   "RendererFactory2": function() { return /* binding */ RendererFactory2; },
/* harmony export */   "RendererStyleFlags2": function() { return /* binding */ RendererStyleFlags2; },
/* harmony export */   "ResolvedReflectiveFactory": function() { return /* binding */ ResolvedReflectiveFactory; },
/* harmony export */   "Sanitizer": function() { return /* binding */ Sanitizer; },
/* harmony export */   "SecurityContext": function() { return /* binding */ SecurityContext; },
/* harmony export */   "Self": function() { return /* binding */ Self; },
/* harmony export */   "SimpleChange": function() { return /* binding */ SimpleChange; },
/* harmony export */   "SkipSelf": function() { return /* binding */ SkipSelf; },
/* harmony export */   "SystemJsNgModuleLoader": function() { return /* binding */ SystemJsNgModuleLoader; },
/* harmony export */   "SystemJsNgModuleLoaderConfig": function() { return /* binding */ SystemJsNgModuleLoaderConfig; },
/* harmony export */   "TRANSLATIONS": function() { return /* binding */ TRANSLATIONS; },
/* harmony export */   "TRANSLATIONS_FORMAT": function() { return /* binding */ TRANSLATIONS_FORMAT; },
/* harmony export */   "TemplateRef": function() { return /* binding */ TemplateRef; },
/* harmony export */   "Testability": function() { return /* binding */ Testability; },
/* harmony export */   "TestabilityRegistry": function() { return /* binding */ TestabilityRegistry; },
/* harmony export */   "Type": function() { return /* binding */ Type; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "Version": function() { return /* binding */ Version; },
/* harmony export */   "ViewChild": function() { return /* binding */ ViewChild; },
/* harmony export */   "ViewChildren": function() { return /* binding */ ViewChildren; },
/* harmony export */   "ViewContainerRef": function() { return /* binding */ ViewContainerRef; },
/* harmony export */   "ViewEncapsulation": function() { return /* binding */ ViewEncapsulation; },
/* harmony export */   "ViewRef": function() { return /* binding */ ViewRef$1; },
/* harmony export */   "WrappedValue": function() { return /* binding */ WrappedValue; },
/* harmony export */   "asNativeElements": function() { return /* binding */ asNativeElements; },
/* harmony export */   "assertPlatform": function() { return /* binding */ assertPlatform; },
/* harmony export */   "createPlatform": function() { return /* binding */ createPlatform; },
/* harmony export */   "createPlatformFactory": function() { return /* binding */ createPlatformFactory; },
/* harmony export */   "defineInjectable": function() { return /* binding */ defineInjectable; },
/* harmony export */   "destroyPlatform": function() { return /* binding */ destroyPlatform; },
/* harmony export */   "enableProdMode": function() { return /* binding */ enableProdMode; },
/* harmony export */   "forwardRef": function() { return /* binding */ forwardRef; },
/* harmony export */   "getDebugNode": function() { return /* binding */ getDebugNode$1; },
/* harmony export */   "getModuleFactory": function() { return /* binding */ getModuleFactory; },
/* harmony export */   "getPlatform": function() { return /* binding */ getPlatform; },
/* harmony export */   "inject": function() { return /* binding */ inject; },
/* harmony export */   "isDevMode": function() { return /* binding */ isDevMode; },
/* harmony export */   "platformCore": function() { return /* binding */ platformCore; },
/* harmony export */   "resolveForwardRef": function() { return /* binding */ resolveForwardRef; },
/* harmony export */   "setTestabilityGetter": function() { return /* binding */ setTestabilityGetter; },
/* harmony export */   "ɵ0": function() { return /* binding */ ɵ0$3; },
/* harmony export */   "ɵALLOW_MULTIPLE_PLATFORMS": function() { return /* binding */ ALLOW_MULTIPLE_PLATFORMS; },
/* harmony export */   "ɵAPP_ID_RANDOM_PROVIDER": function() { return /* binding */ APP_ID_RANDOM_PROVIDER; },
/* harmony export */   "ɵCREATE_ATTRIBUTE_DECORATOR__POST_R3__": function() { return /* binding */ CREATE_ATTRIBUTE_DECORATOR__POST_R3__; },
/* harmony export */   "ɵChangeDetectorStatus": function() { return /* binding */ ChangeDetectorStatus; },
/* harmony export */   "ɵCodegenComponentFactoryResolver": function() { return /* binding */ CodegenComponentFactoryResolver; },
/* harmony export */   "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__": function() { return /* binding */ Compiler_compileModuleAndAllComponentsAsync__POST_R3__; },
/* harmony export */   "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__": function() { return /* binding */ Compiler_compileModuleAndAllComponentsSync__POST_R3__; },
/* harmony export */   "ɵCompiler_compileModuleAsync__POST_R3__": function() { return /* binding */ Compiler_compileModuleAsync__POST_R3__; },
/* harmony export */   "ɵCompiler_compileModuleSync__POST_R3__": function() { return /* binding */ Compiler_compileModuleSync__POST_R3__; },
/* harmony export */   "ɵComponentFactory": function() { return /* binding */ ComponentFactory; },
/* harmony export */   "ɵConsole": function() { return /* binding */ Console; },
/* harmony export */   "ɵDEFAULT_LOCALE_ID": function() { return /* binding */ DEFAULT_LOCALE_ID; },
/* harmony export */   "ɵEMPTY_ARRAY": function() { return /* binding */ EMPTY_ARRAY; },
/* harmony export */   "ɵEMPTY_MAP": function() { return /* binding */ EMPTY_MAP; },
/* harmony export */   "ɵINJECTOR_IMPL__POST_R3__": function() { return /* binding */ INJECTOR_IMPL__POST_R3__; },
/* harmony export */   "ɵINJECTOR_SCOPE": function() { return /* binding */ INJECTOR_SCOPE; },
/* harmony export */   "ɵLifecycleHooksFeature": function() { return /* binding */ LifecycleHooksFeature; },
/* harmony export */   "ɵLocaleDataIndex": function() { return /* binding */ LocaleDataIndex; },
/* harmony export */   "ɵNG_COMP_DEF": function() { return /* binding */ NG_COMP_DEF; },
/* harmony export */   "ɵNG_DIR_DEF": function() { return /* binding */ NG_DIR_DEF; },
/* harmony export */   "ɵNG_ELEMENT_ID": function() { return /* binding */ NG_ELEMENT_ID; },
/* harmony export */   "ɵNG_INJ_DEF": function() { return /* binding */ NG_INJ_DEF; },
/* harmony export */   "ɵNG_MOD_DEF": function() { return /* binding */ NG_MOD_DEF; },
/* harmony export */   "ɵNG_PIPE_DEF": function() { return /* binding */ NG_PIPE_DEF; },
/* harmony export */   "ɵNG_PROV_DEF": function() { return /* binding */ NG_PROV_DEF; },
/* harmony export */   "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR": function() { return /* binding */ NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR; },
/* harmony export */   "ɵNO_CHANGE": function() { return /* binding */ NO_CHANGE; },
/* harmony export */   "ɵNgModuleFactory": function() { return /* binding */ NgModuleFactory$1; },
/* harmony export */   "ɵNoopNgZone": function() { return /* binding */ NoopNgZone; },
/* harmony export */   "ɵReflectionCapabilities": function() { return /* binding */ ReflectionCapabilities; },
/* harmony export */   "ɵRender3ComponentFactory": function() { return /* binding */ ComponentFactory$1; },
/* harmony export */   "ɵRender3ComponentRef": function() { return /* binding */ ComponentRef$1; },
/* harmony export */   "ɵRender3NgModuleRef": function() { return /* binding */ NgModuleRef$1; },
/* harmony export */   "ɵRuntimeError": function() { return /* binding */ RuntimeError; },
/* harmony export */   "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__": function() { return /* binding */ SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__; },
/* harmony export */   "ɵSWITCH_COMPILE_COMPONENT__POST_R3__": function() { return /* binding */ SWITCH_COMPILE_COMPONENT__POST_R3__; },
/* harmony export */   "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__": function() { return /* binding */ SWITCH_COMPILE_DIRECTIVE__POST_R3__; },
/* harmony export */   "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__": function() { return /* binding */ SWITCH_COMPILE_INJECTABLE__POST_R3__; },
/* harmony export */   "ɵSWITCH_COMPILE_NGMODULE__POST_R3__": function() { return /* binding */ SWITCH_COMPILE_NGMODULE__POST_R3__; },
/* harmony export */   "ɵSWITCH_COMPILE_PIPE__POST_R3__": function() { return /* binding */ SWITCH_COMPILE_PIPE__POST_R3__; },
/* harmony export */   "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__": function() { return /* binding */ SWITCH_ELEMENT_REF_FACTORY__POST_R3__; },
/* harmony export */   "ɵSWITCH_IVY_ENABLED__POST_R3__": function() { return /* binding */ SWITCH_IVY_ENABLED__POST_R3__; },
/* harmony export */   "ɵSWITCH_RENDERER2_FACTORY__POST_R3__": function() { return /* binding */ SWITCH_RENDERER2_FACTORY__POST_R3__; },
/* harmony export */   "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__": function() { return /* binding */ SWITCH_TEMPLATE_REF_FACTORY__POST_R3__; },
/* harmony export */   "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__": function() { return /* binding */ SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__; },
/* harmony export */   "ɵ_sanitizeHtml": function() { return /* binding */ _sanitizeHtml; },
/* harmony export */   "ɵ_sanitizeUrl": function() { return /* binding */ _sanitizeUrl; },
/* harmony export */   "ɵallowSanitizationBypassAndThrow": function() { return /* binding */ allowSanitizationBypassAndThrow; },
/* harmony export */   "ɵand": function() { return /* binding */ anchorDef; },
/* harmony export */   "ɵangular_packages_core_core_a": function() { return /* binding */ isForwardRef; },
/* harmony export */   "ɵangular_packages_core_core_b": function() { return /* binding */ injectInjectorOnly; },
/* harmony export */   "ɵangular_packages_core_core_ba": function() { return /* binding */ zoneSchedulerFactory; },
/* harmony export */   "ɵangular_packages_core_core_bb": function() { return /* binding */ USD_CURRENCY_CODE; },
/* harmony export */   "ɵangular_packages_core_core_bc": function() { return /* binding */ _def; },
/* harmony export */   "ɵangular_packages_core_core_bd": function() { return /* binding */ DebugContext; },
/* harmony export */   "ɵangular_packages_core_core_be": function() { return /* binding */ NgOnChangesFeatureImpl; },
/* harmony export */   "ɵangular_packages_core_core_bf": function() { return /* binding */ SCHEDULER; },
/* harmony export */   "ɵangular_packages_core_core_bg": function() { return /* binding */ injectAttributeImpl; },
/* harmony export */   "ɵangular_packages_core_core_bh": function() { return /* binding */ getLView; },
/* harmony export */   "ɵangular_packages_core_core_bi": function() { return /* binding */ getBindingRoot; },
/* harmony export */   "ɵangular_packages_core_core_bj": function() { return /* binding */ nextContextImpl; },
/* harmony export */   "ɵangular_packages_core_core_bl": function() { return /* binding */ pureFunction1Internal; },
/* harmony export */   "ɵangular_packages_core_core_bm": function() { return /* binding */ pureFunction2Internal; },
/* harmony export */   "ɵangular_packages_core_core_bn": function() { return /* binding */ pureFunction3Internal; },
/* harmony export */   "ɵangular_packages_core_core_bo": function() { return /* binding */ pureFunction4Internal; },
/* harmony export */   "ɵangular_packages_core_core_bp": function() { return /* binding */ pureFunctionVInternal; },
/* harmony export */   "ɵangular_packages_core_core_bq": function() { return /* binding */ getUrlSanitizer; },
/* harmony export */   "ɵangular_packages_core_core_br": function() { return /* binding */ makePropDecorator; },
/* harmony export */   "ɵangular_packages_core_core_bs": function() { return /* binding */ makeParamDecorator; },
/* harmony export */   "ɵangular_packages_core_core_bv": function() { return /* binding */ getClosureSafeProperty; },
/* harmony export */   "ɵangular_packages_core_core_bw": function() { return /* binding */ NullInjector; },
/* harmony export */   "ɵangular_packages_core_core_bx": function() { return /* binding */ getInjectImplementation; },
/* harmony export */   "ɵangular_packages_core_core_bz": function() { return /* binding */ getNativeByTNode; },
/* harmony export */   "ɵangular_packages_core_core_c": function() { return /* binding */ attachInjectFlag; },
/* harmony export */   "ɵangular_packages_core_core_cb": function() { return /* binding */ getRootContext; },
/* harmony export */   "ɵangular_packages_core_core_cc": function() { return /* binding */ i18nPostprocess; },
/* harmony export */   "ɵangular_packages_core_core_d": function() { return /* binding */ ReflectiveInjector_; },
/* harmony export */   "ɵangular_packages_core_core_e": function() { return /* binding */ ReflectiveDependency; },
/* harmony export */   "ɵangular_packages_core_core_f": function() { return /* binding */ resolveReflectiveProviders; },
/* harmony export */   "ɵangular_packages_core_core_g": function() { return /* binding */ _appIdRandomProviderFactory; },
/* harmony export */   "ɵangular_packages_core_core_h": function() { return /* binding */ injectRenderer2; },
/* harmony export */   "ɵangular_packages_core_core_i": function() { return /* binding */ injectElementRef; },
/* harmony export */   "ɵangular_packages_core_core_j": function() { return /* binding */ createElementRef; },
/* harmony export */   "ɵangular_packages_core_core_k": function() { return /* binding */ getModuleFactory__PRE_R3__; },
/* harmony export */   "ɵangular_packages_core_core_l": function() { return /* binding */ injectTemplateRef; },
/* harmony export */   "ɵangular_packages_core_core_m": function() { return /* binding */ createTemplateRef; },
/* harmony export */   "ɵangular_packages_core_core_n": function() { return /* binding */ injectViewContainerRef; },
/* harmony export */   "ɵangular_packages_core_core_o": function() { return /* binding */ DebugNode__PRE_R3__; },
/* harmony export */   "ɵangular_packages_core_core_p": function() { return /* binding */ DebugElement__PRE_R3__; },
/* harmony export */   "ɵangular_packages_core_core_q": function() { return /* binding */ getDebugNodeR2__PRE_R3__; },
/* harmony export */   "ɵangular_packages_core_core_r": function() { return /* binding */ injectChangeDetectorRef; },
/* harmony export */   "ɵangular_packages_core_core_s": function() { return /* binding */ DefaultIterableDifferFactory; },
/* harmony export */   "ɵangular_packages_core_core_t": function() { return /* binding */ DefaultKeyValueDifferFactory; },
/* harmony export */   "ɵangular_packages_core_core_u": function() { return /* binding */ defaultIterableDiffersFactory; },
/* harmony export */   "ɵangular_packages_core_core_v": function() { return /* binding */ defaultKeyValueDiffersFactory; },
/* harmony export */   "ɵangular_packages_core_core_w": function() { return /* binding */ _iterableDiffersFactory; },
/* harmony export */   "ɵangular_packages_core_core_x": function() { return /* binding */ _keyValueDiffersFactory; },
/* harmony export */   "ɵangular_packages_core_core_y": function() { return /* binding */ _localeFactory; },
/* harmony export */   "ɵangular_packages_core_core_z": function() { return /* binding */ APPLICATION_MODULE_PROVIDERS; },
/* harmony export */   "ɵbypassSanitizationTrustHtml": function() { return /* binding */ bypassSanitizationTrustHtml; },
/* harmony export */   "ɵbypassSanitizationTrustResourceUrl": function() { return /* binding */ bypassSanitizationTrustResourceUrl; },
/* harmony export */   "ɵbypassSanitizationTrustScript": function() { return /* binding */ bypassSanitizationTrustScript; },
/* harmony export */   "ɵbypassSanitizationTrustStyle": function() { return /* binding */ bypassSanitizationTrustStyle; },
/* harmony export */   "ɵbypassSanitizationTrustUrl": function() { return /* binding */ bypassSanitizationTrustUrl; },
/* harmony export */   "ɵccf": function() { return /* binding */ createComponentFactory; },
/* harmony export */   "ɵclearOverrides": function() { return /* binding */ clearOverrides; },
/* harmony export */   "ɵclearResolutionOfComponentResourcesQueue": function() { return /* binding */ clearResolutionOfComponentResourcesQueue; },
/* harmony export */   "ɵcmf": function() { return /* binding */ createNgModuleFactory; },
/* harmony export */   "ɵcompileComponent": function() { return /* binding */ compileComponent; },
/* harmony export */   "ɵcompileDirective": function() { return /* binding */ compileDirective; },
/* harmony export */   "ɵcompileNgModule": function() { return /* binding */ compileNgModule; },
/* harmony export */   "ɵcompileNgModuleDefs": function() { return /* binding */ compileNgModuleDefs; },
/* harmony export */   "ɵcompileNgModuleFactory__POST_R3__": function() { return /* binding */ compileNgModuleFactory__POST_R3__; },
/* harmony export */   "ɵcompilePipe": function() { return /* binding */ compilePipe; },
/* harmony export */   "ɵcreateInjector": function() { return /* binding */ createInjector; },
/* harmony export */   "ɵcrt": function() { return /* binding */ createRendererType2; },
/* harmony export */   "ɵdefaultIterableDiffers": function() { return /* binding */ defaultIterableDiffers; },
/* harmony export */   "ɵdefaultKeyValueDiffers": function() { return /* binding */ defaultKeyValueDiffers; },
/* harmony export */   "ɵdetectChanges": function() { return /* binding */ detectChanges; },
/* harmony export */   "ɵdevModeEqual": function() { return /* binding */ devModeEqual; },
/* harmony export */   "ɵdid": function() { return /* binding */ directiveDef; },
/* harmony export */   "ɵeld": function() { return /* binding */ elementDef; },
/* harmony export */   "ɵfindLocaleData": function() { return /* binding */ findLocaleData; },
/* harmony export */   "ɵflushModuleScopingQueueAsMuchAsPossible": function() { return /* binding */ flushModuleScopingQueueAsMuchAsPossible; },
/* harmony export */   "ɵgetComponentViewDefinitionFactory": function() { return /* binding */ getComponentViewDefinitionFactory; },
/* harmony export */   "ɵgetDebugNodeR2": function() { return /* binding */ getDebugNodeR2; },
/* harmony export */   "ɵgetDebugNode__POST_R3__": function() { return /* binding */ getDebugNode__POST_R3__; },
/* harmony export */   "ɵgetDirectives": function() { return /* binding */ getDirectives; },
/* harmony export */   "ɵgetHostElement": function() { return /* binding */ getHostElement; },
/* harmony export */   "ɵgetInjectableDef": function() { return /* binding */ getInjectableDef; },
/* harmony export */   "ɵgetLContext": function() { return /* binding */ getLContext; },
/* harmony export */   "ɵgetLocaleCurrencyCode": function() { return /* binding */ getLocaleCurrencyCode; },
/* harmony export */   "ɵgetLocalePluralCase": function() { return /* binding */ getLocalePluralCase; },
/* harmony export */   "ɵgetModuleFactory__POST_R3__": function() { return /* binding */ getModuleFactory__POST_R3__; },
/* harmony export */   "ɵgetSanitizationBypassType": function() { return /* binding */ getSanitizationBypassType; },
/* harmony export */   "ɵglobal": function() { return /* binding */ _global; },
/* harmony export */   "ɵinitServicesIfNeeded": function() { return /* binding */ initServicesIfNeeded; },
/* harmony export */   "ɵinlineInterpolate": function() { return /* binding */ inlineInterpolate; },
/* harmony export */   "ɵinterpolate": function() { return /* binding */ interpolate; },
/* harmony export */   "ɵisBoundToModule__POST_R3__": function() { return /* binding */ isBoundToModule__POST_R3__; },
/* harmony export */   "ɵisDefaultChangeDetectionStrategy": function() { return /* binding */ isDefaultChangeDetectionStrategy; },
/* harmony export */   "ɵisListLikeIterable": function() { return /* binding */ isListLikeIterable; },
/* harmony export */   "ɵisObservable": function() { return /* binding */ isObservable; },
/* harmony export */   "ɵisPromise": function() { return /* binding */ isPromise; },
/* harmony export */   "ɵisSubscribable": function() { return /* binding */ isSubscribable; },
/* harmony export */   "ɵivyEnabled": function() { return /* binding */ ivyEnabled; },
/* harmony export */   "ɵmakeDecorator": function() { return /* binding */ makeDecorator; },
/* harmony export */   "ɵmarkDirty": function() { return /* binding */ markDirty; },
/* harmony export */   "ɵmod": function() { return /* binding */ moduleDef; },
/* harmony export */   "ɵmpd": function() { return /* binding */ moduleProvideDef; },
/* harmony export */   "ɵncd": function() { return /* binding */ ngContentDef; },
/* harmony export */   "ɵnoSideEffects": function() { return /* binding */ noSideEffects; },
/* harmony export */   "ɵnov": function() { return /* binding */ nodeValue; },
/* harmony export */   "ɵoverrideComponentView": function() { return /* binding */ overrideComponentView; },
/* harmony export */   "ɵoverrideProvider": function() { return /* binding */ overrideProvider; },
/* harmony export */   "ɵpad": function() { return /* binding */ pureArrayDef; },
/* harmony export */   "ɵpatchComponentDefWithScope": function() { return /* binding */ patchComponentDefWithScope; },
/* harmony export */   "ɵpid": function() { return /* binding */ pipeDef; },
/* harmony export */   "ɵpod": function() { return /* binding */ pureObjectDef; },
/* harmony export */   "ɵppd": function() { return /* binding */ purePipeDef; },
/* harmony export */   "ɵprd": function() { return /* binding */ providerDef; },
/* harmony export */   "ɵpublishDefaultGlobalUtils": function() { return /* binding */ publishDefaultGlobalUtils; },
/* harmony export */   "ɵpublishGlobalUtil": function() { return /* binding */ publishGlobalUtil; },
/* harmony export */   "ɵqud": function() { return /* binding */ queryDef; },
/* harmony export */   "ɵregisterLocaleData": function() { return /* binding */ registerLocaleData; },
/* harmony export */   "ɵregisterModuleFactory": function() { return /* binding */ registerModuleFactory; },
/* harmony export */   "ɵregisterNgModuleType": function() { return /* binding */ registerNgModuleType; },
/* harmony export */   "ɵrenderComponent": function() { return /* binding */ renderComponent$1; },
/* harmony export */   "ɵresetCompiledComponents": function() { return /* binding */ resetCompiledComponents; },
/* harmony export */   "ɵresetJitOptions": function() { return /* binding */ resetJitOptions; },
/* harmony export */   "ɵresolveComponentResources": function() { return /* binding */ resolveComponentResources; },
/* harmony export */   "ɵsetClassMetadata": function() { return /* binding */ setClassMetadata; },
/* harmony export */   "ɵsetCurrentInjector": function() { return /* binding */ setCurrentInjector; },
/* harmony export */   "ɵsetDocument": function() { return /* binding */ setDocument; },
/* harmony export */   "ɵsetLocaleId": function() { return /* binding */ setLocaleId; },
/* harmony export */   "ɵstore": function() { return /* binding */ store; },
/* harmony export */   "ɵstringify": function() { return /* binding */ stringify; },
/* harmony export */   "ɵted": function() { return /* binding */ textDef; },
/* harmony export */   "ɵtransitiveScopesFor": function() { return /* binding */ transitiveScopesFor; },
/* harmony export */   "ɵunregisterLocaleData": function() { return /* binding */ unregisterAllLocaleData; },
/* harmony export */   "ɵunv": function() { return /* binding */ unwrapValue; },
/* harmony export */   "ɵunwrapSafeValue": function() { return /* binding */ unwrapSafeValue; },
/* harmony export */   "ɵvid": function() { return /* binding */ viewDef; },
/* harmony export */   "ɵwhenRendered": function() { return /* binding */ whenRendered; },
/* harmony export */   "ɵɵCopyDefinitionFeature": function() { return /* binding */ ɵɵCopyDefinitionFeature; },
/* harmony export */   "ɵɵFactoryTarget": function() { return /* binding */ FactoryTarget; },
/* harmony export */   "ɵɵInheritDefinitionFeature": function() { return /* binding */ ɵɵInheritDefinitionFeature; },
/* harmony export */   "ɵɵNgOnChangesFeature": function() { return /* binding */ ɵɵNgOnChangesFeature; },
/* harmony export */   "ɵɵProvidersFeature": function() { return /* binding */ ɵɵProvidersFeature; },
/* harmony export */   "ɵɵadvance": function() { return /* binding */ ɵɵadvance; },
/* harmony export */   "ɵɵattribute": function() { return /* binding */ ɵɵattribute; },
/* harmony export */   "ɵɵattributeInterpolate1": function() { return /* binding */ ɵɵattributeInterpolate1; },
/* harmony export */   "ɵɵattributeInterpolate2": function() { return /* binding */ ɵɵattributeInterpolate2; },
/* harmony export */   "ɵɵattributeInterpolate3": function() { return /* binding */ ɵɵattributeInterpolate3; },
/* harmony export */   "ɵɵattributeInterpolate4": function() { return /* binding */ ɵɵattributeInterpolate4; },
/* harmony export */   "ɵɵattributeInterpolate5": function() { return /* binding */ ɵɵattributeInterpolate5; },
/* harmony export */   "ɵɵattributeInterpolate6": function() { return /* binding */ ɵɵattributeInterpolate6; },
/* harmony export */   "ɵɵattributeInterpolate7": function() { return /* binding */ ɵɵattributeInterpolate7; },
/* harmony export */   "ɵɵattributeInterpolate8": function() { return /* binding */ ɵɵattributeInterpolate8; },
/* harmony export */   "ɵɵattributeInterpolateV": function() { return /* binding */ ɵɵattributeInterpolateV; },
/* harmony export */   "ɵɵclassMap": function() { return /* binding */ ɵɵclassMap; },
/* harmony export */   "ɵɵclassMapInterpolate1": function() { return /* binding */ ɵɵclassMapInterpolate1; },
/* harmony export */   "ɵɵclassMapInterpolate2": function() { return /* binding */ ɵɵclassMapInterpolate2; },
/* harmony export */   "ɵɵclassMapInterpolate3": function() { return /* binding */ ɵɵclassMapInterpolate3; },
/* harmony export */   "ɵɵclassMapInterpolate4": function() { return /* binding */ ɵɵclassMapInterpolate4; },
/* harmony export */   "ɵɵclassMapInterpolate5": function() { return /* binding */ ɵɵclassMapInterpolate5; },
/* harmony export */   "ɵɵclassMapInterpolate6": function() { return /* binding */ ɵɵclassMapInterpolate6; },
/* harmony export */   "ɵɵclassMapInterpolate7": function() { return /* binding */ ɵɵclassMapInterpolate7; },
/* harmony export */   "ɵɵclassMapInterpolate8": function() { return /* binding */ ɵɵclassMapInterpolate8; },
/* harmony export */   "ɵɵclassMapInterpolateV": function() { return /* binding */ ɵɵclassMapInterpolateV; },
/* harmony export */   "ɵɵclassProp": function() { return /* binding */ ɵɵclassProp; },
/* harmony export */   "ɵɵcontentQuery": function() { return /* binding */ ɵɵcontentQuery; },
/* harmony export */   "ɵɵdefineComponent": function() { return /* binding */ ɵɵdefineComponent; },
/* harmony export */   "ɵɵdefineDirective": function() { return /* binding */ ɵɵdefineDirective; },
/* harmony export */   "ɵɵdefineInjectable": function() { return /* binding */ ɵɵdefineInjectable; },
/* harmony export */   "ɵɵdefineInjector": function() { return /* binding */ ɵɵdefineInjector; },
/* harmony export */   "ɵɵdefineNgModule": function() { return /* binding */ ɵɵdefineNgModule; },
/* harmony export */   "ɵɵdefinePipe": function() { return /* binding */ ɵɵdefinePipe; },
/* harmony export */   "ɵɵdirectiveInject": function() { return /* binding */ ɵɵdirectiveInject; },
/* harmony export */   "ɵɵdisableBindings": function() { return /* binding */ ɵɵdisableBindings; },
/* harmony export */   "ɵɵelement": function() { return /* binding */ ɵɵelement; },
/* harmony export */   "ɵɵelementContainer": function() { return /* binding */ ɵɵelementContainer; },
/* harmony export */   "ɵɵelementContainerEnd": function() { return /* binding */ ɵɵelementContainerEnd; },
/* harmony export */   "ɵɵelementContainerStart": function() { return /* binding */ ɵɵelementContainerStart; },
/* harmony export */   "ɵɵelementEnd": function() { return /* binding */ ɵɵelementEnd; },
/* harmony export */   "ɵɵelementStart": function() { return /* binding */ ɵɵelementStart; },
/* harmony export */   "ɵɵenableBindings": function() { return /* binding */ ɵɵenableBindings; },
/* harmony export */   "ɵɵgetCurrentView": function() { return /* binding */ ɵɵgetCurrentView; },
/* harmony export */   "ɵɵgetInheritedFactory": function() { return /* binding */ ɵɵgetInheritedFactory; },
/* harmony export */   "ɵɵhostProperty": function() { return /* binding */ ɵɵhostProperty; },
/* harmony export */   "ɵɵi18n": function() { return /* binding */ ɵɵi18n; },
/* harmony export */   "ɵɵi18nApply": function() { return /* binding */ ɵɵi18nApply; },
/* harmony export */   "ɵɵi18nAttributes": function() { return /* binding */ ɵɵi18nAttributes; },
/* harmony export */   "ɵɵi18nEnd": function() { return /* binding */ ɵɵi18nEnd; },
/* harmony export */   "ɵɵi18nExp": function() { return /* binding */ ɵɵi18nExp; },
/* harmony export */   "ɵɵi18nPostprocess": function() { return /* binding */ ɵɵi18nPostprocess; },
/* harmony export */   "ɵɵi18nStart": function() { return /* binding */ ɵɵi18nStart; },
/* harmony export */   "ɵɵinject": function() { return /* binding */ ɵɵinject; },
/* harmony export */   "ɵɵinjectAttribute": function() { return /* binding */ ɵɵinjectAttribute; },
/* harmony export */   "ɵɵinvalidFactory": function() { return /* binding */ ɵɵinvalidFactory; },
/* harmony export */   "ɵɵinvalidFactoryDep": function() { return /* binding */ ɵɵinvalidFactoryDep; },
/* harmony export */   "ɵɵlistener": function() { return /* binding */ ɵɵlistener; },
/* harmony export */   "ɵɵloadQuery": function() { return /* binding */ ɵɵloadQuery; },
/* harmony export */   "ɵɵnamespaceHTML": function() { return /* binding */ ɵɵnamespaceHTML; },
/* harmony export */   "ɵɵnamespaceMathML": function() { return /* binding */ ɵɵnamespaceMathML; },
/* harmony export */   "ɵɵnamespaceSVG": function() { return /* binding */ ɵɵnamespaceSVG; },
/* harmony export */   "ɵɵnextContext": function() { return /* binding */ ɵɵnextContext; },
/* harmony export */   "ɵɵngDeclareClassMetadata": function() { return /* binding */ ɵɵngDeclareClassMetadata; },
/* harmony export */   "ɵɵngDeclareComponent": function() { return /* binding */ ɵɵngDeclareComponent; },
/* harmony export */   "ɵɵngDeclareDirective": function() { return /* binding */ ɵɵngDeclareDirective; },
/* harmony export */   "ɵɵngDeclareFactory": function() { return /* binding */ ɵɵngDeclareFactory; },
/* harmony export */   "ɵɵngDeclareInjectable": function() { return /* binding */ ɵɵngDeclareInjectable; },
/* harmony export */   "ɵɵngDeclareInjector": function() { return /* binding */ ɵɵngDeclareInjector; },
/* harmony export */   "ɵɵngDeclareNgModule": function() { return /* binding */ ɵɵngDeclareNgModule; },
/* harmony export */   "ɵɵngDeclarePipe": function() { return /* binding */ ɵɵngDeclarePipe; },
/* harmony export */   "ɵɵpipe": function() { return /* binding */ ɵɵpipe; },
/* harmony export */   "ɵɵpipeBind1": function() { return /* binding */ ɵɵpipeBind1; },
/* harmony export */   "ɵɵpipeBind2": function() { return /* binding */ ɵɵpipeBind2; },
/* harmony export */   "ɵɵpipeBind3": function() { return /* binding */ ɵɵpipeBind3; },
/* harmony export */   "ɵɵpipeBind4": function() { return /* binding */ ɵɵpipeBind4; },
/* harmony export */   "ɵɵpipeBindV": function() { return /* binding */ ɵɵpipeBindV; },
/* harmony export */   "ɵɵprojection": function() { return /* binding */ ɵɵprojection; },
/* harmony export */   "ɵɵprojectionDef": function() { return /* binding */ ɵɵprojectionDef; },
/* harmony export */   "ɵɵproperty": function() { return /* binding */ ɵɵproperty; },
/* harmony export */   "ɵɵpropertyInterpolate": function() { return /* binding */ ɵɵpropertyInterpolate; },
/* harmony export */   "ɵɵpropertyInterpolate1": function() { return /* binding */ ɵɵpropertyInterpolate1; },
/* harmony export */   "ɵɵpropertyInterpolate2": function() { return /* binding */ ɵɵpropertyInterpolate2; },
/* harmony export */   "ɵɵpropertyInterpolate3": function() { return /* binding */ ɵɵpropertyInterpolate3; },
/* harmony export */   "ɵɵpropertyInterpolate4": function() { return /* binding */ ɵɵpropertyInterpolate4; },
/* harmony export */   "ɵɵpropertyInterpolate5": function() { return /* binding */ ɵɵpropertyInterpolate5; },
/* harmony export */   "ɵɵpropertyInterpolate6": function() { return /* binding */ ɵɵpropertyInterpolate6; },
/* harmony export */   "ɵɵpropertyInterpolate7": function() { return /* binding */ ɵɵpropertyInterpolate7; },
/* harmony export */   "ɵɵpropertyInterpolate8": function() { return /* binding */ ɵɵpropertyInterpolate8; },
/* harmony export */   "ɵɵpropertyInterpolateV": function() { return /* binding */ ɵɵpropertyInterpolateV; },
/* harmony export */   "ɵɵpureFunction0": function() { return /* binding */ ɵɵpureFunction0; },
/* harmony export */   "ɵɵpureFunction1": function() { return /* binding */ ɵɵpureFunction1; },
/* harmony export */   "ɵɵpureFunction2": function() { return /* binding */ ɵɵpureFunction2; },
/* harmony export */   "ɵɵpureFunction3": function() { return /* binding */ ɵɵpureFunction3; },
/* harmony export */   "ɵɵpureFunction4": function() { return /* binding */ ɵɵpureFunction4; },
/* harmony export */   "ɵɵpureFunction5": function() { return /* binding */ ɵɵpureFunction5; },
/* harmony export */   "ɵɵpureFunction6": function() { return /* binding */ ɵɵpureFunction6; },
/* harmony export */   "ɵɵpureFunction7": function() { return /* binding */ ɵɵpureFunction7; },
/* harmony export */   "ɵɵpureFunction8": function() { return /* binding */ ɵɵpureFunction8; },
/* harmony export */   "ɵɵpureFunctionV": function() { return /* binding */ ɵɵpureFunctionV; },
/* harmony export */   "ɵɵqueryRefresh": function() { return /* binding */ ɵɵqueryRefresh; },
/* harmony export */   "ɵɵreference": function() { return /* binding */ ɵɵreference; },
/* harmony export */   "ɵɵresolveBody": function() { return /* binding */ ɵɵresolveBody; },
/* harmony export */   "ɵɵresolveDocument": function() { return /* binding */ ɵɵresolveDocument; },
/* harmony export */   "ɵɵresolveWindow": function() { return /* binding */ ɵɵresolveWindow; },
/* harmony export */   "ɵɵrestoreView": function() { return /* binding */ ɵɵrestoreView; },
/* harmony export */   "ɵɵsanitizeHtml": function() { return /* binding */ ɵɵsanitizeHtml; },
/* harmony export */   "ɵɵsanitizeResourceUrl": function() { return /* binding */ ɵɵsanitizeResourceUrl; },
/* harmony export */   "ɵɵsanitizeScript": function() { return /* binding */ ɵɵsanitizeScript; },
/* harmony export */   "ɵɵsanitizeStyle": function() { return /* binding */ ɵɵsanitizeStyle; },
/* harmony export */   "ɵɵsanitizeUrl": function() { return /* binding */ ɵɵsanitizeUrl; },
/* harmony export */   "ɵɵsanitizeUrlOrResourceUrl": function() { return /* binding */ ɵɵsanitizeUrlOrResourceUrl; },
/* harmony export */   "ɵɵsetComponentScope": function() { return /* binding */ ɵɵsetComponentScope; },
/* harmony export */   "ɵɵsetNgModuleScope": function() { return /* binding */ ɵɵsetNgModuleScope; },
/* harmony export */   "ɵɵstyleMap": function() { return /* binding */ ɵɵstyleMap; },
/* harmony export */   "ɵɵstyleMapInterpolate1": function() { return /* binding */ ɵɵstyleMapInterpolate1; },
/* harmony export */   "ɵɵstyleMapInterpolate2": function() { return /* binding */ ɵɵstyleMapInterpolate2; },
/* harmony export */   "ɵɵstyleMapInterpolate3": function() { return /* binding */ ɵɵstyleMapInterpolate3; },
/* harmony export */   "ɵɵstyleMapInterpolate4": function() { return /* binding */ ɵɵstyleMapInterpolate4; },
/* harmony export */   "ɵɵstyleMapInterpolate5": function() { return /* binding */ ɵɵstyleMapInterpolate5; },
/* harmony export */   "ɵɵstyleMapInterpolate6": function() { return /* binding */ ɵɵstyleMapInterpolate6; },
/* harmony export */   "ɵɵstyleMapInterpolate7": function() { return /* binding */ ɵɵstyleMapInterpolate7; },
/* harmony export */   "ɵɵstyleMapInterpolate8": function() { return /* binding */ ɵɵstyleMapInterpolate8; },
/* harmony export */   "ɵɵstyleMapInterpolateV": function() { return /* binding */ ɵɵstyleMapInterpolateV; },
/* harmony export */   "ɵɵstyleProp": function() { return /* binding */ ɵɵstyleProp; },
/* harmony export */   "ɵɵstylePropInterpolate1": function() { return /* binding */ ɵɵstylePropInterpolate1; },
/* harmony export */   "ɵɵstylePropInterpolate2": function() { return /* binding */ ɵɵstylePropInterpolate2; },
/* harmony export */   "ɵɵstylePropInterpolate3": function() { return /* binding */ ɵɵstylePropInterpolate3; },
/* harmony export */   "ɵɵstylePropInterpolate4": function() { return /* binding */ ɵɵstylePropInterpolate4; },
/* harmony export */   "ɵɵstylePropInterpolate5": function() { return /* binding */ ɵɵstylePropInterpolate5; },
/* harmony export */   "ɵɵstylePropInterpolate6": function() { return /* binding */ ɵɵstylePropInterpolate6; },
/* harmony export */   "ɵɵstylePropInterpolate7": function() { return /* binding */ ɵɵstylePropInterpolate7; },
/* harmony export */   "ɵɵstylePropInterpolate8": function() { return /* binding */ ɵɵstylePropInterpolate8; },
/* harmony export */   "ɵɵstylePropInterpolateV": function() { return /* binding */ ɵɵstylePropInterpolateV; },
/* harmony export */   "ɵɵsyntheticHostListener": function() { return /* binding */ ɵɵsyntheticHostListener; },
/* harmony export */   "ɵɵsyntheticHostProperty": function() { return /* binding */ ɵɵsyntheticHostProperty; },
/* harmony export */   "ɵɵtemplate": function() { return /* binding */ ɵɵtemplate; },
/* harmony export */   "ɵɵtemplateRefExtractor": function() { return /* binding */ ɵɵtemplateRefExtractor; },
/* harmony export */   "ɵɵtext": function() { return /* binding */ ɵɵtext; },
/* harmony export */   "ɵɵtextInterpolate": function() { return /* binding */ ɵɵtextInterpolate; },
/* harmony export */   "ɵɵtextInterpolate1": function() { return /* binding */ ɵɵtextInterpolate1; },
/* harmony export */   "ɵɵtextInterpolate2": function() { return /* binding */ ɵɵtextInterpolate2; },
/* harmony export */   "ɵɵtextInterpolate3": function() { return /* binding */ ɵɵtextInterpolate3; },
/* harmony export */   "ɵɵtextInterpolate4": function() { return /* binding */ ɵɵtextInterpolate4; },
/* harmony export */   "ɵɵtextInterpolate5": function() { return /* binding */ ɵɵtextInterpolate5; },
/* harmony export */   "ɵɵtextInterpolate6": function() { return /* binding */ ɵɵtextInterpolate6; },
/* harmony export */   "ɵɵtextInterpolate7": function() { return /* binding */ ɵɵtextInterpolate7; },
/* harmony export */   "ɵɵtextInterpolate8": function() { return /* binding */ ɵɵtextInterpolate8; },
/* harmony export */   "ɵɵtextInterpolateV": function() { return /* binding */ ɵɵtextInterpolateV; },
/* harmony export */   "ɵɵtrustConstantHtml": function() { return /* binding */ ɵɵtrustConstantHtml; },
/* harmony export */   "ɵɵtrustConstantResourceUrl": function() { return /* binding */ ɵɵtrustConstantResourceUrl; },
/* harmony export */   "ɵɵviewQuery": function() { return /* binding */ ɵɵviewQuery; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ 61861);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toArray */ 87665);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/construct */ 31921);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper */ 74917);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ 94283);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 25160);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ 89919);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ 11355);















/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function getClosureSafeProperty(objWithPropertyToExtract) {
  for (var key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }

  throw Error('Could not find renamed property on target object.');
}
/**
 * Sets properties on a target object from a source object, but only if
 * the property doesn't already exist on the target object.
 * @param target The target to set properties on
 * @param source The source of the property keys and values to set
 */


function fillProperties(target, source) {
  for (var key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function stringify(token) {
  if (typeof token === 'string') {
    return token;
  }

  if (Array.isArray(token)) {
    return '[' + token.map(stringify).join(', ') + ']';
  }

  if (token == null) {
    return '' + token;
  }

  if (token.overriddenName) {
    return "".concat(token.overriddenName);
  }

  if (token.name) {
    return "".concat(token.name);
  }

  var res = token.toString();

  if (res == null) {
    return '' + res;
  }

  var newLineIndex = res.indexOf('\n');
  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * Concatenates two strings with separator, allocating new strings only when necessary.
 *
 * @param before before string.
 * @param separator separator string.
 * @param after after string.
 * @returns concatenated string.
 */


function concatStringsWithSpace(before, after) {
  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var __forward_ref__ = getClosureSafeProperty({
  __forward_ref__: getClosureSafeProperty
});
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
 * a query is not yet defined.
 *
 * @usageNotes
 * ### Example
 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * @publicApi
 */


function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;

  forwardRefFn.toString = function () {
    return stringify(this());
  };

  return forwardRefFn;
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * @usageNotes
 * ### Example
 *
 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * @see `forwardRef`
 * @publicApi
 */


function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
/** Checks whether a function is wrapped by a `forwardRef`. */


function isForwardRef(fn) {
  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Base URL for the error details page.
// Keep this value in sync with a similar const in
// `packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts`.


var ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';

var RuntimeError = /*#__PURE__*/function (_Error) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(RuntimeError, _Error);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(RuntimeError);

  function RuntimeError(code, message) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, RuntimeError);

    _this = _super.call(this, formatRuntimeError(code, message));
    _this.code = code;
    return _this;
  }

  return RuntimeError;
}( /*#__PURE__*/(0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_13__.default)(Error)); // Contains a set of error messages that have details guides at angular.io.
// Full list of available error guides can be found at https://angular.io/errors

/* tslint:disable:no-toplevel-property-access */


var RUNTIME_ERRORS_WITH_GUIDES = new Set(["100"
/* EXPRESSION_CHANGED_AFTER_CHECKED */
, "200"
/* CYCLIC_DI_DEPENDENCY */
, "201"
/* PROVIDER_NOT_FOUND */
, "300"
/* MULTIPLE_COMPONENTS_MATCH */
, "301"
/* EXPORT_NOT_FOUND */
, "302"
/* PIPE_NOT_FOUND */
]);
/* tslint:enable:no-toplevel-property-access */

/** Called to format a runtime error */

function formatRuntimeError(code, message) {
  var fullCode = code ? "NG0".concat(code, ": ") : '';
  var errorMessage = "".concat(fullCode).concat(message); // Some runtime errors are still thrown without `ngDevMode` (for example
  // `throwProviderNotFoundError`), so we add `ngDevMode` check here to avoid pulling
  // `RUNTIME_ERRORS_WITH_GUIDES` symbol into prod bundles.
  // TODO: revisit all instances where `RuntimeError` is thrown and see if `ngDevMode` can be added
  // there instead to tree-shake more devmode-only code (and eventually remove `ngDevMode` check
  // from this code).

  if (ngDevMode && RUNTIME_ERRORS_WITH_GUIDES.has(code)) {
    errorMessage = "".concat(errorMessage, ". Find more at ").concat(ERROR_DETAILS_PAGE_BASE_URL, "/NG0").concat(code);
  }

  return errorMessage;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Used for stringify render output in Ivy.
 * Important! This function is very performance-sensitive and we should
 * be extra careful not to introduce megamorphic reads in it.
 * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.
 */


function renderStringify(value) {
  if (typeof value === 'string') return value;
  if (value == null) return ''; // Use `String` so that it invokes the `toString` method of the value. Note that this
  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).

  return String(value);
}
/**
 * Used to stringify a value so that it can be displayed in an error message.
 * Important! This function contains a megamorphic read and should only be
 * used for error messages.
 */


function stringifyForError(value) {
  if (typeof value === 'function') return value.name || value.toString();

  if (typeof value === 'object' && value != null && typeof value.type === 'function') {
    return value.type.name || value.type.toString();
  }

  return renderStringify(value);
}
/** Called when directives inject each other (creating a circular dependency) */


function throwCyclicDependencyError(token, path) {
  var depPath = path ? ". Dependency path: ".concat(path.join(' > '), " > ").concat(token) : '';
  throw new RuntimeError("200"
  /* CYCLIC_DI_DEPENDENCY */
  , "Circular dependency in DI detected for ".concat(token).concat(depPath));
}

function throwMixedMultiProviderError() {
  throw new Error("Cannot mix multi providers and regular providers");
}

function throwInvalidProviderError(ngModuleType, providers, provider) {
  var ngModuleDetail = '';

  if (ngModuleType && providers) {
    var providerDetail = providers.map(function (v) {
      return v == provider ? '?' + provider + '?' : '...';
    });
    ngModuleDetail = " - only instances of Provider and Type are allowed, got: [".concat(providerDetail.join(', '), "]");
  }

  throw new Error("Invalid provider for the NgModule '".concat(stringify(ngModuleType), "'") + ngModuleDetail);
}
/** Throws an error when a token is not found in DI. */


function throwProviderNotFoundError(token, injectorName) {
  var injectorDetails = injectorName ? " in ".concat(injectorName) : '';
  throw new RuntimeError("201"
  /* PROVIDER_NOT_FOUND */
  , "No provider for ".concat(stringifyForError(token), " found").concat(injectorDetails));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function assertNumber(actual, msg) {
  if (!(typeof actual === 'number')) {
    throwError(msg, typeof actual, 'number', '===');
  }
}

function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, 'Expected a number');
  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
}

function assertString(actual, msg) {
  if (!(typeof actual === 'string')) {
    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
  }
}

function assertFunction(actual, msg) {
  if (!(typeof actual === 'function')) {
    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');
  }
}

function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError(msg, actual, expected, '==');
  }
}

function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError(msg, actual, expected, '!=');
  }
}

function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError(msg, actual, expected, '===');
  }
}

function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError(msg, actual, expected, '!==');
  }
}

function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError(msg, actual, expected, '<');
  }
}

function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError(msg, actual, expected, '<=');
  }
}

function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError(msg, actual, expected, '>');
  }
}

function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError(msg, actual, expected, '>=');
  }
}

function assertNotDefined(actual, msg) {
  if (actual != null) {
    throwError(msg, actual, null, '==');
  }
}

function assertDefined(actual, msg) {
  if (actual == null) {
    throwError(msg, actual, null, '!=');
  }
}

function throwError(msg, actual, expected, comparison) {
  throw new Error("ASSERTION ERROR: ".concat(msg) + (comparison == null ? '' : " [Expected=> ".concat(expected, " ").concat(comparison, " ").concat(actual, " <=Actual]")));
}

function assertDomNode(node) {
  // If we're in a worker, `Node` will not be defined.
  if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {
    throwError("The provided value must be an instance of a DOM Node but got ".concat(stringify(node)));
  }
}

function assertIndexInRange(arr, index) {
  assertDefined(arr, 'Array must be defined.');
  var maxLen = arr.length;

  if (index < 0 || index >= maxLen) {
    throwError("Index expected to be less than ".concat(maxLen, " but got ").concat(index));
  }
}

function assertOneOf(value) {
  for (var _len = arguments.length, validValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    validValues[_key - 1] = arguments[_key];
  }

  if (validValues.indexOf(value) !== -1) return true;
  throwError("Expected value to be one of ".concat(JSON.stringify(validValues), " but was ").concat(JSON.stringify(value), "."));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Construct an injectable definition which defines how a token will be constructed by the DI
 * system, and in which injectors (if any) it will be available.
 *
 * This should be assigned to a static `ɵprov` field on a type, which will then be an
 * `InjectableType`.
 *
 * Options:
 * * `providedIn` determines which injectors will include the injectable, by either associating it
 *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
 *   provided in the `'root'` injector, which will be the application-level injector in most apps.
 * * `factory` gives the zero argument function which will create an instance of the injectable.
 *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
 *
 * @codeGenApi
 * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
 */


function ɵɵdefineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: undefined
  };
}
/**
 * @deprecated in v8, delete after v10. This API should be used only by generated code, and that
 * code should now use ɵɵdefineInjectable instead.
 * @publicApi
 */


var defineInjectable = ɵɵdefineInjectable;
/**
 * Construct an `InjectorDef` which configures an injector.
 *
 * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
 * `InjectorType`.
 *
 * Options:
 *
 * * `providers`: an optional array of providers to add to the injector. Each provider must
 *   either have a factory or point to a type which has a `ɵprov` static property (the
 *   type must be an `InjectableType`).
 * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
 *   whose providers will also be added to the injector. Locally provided types will override
 *   providers from imports.
 *
 * @codeGenApi
 */

function ɵɵdefineInjector(options) {
  return {
    providers: options.providers || [],
    imports: options.imports || []
  };
}
/**
 * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
 * inherited value.
 *
 * @param type A type which may have its own (non-inherited) `ɵprov`.
 */


function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
}
/**
 * Return definition only if it is defined directly on `type` and is not inherited from a base
 * class of `type`.
 */


function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) ? type[field] : null;
}
/**
 * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
 *
 * @param type A type which may have `ɵprov`, via inheritance.
 *
 * @deprecated Will be removed in a future version of Angular, where an error will occur in the
 *     scenario if we find the `ɵprov` on an ancestor only.
 */


function getInheritedInjectableDef(type) {
  var def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);

  if (def) {
    var typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it
    // ngDevMode &&

    console.warn("DEPRECATED: DI is instantiating a token \"".concat(typeName, "\" that inherits its @Injectable decorator but does not provide one itself.\n") + "This will become an error in a future version of Angular. Please add @Injectable() to the \"".concat(typeName, "\" class."));
    return def;
  } else {
    return null;
  }
}
/** Gets the name of a type, accounting for some cross-browser differences. */


function getTypeName(type) {
  // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
  // it'll always return the name of the function itself, no matter how many other functions it
  // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
  // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
  // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
  // the issue by converting the function to a string and parsing its name out that way via a regex.
  if (type.hasOwnProperty('name')) {
    return type.name;
  }

  var match = ('' + type).match(/^function\s*([^\s(]+)/);
  return match === null ? '' : match[1];
}
/**
 * Read the injector def type in a way which is immune to accidentally reading inherited value.
 *
 * @param type type which may have an injector def (`ɵinj`)
 */


function getInjectorDef(type) {
  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
}

var NG_PROV_DEF = getClosureSafeProperty({
  ɵprov: getClosureSafeProperty
});
var NG_INJ_DEF = getClosureSafeProperty({
  ɵinj: getClosureSafeProperty
}); // We need to keep these around so we can read off old defs if new defs are unavailable

var NG_INJECTABLE_DEF = getClosureSafeProperty({
  ngInjectableDef: getClosureSafeProperty
});
var NG_INJECTOR_DEF = getClosureSafeProperty({
  ngInjectorDef: getClosureSafeProperty
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection flags for DI.
 *
 * @publicApi
 */

var InjectFlags;

(function (InjectFlags) {
  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer
  // writes exports of it into ngfactory files.

  /** Check self and check parent injector if needed */
  InjectFlags[InjectFlags["Default"] = 0] = "Default";
  /**
   * Specifies that an injector should retrieve a dependency from any injector until reaching the
   * host element of the current component. (Only used with Element Injector)
   */

  InjectFlags[InjectFlags["Host"] = 1] = "Host";
  /** Don't ascend to ancestors of the node requesting injection. */

  InjectFlags[InjectFlags["Self"] = 2] = "Self";
  /** Skip the node that is requesting injection. */

  InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
  /** Inject `defaultValue` instead if token not found. */

  InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Current implementation of inject.
 *
 * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
 * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
 * way for two reasons:
 *  1. `Injector` should not depend on ivy logic.
 *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
 */


var _injectImplementation;

function getInjectImplementation() {
  return _injectImplementation;
}
/**
 * Sets the current inject implementation.
 */


function setInjectImplementation(impl) {
  var previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
/**
 * Injects `root` tokens in limp mode.
 *
 * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
 * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
 * injectable definition.
 */


function injectRootLimpMode(token, notFoundValue, flags) {
  var injectableDef = getInjectableDef(token);

  if (injectableDef && injectableDef.providedIn == 'root') {
    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }

  if (flags & InjectFlags.Optional) return null;
  if (notFoundValue !== undefined) return notFoundValue;
  throwProviderNotFoundError(stringify(token), 'Injector');
}
/**
 * Assert that `_injectImplementation` is not `fn`.
 *
 * This is useful, to prevent infinite recursion.
 *
 * @param fn Function which it should not equal to
 */


function assertInjectImplementationNotEqual(fn) {
  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Convince closure compiler that the wrapped function has no side-effects.
 *
 * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
 * allow us to execute a function but have closure compiler mark the call as no-side-effects.
 * It is important that the return value for the `noSideEffects` function be assigned
 * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
 * compiler.
 */


function noSideEffects(fn) {
  return {
    toString: fn
  }.toString();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The strategy that the default change detector uses to detect changes.
 * When set, takes effect the next time change detection is triggered.
 *
 * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
 *
 * @publicApi
 */


var ChangeDetectionStrategy;

(function (ChangeDetectionStrategy) {
  /**
   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
   * until reactivated by setting the strategy to `Default` (`CheckAlways`).
   * Change detection can still be explicitly invoked.
   * This strategy applies to all child directives and cannot be overridden.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
  /**
   * Use the default `CheckAlways` strategy, in which change detection is automatic until
   * explicitly deactivated.
   */

  ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
/**
 * Defines the possible states of the default change detector.
 * @see `ChangeDetectorRef`
 */


var ChangeDetectorStatus;

(function (ChangeDetectorStatus) {
  /**
   * A state in which, after calling `detectChanges()`, the change detector
   * state becomes `Checked`, and must be explicitly invoked or reactivated.
   */
  ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
  /**
   * A state in which change detection is skipped until the change detector mode
   * becomes `CheckOnce`.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
  /**
   * A state in which change detection continues automatically until explicitly
   * deactivated.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
  /**
   * A state in which a change detector sub tree is not a part of the main tree and
   * should be skipped.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
  /**
   * Indicates that the change detector encountered an error checking a binding
   * or calling a directive lifecycle method and is now in an inconsistent state. Change
   * detectors in this state do not detect changes.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
  /**
   * Indicates that the change detector has been destroyed.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
/**
 * Reports whether a given strategy is currently the default for change detection.
 * @param changeDetectionStrategy The strategy to check.
 * @returns True if the given strategy is the current default, false otherwise.
 * @see `ChangeDetectorStatus`
 * @see `ChangeDetectorRef`
 */


function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
  return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines template and style encapsulation options available for Component's {@link Component}.
 *
 * See {@link Component#encapsulation encapsulation}.
 *
 * @usageNotes
 * ### Example
 *
 * {@example core/ts/metadata/encapsulation.ts region='longform'}
 *
 * @publicApi
 */


var ViewEncapsulation;

(function (ViewEncapsulation) {
  /**
   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
   * Element and pre-processing the style rules provided via {@link Component#styles styles} or
   * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
   * selectors.
   *
   * This is the default option.
   */
  ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

  /**
   * Don't provide any template or style encapsulation.
   */

  ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  /**
   * Use Shadow DOM to encapsulate styles.
   *
   * For the DOM this means using modern [Shadow
   * DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) and
   * creating a ShadowRoot for Component's Host Element.
   */

  ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var __globalThis = typeof globalThis !== 'undefined' && globalThis;

var __window = typeof window !== 'undefined' && window;

var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

var __global = typeof global !== 'undefined' && global; // Always use __globalThis if available, which is the spec-defined global variable across all
// environments, then fallback to __global first, because in Node tests both __global and
// __window may be defined and _global should be __global in that case.


var _global = __globalThis || __global || __window || __self;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function ngDevModeResetPerfCounters() {
  var locationString = typeof location !== 'undefined' ? location.toString() : '';
  var newCounters = {
    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
    firstCreatePass: 0,
    tNode: 0,
    tView: 0,
    rendererCreateTextNode: 0,
    rendererSetText: 0,
    rendererCreateElement: 0,
    rendererAddEventListener: 0,
    rendererSetAttribute: 0,
    rendererRemoveAttribute: 0,
    rendererSetProperty: 0,
    rendererSetClassName: 0,
    rendererAddClass: 0,
    rendererRemoveClass: 0,
    rendererSetStyle: 0,
    rendererRemoveStyle: 0,
    rendererDestroy: 0,
    rendererDestroyNode: 0,
    rendererMoveNode: 0,
    rendererRemoveNode: 0,
    rendererAppendChild: 0,
    rendererInsertBefore: 0,
    rendererCreateComment: 0
  }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.

  var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
  _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
  return newCounters;
}
/**
 * This function checks to see if the `ngDevMode` has been set. If yes,
 * then we honor it, otherwise we default to dev mode with additional checks.
 *
 * The idea is that unless we are doing production build where we explicitly
 * set `ngDevMode == false` we should be helping the developer by providing
 * as much early warning and errors as possible.
 *
 * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
 * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
 * is defined for the entire instruction set.
 *
 * When checking `ngDevMode` on toplevel, always init it before referencing it
 * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
 *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
 *
 * Details on possible values for `ngDevMode` can be found on its docstring.
 *
 * NOTE:
 * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */


function initNgDevMode() {
  // The below checks are to ensure that calling `initNgDevMode` multiple times does not
  // reset the counters.
  // If the `ngDevMode` is not an object, then it means we have not created the perf counters
  // yet.
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (typeof ngDevMode !== 'object') {
      ngDevModeResetPerfCounters();
    }

    return typeof ngDevMode !== 'undefined' && !!ngDevMode;
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file contains reuseable "empty" symbols that can be used as default return values
 * in different parts of the rendering code. Because the same symbols are returned, this
 * allows for identity checks against these values to be consistently used by the framework
 * code.
 */


var EMPTY_OBJ = {};
var EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in

if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
  // These property accesses can be ignored because ngDevMode will be set to false
  // when optimizing code and the whole if statement will be dropped.
  // tslint:disable-next-line:no-toplevel-property-access
  Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access

  Object.freeze(EMPTY_ARRAY);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NG_COMP_DEF = getClosureSafeProperty({
  ɵcmp: getClosureSafeProperty
});
var NG_DIR_DEF = getClosureSafeProperty({
  ɵdir: getClosureSafeProperty
});
var NG_PIPE_DEF = getClosureSafeProperty({
  ɵpipe: getClosureSafeProperty
});
var NG_MOD_DEF = getClosureSafeProperty({
  ɵmod: getClosureSafeProperty
});
var NG_LOC_ID_DEF = getClosureSafeProperty({
  ɵloc: getClosureSafeProperty
});
var NG_FACTORY_DEF = getClosureSafeProperty({
  ɵfac: getClosureSafeProperty
});
/**
 * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
 * the key and the directive's unique ID as the value. This allows us to map directives to their
 * bloom filter bit for DI.
 */
// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.

var NG_ELEMENT_ID = getClosureSafeProperty({
  __NG_ELEMENT_ID__: getClosureSafeProperty
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var _renderCompCount = 0;
/**
 * Create a component definition object.
 *
 *
 * # Example
 * ```
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵcmp = defineComponent({
 *     ...
 *   });
 * }
 * ```
 * @codeGenApi
 */

function ɵɵdefineComponent(componentDefinition) {
  return noSideEffects(function () {
    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
    // See the `initNgDevMode` docstring for more information.
    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
    var type = componentDefinition.type;
    var declaredInputs = {};
    var def = {
      type: type,
      providersResolver: null,
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      factory: null,
      template: componentDefinition.template || null,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      hostBindings: componentDefinition.hostBindings || null,
      hostVars: componentDefinition.hostVars || 0,
      hostAttrs: componentDefinition.hostAttrs || null,
      contentQueries: componentDefinition.contentQueries || null,
      declaredInputs: declaredInputs,
      inputs: null,
      outputs: null,
      exportAs: componentDefinition.exportAs || null,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      pipeDefs: null,
      selectors: componentDefinition.selectors || EMPTY_ARRAY,
      viewQuery: componentDefinition.viewQuery || null,
      features: componentDefinition.features || null,
      data: componentDefinition.data || {},
      // TODO(misko): convert ViewEncapsulation into const enum so that it can be used
      // directly in the next line. Also `None` should be 0 not 2.
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,
      id: 'c',
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      setInput: null,
      schemas: componentDefinition.schemas || null,
      tView: null
    };
    var directiveTypes = componentDefinition.directives;
    var feature = componentDefinition.features;
    var pipeTypes = componentDefinition.pipes;
    def.id += _renderCompCount++;
    def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(function (fn) {
      return fn(def);
    });
    def.directiveDefs = directiveTypes ? function () {
      return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef);
    } : null;
    def.pipeDefs = pipeTypes ? function () {
      return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef);
    } : null;
    return def;
  });
}
/**
 * Generated next to NgModules to monkey-patch directive and pipe references onto a component's
 * definition, when generating a direct reference in the component file would otherwise create an
 * import cycle.
 *
 * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.
 *
 * @codeGenApi
 */


function ɵɵsetComponentScope(type, directives, pipes) {
  var def = type.ɵcmp;

  def.directiveDefs = function () {
    return directives.map(extractDirectiveDef);
  };

  def.pipeDefs = function () {
    return pipes.map(extractPipeDef);
  };
}

function extractDirectiveDef(type) {
  var def = getComponentDef(type) || getDirectiveDef(type);

  if (ngDevMode && !def) {
    throw new Error("'".concat(type.name, "' is neither 'ComponentType' or 'DirectiveType'."));
  }

  return def;
}

function extractPipeDef(type) {
  var def = getPipeDef(type);

  if (ngDevMode && !def) {
    throw new Error("'".concat(type.name, "' is not a 'PipeType'."));
  }

  return def;
}

var autoRegisterModuleById = {};
/**
 * @codeGenApi
 */

function ɵɵdefineNgModule(def) {
  return noSideEffects(function () {
    var res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };

    if (def.id != null) {
      autoRegisterModuleById[def.id] = def.type;
    }

    return res;
  });
}
/**
 * Adds the module metadata that is necessary to compute the module's transitive scope to an
 * existing module definition.
 *
 * Scope metadata of modules is not used in production builds, so calls to this function can be
 * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
 * to become eligible for tree-shaking as well.
 *
 * @codeGenApi
 */


function ɵɵsetNgModuleScope(type, scope) {
  return noSideEffects(function () {
    var ngModuleDef = getNgModuleDef(type, true);
    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
  });
}
/**
 * Inverts an inputs or outputs lookup such that the keys, which were the
 * minified keys, are part of the values, and the values are parsed so that
 * the publicName of the property is the new key
 *
 * e.g. for
 *
 * ```
 * class Comp {
 *   @Input()
 *   propName1: string;
 *
 *   @Input('publicName2')
 *   declaredPropName2: number;
 * }
 * ```
 *
 * will be serialized as
 *
 * ```
 * {
 *   propName1: 'propName1',
 *   declaredPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * which is than translated by the minifier as:
 *
 * ```
 * {
 *   minifiedPropName1: 'propName1',
 *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * becomes: (public name => minifiedName)
 *
 * ```
 * {
 *  'propName1': 'minifiedPropName1',
 *  'publicName2': 'minifiedPropName2',
 * }
 * ```
 *
 * Optionally the function can take `secondary` which will result in: (public name => declared name)
 *
 * ```
 * {
 *  'propName1': 'propName1',
 *  'publicName2': 'declaredPropName2',
 * }
 * ```
 *

 */


function invertObject(obj, secondary) {
  if (obj == null) return EMPTY_OBJ;
  var newLookup = {};

  for (var minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      var publicName = obj[minifiedKey];
      var declaredName = publicName;

      if (Array.isArray(publicName)) {
        declaredName = publicName[1];
        publicName = publicName[0];
      }

      newLookup[publicName] = minifiedKey;

      if (secondary) {
        secondary[publicName] = declaredName;
      }
    }
  }

  return newLookup;
}
/**
 * Create a directive definition object.
 *
 * # Example
 * ```ts
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵdir = ɵɵdefineDirective({
 *     ...
 *   });
 * }
 * ```
 *
 * @codeGenApi
 */


var ɵɵdefineDirective = ɵɵdefineComponent;
/**
 * Create a pipe definition object.
 *
 * # Example
 * ```
 * class MyPipe implements PipeTransform {
 *   // Generated by Angular Template Compiler
 *   static ɵpipe = definePipe({
 *     ...
 *   });
 * }
 * ```
 * @param pipeDef Pipe definition generated by the compiler
 *
 * @codeGenApi
 */

function ɵɵdefinePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
/**
 * The following getter methods retrieve the definition from the type. Currently the retrieval
 * honors inheritance, but in the future we may change the rule to require that definitions are
 * explicit. This would require some sort of migration strategy.
 */


function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}

function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}

function getPipeDef(type) {
  return type[NG_PIPE_DEF] || null;
}

function getNgModuleDef(type, throwNotFound) {
  var ngModuleDef = type[NG_MOD_DEF] || null;

  if (!ngModuleDef && throwNotFound === true) {
    throw new Error("Type ".concat(stringify(type), " does not have '\u0275mod' property."));
  }

  return ngModuleDef;
}

function getNgLocaleIdDef(type) {
  return type[NG_LOC_ID_DEF] || null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Below are constants for LView indices to help us look up LView members
// without having to remember the specific indices.
// Uglify will inline these when minifying so there shouldn't be a cost.


var HOST = 0;
var TVIEW = 1;
var FLAGS = 2;
var PARENT = 3;
var NEXT = 4;
var TRANSPLANTED_VIEWS_TO_REFRESH = 5;
var T_HOST = 6;
var CLEANUP = 7;
var CONTEXT = 8;
var INJECTOR = 9;
var RENDERER_FACTORY = 10;
var RENDERER = 11;
var SANITIZER = 12;
var CHILD_HEAD = 13;
var CHILD_TAIL = 14; // FIXME(misko): Investigate if the three declarations aren't all same thing.

var DECLARATION_VIEW = 15;
var DECLARATION_COMPONENT_VIEW = 16;
var DECLARATION_LCONTAINER = 17;
var PREORDER_HOOK_FLAGS = 18;
var QUERIES = 19;
/**
 * Size of LView's header. Necessary to adjust for it when setting slots.
 *
 * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate
 * instruction index into `LView` index. All other indexes should be in the `LView` index space and
 * there should be no need to refer to `HEADER_OFFSET` anywhere else.
 */

var HEADER_OFFSET = 20;
/**
 * Converts `TViewType` into human readable text.
 * Make sure this matches with `TViewType`
 */

var TViewTypeAsString = ['Root', 'Component', 'Embedded' // 2
]; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

var unusedValueExportToPlacateAjd = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Special location which allows easy identification of type. If we have an array which was
 * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
 * `LContainer`.
 */

var TYPE = 1;
/**
 * Below are constants for LContainer indices to help us look up LContainer members
 * without having to remember the specific indices.
 * Uglify will inline these when minifying so there shouldn't be a cost.
 */

/**
 * Flag to signify that this `LContainer` may have transplanted views which need to be change
 * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
 *
 * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
 * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
 * that the `MOVED_VIEWS` are transplanted and on-push.
 */

var HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
// As we already have these constants in LView, we don't need to re-create them.
// T_HOST is index 6
// We already have this constants in LView, we don't need to re-create it.

var NATIVE = 7;
var VIEW_REFS = 8;
var MOVED_VIEWS = 9;
/**
 * Size of LContainer's header. Represents the index after which all views in the
 * container will be inserted. We need to keep a record of current views so we know
 * which views are already in the DOM (and don't need to be re-added) and so we can
 * remove views from the DOM when they are no longer required.
 */

var CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

var unusedValueExportToPlacateAjd$1 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * True if `value` is `LView`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */

function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === 'object';
}
/**
 * True if `value` is `LContainer`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}

function isContentQueryHost(tNode) {
  return (tNode.flags & 8
  /* hasContentQuery */
  ) !== 0;
}

function isComponentHost(tNode) {
  return (tNode.flags & 2
  /* isComponentHost */
  ) === 2
  /* isComponentHost */
  ;
}

function isDirectiveHost(tNode) {
  return (tNode.flags & 1
  /* isDirectiveHost */
  ) === 1
  /* isDirectiveHost */
  ;
}

function isComponentDef(def) {
  return def.template !== null;
}

function isRootView(target) {
  return (target[FLAGS] & 512
  /* IsRoot */
  ) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// [Assert functions do not constraint type when they are guarded by a truthy
// expression.](https://github.com/microsoft/TypeScript/issues/37295)


function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}

function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');
}

function assertTNode(tNode) {
  assertDefined(tNode, 'TNode must be defined');

  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {
    throwError('Not of type TNode, got: ' + tNode);
  }
}

function assertTIcu(tIcu) {
  assertDefined(tIcu, 'Expected TIcu to be defined');

  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {
    throwError('Object is not of TIcu type.');
  }
}

function assertComponentType(actual) {
  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.';

  if (!getComponentDef(actual)) {
    throwError(msg);
  }
}

function assertNgModuleType(actual) {
  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.';

  if (!getNgModuleDef(actual)) {
    throwError(msg);
  }
}

function assertCurrentTNodeIsParent(isParent) {
  assertEqual(isParent, true, 'currentTNode should be a parent');
}

function assertHasParent(tNode) {
  assertDefined(tNode, 'currentTNode should exist!');
  assertDefined(tNode.parent, 'currentTNode should have a parent');
}

function assertDataNext(lView, index, arr) {
  if (arr == null) arr = lView;
  assertEqual(arr.length, index, "index ".concat(index, " expected to be at the end of arr (length ").concat(arr.length, ")"));
}

function assertLContainer(value) {
  assertDefined(value, 'LContainer must be defined');
  assertEqual(isLContainer(value), true, 'Expecting LContainer');
}

function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
}

function assertLView(value) {
  assertDefined(value, 'LView must be defined');
  assertEqual(isLView(value), true, 'Expecting LView');
}

function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
}

function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
}
/**
 * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
 * an interface, so we can't do a direct instanceof check.
 */


function assertDirectiveDef(obj) {
  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
    throwError("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.");
  }
}

function assertIndexInDeclRange(lView, index) {
  var tView = lView[1];
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}

function assertIndexInVarsRange(lView, index) {
  var tView = lView[1];
  assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);
}

function assertIndexInExpandoRange(lView, index) {
  var tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}

function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError("Index out of range (expecting ".concat(lower, " <= ").concat(index, " < ").concat(upper, ")"));
  }
}

function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');
}

function assertParentView(lView, errMessage) {
  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\'s host view)');
}
/**
 * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a
 * NodeInjector data structure.
 *
 * @param lView `LView` which should be checked.
 * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.
 */


function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(lView, injectorIndex + 8
  /* PARENT */
  );
  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 8
  /* PARENT */
  ], 'injectorIndex should point to parent injector');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getFactoryDef(type, throwNotFound) {
  var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);

  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error("Type ".concat(stringify(type), " does not have '\u0275fac' property."));
  }

  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents a basic change from a previous to a new value for a single
 * property on a directive instance. Passed as a value in a
 * {@link SimpleChanges} object to the `ngOnChanges` hook.
 *
 * @see `OnChanges`
 *
 * @publicApi
 */


var SimpleChange = /*#__PURE__*/function () {
  function SimpleChange(previousValue, currentValue, firstChange) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SimpleChange);

    this.previousValue = previousValue;
    this.currentValue = currentValue;
    this.firstChange = firstChange;
  }
  /**
   * Check whether the new value is the first value assigned.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SimpleChange, [{
    key: "isFirstChange",
    value: function isFirstChange() {
      return this.firstChange;
    }
  }]);

  return SimpleChange;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The NgOnChangesFeature decorates a component with support for the ngOnChanges
 * lifecycle hook, so it should be included in any component that implements
 * that hook.
 *
 * If the component or directive uses inheritance, the NgOnChangesFeature MUST
 * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
 * inherited properties will not be propagated to the ngOnChanges lifecycle
 * hook.
 *
 * Example usage:
 *
 * ```
 * static ɵcmp = defineComponent({
 *   ...
 *   inputs: {name: 'publicName'},
 *   features: [NgOnChangesFeature]
 * });
 * ```
 *
 * @codeGenApi
 */


function ɵɵNgOnChangesFeature() {
  return NgOnChangesFeatureImpl;
}

function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }

  return rememberChangeHistoryAndInvokeOnChangesHook;
} // This option ensures that the ngOnChanges lifecycle hook will be inherited
// from superclasses (in InheritDefinitionFeature).

/** @nocollapse */
// tslint:disable-next-line:no-toplevel-property-access


ɵɵNgOnChangesFeature.ngInherit = true;
/**
 * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
 * `ngOnChanges`.
 *
 * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
 * found it invokes `ngOnChanges` on the component instance.
 *
 * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
 *     it is guaranteed to be called with component instance.
 */

function rememberChangeHistoryAndInvokeOnChangesHook() {
  var simpleChangesStore = getSimpleChangesStore(this);
  var current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;

  if (current) {
    var previous = simpleChangesStore.previous;

    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      // New changes are copied to the previous store, so that we don't lose history for inputs
      // which were not changed this time
      for (var key in current) {
        previous[key] = current[key];
      }
    }

    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}

function ngOnChangesSetInput(instance, value, publicName, privateName) {
  var simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
    previous: EMPTY_OBJ,
    current: null
  });
  var current = simpleChangesStore.current || (simpleChangesStore.current = {});
  var previous = simpleChangesStore.previous;
  var declaredName = this.declaredInputs[publicName];
  var previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  instance[privateName] = value;
}

var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';

function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}

function setSimpleChangesStore(instance, store) {
  return instance[SIMPLE_CHANGES_STORE] = store;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var profilerCallback = null;
/**
 * Sets the callback function which will be invoked before and after performing certain actions at
 * runtime (for example, before and after running change detection).
 *
 * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
 * The contract of the function might be changed in any release and/or the function can be removed
 * completely.
 *
 * @param profiler function provided by the caller or null value to disable profiling.
 */

var setProfiler = function setProfiler(profiler) {
  profilerCallback = profiler;
};
/**
 * Profiler function which wraps user code executed by the runtime.
 *
 * @param event ProfilerEvent corresponding to the execution context
 * @param instance component instance
 * @param hookOrListener lifecycle hook function or output listener. The value depends on the
 *  execution context
 * @returns
 */


var profiler = function profiler(event, instance, hookOrListener) {
  if (profilerCallback != null
  /* both `null` and `undefined` */
  ) {
    profilerCallback(event, instance, hookOrListener);
  }
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
 * inject the `DOCUMENT` token and are done.
 *
 * Ivy is special because it does not rely upon the DI and must get hold of the document some other
 * way.
 *
 * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
 * Wherever ivy needs the global document, it calls `getDocument()` instead.
 *
 * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
 * tell ivy what the global `document` is.
 *
 * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
 * by calling `setDocument()` when providing the `DOCUMENT` token.
 */

var DOCUMENT = undefined;
/**
 * Tell ivy what the `document` is for this platform.
 *
 * It is only necessary to call this if the current platform is not a browser.
 *
 * @param document The object representing the global `document` in this environment.
 */

function setDocument(document) {
  DOCUMENT = document;
}
/**
 * Access the object that represents the `document` for this platform.
 *
 * Ivy calls this whenever it needs to access the `document` object.
 * For example to create the renderer or to do sanitization.
 */


function getDocument() {
  if (DOCUMENT !== undefined) {
    return DOCUMENT;
  } else if (typeof document !== 'undefined') {
    return document;
  } // No "document" can be found. This should only happen if we are running ivy outside Angular and
  // the current platform is not a browser. Since this is not a supported scenario at the moment
  // this should not happen in Angular apps.
  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
  // public API. Meanwhile we just return `undefined` and let the application fail.


  return undefined;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: cleanup once the code is merged in angular/angular


var RendererStyleFlags3;

(function (RendererStyleFlags3) {
  RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
  RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
/** Returns whether the `renderer` is a `ProceduralRenderer3` */


function isProceduralRenderer(renderer) {
  return !!renderer.listen;
}

var ɵ0 = function ɵ0(hostElement, rendererType) {
  return getDocument();
};

var domRendererFactory3 = {
  createRenderer: ɵ0
}; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

var unusedValueExportToPlacateAjd$2 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
 * in same location in `LView`. This is because we don't want to pre-allocate space for it
 * because the storage is sparse. This file contains utilities for dealing with such data types.
 *
 * How do we know what is stored at a given location in `LView`.
 * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
 * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
 *   - `typeof value[TYPE] === 'object'` => `LView`
 *      - This happens when we have a component at a given location
 *   - `typeof value[TYPE] === true` => `LContainer`
 *      - This happens when we have `LContainer` binding at a given location.
 *
 *
 * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
 */

/**
 * Returns `RNode`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */

function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }

  return value;
}
/**
 * Returns `LView` or `null` if not found.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function unwrapLView(value) {
  while (Array.isArray(value)) {
    // This check is same as `isLView()` but we don't call at as we don't want to call
    // `Array.isArray()` twice and give JITer more work for inlining.
    if (typeof value[TYPE] === 'object') return value;
    value = value[HOST];
  }

  return null;
}
/**
 * Returns `LContainer` or `null` if not found.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function unwrapLContainer(value) {
  while (Array.isArray(value)) {
    // This check is same as `isLContainer()` but we don't call at as we don't want to call
    // `Array.isArray()` twice and give JITer more work for inlining.
    if (value[TYPE] === true) return value;
    value = value[HOST];
  }

  return null;
}
/**
 * Retrieves an element value from the provided `viewData`, by unwrapping
 * from any containers, component views, or style contexts.
 */


function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');
  return unwrapRNode(lView[index]);
}
/**
 * Retrieve an `RNode` for a given `TNode` and `LView`.
 *
 * This function guarantees in dev mode to retrieve a non-null `RNode`.
 *
 * @param tNode
 * @param lView
 */


function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  var node = unwrapRNode(lView[tNode.index]);
  ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
  return node;
}
/**
 * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
 *
 * Some `TNode`s don't have associated `RNode`s. For example `Projection`
 *
 * @param tNode
 * @param lView
 */


function getNativeByTNodeOrNull(tNode, lView) {
  var index = tNode === null ? -1 : tNode.index;

  if (index !== -1) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    var node = unwrapRNode(lView[index]);
    ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
    return node;
  }

  return null;
} // fixme(misko): The return Type should be `TNode|null`


function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
  var tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
/** Retrieves a value from any `LView` or `TData`. */


function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}

function getComponentLViewByIndex(nodeIndex, hostView) {
  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  var slotValue = hostView[nodeIndex];
  var lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
/** Checks whether a given view is in creation mode */


function isCreationMode(view) {
  return (view[FLAGS] & 4
  /* CreationMode */
  ) === 4
  /* CreationMode */
  ;
}
/**
 * Returns a boolean for whether the view is attached to the change detection tree.
 *
 * Note: This determines whether a view should be checked, not whether it's inserted
 * into a container. For that, you'll want `viewAttachedToContainer` below.
 */


function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128
  /* Attached */
  ) === 128
  /* Attached */
  ;
}
/** Returns a boolean for whether the view is attached to a container. */


function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}

function getConstant(consts, index) {
  if (index === null || index === undefined) return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
/**
 * Resets the pre-order hook flags of the view.
 * @param lView the LView on which the flags are reset
 */


function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
/**
 * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
 * whose
 *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
 *  or
 *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
 */


function updateTransplantedViewCount(lContainer, amount) {
  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
  var viewOrContainer = lContainer;
  var parent = lContainer[PARENT];

  while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {
    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
    viewOrContainer = parent;
    parent = parent[PARENT];
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var instructionState = {
  lFrame: createLFrame(null),
  bindingsEnabled: true,
  isInCheckNoChangesMode: false
};
/**
 * Returns true if the instruction state stack is empty.
 *
 * Intended to be called from tests only (tree shaken otherwise).
 */

function specOnlyIsInstructionStateEmpty() {
  return instructionState.lFrame.parent === null;
}

function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}

function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}

function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}

function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
/**
 * Enables directive matching on elements.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * @codeGenApi
 */


function ɵɵenableBindings() {
  instructionState.bindingsEnabled = true;
}
/**
 * Disables directive matching on element.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * @codeGenApi
 */


function ɵɵdisableBindings() {
  instructionState.bindingsEnabled = false;
}
/**
 * Return the current `LView`.
 */


function getLView() {
  return instructionState.lFrame.lView;
}
/**
 * Return the current `TView`.
 */


function getTView() {
  return instructionState.lFrame.tView;
}
/**
 * Restores `contextViewData` to the given OpaqueViewState instance.
 *
 * Used in conjunction with the getCurrentView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * @param viewToRestore The OpaqueViewState instance to restore.
 * @returns Context of the restored OpaqueViewState instance.
 *
 * @codeGenApi
 */


function ɵɵrestoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}

function getCurrentTNode() {
  var currentTNode = getCurrentTNodePlaceholderOk();

  while (currentTNode !== null && currentTNode.type === 64
  /* Placeholder */
  ) {
    currentTNode = currentTNode.parent;
  }

  return currentTNode;
}

function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}

function getCurrentParentTNode() {
  var lFrame = instructionState.lFrame;
  var currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}

function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  var lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}

function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}

function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}

function setCurrentTNodeAsParent() {
  instructionState.lFrame.isParent = true;
}

function getContextLView() {
  return instructionState.lFrame.contextLView;
}

function isInCheckNoChangesMode() {
  // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
  return instructionState.isInCheckNoChangesMode;
}

function setIsInCheckNoChangesMode(mode) {
  instructionState.isInCheckNoChangesMode = mode;
} // top level variables should not be exported for performance reasons (PERF_NOTES.md)


function getBindingRoot() {
  var lFrame = instructionState.lFrame;
  var index = lFrame.bindingRootIndex;

  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }

  return index;
}

function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}

function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}

function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}

function incrementBindingIndex(count) {
  var lFrame = instructionState.lFrame;
  var index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}

function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}

function setInI18nBlock(isInI18nBlock) {
  instructionState.lFrame.inI18n = isInI18nBlock;
}
/**
 * Set a new binding root index so that host template functions can execute.
 *
 * Bindings inside the host template are 0 index. But because we don't know ahead of time
 * how many host bindings we have we can't pre-compute them. For this reason they are all
 * 0 index and we just shift the root so that they match next available location in the LView.
 *
 * @param bindingRootIndex Root index for `hostBindings`
 * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
 *        whose `hostBindings` are being processed.
 */


function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  var lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
/**
 * When host binding is executing this points to the directive index.
 * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
 * `LView[getCurrentDirectiveIndex()]` is directive instance.
 */


function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
/**
 * Sets an index of a directive whose `hostBindings` are being processed.
 *
 * @param currentDirectiveIndex `TData` index where current directive instance can be found.
 */


function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
/**
 * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
 * executed.
 *
 * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
 */


function getCurrentDirectiveDef(tData) {
  var currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}

function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}

function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
/**
 * Returns a `TNode` of the location where the current `LView` is declared at.
 *
 * @param lView an `LView` that we want to find parent `TNode` for.
 */


function getDeclarationTNode(lView) {
  var tView = lView[TVIEW]; // Return the declaration parent for embedded views

  if (tView.type === 2
  /* Embedded */
  ) {
    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
    return tView.declTNode;
  } // Components don't have `TView.declTNode` because each instance of component could be
  // inserted in different location, hence `TView.declTNode` is meaningless.
  // Falling back to `T_HOST` in case we cross component boundary.


  if (tView.type === 1
  /* Component */
  ) {
    return lView[T_HOST];
  } // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.


  return null;
}
/**
 * This is a light weight version of the `enterView` which is needed by the DI system.
 *
 * @param lView `LView` location of the DI context.
 * @param tNode `TNode` for DI context
 * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration
 *     tree from `tNode`  until we find parent declared `TElementNode`.
 * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared
 *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated
 *     `NodeInjector` can be found and we should instead use `ModuleInjector`.
 *     - If `true` than this call must be fallowed by `leaveDI`
 *     - If `false` than this call failed and we should NOT call `leaveDI`
 */


function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);

  if (flags & InjectFlags.SkipSelf) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    var parentTNode = tNode;
    var parentLView = lView;

    while (true) {
      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');
      parentTNode = parentTNode.parent;

      if (parentTNode === null && !(flags & InjectFlags.Host)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null) break; // In this case, a parent exists and is definitely an element. So it will definitely
        // have an existing lView as the declaration view, which is why we can assume it's defined.

        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');
        parentLView = parentLView[DECLARATION_VIEW]; // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives
        // We want to skip those and look only at Elements and ElementContainers to ensure
        // we're looking at true parent nodes, and not content or other types.

        if (parentTNode.type & (2
        /* Element */
        | 8
        /* ElementContainer */
        )) {
          break;
        }
      } else {
        break;
      }
    }

    if (parentTNode === null) {
      // If we failed to find a parent TNode this means that we should use module injector.
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }

  ngDevMode && assertTNodeForLView(tNode, lView);
  var lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
/**
 * Swap the current lView with a new lView.
 *
 * For performance reasons we store the lView in the top level of the module.
 * This way we minimize the number of properties to read. Whenever a new view
 * is entered we have to store the lView for later, and when the view is
 * exited the state has to be restored
 *
 * @param newView New lView to become active
 * @returns the previously active lView;
 */


function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], '????');
  ngDevMode && assertLViewOrUndefined(newView);
  var newLFrame = allocLFrame();

  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
  }

  var tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
/**
 * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
 */


function allocLFrame() {
  var currentLFrame = instructionState.lFrame;
  var childLFrame = currentLFrame === null ? null : currentLFrame.child;
  var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}

function createLFrame(parent) {
  var lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent: parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.

  return lFrame;
}
/**
 * A lightweight version of leave which is used with DI.
 *
 * This function only resets `currentTNode` and `LView` as those are the only properties
 * used with DI (`enterDI()`).
 *
 * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
 * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
 */


function leaveViewLight() {
  var oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
/**
 * This is a lightweight version of the `leaveView` which is needed by the DI system.
 *
 * NOTE: this function is an alias so that we can change the type of the function to have `void`
 * return type.
 */


var leaveDI = leaveViewLight;
/**
 * Leave the current `LView`
 *
 * This pops the `LFrame` with the associated `LView` from the stack.
 *
 * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
 * because for performance reasons we don't release `LFrame` but rather keep it for next use.
 */

function leaveView() {
  var oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}

function nextContextImpl(level) {
  var contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}

function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }

  return currentView;
}
/**
 * Gets the currently selected element index.
 *
 * Used with {@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 */


function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
/**
 * Sets the most recent index passed to {@link select}
 *
 * Used with {@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 *
 * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
 * run if and when the provided `index` value is different from the current selected index value.)
 */


function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\'t set index passed end of LView');
  instructionState.lFrame.selectedIndex = index;
}
/**
 * Gets the `tNode` that represents currently selected element.
 */


function getSelectedTNode() {
  var lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
 *
 * @codeGenApi
 */


function ɵɵnamespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
 *
 * @codeGenApi
 */


function ɵɵnamespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 *
 * @codeGenApi
 */


function ɵɵnamespaceHTML() {
  namespaceHTMLInternal();
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 */


function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}

function getNamespace() {
  return instructionState.lFrame.currentNamespace;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
 *
 * Must be run *only* on the first template pass.
 *
 * Sets up the pre-order hooks on the provided `tView`,
 * see {@link HookData} for details about the data structure.
 *
 * @param directiveIndex The index of the directive in LView
 * @param directiveDef The definition containing the hooks to setup in tView
 * @param tView The current TView
 */


function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  var _directiveDef$type$pr = directiveDef.type.prototype,
      ngOnChanges = _directiveDef$type$pr.ngOnChanges,
      ngOnInit = _directiveDef$type$pr.ngOnInit,
      ngDoCheck = _directiveDef$type$pr.ngDoCheck;

  if (ngOnChanges) {
    var wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);
  }

  if (ngOnInit) {
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
  }

  if (ngDoCheck) {
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
  }
}
/**
 *
 * Loops through the directives on the provided `tNode` and queues hooks to be
 * run that are not initialization hooks.
 *
 * Should be executed during `elementEnd()` and similar to
 * preserve hook execution order. Content, view, and destroy hooks for projected
 * components and directives must be called *before* their hosts.
 *
 * Sets up the content, view, and destroy hooks on the provided `tView`,
 * see {@link HookData} for details about the data structure.
 *
 * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
 * separately at `elementStart`.
 *
 * @param tView The current TView
 * @param tNode The TNode whose directives are to be searched for hooks to queue
 */


function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in
  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
  // hooks for projected components and directives must be called *before* their hosts.

  for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    var _directiveDef = tView.data[i];
    ngDevMode && assertDefined(_directiveDef, 'Expecting DirectiveDef');
    var lifecycleHooks = _directiveDef.type.prototype;
    var ngAfterContentInit = lifecycleHooks.ngAfterContentInit,
        ngAfterContentChecked = lifecycleHooks.ngAfterContentChecked,
        ngAfterViewInit = lifecycleHooks.ngAfterViewInit,
        ngAfterViewChecked = lifecycleHooks.ngAfterViewChecked,
        ngOnDestroy = lifecycleHooks.ngOnDestroy;

    if (ngAfterContentInit) {
      (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
    }

    if (ngAfterContentChecked) {
      (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
    }

    if (ngAfterViewInit) {
      (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
    }

    if (ngAfterViewChecked) {
      (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
    }

    if (ngOnDestroy != null) {
      (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
    }
  }
}
/**
 * Executing hooks requires complex logic as we need to deal with 2 constraints.
 *
 * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
 * once, across many change detection cycles. This must be true even if some hooks throw, or if
 * some recursively trigger a change detection cycle.
 * To solve that, it is required to track the state of the execution of these init hooks.
 * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
 * and the index within that phase. They can be seen as a cursor in the following structure:
 * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
 * They are are stored as flags in LView[FLAGS].
 *
 * 2. Pre-order hooks can be executed in batches, because of the select instruction.
 * To be able to pause and resume their execution, we also need some state about the hook's array
 * that is being processed:
 * - the index of the next hook to be executed
 * - the number of init hooks already found in the processed part of the  array
 * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
 */

/**
 * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
 * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
 * / write of the init-hooks related flags.
 * @param lView The LView where hooks are defined
 * @param hooks Hooks to be run
 * @param nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3
  /* InitPhaseCompleted */
  , nodeIndex);
}
/**
 * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
 * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
 * @param lView The LView where hooks are defined
 * @param hooks Hooks to be run
 * @param initPhase A phase for which hooks should be run
 * @param nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3
  /* InitPhaseCompleted */
  , 'Init pre-order hooks should not be called more than once');

  if ((lView[FLAGS] & 3
  /* InitPhaseStateMask */
  ) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}

function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3
  /* InitPhaseCompleted */
  , 'Init hooks phase should not be incremented after all init hooks have been run.');
  var flags = lView[FLAGS];

  if ((flags & 3
  /* InitPhaseStateMask */
  ) === initPhase) {
    flags &= 2047
    /* IndexWithinInitPhaseReset */
    ;
    flags += 1
    /* InitPhaseStateIncrementer */
    ;
    lView[FLAGS] = flags;
  }
}
/**
 * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
 * the first LView pass
 *
 * @param currentView The current view
 * @param arr The array in which the hooks are found
 * @param initPhaseState the current state of the init phase
 * @param currentNodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');
  var startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535
  /* IndexOfTheNextPreOrderHookMaskMask */
  : 0;
  var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  var max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1

  var lastNodeIndexFound = 0;

  for (var i = startIndex; i < max; i++) {
    var hook = arr[i + 1];

    if (typeof hook === 'number') {
      lastNodeIndexFound = arr[i];

      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      var isInitHook = arr[i] < 0;
      if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536
      /* NumberOfInitHooksCalledIncrementer */
      ;

      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760
        /* NumberOfInitHooksCalledMask */
        ) + i + 2;
      }

      i++;
    }
  }
}
/**
 * Execute one hook against the current `LView`.
 *
 * @param currentView The current view
 * @param initPhaseState the current state of the init phase
 * @param arr The array in which the hooks are found
 * @param i The current index within the hook data array
 */


function callHook(currentView, initPhase, arr, i) {
  var isInitHook = arr[i] < 0;
  var hook = arr[i + 1];
  var directiveIndex = isInitHook ? -arr[i] : arr[i];
  var directive = currentView[directiveIndex];

  if (isInitHook) {
    var indexWithintInitPhase = currentView[FLAGS] >> 11
    /* IndexWithinInitPhaseShift */
    ; // The init phase state must be always checked here as it may have been recursively updated.

    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16
    /* NumberOfInitHooksCalledShift */
    && (currentView[FLAGS] & 3
    /* InitPhaseStateMask */
    ) === initPhase) {
      currentView[FLAGS] += 2048
      /* IndexWithinInitPhaseIncrementer */
      ;
      profiler(4
      /* LifecycleHookStart */
      , directive, hook);

      try {
        hook.call(directive);
      } finally {
        profiler(5
        /* LifecycleHookEnd */
        , directive, hook);
      }
    }
  } else {
    profiler(4
    /* LifecycleHookStart */
    , directive, hook);

    try {
      hook.call(directive);
    } finally {
      profiler(5
      /* LifecycleHookEnd */
      , directive, hook);
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NO_PARENT_INJECTOR = -1;
/**
 * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
 * `TView.data`. This allows us to store information about the current node's tokens (which
 * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
 * shared, so they live in `LView`).
 *
 * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
 * determines whether a directive is available on the associated node or not. This prevents us
 * from searching the directives array at this level unless it's probable the directive is in it.
 *
 * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
 *
 * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
 * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
 * will differ based on where it is flattened into the main array, so it's not possible to know
 * the indices ahead of time and save their types here. The interfaces are still included here
 * for documentation purposes.
 *
 * export interface LInjector extends Array<any> {
 *
 *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Cumulative bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Cumulative bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Cumulative bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Cumulative bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Cumulative bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Cumulative bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Cumulative bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // We need to store a reference to the injector's parent so DI can keep looking up
 *    // the injector tree until it finds the dependency it's looking for.
 *    [PARENT_INJECTOR]: number;
 * }
 *
 * export interface TInjector extends Array<any> {
 *
 *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Shared node bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Shared node bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Shared node bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Shared node bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Shared node bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Shared node bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Shared node bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // Necessary to find directive indices for a particular node.
 *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
 *  }
 */

/**
 * Factory for creating instances of injectors in the NodeInjector.
 *
 * This factory is complicated by the fact that it can resolve `multi` factories as well.
 *
 * NOTE: Some of the fields are optional which means that this class has two hidden classes.
 * - One without `multi` support (most common)
 * - One with `multi` values, (rare).
 *
 * Since VMs can cache up to 4 inline hidden classes this is OK.
 *
 * - Single factory: Only `resolving` and `factory` is defined.
 * - `providers` factory: `componentProviders` is a number and `index = -1`.
 * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
 */

var NodeInjectorFactory = function NodeInjectorFactory(
/**
 * Factory to invoke in order to create a new instance.
 */
factory,
/**
 * Set to `true` if the token is declared in `viewProviders` (or if it is component).
 */
isViewProvider, injectImplementation) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NodeInjectorFactory);

  this.factory = factory;
  /**
   * Marker set to true during factory invocation to see if we get into recursive loop.
   * Recursive loop causes an error to be displayed.
   */

  this.resolving = false;
  ngDevMode && assertDefined(factory, 'Factory not specified');
  ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');
  this.canSeeViewProviders = isViewProvider;
  this.injectImpl = injectImplementation;
};

function isFactory(obj) {
  return obj instanceof NodeInjectorFactory;
} // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


var unusedValueExportToPlacateAjd$3 = 1;
/**
 * Converts `TNodeType` into human readable text.
 * Make sure this matches with `TNodeType`
 */

function toTNodeTypeAsString(tNodeType) {
  var text = '';
  tNodeType & 1
  /* Text */
  && (text += '|Text');
  tNodeType & 2
  /* Element */
  && (text += '|Element');
  tNodeType & 4
  /* Container */
  && (text += '|Container');
  tNodeType & 8
  /* ElementContainer */
  && (text += '|ElementContainer');
  tNodeType & 16
  /* Projection */
  && (text += '|Projection');
  tNodeType & 32
  /* Icu */
  && (text += '|IcuContainer');
  tNodeType & 64
  /* Placeholder */
  && (text += '|Placeholder');
  return text.length > 0 ? text.substring(1) : text;
} // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


var unusedValueExportToPlacateAjd$4 = 1;
/**
 * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
 *
 * ```
 * <div my-dir [class]="exp"></div>
 * ```
 * and
 * ```
 * @Directive({
 * })
 * class MyDirective {
 *   @Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param tNode
 */

function hasClassInput(tNode) {
  return (tNode.flags & 16
  /* hasClassInput */
  ) !== 0;
}
/**
 * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
 *
 * ```
 * <div my-dir [style]="exp"></div>
 * ```
 * and
 * ```
 * @Directive({
 * })
 * class MyDirective {
 *   @Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param tNode
 */


function hasStyleInput(tNode) {
  return (tNode.flags & 32
  /* hasStyleInput */
  ) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, 'should be called with a TNode');

  if ((tNode.type & expectedTypes) === 0) {
    throwError(message || "Expected [".concat(toTNodeTypeAsString(expectedTypes), "] but got ").concat(toTNodeTypeAsString(tNode.type), "."));
  }
}

function assertPureTNodeType(type) {
  if (!(type === 2
  /* Element */
  || //
  type === 1
  /* Text */
  || //
  type === 4
  /* Container */
  || //
  type === 8
  /* ElementContainer */
  || //
  type === 32
  /* Icu */
  || //
  type === 16
  /* Projection */
  || //
  type === 64
  /* Placeholder */
  )) {
    throwError("Expected TNodeType to have only a single type selected, but got ".concat(toTNodeTypeAsString(type), "."));
  }
}
/**
 * Assigns all attribute values to the provided element via the inferred renderer.
 *
 * This function accepts two forms of attribute entries:
 *
 * default: (key, value):
 *  attrs = [key1, value1, key2, value2]
 *
 * namespaced: (NAMESPACE_MARKER, uri, name, value)
 *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
 *
 * The `attrs` array can contain a mix of both the default and namespaced entries.
 * The "default" values are set without a marker, but if the function comes across
 * a marker value then it will attempt to set a namespaced value. If the marker is
 * not of a namespaced value then the function will quit and return the index value
 * where it stopped during the iteration of the attrs array.
 *
 * See [AttributeMarker] to understand what the namespace marker value is.
 *
 * Note that this instruction does not support assigning style and class values to
 * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
 * are applied to an element.
 * @param renderer The renderer to be used
 * @param native The element that the attributes will be assigned to
 * @param attrs The attribute array of values that will be assigned to the element
 * @returns the index value that was last accessed in the attributes array
 */


function setUpAttributes(renderer, native, attrs) {
  var isProc = isProceduralRenderer(renderer);
  var i = 0;

  while (i < attrs.length) {
    var value = attrs[i];

    if (typeof value === 'number') {
      // only namespaces are supported. Other value types (such as style/class
      // entries) are not supported in this function.
      if (value !== 0
      /* NamespaceURI */
      ) {
        break;
      } // we just landed on the marker value ... therefore
      // we should skip to the next entry


      i++;
      var namespaceURI = attrs[i++];
      var attrName = attrs[i++];
      var attrVal = attrs[i++];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      isProc ? renderer.setAttribute(native, attrName, attrVal, namespaceURI) : native.setAttributeNS(namespaceURI, attrName, attrVal);
    } else {
      // attrName is string;
      var _attrName = value;
      var _attrVal = attrs[++i]; // Standard attributes

      ngDevMode && ngDevMode.rendererSetAttribute++;

      if (isAnimationProp(_attrName)) {
        if (isProc) {
          renderer.setProperty(native, _attrName, _attrVal);
        }
      } else {
        isProc ? renderer.setAttribute(native, _attrName, _attrVal) : native.setAttribute(_attrName, _attrVal);
      }

      i++;
    }
  } // another piece of code may iterate over the same attributes array. Therefore
  // it may be helpful to return the exact spot where the attributes array exited
  // whether by running into an unsupported marker or if all the static values were
  // iterated over.


  return i;
}
/**
 * Test whether the given value is a marker that indicates that the following
 * attribute values in a `TAttributes` array are only the names of attributes,
 * and not name-value pairs.
 * @param marker The attribute marker to test.
 * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
 */


function isNameOnlyAttributeMarker(marker) {
  return marker === 3
  /* Bindings */
  || marker === 4
  /* Template */
  || marker === 6
  /* I18n */
  ;
}

function isAnimationProp(name) {
  // Perf note: accessing charCodeAt to check for the first character of a string is faster as
  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
  // charCodeAt doesn't allocate memory to return a substring.
  return name.charCodeAt(0) === 64
  /* AT_SIGN */
  ;
}
/**
 * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
 *
 * This merge function keeps the order of attrs same.
 *
 * @param dst Location of where the merged `TAttributes` should end up.
 * @param src `TAttributes` which should be appended to `dst`
 */


function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) {// do nothing
  } else if (dst === null || dst.length === 0) {
    // We have source, but dst is empty, just make a copy.
    dst = src.slice();
  } else {
    var srcMarker = -1
    /* ImplicitAttributes */
    ;

    for (var i = 0; i < src.length; i++) {
      var item = src[i];

      if (typeof item === 'number') {
        srcMarker = item;
      } else {
        if (srcMarker === 0
        /* NamespaceURI */
        ) {// Case where we need to consume `key1`, `key2`, `value` items.
        } else if (srcMarker === -1
        /* ImplicitAttributes */
        || srcMarker === 2
        /* Styles */
        ) {
          // Case where we have to consume `key1` and `value` only.
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          // Case where we have to consume `key1` only.
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }

  return dst;
}
/**
 * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
 *
 * @param dst `TAttributes` to append to.
 * @param marker Region where the `key`/`value` should be added.
 * @param key1 Key to add to `TAttributes`
 * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
 * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
 */


function mergeHostAttribute(dst, marker, key1, key2, value) {
  var i = 0; // Assume that new markers will be inserted at the end.

  var markerInsertPosition = dst.length; // scan until correct type.

  if (marker === -1
  /* ImplicitAttributes */
  ) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      var dstValue = dst[i++];

      if (typeof dstValue === 'number') {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          // We need to save this as we want the markers to be inserted in specific order.
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  } // search until you find place of insertion


  while (i < dst.length) {
    var item = dst[i];

    if (typeof item === 'number') {
      // since `i` started as the index after the marker, we did not find it if we are at the next
      // marker
      break;
    } else if (item === key1) {
      // We already have same token
      if (key2 === null) {
        if (value !== null) {
          dst[i + 1] = value;
        }

        return;
      } else if (key2 === dst[i + 1]) {
        dst[i + 2] = value;
        return;
      }
    } // Increment counter.


    i++;
    if (key2 !== null) i++;
    if (value !== null) i++;
  } // insert at location.


  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }

  dst.splice(i++, 0, key1);

  if (key2 !== null) {
    dst.splice(i++, 0, key2);
  }

  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// Parent Injector Utils ///////////////////////////////////////////////////////////////


function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}

function getParentInjectorIndex(parentLocation) {
  ngDevMode && assertNumber(parentLocation, 'Number expected');
  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');
  var parentInjectorIndex = parentLocation & 32767
  /* InjectorIndexMask */
  ;
  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');
  return parentLocation & 32767
  /* InjectorIndexMask */
  ;
}

function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16
  /* ViewOffsetShift */
  ;
}
/**
 * Unwraps a parent injector location number to find the view offset from the current injector,
 * then walks up the declaration view tree until the view is found that contains the parent
 * injector.
 *
 * @param location The location of the parent injector, which contains the view offset
 * @param startView The LView instance from which to start walking up the view tree
 * @returns The LView instance that contains the parent injector
 */


function getParentInjectorView(location, startView) {
  var viewOffset = getParentInjectorViewOffset(location);
  var parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component
  // or container), but we must keep the loop here to support the rarer case of deeply nested
  // <ng-template> tags or inline views, where the parent injector might live many views
  // above the child injector.

  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }

  return parentView;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines if the call to `inject` should include `viewProviders` in its resolution.
 *
 * This is set to true when we try to instantiate a component. This value is reset in
 * `getNodeInjectable` to a value which matches the declaration location of the token about to be
 * instantiated. This is done so that if we are injecting a token which was declared outside of
 * `viewProviders` we don't accidentally pull `viewProviders` in.
 *
 * Example:
 *
 * ```
 * @Injectable()
 * class MyService {
 *   constructor(public value: String) {}
 * }
 *
 * @Component({
 *   providers: [
 *     MyService,
 *     {provide: String, value: 'providers' }
 *   ]
 *   viewProviders: [
 *     {provide: String, value: 'viewProviders'}
 *   ]
 * })
 * class MyComponent {
 *   constructor(myService: MyService, value: String) {
 *     // We expect that Component can see into `viewProviders`.
 *     expect(value).toEqual('viewProviders');
 *     // `MyService` was not declared in `viewProviders` hence it can't see it.
 *     expect(myService.value).toEqual('providers');
 *   }
 * }
 *
 * ```
 */


var includeViewProviders = true;

function setIncludeViewProviders(v) {
  var oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
/**
 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
 * directives that will share slots, and thus, the fewer false positives when checking for
 * the existence of a directive.
 */


var BLOOM_SIZE = 256;
var BLOOM_MASK = BLOOM_SIZE - 1;
/**
 * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,
 * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash
 * number.
 */

var BLOOM_BUCKET_BITS = 5;
/** Counter used to generate unique IDs for directives. */

var nextNgElementId = 0;
/**
 * Registers this directive as present in its node's injector by flipping the directive's
 * corresponding bit in the injector's bloom filter.
 *
 * @param injectorIndex The index of the node injector where this token should be registered
 * @param tView The TView for the injector's bloom filters
 * @param type The directive token to register
 */

function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
  var id;

  if (typeof type === 'string') {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  } // Set a unique ID on the directive type, so if something tries to inject the directive,
  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.


  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.


  var bloomHash = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.
  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
  // to bit positions 0 - 31 in a 32 bit integer.

  var mask = 1 << bloomHash; // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.
  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask
  // should be written to.

  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
/**
 * Creates (or gets an existing) injector for a given element or container.
 *
 * @param tNode for which an injector should be retrieved / created.
 * @param lView View where the node is stored
 * @returns Node injector
 */


function getOrCreateNodeInjectorForNode(tNode, lView) {
  var existingInjectorIndex = getInjectorIndex(tNode, lView);

  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }

  var tView = lView[TVIEW];

  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode); // foundation for node bloom

    insertBloom(lView, null); // foundation for cumulative bloom

    insertBloom(tView.blueprint, null);
  }

  var parentLoc = getParentInjectorLocation(tNode, lView);
  var injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.
  // In that case, we don't need to set up a cumulative bloom

  if (hasParentInjector(parentLoc)) {
    var parentIndex = getParentInjectorIndex(parentLoc);
    var parentLView = getParentInjectorView(parentLoc, lView);
    var parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter
    // and its own cumulative bloom (which contains tokens for all ancestors)

    for (var i = 0; i < 8
    /* BLOOM_SIZE */
    ; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }

  lView[injectorIndex + 8
  /* PARENT */
  ] = parentLoc;
  return injectorIndex;
}

function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}

function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[tNode.injectorIndex + 8
  /* PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
/**
 * Finds the index of the parent injector, with a view offset if applicable. Used to set the
 * parent injector initially.
 *
 * @returns Returns a number that is the combination of the number of LViews that we have to go up
 * to find the LView containing the parent inject AND the index of the injector within that LView.
 */


function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    // If we have a parent `TNode` and there is an injector associated with it we are done, because
    // the parent injector is within the current `LView`.
    return tNode.parent.injectorIndex; // ViewOffset is 0
  } // When parent injector location is computed it may be outside of the current view. (ie it could
  // be pointing to a declared parent location). This variable stores number of declaration parents
  // we need to walk up in order to find the parent injector location.


  var declarationViewOffset = 0;
  var parentTNode = null;
  var lViewCursor = lView; // The parent injector is not in the current `LView`. We will have to walk the declared parent
  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent
  // `NodeInjector`.

  while (lViewCursor !== null) {
    // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.
    var tView = lViewCursor[TVIEW];
    var tViewType = tView.type;

    if (tViewType === 2
    /* Embedded */
    ) {
      ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
      parentTNode = tView.declTNode;
    } else if (tViewType === 1
    /* Component */
    ) {
      // Components don't have `TView.declTNode` because each instance of component could be
      // inserted in different location, hence `TView.declTNode` is meaningless.
      parentTNode = lViewCursor[T_HOST];
    } else {
      ngDevMode && assertEqual(tView.type, 0
      /* Root */
      , 'Root type expected');
      parentTNode = null;
    }

    if (parentTNode === null) {
      // If we have no parent, than we are done.
      return NO_PARENT_INJECTOR;
    }

    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]); // Every iteration of the loop requires that we go to the declared parent.

    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];

    if (parentTNode.injectorIndex !== -1) {
      // We found a NodeInjector which points to something.
      return parentTNode.injectorIndex | declarationViewOffset << 16
      /* ViewOffsetShift */
      ;
    }
  }

  return NO_PARENT_INJECTOR;
}
/**
 * Makes a type or an injection token public to the DI system by adding it to an
 * injector's bloom filter.
 *
 * @param di The node injector in which a directive will be added
 * @param token The type or the injection token to be made public
 */


function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
/**
 * Inject static attribute value into directive constructor.
 *
 * This method is used with `factory` functions which are generated as part of
 * `defineDirective` or `defineComponent`. The method retrieves the static value
 * of an attribute. (Dynamic attributes are not supported since they are not resolved
 *  at the time of injection and can change over time.)
 *
 * # Example
 * Given:
 * ```
 * @Component(...)
 * class MyComponent {
 *   constructor(@Attribute('title') title: string) { ... }
 * }
 * ```
 * When instantiated with
 * ```
 * <my-component title="Hello"></my-component>
 * ```
 *
 * Then factory method generated is:
 * ```
 * MyComponent.ɵcmp = defineComponent({
 *   factory: () => new MyComponent(injectAttribute('title'))
 *   ...
 * })
 * ```
 *
 * @publicApi
 */


function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(tNode, 12
  /* AnyContainer */
  | 3
  /* AnyRNode */
  );
  ngDevMode && assertDefined(tNode, 'expecting tNode');

  if (attrNameToInject === 'class') {
    return tNode.classes;
  }

  if (attrNameToInject === 'style') {
    return tNode.styles;
  }

  var attrs = tNode.attrs;

  if (attrs) {
    var attrsLength = attrs.length;
    var i = 0;

    while (i < attrsLength) {
      var value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.

      if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes

      if (value === 0
      /* NamespaceURI */
      ) {
        // we skip the next two values
        // as namespaced attributes looks like
        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
        // 'existValue', ...]
        i = i + 2;
      } else if (typeof value === 'number') {
        // Skip to the first value of the marked attribute.
        i++;

        while (i < attrsLength && typeof attrs[i] === 'string') {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }

  return null;
}

function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & InjectFlags.Optional) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, 'NodeInjector');
  }
}
/**
 * Returns the value associated to the given token from the ModuleInjector or throws exception
 *
 * @param lView The `LView` that contains the `tNode`
 * @param token The token to look for
 * @param flags Injection flags
 * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
 * @returns the value from the injector or throws an exception
 */


function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & InjectFlags.Optional && notFoundValue === undefined) {
    // This must be set or the NullInjector will throw for optional deps
    notFoundValue = null;
  }

  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
    var moduleInjector = lView[INJECTOR]; // switch to `injectInjectorOnly` implementation for module injector, since module injector
    // should not have access to Component/Directive DI scope (that may happen through
    // `directiveInject` implementation)

    var previousInjectImplementation = setInjectImplementation(undefined);

    try {
      if (moduleInjector) {
        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
      } else {
        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }

  return notFoundValueOrThrow(notFoundValue, token, flags);
}
/**
 * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
 *
 * Look for the injector providing the token by walking up the node injector tree and then
 * the module injector tree.
 *
 * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
 * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
 *
 * @param tNode The Node where the search for the injector should start
 * @param lView The `LView` that contains the `tNode`
 * @param token The token to look for
 * @param flags Injection flags
 * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
 * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
 */


function getOrCreateInjectable(tNode, lView, token) {
  var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : InjectFlags.Default;
  var notFoundValue = arguments.length > 4 ? arguments[4] : undefined;

  if (tNode !== null) {
    var bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
    // so just call the factory function to create it.

    if (typeof bloomHash === 'function') {
      if (!enterDI(lView, tNode, flags)) {
        // Failed to enter DI, try module injector instead. If a token is injected with the @Host
        // flag, the module injector is not searched for that token in Ivy.
        return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
      }

      try {
        var value = bloomHash(flags);

        if (value == null && !(flags & InjectFlags.Optional)) {
          throwProviderNotFoundError(token);
        } else {
          return value;
        }
      } finally {
        leaveDI();
      }
    } else if (typeof bloomHash === 'number') {
      // A reference to the previous injector TView that was found while climbing the element
      // injector tree. This is used to know if viewProviders can be accessed on the current
      // injector.
      var previousTView = null;
      var injectorIndex = getInjectorIndex(tNode, lView);
      var parentLocation = NO_PARENT_INJECTOR;
      var hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by
      // searching the parent injector.

      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8
        /* PARENT */
        ];

        if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
          injectorIndex = -1;
        } else {
          previousTView = lView[TVIEW];
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        }
      } // Traverse up the injector tree until we find a potential match or until we know there
      // *isn't* a match.


      while (injectorIndex !== -1) {
        ngDevMode && assertNodeInjector(lView, injectorIndex); // Check the current injector. If it matches, see if it contains token.

        var tView = lView[TVIEW];
        ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8
        /* TNODE */
        ], lView);

        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
          // At this point, we have an injector which *may* contain the token, so we step through
          // the providers and directives associated with the injector's corresponding node to get
          // the instance.
          var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);

          if (instance !== NOT_FOUND) {
            return instance;
          }
        }

        parentLocation = lView[injectorIndex + 8
        /* PARENT */
        ];

        if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8
        /* TNODE */
        ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
          // The def wasn't found anywhere on this node, so it was a false positive.
          // Traverse up the tree and continue searching.
          previousTView = tView;
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        } else {
          // If we should not search parent OR If the ancestor bloom filter value does not have the
          // bit corresponding to the directive we can give up on traversing up to find the specific
          // injector.
          injectorIndex = -1;
        }
      }
    }
  }

  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}

var NOT_FOUND = {};

function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}

function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  var currentTView = lView[TVIEW];
  var tNode = currentTView.data[injectorIndex + 8
  /* TNODE */
  ]; // First, we need to determine if view providers can be accessed by the starting element.
  // There are two possibilities

  var canAccessViewProviders = previousTView == null ? isComponentHost(tNode) && includeViewProviders : previousTView != currentTView && (tNode.type & 3
  /* AnyRNode */
  ) !== 0; // This special case happens when there is a @host on the inject and when we are searching
  // on the host element node.

  var isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
  var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);

  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
  } else {
    return NOT_FOUND;
  }
}
/**
 * Searches for the given token among the node's directives and providers.
 *
 * @param tNode TNode on which directives are present.
 * @param tView The tView we are currently processing
 * @param token Provider token or type of a directive to look for.
 * @param canAccessViewProviders Whether view providers should be considered.
 * @param isHostSpecialCase Whether the host special case applies.
 * @returns Index of a found directive or provider, or null when none found.
 */


function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  var nodeProviderIndexes = tNode.providerIndexes;
  var tInjectables = tView.data;
  var injectablesStart = nodeProviderIndexes & 1048575
  /* ProvidersStartIndexMask */
  ;
  var directivesStart = tNode.directiveStart;
  var directiveEnd = tNode.directiveEnd;
  var cptViewProvidersCount = nodeProviderIndexes >> 20
  /* CptViewProvidersCountShift */
  ;
  var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible

  var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;

  for (var i = startingIndex; i < endIndex; i++) {
    var providerTokenOrDef = tInjectables[i];

    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }

  if (isHostSpecialCase) {
    var dirDef = tInjectables[directivesStart];

    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }

  return null;
}
/**
 * Retrieve or instantiate the injectable from the `LView` at particular `index`.
 *
 * This function checks to see if the value has already been instantiated and if so returns the
 * cached `injectable`. Otherwise if it detects that the value is still a factory it
 * instantiates the `injectable` and caches the value.
 */


function getNodeInjectable(lView, tView, index, tNode) {
  var value = lView[index];
  var tData = tView.data;

  if (isFactory(value)) {
    var factory = value;

    if (factory.resolving) {
      throwCyclicDependencyError(stringifyForError(tData[index]));
    }

    var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    var previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    var success = enterDI(lView, tNode, InjectFlags.Default);
    ngDevMode && assertEqual(success, true, 'Because flags do not contain \`SkipSelf\' we expect this to always succeed.');

    try {
      value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.
      // For perf reasons, we want to avoid searching for hooks on providers.
      // It does no harm to try (the hooks just won't exist), but the extra
      // checks are unnecessary and this is a hot path. So we check to see
      // if the index of the dependency is in the directive range for this
      // tNode. If it's not, we know it's a provider and skip hook registration.

      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
    }
  }

  return value;
}
/**
 * Returns the bit in an injector's bloom filter that should be used to determine whether or not
 * the directive might be provided by the injector.
 *
 * When a directive is public, it is added to the bloom filter and given a unique ID that can be
 * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
 * is returned as the node injector can not possibly provide that token.
 *
 * @param token the injection token
 * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
 *   When the returned value is negative then it represents special values such as `Injector`.
 */


function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, 'token must be defined');

  if (typeof token === 'string') {
    return token.charCodeAt(0) || 0;
  }

  var tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.
  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`

  if (typeof tokenId === 'number') {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1
      /* Injector */
      , 'Expecting to get Special Injector Id');
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}

function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  // Create a mask that targets the specific bit associated with the directive we're looking for.
  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
  // to bit positions 0 - 31 in a 32 bit integer.
  var mask = 1 << bloomHash; // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of
  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset
  // that should be used.

  var value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)]; // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
  // this injector is a potential match.

  return !!(value & mask);
}
/** Returns true if flags prevent parent injector from being searched for tokens */


function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}

var NodeInjector = /*#__PURE__*/function () {
  function NodeInjector(_tNode, _lView) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NodeInjector);

    this._tNode = _tNode;
    this._lView = _lView;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NodeInjector, [{
    key: "get",
    value: function get(token, notFoundValue) {
      return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
    }
  }]);

  return NodeInjector;
}();
/**
 * @codeGenApi
 */


function ɵɵgetInheritedFactory(type) {
  return noSideEffects(function () {
    var ownConstructor = type.prototype.constructor;
    var ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    var objectPrototype = Object.prototype;
    var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

    while (parent && parent !== objectPrototype) {
      var factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,
      // we've found the inherited factory. Note the check that the factory isn't the type's
      // own factory is redundant in most cases, but if the user has custom decorators on the
      // class, this lookup will start one level down in the prototype chain, causing us to
      // find the own factory first and potentially triggering an infinite loop downstream.

      if (factory && factory !== ownFactory) {
        return factory;
      }

      parent = Object.getPrototypeOf(parent);
    } // There is no factory defined. Either this was improper usage of inheritance
    // (no Angular decorator on the superclass) or there is no constructor at all
    // in the inheritance chain. Since the two cases cannot be distinguished, the
    // latter has to be assumed.


    return function (t) {
      return new t();
    };
  });
}

function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return function () {
      var factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }

  return getFactoryDef(type);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Facade for the attribute injection from DI.
 *
 * @codeGenApi
 */


function ɵɵinjectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ANNOTATIONS = '__annotations__';
var PARAMETERS = '__parameters__';
var PROP_METADATA = '__prop__metadata__';
/**
 * @suppress {globalThis}
 */

function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(function () {
    var metaCtor = makeMetadataCtor(props);

    function DecoratorFactory() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (this instanceof DecoratorFactory) {
        metaCtor.call.apply(metaCtor, [this].concat(args));
        return this;
      }

      var annotationInstance = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(DecoratorFactory, args);

      return function TypeDecorator(cls) {
        if (typeFn) typeFn.apply(void 0, [cls].concat(args)); // Use of Object.defineProperty is important since it creates non-enumerable property which
        // prevents the property is copied during subclassing.

        var annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
          value: []
        })[ANNOTATIONS];
        annotations.push(annotationInstance);
        if (additionalProcessing) additionalProcessing(cls);
        return cls;
      };
    }

    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}

function makeMetadataCtor(props) {
  return function ctor() {
    if (props) {
      var values = props.apply(void 0, arguments);

      for (var propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}

function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(function () {
    var metaCtor = makeMetadataCtor(props);

    function ParamDecoratorFactory() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }

      var annotationInstance = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(ParamDecoratorFactory, args);

      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;

      function ParamDecorator(cls, unusedKey, index) {
        // Use of Object.defineProperty is important since it creates non-enumerable property which
        // prevents the property is copied during subclassing.
        var parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
          value: []
        })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.
        // we pad with nulls.

        while (parameters.length <= index) {
          parameters.push(null);
        }

        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }

    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}

function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(function () {
    var metaCtor = makeMetadataCtor(props);

    function PropDecoratorFactory() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }

      var decoratorInstance = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(PropDecoratorFactory, args);

      function PropDecorator(target, name) {
        var constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property
        // which prevents the property from being copied during subclassing.

        var meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
          value: {}
        })[PROP_METADATA];
        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
        meta[name].unshift(decoratorInstance);
        if (additionalProcessing) additionalProcessing.apply(void 0, [target, name].concat(args));
      }

      return PropDecorator;
    }

    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function CREATE_ATTRIBUTE_DECORATOR__PRE_R3__() {
  return makeParamDecorator('Attribute', function (attributeName) {
    return {
      attributeName: attributeName
    };
  });
}

function CREATE_ATTRIBUTE_DECORATOR__POST_R3__() {
  return makeParamDecorator('Attribute', function (attributeName) {
    return {
      attributeName: attributeName,
      __NG_ELEMENT_ID__: function __NG_ELEMENT_ID__() {
        return ɵɵinjectAttribute(attributeName);
      }
    };
  });
}

var CREATE_ATTRIBUTE_DECORATOR_IMPL = CREATE_ATTRIBUTE_DECORATOR__POST_R3__;
/**
 * Attribute decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

var Attribute = CREATE_ATTRIBUTE_DECORATOR_IMPL();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parameterized type.
 *
 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
 * the `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * When creating an `InjectionToken`, you can optionally specify a factory function which returns
 * (possibly by creating) a default value of the parameterized type `T`. This sets up the
 * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
 * application's root injector. If the factory function, which takes zero arguments, needs to inject
 * dependencies, it can do so using the `inject` function. See below for an example.
 *
 * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
 * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
 * mentioned above, `'root'` is the default value for `providedIn`.
 *
 * @usageNotes
 * ### Basic Example
 *
 * ### Plain InjectionToken
 *
 * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
 *
 * ### Tree-shakable InjectionToken
 *
 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 *
 * @publicApi
 */

var InjectionToken = /*#__PURE__*/function () {
  function InjectionToken(_desc, options) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, InjectionToken);

    this._desc = _desc;
    /** @internal */

    this.ngMetadataName = 'InjectionToken';
    this.ɵprov = undefined;

    if (typeof options == 'number') {
      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here'); // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
      // See `InjectorMarkers`

      this.__NG_ELEMENT_ID__ = options;
    } else if (options !== undefined) {
      this.ɵprov = ɵɵdefineInjectable({
        token: this,
        providedIn: options.providedIn || 'root',
        factory: options.factory
      });
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(InjectionToken, [{
    key: "toString",
    value: function toString() {
      return "InjectionToken ".concat(this._desc);
    }
  }]);

  return InjectionToken;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
 * that will populate the `entryComponents` field of components and NgModules
 * based on its `useValue` property value.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) are added to the `entryComponents` property.
 *
 * @usageNotes
 *
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on a router configuration that refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * @NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * @publicApi
 * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
 */


var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents'); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
// explicitly set.

var emitDistinctChangesOnlyDefaultValue = true;
/**
 * Base class for query metadata.
 *
 * @see `ContentChildren`.
 * @see `ContentChild`.
 * @see `ViewChildren`.
 * @see `ViewChild`.
 *
 * @publicApi
 */

var Query = function Query() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Query);
};

var ɵ0$1 = function ɵ0$1(selector) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.assign({
    selector: selector,
    first: false,
    isViewQuery: false,
    descendants: false,
    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
  }, data);
};
/**
 * ContentChildren decorator and metadata.
 *
 *
 * @Annotation
 * @publicApi
 */


var ContentChildren = makePropDecorator('ContentChildren', ɵ0$1, Query);

var ɵ1 = function ɵ1(selector) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.assign({
    selector: selector,
    first: true,
    isViewQuery: false,
    descendants: true
  }, data);
};
/**
 * ContentChild decorator and metadata.
 *
 *
 * @Annotation
 *
 * @publicApi
 */


var ContentChild = makePropDecorator('ContentChild', ɵ1, Query);

var ɵ2 = function ɵ2(selector) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.assign({
    selector: selector,
    first: false,
    isViewQuery: true,
    descendants: true,
    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
  }, data);
};
/**
 * ViewChildren decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


var ViewChildren = makePropDecorator('ViewChildren', ɵ2, Query);

var ɵ3 = function ɵ3(selector, data) {
  return Object.assign({
    selector: selector,
    first: true,
    isViewQuery: true,
    descendants: true
  }, data);
};
/**
 * ViewChild decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


var ViewChild = makePropDecorator('ViewChild', ɵ3, Query);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var FactoryTarget;

(function (FactoryTarget) {
  FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
  FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
  FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
  FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
  FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));

var ViewEncapsulation$1;

(function (ViewEncapsulation) {
  ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

  ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getCompilerFacade(request) {
  var globalNg = _global['ng'];

  if (globalNg && globalNg.ɵcompilerFacade) {
    return globalNg.ɵcompilerFacade;
  }

  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    // Log the type as an error so that a developer can easily navigate to the type from the
    // console.
    console.error("JIT compilation failed for ".concat(request.kind), request.type);
    var message = "The ".concat(request.kind, " '").concat(request.type.name, "' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n");

    if (request.usage === 1
    /* PartialDeclaration */
    ) {
      message += "The ".concat(request.kind, " is part of a library that has been partially compiled.\n");
      message += "However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n";
      message += '\n';
      message += "Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n";
    } else {
      message += "JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n";
    }

    message += "Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n";
    message += "or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.";
    throw new Error(message);
  } else {
    throw new Error('JIT compiler unavailable');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Represents a type that a Component or other object is instances of.
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
 * the `MyCustomComponent` constructor function.
 *
 * @publicApi
 */


var Type = Function;

function isType(v) {
  return typeof v === 'function';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Equivalent to ES6 spread, add each item to an array.
 *
 * @param items The items to add
 * @param arr The array to which you want to add the items
 */


function addAllToArray(items, arr) {
  for (var i = 0; i < items.length; i++) {
    arr.push(items[i]);
  }
}
/**
 * Determines if the contents of two arrays is identical
 *
 * @param a first array
 * @param b second array
 * @param identityAccessor Optional function for extracting stable object identity from a value in
 *     the array.
 */


function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; i++) {
    var valueA = a[i];
    var valueB = b[i];

    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }

    if (valueB !== valueA) {
      return false;
    }
  }

  return true;
}
/**
 * Flattens an array.
 */


function flatten(list, dst) {
  if (dst === undefined) dst = list;

  for (var i = 0; i < list.length; i++) {
    var item = list[i];

    if (Array.isArray(item)) {
      // we need to inline it.
      if (dst === list) {
        // Our assumption that the list was already flat was wrong and
        // we need to clone flat since we need to write to it.
        dst = list.slice(0, i);
      }

      flatten(item, dst);
    } else if (dst !== list) {
      dst.push(item);
    }
  }

  return dst;
}

function deepForEach(input, fn) {
  input.forEach(function (value) {
    return Array.isArray(value) ? deepForEach(value, fn) : fn(value);
  });
}

function addToArray(arr, index, value) {
  // perf: array.push is faster than array.splice!
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}

function removeFromArray(arr, index) {
  // perf: array.pop is faster than array.splice!
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}

function newArray(size, value) {
  var list = [];

  for (var i = 0; i < size; i++) {
    list.push(value);
  }

  return list;
}
/**
 * Remove item from array (Same as `Array.splice()` but faster.)
 *
 * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * https://jsperf.com/fast-array-splice (About 20x faster)
 *
 * @param array Array to splice
 * @param index Index of element in array to remove.
 * @param count Number of items to remove.
 */


function arraySplice(array, index, count) {
  var length = array.length - count;

  while (index < length) {
    array[index] = array[index + count];
    index++;
  }

  while (count--) {
    array.pop(); // shrink the array
  }
}
/**
 * Same as `Array.splice(index, 0, value)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value Value to add to array.
 */


function arrayInsert(array, index, value) {
  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
  var end = array.length;

  while (end > index) {
    var previousEnd = end - 1;
    array[end] = array[previousEnd];
    end = previousEnd;
  }

  array[index] = value;
}
/**
 * Same as `Array.splice2(index, 0, value1, value2)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value1 Value to add to array.
 * @param value2 Value to add to array.
 */


function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
  var end = array.length;

  if (end == index) {
    // inserting at the end.
    array.push(value1, value2);
  } else if (end === 1) {
    // corner case when we have less items in array than we have items to insert.
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);

    while (end > index) {
      var previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }

    array[index] = value1;
    array[index + 1] = value2;
  }
}
/**
 * Insert a `value` into an `array` so that the array remains sorted.
 *
 * NOTE:
 * - Duplicates are not allowed, and are ignored.
 * - This uses binary search algorithm for fast inserts.
 *
 * @param array A sorted array to insert into.
 * @param value The value to insert.
 * @returns index of the inserted value.
 */


function arrayInsertSorted(array, value) {
  var index = arrayIndexOfSorted(array, value);

  if (index < 0) {
    // if we did not find it insert it.
    index = ~index;
    arrayInsert(array, index, value);
  }

  return index;
}
/**
 * Remove `value` from a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to remove from.
 * @param value The value to remove.
 * @returns index of the removed value.
 *   - positive index if value found and removed.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     inserted)
 */


function arrayRemoveSorted(array, value) {
  var index = arrayIndexOfSorted(array, value);

  if (index >= 0) {
    arraySplice(array, index, 1);
  }

  return index;
}
/**
 * Get an index of an `value` in a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     located)
 */


function arrayIndexOfSorted(array, value) {
  return _arrayIndexOfSorted(array, value, 0);
}
/**
 * Set a `value` for a `key`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or create.
 * @param value The value to set for a `key`.
 * @returns index (always even) of where the value vas set.
 */


function keyValueArraySet(keyValueArray, key, value) {
  var index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it set it.
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }

  return index;
}
/**
 * Retrieve a `value` for a `key` (on `undefined` if not found.)
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @return The `value` stored at the `key` location or `undefined if not found.
 */


function keyValueArrayGet(keyValueArray, key) {
  var index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it retrieve it.
    return keyValueArray[index | 1];
  }

  return undefined;
}
/**
 * Retrieve a `key` index value in the array or `-1` if not found.
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @returns index of where the key is (or should have been.)
 *   - positive (even) index if key found.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been inserted.)
 */


function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
/**
 * Delete a `key` (and `value`) from the `KeyValueArray`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or delete (if exist).
 * @returns index of where the key was (or should have been.)
 *   - positive (even) index if key found and deleted.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been.)
 */


function keyValueArrayDelete(keyValueArray, key) {
  var index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it remove it.
    arraySplice(keyValueArray, index, 2);
  }

  return index;
}
/**
 * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @param shift grouping shift.
 *   - `0` means look at every location
 *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
 *         they are values.)
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 * inserted)
 */


function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
  var start = 0;
  var end = array.length >> shift;

  while (end !== start) {
    var middle = start + (end - start >> 1); // find the middle.

    var current = array[middle << shift];

    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
    }
  }

  return ~(end << shift);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/*
 * #########################
 * Attention: These Regular expressions have to hold even if the code is minified!
 * ##########################
 */

/**
 * Regular expression that detects pass-through constructors for ES5 output. This Regex
 * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also
 * it intends to capture the pattern where existing constructors have been downleveled from
 * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.
 *
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, arguments) || this;
 * ```
 *
 * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, __spread(arguments)) || this;
 * ```
 *
 * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
 * ```
 *
 * More details can be found in: https://github.com/angular/angular/issues/38453.
 */


var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\))\)/;
/** Regular expression that detects ES2015 classes which extend from other classes. */

var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
/**
 * Regular expression that detects ES2015 classes which extend from other classes and
 * have an explicit constructor defined.
 */

var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
/**
 * Regular expression that detects ES2015 classes which extend from other classes
 * and inherit a constructor.
 */

var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s*super\(\.\.\.arguments\)/;
/**
 * Determine whether a stringified type is a class which delegates its constructor
 * to its parent.
 *
 * This is not trivial since compiled code can actually contain a constructor function
 * even if the original source code did not. For instance, when the child class contains
 * an initialized instance property.
 */

function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}

var ReflectionCapabilities = /*#__PURE__*/function () {
  function ReflectionCapabilities(reflect) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ReflectionCapabilities);

    this._reflect = reflect || _global['Reflect'];
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ReflectionCapabilities, [{
    key: "isReflectionEnabled",
    value: function isReflectionEnabled() {
      return true;
    }
  }, {
    key: "factory",
    value: function factory(t) {
      return function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(t, args);
      };
    }
    /** @internal */

  }, {
    key: "_zipTypesAndAnnotations",
    value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
      var result;

      if (typeof paramTypes === 'undefined') {
        result = newArray(paramAnnotations.length);
      } else {
        result = newArray(paramTypes.length);
      }

      for (var i = 0; i < result.length; i++) {
        // TS outputs Object for parameters without types, while Traceur omits
        // the annotations. For now we preserve the Traceur behavior to aid
        // migration, but this can be revisited.
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] && paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }

        if (paramAnnotations && paramAnnotations[i] != null) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }

      return result;
    }
  }, {
    key: "_ownParameters",
    value: function _ownParameters(type, parentCtor) {
      var typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.
      // In that case, to detect whether a child class declared an own constructor or not,
      // we need to look inside of that constructor to check whether it is
      // just calling the parent.
      // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
      // that sets 'design:paramtypes' to []
      // if a class inherits from another class but has no ctor declared itself.

      if (isDelegateCtor(typeStr)) {
        return null;
      } // Prefer the direct API.


      if (type.parameters && type.parameters !== parentCtor.parameters) {
        return type.parameters;
      } // API of tsickle for lowering decorators to properties on the class.


      var tsickleCtorParams = type.ctorParameters;

      if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
        // Newer tsickle uses a function closure
        // Retain the non-function case for compatibility with older tsickle
        var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;

        var _paramTypes = ctorParameters.map(function (ctorParam) {
          return ctorParam && ctorParam.type;
        });

        var _paramAnnotations = ctorParameters.map(function (ctorParam) {
          return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
        });

        return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);
      } // API for metadata created by invoking the decorators.


      var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];

      var paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);

      if (paramTypes || paramAnnotations) {
        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
      } // If a class has no decorators, at least create metadata
      // based on function.length.
      // Note: We know that this is a real constructor as we checked
      // the content of the constructor above.


      return newArray(type.length);
    }
  }, {
    key: "parameters",
    value: function parameters(type) {
      // Note: only report metadata if we have at least one class decorator
      // to stay in sync with the static reflector.
      if (!isType(type)) {
        return [];
      }

      var parentCtor = getParentCtor(type);

      var parameters = this._ownParameters(type, parentCtor);

      if (!parameters && parentCtor !== Object) {
        parameters = this.parameters(parentCtor);
      }

      return parameters || [];
    }
  }, {
    key: "_ownAnnotations",
    value: function _ownAnnotations(typeOrFunc, parentCtor) {
      // Prefer the direct API.
      if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
        var annotations = typeOrFunc.annotations;

        if (typeof annotations === 'function' && annotations.annotations) {
          annotations = annotations.annotations;
        }

        return annotations;
      } // API of tsickle for lowering decorators to properties on the class.


      if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
        return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
      } // API for metadata created by invoking the decorators.


      if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
        return typeOrFunc[ANNOTATIONS];
      }

      return null;
    }
  }, {
    key: "annotations",
    value: function annotations(typeOrFunc) {
      if (!isType(typeOrFunc)) {
        return [];
      }

      var parentCtor = getParentCtor(typeOrFunc);
      var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
      var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
      return parentAnnotations.concat(ownAnnotations);
    }
  }, {
    key: "_ownPropMetadata",
    value: function _ownPropMetadata(typeOrFunc, parentCtor) {
      // Prefer the direct API.
      if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
        var propMetadata = typeOrFunc.propMetadata;

        if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
          propMetadata = propMetadata.propMetadata;
        }

        return propMetadata;
      } // API of tsickle for lowering decorators to properties on the class.


      if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
        var propDecorators = typeOrFunc.propDecorators;
        var _propMetadata = {};
        Object.keys(propDecorators).forEach(function (prop) {
          _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
        });
        return _propMetadata;
      } // API for metadata created by invoking the decorators.


      if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
        return typeOrFunc[PROP_METADATA];
      }

      return null;
    }
  }, {
    key: "propMetadata",
    value: function propMetadata(typeOrFunc) {
      if (!isType(typeOrFunc)) {
        return {};
      }

      var parentCtor = getParentCtor(typeOrFunc);
      var propMetadata = {};

      if (parentCtor !== Object) {
        var parentPropMetadata = this.propMetadata(parentCtor);
        Object.keys(parentPropMetadata).forEach(function (propName) {
          propMetadata[propName] = parentPropMetadata[propName];
        });
      }

      var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);

      if (ownPropMetadata) {
        Object.keys(ownPropMetadata).forEach(function (propName) {
          var decorators = [];

          if (propMetadata.hasOwnProperty(propName)) {
            decorators.push.apply(decorators, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(propMetadata[propName]));
          }

          decorators.push.apply(decorators, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(ownPropMetadata[propName]));
          propMetadata[propName] = decorators;
        });
      }

      return propMetadata;
    }
  }, {
    key: "ownPropMetadata",
    value: function ownPropMetadata(typeOrFunc) {
      if (!isType(typeOrFunc)) {
        return {};
      }

      return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
    }
  }, {
    key: "hasLifecycleHook",
    value: function hasLifecycleHook(type, lcProperty) {
      return type instanceof Type && lcProperty in type.prototype;
    }
  }, {
    key: "guards",
    value: function guards(type) {
      return {};
    }
  }, {
    key: "getter",
    value: function getter(name) {
      return new Function('o', 'return o.' + name + ';');
    }
  }, {
    key: "setter",
    value: function setter(name) {
      return new Function('o', 'v', 'return o.' + name + ' = v;');
    }
  }, {
    key: "method",
    value: function method(name) {
      var functionBody = "if (!o.".concat(name, ") throw new Error('\"").concat(name, "\" is undefined');\n        return o.").concat(name, ".apply(o, args);");
      return new Function('o', 'args', functionBody);
    } // There is not a concept of import uri in Js, but this is useful in developing Dart applications.

  }, {
    key: "importUri",
    value: function importUri(type) {
      // StaticSymbol
      if (typeof type === 'object' && type['filePath']) {
        return type['filePath'];
      } // Runtime type


      return "./".concat(stringify(type));
    }
  }, {
    key: "resourceUri",
    value: function resourceUri(type) {
      return "./".concat(stringify(type));
    }
  }, {
    key: "resolveIdentifier",
    value: function resolveIdentifier(name, moduleUrl, members, runtime) {
      return runtime;
    }
  }, {
    key: "resolveEnum",
    value: function resolveEnum(enumIdentifier, name) {
      return enumIdentifier[name];
    }
  }]);

  return ReflectionCapabilities;
}();

function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }

  return decoratorInvocations.map(function (decoratorInvocation) {
    var decoratorType = decoratorInvocation.type;
    var annotationCls = decoratorType.annotationCls;
    var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(annotationCls, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(annotationArgs));
  });
}

function getParentCtor(ctor) {
  var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  var parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value
  // to simplify checking later on.

  return parentCtor || Object;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _THROW_IF_NOT_FOUND = {};
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
/*
 * Name of a property (that we patch onto DI decorator), which is used as an annotation of which
 * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators
 * in the code, thus making them tree-shakable.
 */

var DI_DECORATOR_FLAG = '__NG_DI_FLAG__';
var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
var NG_TOKEN_PATH = 'ngTokenPath';
var NEW_LINE = /\n/gm;
var NO_NEW_LINE = 'ɵ';
var SOURCE = '__source';
var ɵ0$2 = getClosureSafeProperty;
var USE_VALUE = getClosureSafeProperty({
  provide: String,
  useValue: ɵ0$2
});
/**
 * Current injector value used by `inject`.
 * - `undefined`: it is an error to call `inject`
 * - `null`: `inject` can be called but there is no injector (limp-mode).
 * - Injector instance: Use the injector for resolution.
 */

var _currentInjector = undefined;

function setCurrentInjector(injector) {
  var former = _currentInjector;
  _currentInjector = injector;
  return former;
}

function injectInjectorOnly(token) {
  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;

  if (_currentInjector === undefined) {
    throw new Error("inject() must be called from an injection context");
  } else if (_currentInjector === null) {
    return injectRootLimpMode(token, undefined, flags);
  } else {
    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
  }
}

function ɵɵinject(token) {
  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * @codeGenApi
 */


function ɵɵinvalidFactoryDep(index) {
  var msg = ngDevMode ? "This constructor is not compatible with Angular Dependency Injection because its dependency at index ".concat(index, " of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ").concat(index, " is correct and 2) the correct Angular decorators are defined for this class and its ancestors.") : 'invalid';
  throw new Error(msg);
}
/**
 * Injects a token from the currently active injector.
 *
 * Must be used in the context of a factory function such as one defined for an
 * `InjectionToken`. Throws an error if not called from such a context.
 *
 * Within such a factory function, using this function to request injection of a dependency
 * is faster and more type-safe than providing an additional array of dependencies
 * (as has been common with `useFactory` providers).
 *
 * @param token The injection token for the dependency to be injected.
 * @param flags Optional flags that control how injection is executed.
 * The flags correspond to injection strategies that can be specified with
 * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
 * @returns the injected value if injection is successful, `null` otherwise.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 * @publicApi
 */


var inject = ɵɵinject;

function injectArgs(types) {
  var args = [];

  for (var i = 0; i < types.length; i++) {
    var arg = resolveForwardRef(types[i]);

    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        throw new Error('Arguments array must have arguments.');
      }

      var type = undefined;
      var flags = InjectFlags.Default;

      for (var j = 0; j < arg.length; j++) {
        var meta = arg[j];
        var flag = getInjectFlag(meta);

        if (typeof flag === 'number') {
          // Special case when we handle @Inject decorator.
          if (flag === -1
          /* Inject */
          ) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }

      args.push(ɵɵinject(type, flags));
    } else {
      args.push(ɵɵinject(arg));
    }
  }

  return args;
}
/**
 * Attaches a given InjectFlag to a given decorator using monkey-patching.
 * Since DI decorators can be used in providers `deps` array (when provider is configured using
 * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we
 * attach the flag to make it available both as a static property and as a field on decorator
 * instance.
 *
 * @param decorator Provided DI decorator.
 * @param flag InjectFlag that should be applied.
 */


function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
/**
 * Reads monkey-patched property that contains InjectFlag attached to a decorator.
 *
 * @param token Token that may contain monkey-patched DI flags property.
 */


function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}

function catchInjectorError(e, token, injectorErrorName, source) {
  var tokenPath = e[NG_TEMP_TOKEN_PATH];

  if (token[SOURCE]) {
    tokenPath.unshift(token[SOURCE]);
  }

  e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
  e[NG_TOKEN_PATH] = tokenPath;
  e[NG_TEMP_TOKEN_PATH] = null;
  throw e;
}

function formatError(text, obj, injectorErrorName) {
  var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
  var context = stringify(obj);

  if (Array.isArray(obj)) {
    context = obj.map(stringify).join(' -> ');
  } else if (typeof obj === 'object') {
    var parts = [];

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        var value = obj[key];
        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
      }
    }

    context = "{".concat(parts.join(', '), "}");
  }

  return "".concat(injectorErrorName).concat(source ? '(' + source + ')' : '', "[").concat(context, "]: ").concat(text.replace(NEW_LINE, '\n  '));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$3 = function ɵ0$3(token) {
  return {
    token: token
  };
};
/**
 * Inject decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


var Inject = attachInjectFlag( // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
makeParamDecorator('Inject', ɵ0$3), -1
/* Inject */
);
/**
 * Optional decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

var Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag(makeParamDecorator('Optional'), 8
/* Optional */
);
/**
 * Self decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

var Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag(makeParamDecorator('Self'), 2
/* Self */
);
/**
 * `SkipSelf` decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

var SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag(makeParamDecorator('SkipSelf'), 4
/* SkipSelf */
);
/**
 * Host decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

var Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag(makeParamDecorator('Host'), 1
/* Host */
);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var _reflect = null;

function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}

function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}

function convertDependencies(deps) {
  return deps.map(function (dep) {
    return reflectDependency(dep);
  });
}

function reflectDependency(dep) {
  var meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };

  if (Array.isArray(dep) && dep.length > 0) {
    for (var j = 0; j < dep.length; j++) {
      var param = dep[j];

      if (param === undefined) {
        // param may be undefined if type of dep is not set by ngtsc
        continue;
      }

      var proto = Object.getPrototypeOf(param);

      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute) {
        if (param.attributeName === undefined) {
          throw new Error("Attribute name must be defined.");
        }

        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }

  return meta;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Used to resolve resource URLs on `@Component` when used with JIT compilation.
 *
 * Example:
 * ```
 * @Component({
 *   selector: 'my-comp',
 *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
 * })
 * class MyComponent{
 * }
 *
 * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
 * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
 *
 * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
 * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
 *
 * // Use browser's `fetch()` function as the default resource resolution strategy.
 * resolveComponentResources(fetch).then(() => {
 *   // After resolution all URLs have been converted into `template` strings.
 *   renderComponent(MyComponent);
 * });
 *
 * ```
 *
 * NOTE: In AOT the resolution happens during compilation, and so there should be no need
 * to call this method outside JIT mode.
 *
 * @param resourceResolver a function which is responsible for returning a `Promise` to the
 * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
 */


function resolveComponentResources(resourceResolver) {
  // Store all promises which are fetching the resources.
  var componentResolved = []; // Cache so that we don't fetch the same resource more than once.

  var urlMap = new Map();

  function cachedResourceResolve(url) {
    var promise = urlMap.get(url);

    if (!promise) {
      var resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }

    return promise;
  }

  componentResourceResolutionQueue.forEach(function (component, type) {
    var promises = [];

    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {
        component.template = template;
      }));
    }

    var styleUrls = component.styleUrls;
    var styles = component.styles || (component.styles = []);
    var styleOffset = component.styles.length;
    styleUrls && styleUrls.forEach(function (styleUrl, index) {
      styles.push(''); // pre-allocate array.

      promises.push(cachedResourceResolve(styleUrl).then(function (style) {
        styles[styleOffset + index] = style;
        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);

        if (styleUrls.length == 0) {
          component.styleUrls = undefined;
        }
      }));
    });
    var fullyResolved = Promise.all(promises).then(function () {
      return componentDefResolved(type);
    });
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(function () {
    return undefined;
  });
}

var componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.

var componentDefPendingResolution = new Set();

function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}

function isComponentDefPendingResolution(type) {
  return componentDefPendingResolution.has(type);
}

function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);
}

function clearResolutionOfComponentResourcesQueue() {
  var old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = new Map();
  return old;
}

function restoreComponentResolutionQueue(queue) {
  componentDefPendingResolution.clear();
  queue.forEach(function (_, type) {
    return componentDefPendingResolution.add(type);
  });
  componentResourceResolutionQueue = queue;
}

function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}

function unwrapResponse(response) {
  return typeof response == 'string' ? response : response.text();
}

function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */


var policy;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */

function getPolicy() {
  if (policy === undefined) {
    policy = null;

    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy('angular', {
          createHTML: function createHTML(s) {
            return s;
          },
          createScript: function createScript(s) {
            return s;
          },
          createScriptURL: function createScriptURL(s) {
            return s;
          }
        });
      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
        // already registered, even in report-only mode. Until the API changes,
        // catch the error not to break the applications functionally. In such
        // cases, the code will fall back to using strings.
      }
    }
  }

  return policy;
}
/**
 * Unsafely promote a string to a TrustedHTML, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that the
 * provided string will never cause an XSS vulnerability if used in a context
 * that will be interpreted as HTML by a browser, e.g. when assigning to
 * element.innerHTML.
 */


function trustedHTMLFromString(html) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
}
/**
 * Unsafely promote a string to a TrustedScript, falling back to strings when
 * Trusted Types are not available.
 * @security In particular, it must be assured that the provided string will
 * never cause an XSS vulnerability if used in a context that will be
 * interpreted and executed as a script by a browser, e.g. when calling eval.
 */


function trustedScriptFromString(script) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
}
/**
 * Unsafely promote a string to a TrustedScriptURL, falling back to strings
 * when Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that the
 * provided string will never cause an XSS vulnerability if used in a context
 * that will cause a browser to load and execute a resource, e.g. when
 * assigning to script.src.
 */


function trustedScriptURLFromString(url) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
}
/**
 * Unsafely call the Function constructor with the given string arguments. It
 * is only available in development mode, and should be stripped out of
 * production code.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only called from development code, as use in production code can lead to
 * XSS vulnerabilities.
 */


function newTrustedFunctionForDev() {
  if (typeof ngDevMode === 'undefined') {
    throw new Error('newTrustedFunctionForDev should never be called in production');
  }

  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  if (!_global.trustedTypes) {
    // In environments that don't support Trusted Types, fall back to the most
    // straightforward implementation:
    return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(Function, args);
  } // Chrome currently does not support passing TrustedScript to the Function
  // constructor. The following implements the workaround proposed on the page
  // below, where the Chromium bug is also referenced:
  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor


  var fnArgs = args.slice(0, -1).join(',');
  var fnBody = args[args.length - 1];
  var body = "(function anonymous(".concat(fnArgs, "\n) { ").concat(fnBody, "\n})"); // Using eval directly confuses the compiler and prevents this module from
  // being stripped out of JS binaries even if not used. The global['eval']
  // indirection fixes that.

  var fn = _global['eval'](trustedScriptFromString(body));

  if (fn.bind === undefined) {
    // Workaround for a browser bug that only exists in Chrome 83, where passing
    // a TrustedScript to eval just returns the TrustedScript back without
    // evaluating it. In that case, fall back to the most straightforward
    // implementation:
    return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(Function, args);
  } // To completely mimic the behavior of calling "new Function", two more
  // things need to happen:
  // 1. Stringifying the resulting function should return its source code


  fn.toString = function () {
    return body;
  }; // 2. When calling the resulting function, `this` should refer to `global`


  return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,
  // the implementation of this function can be simplified to:
  // return new Function(...args.map(a => trustedScriptFromString(a)));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */


var policy$1;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */

function getPolicy$1() {
  if (policy$1 === undefined) {
    policy$1 = null;

    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {
          createHTML: function createHTML(s) {
            return s;
          },
          createScript: function createScript(s) {
            return s;
          },
          createScriptURL: function createScriptURL(s) {
            return s;
          }
        });
      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
        // already registered, even in report-only mode. Until the API changes,
        // catch the error not to break the applications functionally. In such
        // cases, the code will fall back to using strings.
      }
    }
  }

  return policy$1;
}
/**
 * Unsafely promote a string to a TrustedHTML, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedHTMLFromStringBypass(html) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
}
/**
 * Unsafely promote a string to a TrustedScript, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedScriptFromStringBypass(script) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
}
/**
 * Unsafely promote a string to a TrustedScriptURL, falling back to strings
 * when Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedScriptURLFromStringBypass(url) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SafeValueImpl = /*#__PURE__*/function () {
  function SafeValueImpl(changingThisBreaksApplicationSecurity) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeValueImpl);

    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeValueImpl, [{
    key: "toString",
    value: function toString() {
      return "SafeValue must use [property]=binding: ".concat(this.changingThisBreaksApplicationSecurity) + " (see https://g.co/ng/security#xss)";
    }
  }]);

  return SafeValueImpl;
}();

var SafeHtmlImpl = /*#__PURE__*/function (_SafeValueImpl) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(SafeHtmlImpl, _SafeValueImpl);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(SafeHtmlImpl);

  function SafeHtmlImpl() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeHtmlImpl);

    return _super2.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeHtmlImpl, [{
    key: "getTypeName",
    value: function getTypeName() {
      return "HTML"
      /* Html */
      ;
    }
  }]);

  return SafeHtmlImpl;
}(SafeValueImpl);

var SafeStyleImpl = /*#__PURE__*/function (_SafeValueImpl2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(SafeStyleImpl, _SafeValueImpl2);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(SafeStyleImpl);

  function SafeStyleImpl() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeStyleImpl);

    return _super3.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeStyleImpl, [{
    key: "getTypeName",
    value: function getTypeName() {
      return "Style"
      /* Style */
      ;
    }
  }]);

  return SafeStyleImpl;
}(SafeValueImpl);

var SafeScriptImpl = /*#__PURE__*/function (_SafeValueImpl3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(SafeScriptImpl, _SafeValueImpl3);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(SafeScriptImpl);

  function SafeScriptImpl() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeScriptImpl);

    return _super4.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeScriptImpl, [{
    key: "getTypeName",
    value: function getTypeName() {
      return "Script"
      /* Script */
      ;
    }
  }]);

  return SafeScriptImpl;
}(SafeValueImpl);

var SafeUrlImpl = /*#__PURE__*/function (_SafeValueImpl4) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(SafeUrlImpl, _SafeValueImpl4);

  var _super5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(SafeUrlImpl);

  function SafeUrlImpl() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeUrlImpl);

    return _super5.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeUrlImpl, [{
    key: "getTypeName",
    value: function getTypeName() {
      return "URL"
      /* Url */
      ;
    }
  }]);

  return SafeUrlImpl;
}(SafeValueImpl);

var SafeResourceUrlImpl = /*#__PURE__*/function (_SafeValueImpl5) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(SafeResourceUrlImpl, _SafeValueImpl5);

  var _super6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(SafeResourceUrlImpl);

  function SafeResourceUrlImpl() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SafeResourceUrlImpl);

    return _super6.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SafeResourceUrlImpl, [{
    key: "getTypeName",
    value: function getTypeName() {
      return "ResourceURL"
      /* ResourceUrl */
      ;
    }
  }]);

  return SafeResourceUrlImpl;
}(SafeValueImpl);

function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}

function allowSanitizationBypassAndThrow(value, type) {
  var actualType = getSanitizationBypassType(value);

  if (actualType != null && actualType !== type) {
    // Allow ResourceURLs in URL contexts, they are strictly more trusted.
    if (actualType === "ResourceURL"
    /* ResourceUrl */
    && type === "URL"
    /* Url */
    ) return true;
    throw new Error("Required a safe ".concat(type, ", got a ").concat(actualType, " (see https://g.co/ng/security#xss)"));
  }

  return actualType === type;
}

function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
/**
 * Mark `html` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link htmlSanitizer} to be trusted implicitly.
 *
 * @param trustedHtml `html` string which needs to be implicitly trusted.
 * @returns a `html` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
/**
 * Mark `style` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link styleSanitizer} to be trusted implicitly.
 *
 * @param trustedStyle `style` string which needs to be implicitly trusted.
 * @returns a `style` hich has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
/**
 * Mark `script` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link scriptSanitizer} to be trusted implicitly.
 *
 * @param trustedScript `script` string which needs to be implicitly trusted.
 * @returns a `script` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link urlSanitizer} to be trusted implicitly.
 *
 * @param trustedUrl `url` string which needs to be implicitly trusted.
 * @returns a `url`  which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
 *
 * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
 * @returns a `url` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
 * that needs sanitizing.
 * Depending upon browser support we use one of two strategies for doing this.
 * Default: DOMParser strategy
 * Fallback: InertDocument strategy
 */


function getInertBodyHelper(defaultDoc) {
  var inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
/**
 * Uses DOMParser to create and fill an inert body element.
 * This is the default strategy used in browsers that support it.
 */


var DOMParserHelper = /*#__PURE__*/function () {
  function DOMParserHelper(inertDocumentHelper) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DOMParserHelper);

    this.inertDocumentHelper = inertDocumentHelper;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DOMParserHelper, [{
    key: "getInertBodyElement",
    value: function getInertBodyElement(html) {
      // We add these extra elements to ensure that the rest of the content is parsed as expected
      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
      // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags
      // in `html` from consuming the otherwise explicit `</body>` tag.
      html = '<body><remove></remove>' + html;

      try {
        var body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;

        if (body === null) {
          // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only
          // becomes available in the following tick of the JS engine. In that case we fall back to
          // the `inertDocumentHelper` instead.
          return this.inertDocumentHelper.getInertBodyElement(html);
        }

        body.removeChild(body.firstChild);
        return body;
      } catch (_a) {
        return null;
      }
    }
  }]);

  return DOMParserHelper;
}();
/**
 * Use an HTML5 `template` element, if supported, or an inert body element created via
 * `createHtmlDocument` to create and fill an inert DOM element.
 * This is the fallback strategy if the browser does not support DOMParser.
 */


var InertDocumentHelper = /*#__PURE__*/function () {
  function InertDocumentHelper(defaultDoc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, InertDocumentHelper);

    this.defaultDoc = defaultDoc;
    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');

    if (this.inertDocument.body == null) {
      // usually there should be only one body element in the document, but IE doesn't have any, so
      // we need to create one.
      var inertHtml = this.inertDocument.createElement('html');
      this.inertDocument.appendChild(inertHtml);
      var inertBodyElement = this.inertDocument.createElement('body');
      inertHtml.appendChild(inertBodyElement);
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(InertDocumentHelper, [{
    key: "getInertBodyElement",
    value: function getInertBodyElement(html) {
      // Prefer using <template> element if supported.
      var templateEl = this.inertDocument.createElement('template');

      if ('content' in templateEl) {
        templateEl.innerHTML = trustedHTMLFromString(html);
        return templateEl;
      } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
      // and we returned the inert `body` node. This was changed, because IE seems to treat setting
      // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
      // yet. In particular, IE appears to split some of the text into multiple text nodes rather
      // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
      // down the line. This has been worked around by creating a new inert `body` and using it as
      // the root node in which we insert the HTML.


      var inertBody = this.inertDocument.createElement('body');
      inertBody.innerHTML = trustedHTMLFromString(html); // Support: IE 11 only
      // strip custom-namespaced attributes on IE<=11

      if (this.defaultDoc.documentMode) {
        this.stripCustomNsAttrs(inertBody);
      }

      return inertBody;
    }
    /**
     * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
     * 'ns1:xlink:foo').
     *
     * This is undesirable since we don't want to allow any of these custom attributes. This method
     * strips them all.
     */

  }, {
    key: "stripCustomNsAttrs",
    value: function stripCustomNsAttrs(el) {
      var elAttrs = el.attributes; // loop backwards so that we can support removals.

      for (var i = elAttrs.length - 1; 0 < i; i--) {
        var attrib = elAttrs.item(i);
        var attrName = attrib.name;

        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
          el.removeAttribute(attrName);
        }
      }

      var childNode = el.firstChild;

      while (childNode) {
        if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);
        childNode = childNode.nextSibling;
      }
    }
  }]);

  return InertDocumentHelper;
}();
/**
 * We need to determine whether the DOMParser exists in the global context and
 * supports parsing HTML; HTML parsing support is not as wide as other formats, see
 * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
 *
 * @suppress {uselessCode}
 */


function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');
  } catch (_a) {
    return false;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either an allowed protocol (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */


var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
/* A pattern that matches safe srcset values */

var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/** A pattern that matches safe data URLs. Only matches image, video and audio types. */

var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;

function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;

  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    console.warn("WARNING: sanitizing unsafe URL value ".concat(url, " (see https://g.co/ng/security#xss)"));
  }

  return 'unsafe:' + url;
}

function sanitizeSrcset(srcset) {
  srcset = String(srcset);
  return srcset.split(',').map(function (srcset) {
    return _sanitizeUrl(srcset.trim());
  }).join(', ');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function tagSet(tags) {
  var res = {};

  var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(tags.split(',')),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var t = _step.value;
      res[t] = true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return res;
}

function merge() {
  var res = {};

  for (var _len7 = arguments.length, sets = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    sets[_key7] = arguments[_key7];
  }

  for (var _i = 0, _sets = sets; _i < _sets.length; _i++) {
    var s = _sets[_i];

    for (var v in s) {
      if (s.hasOwnProperty(v)) res[v] = true;
    }
  }

  return res;
} // Good source of info about elements and attributes
// https://html.spec.whatwg.org/#semantics
// https://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// https://html.spec.whatwg.org/#void-elements


var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
// https://html.spec.whatwg.org/#optional-tags

var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5

var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5

var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized

var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href'); // Attributes that have special href set hence need to be sanitized

var SRCSET_ATTRS = tagSet('srcset');
var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)

var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.

var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
//
// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
// don't want to preserve the content, if the elements themselves are going to be removed.

var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */

var SanitizingHtmlSerializer = /*#__PURE__*/function () {
  function SanitizingHtmlSerializer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SanitizingHtmlSerializer);

    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
    // because characters were re-encoded.
    this.sanitizedSomething = false;
    this.buf = [];
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SanitizingHtmlSerializer, [{
    key: "sanitizeChildren",
    value: function sanitizeChildren(el) {
      // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
      // However this code never accesses properties off of `document` before deleting its contents
      // again, so it shouldn't be vulnerable to DOM clobbering.
      var current = el.firstChild;
      var traverseContent = true;

      while (current) {
        if (current.nodeType === Node.ELEMENT_NODE) {
          traverseContent = this.startElement(current);
        } else if (current.nodeType === Node.TEXT_NODE) {
          this.chars(current.nodeValue);
        } else {
          // Strip non-element, non-text nodes.
          this.sanitizedSomething = true;
        }

        if (traverseContent && current.firstChild) {
          current = current.firstChild;
          continue;
        }

        while (current) {
          // Leaving the element. Walk up and to the right, closing tags as we go.
          if (current.nodeType === Node.ELEMENT_NODE) {
            this.endElement(current);
          }

          var next = this.checkClobberedElement(current, current.nextSibling);

          if (next) {
            current = next;
            break;
          }

          current = this.checkClobberedElement(current, current.parentNode);
        }
      }

      return this.buf.join('');
    }
    /**
     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
     * be traversed. Element content must always be traversed (even if the element itself is not
     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
     *
     * @param element The element to sanitize.
     * @return True if the element's contents should be traversed.
     */

  }, {
    key: "startElement",
    value: function startElement(element) {
      var tagName = element.nodeName.toLowerCase();

      if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
        this.sanitizedSomething = true;
        return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
      }

      this.buf.push('<');
      this.buf.push(tagName);
      var elAttrs = element.attributes;

      for (var i = 0; i < elAttrs.length; i++) {
        var elAttr = elAttrs.item(i);
        var attrName = elAttr.name;
        var lower = attrName.toLowerCase();

        if (!VALID_ATTRS.hasOwnProperty(lower)) {
          this.sanitizedSomething = true;
          continue;
        }

        var value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...

        if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
        if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
        this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
      }

      this.buf.push('>');
      return true;
    }
  }, {
    key: "endElement",
    value: function endElement(current) {
      var tagName = current.nodeName.toLowerCase();

      if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
        this.buf.push('</');
        this.buf.push(tagName);
        this.buf.push('>');
      }
    }
  }, {
    key: "chars",
    value: function chars(_chars) {
      this.buf.push(encodeEntities(_chars));
    }
  }, {
    key: "checkClobberedElement",
    value: function checkClobberedElement(node, nextNode) {
      if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
        throw new Error("Failed to sanitize html because the element is clobbered: ".concat(node.outerHTML));
      }

      return nextNode;
    }
  }]);

  return SanitizingHtmlSerializer;
}(); // Regular Expressions for parsing tags and attributes


var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // ! to ~ is the ASCII range.

var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 */

function encodeEntities(value) {
  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
    var hi = match.charCodeAt(0);
    var low = match.charCodeAt(1);
    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
    return '&#' + match.charCodeAt(0) + ';';
  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

var inertBodyHelper;
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 */

function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  var inertBodyElement = null;

  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).

    var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.

    var mXSSAttempts = 5;
    var parsedHtml = unsafeHtml;

    do {
      if (mXSSAttempts === 0) {
        throw new Error('Failed to sanitize html because the input is unstable');
      }

      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);

    var sanitizer = new SanitizingHtmlSerializer();
    var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);

    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');
    }

    return trustedHTMLFromString(safeHtml);
  } finally {
    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
    if (inertBodyElement) {
      var parent = getTemplateContent(inertBodyElement) || inertBodyElement;

      while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
      }
    }
  }
}

function getTemplateContent(el) {
  return 'content' in el
  /** Microsoft/TypeScript#21517 */
  && isTemplateElement(el) ? el.content : null;
}

function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
 * handled.
 *
 * See DomSanitizer for more details on security in Angular applications.
 *
 * @publicApi
 */


var SecurityContext;

(function (SecurityContext) {
  SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
  SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
  SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
  SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext[SecurityContext["URL"] = 4] = "URL";
  SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext || (SecurityContext = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
 * dangerous content.
 *
 * This method parses the `html` and locates potentially dangerous content (such as urls and
 * javascript) and removes it.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
 *
 * @param unsafeHtml untrusted `html`, typically from the user.
 * @returns `html` string which is safe to display to user, because all of the dangerous javascript
 * and urls have been removed.
 *
 * @codeGenApi
 */


function ɵɵsanitizeHtml(unsafeHtml) {
  var sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML"
  /* Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }

  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
/**
 * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
 * dangerous content.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
 *
 * @param unsafeStyle untrusted `style`, typically from the user.
 * @returns `style` string which is safe to bind to the `style` properties.
 *
 * @codeGenApi
 */


function ɵɵsanitizeStyle(unsafeStyle) {
  var sanitizer = getSanitizer();

  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
  }

  if (allowSanitizationBypassAndThrow(unsafeStyle, "Style"
  /* Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }

  return renderStringify(unsafeStyle);
}
/**
 * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
 * dangerous
 * content.
 *
 * This method parses the `url` and locates potentially dangerous content (such as javascript) and
 * removes it.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
 *
 * @param unsafeUrl untrusted `url`, typically from the user.
 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * all of the dangerous javascript has been removed.
 *
 * @codeGenApi
 */


function ɵɵsanitizeUrl(unsafeUrl) {
  var sanitizer = getSanitizer();

  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
  }

  if (allowSanitizationBypassAndThrow(unsafeUrl, "URL"
  /* Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }

  return _sanitizeUrl(renderStringify(unsafeUrl));
}
/**
 * A `url` sanitizer which only lets trusted `url`s through.
 *
 * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
 *
 * @param unsafeResourceUrl untrusted `url`, typically from the user.
 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * only trusted `url`s have been allowed to pass.
 *
 * @codeGenApi
 */


function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
  var sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL"
  /* ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }

  throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');
}
/**
 * A `script` sanitizer which only lets trusted javascript through.
 *
 * This passes only `script`s marked trusted by calling {@link
 * bypassSanitizationTrustScript}.
 *
 * @param unsafeScript untrusted `script`, typically from the user.
 * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
 * because only trusted `scripts` have been allowed to pass.
 *
 * @codeGenApi
 */


function ɵɵsanitizeScript(unsafeScript) {
  var sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeScript, "Script"
  /* Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }

  throw new Error('unsafe value used in a script context');
}
/**
 * A template tag function for promoting the associated constant literal to a
 * TrustedHTML. Interpolation is explicitly not allowed.
 *
 * @param html constant template literal containing trusted HTML.
 * @returns TrustedHTML wrapping `html`.
 *
 * @security This is a security-sensitive function and should only be used to
 * convert constant values of attributes and properties found in
 * application-provided Angular templates to TrustedHTML.
 *
 * @codeGenApi
 */


function ɵɵtrustConstantHtml(html) {
  // The following runtime check ensures that the function was called as a
  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation
  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray
  // is an array with a `raw` property that is also an array. The associated
  // template literal has no interpolation if and only if the length of the
  // TemplateStringsArray is 1.
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error("Unexpected interpolation in trusted HTML constant: ".concat(html.join('?')));
  }

  return trustedHTMLFromString(html[0]);
}
/**
 * A template tag function for promoting the associated constant literal to a
 * TrustedScriptURL. Interpolation is explicitly not allowed.
 *
 * @param url constant template literal containing a trusted script URL.
 * @returns TrustedScriptURL wrapping `url`.
 *
 * @security This is a security-sensitive function and should only be used to
 * convert constant values of attributes and properties found in
 * application-provided Angular templates to TrustedScriptURL.
 *
 * @codeGenApi
 */


function ɵɵtrustConstantResourceUrl(url) {
  // The following runtime check ensures that the function was called as a
  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any
  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A
  // TemplateStringsArray is an array with a `raw` property that is also an
  // array. The associated template literal has no interpolation if and only if
  // the length of the TemplateStringsArray is 1.
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error("Unexpected interpolation in trusted URL constant: ".concat(url.join('?')));
  }

  return trustedScriptURLFromString(url[0]);
}
/**
 * Detects which sanitizer to use for URL property, based on tag name and prop name.
 *
 * The rules are based on the RESOURCE_URL context config from
 * `packages/compiler/src/schema/dom_security_schema.ts`.
 * If tag and prop names don't match Resource URL schema, use URL sanitizer.
 */


function getUrlSanitizer(tag, prop) {
  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {
    return ɵɵsanitizeResourceUrl;
  }

  return ɵɵsanitizeUrl;
}
/**
 * Sanitizes URL, selecting sanitizer function based on tag and property names.
 *
 * This function is used in case we can't define security context at compile time, when only prop
 * name is available. This happens when we generate host bindings for Directives/Components. The
 * host element is unknown at compile time, so we defer calculation of specific sanitizer to
 * runtime.
 *
 * @param unsafeUrl untrusted `url`, typically from the user.
 * @param tag target element tag name.
 * @param prop name of the property that contains the value.
 * @returns `url` string which is safe to bind.
 *
 * @codeGenApi
 */


function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}

function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith('on')) {
    var msg = "Binding to event property '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...") + "\nIf '".concat(name, "' is a directive input, make sure the directive is imported by the") + " current module.";
    throw new Error(msg);
  }
}

function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith('on')) {
    var msg = "Binding to event attribute '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...");
    throw new Error(msg);
  }
}

function getSanitizer() {
  var lView = getLView();
  return lView && lView[SANITIZER];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns the matching `LContext` data for a given DOM node, directive or component instance.
 *
 * This function will examine the provided DOM element, component, or directive instance\'s
 * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
 * value will be that of the newly created `LContext`.
 *
 * If the monkey-patched value is the `LView` instance then the context value for that
 * target will be created and the monkey-patch reference will be updated. Therefore when this
 * function is called it may mutate the provided element\'s, component\'s or any of the associated
 * directive\'s monkey-patch values.
 *
 * If the monkey-patch value is not detected then the code will walk up the DOM until an element
 * is found which contains a monkey-patch reference. When that occurs then the provided element
 * will be updated with a new context (which is then returned). If the monkey-patch value is not
 * detected for a component/directive instance then it will throw an error (all components and
 * directives should be automatically monkey-patched by ivy).
 *
 * @param target Component, Directive or DOM Node.
 */


function getLContext(target) {
  var mpValue = readPatchedData(target);

  if (mpValue) {
    // only when it's an array is it considered an LView instance
    // ... otherwise it's an already constructed LContext instance
    if (Array.isArray(mpValue)) {
      var lView = mpValue;
      var nodeIndex;
      var component = undefined;
      var directives = undefined;

      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);

        if (nodeIndex == -1) {
          throw new Error('The provided component was not found in the application');
        }

        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);

        if (nodeIndex == -1) {
          throw new Error('The provided directive was not found in the application');
        }

        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
      } else {
        nodeIndex = findViaNativeElement(lView, target);

        if (nodeIndex == -1) {
          return null;
        }
      } // the goal is not to fill the entire context full of data because the lookups
      // are expensive. Instead, only the target data (the element, component, container, ICU
      // expression or directive details) are filled into the context. If called multiple times
      // with different target values then the missing target data will be filled in.


      var native = unwrapRNode(lView[nodeIndex]);
      var existingCtx = readPatchedData(native);
      var context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native); // only when the component has been discovered then update the monkey-patch

      if (component && context.component === undefined) {
        context.component = component;
        attachPatchData(context.component, context);
      } // only when the directives have been discovered then update the monkey-patch


      if (directives && context.directives === undefined) {
        context.directives = directives;

        for (var i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context);
        }
      }

      attachPatchData(context.native, context);
      mpValue = context;
    }
  } else {
    var rElement = target;
    ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM
    // to find the nearest element that has already been monkey patched with data

    var parent = rElement;

    while (parent = parent.parentNode) {
      var parentContext = readPatchedData(parent);

      if (parentContext) {
        var _lView2 = void 0;

        if (Array.isArray(parentContext)) {
          _lView2 = parentContext;
        } else {
          _lView2 = parentContext.lView;
        } // the edge of the app was also reached here through another means
        // (maybe because the DOM was changed manually).


        if (!_lView2) {
          return null;
        }

        var index = findViaNativeElement(_lView2, rElement);

        if (index >= 0) {
          var _native = unwrapRNode(_lView2[index]);

          var _context = createLContext(_lView2, index, _native);

          attachPatchData(_native, _context);
          mpValue = _context;
          break;
        }
      }
    }
  }

  return mpValue || null;
}
/**
 * Creates an empty instance of a `LContext` context
 */


function createLContext(lView, nodeIndex, native) {
  return {
    lView: lView,
    nodeIndex: nodeIndex,
    native: native,
    component: undefined,
    directives: undefined,
    localRefs: undefined
  };
}
/**
 * Takes a component instance and returns the view for that component.
 *
 * @param componentInstance
 * @returns The component's view
 */


function getComponentViewByInstance(componentInstance) {
  var lView = readPatchedData(componentInstance);
  var view;

  if (Array.isArray(lView)) {
    var nodeIndex = findViaComponent(lView, componentInstance);
    view = getComponentLViewByIndex(nodeIndex, lView);
    var context = createLContext(lView, nodeIndex, view[HOST]);
    context.component = componentInstance;
    attachPatchData(componentInstance, context);
    attachPatchData(context.native, context);
  } else {
    var _context2 = lView;
    view = getComponentLViewByIndex(_context2.nodeIndex, _context2.lView);
  }

  return view;
}
/**
 * This property will be monkey-patched on elements, components and directives.
 */


var MONKEY_PATCH_KEY_NAME = '__ngContext__';
/**
 * Assigns the given data to the given target (which could be a component,
 * directive or DOM node instance) using monkey-patching.
 */

function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, 'Target expected');
  target[MONKEY_PATCH_KEY_NAME] = data;
}
/**
 * Returns the monkey-patch value data present on the target (which could be
 * a component, directive or a DOM node).
 */


function readPatchedData(target) {
  ngDevMode && assertDefined(target, 'Target expected');
  return target[MONKEY_PATCH_KEY_NAME] || null;
}

function readPatchedLView(target) {
  var value = readPatchedData(target);

  if (value) {
    return Array.isArray(value) ? value : value.lView;
  }

  return null;
}

function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.ɵcmp;
}

function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.ɵdir;
}
/**
 * Locates the element within the given LView and returns the matching index
 */


function findViaNativeElement(lView, target) {
  var tView = lView[TVIEW];

  for (var i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }

  return -1;
}
/**
 * Locates the next tNode (child, sibling or parent).
 */


function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    // Let's take the following template: <div><span>text</span></div><component/>
    // After checking the text node, we need to find the next parent that has a "next" TNode,
    // in this case the parent `div`, so that we can find the component.
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }

    return tNode.parent && tNode.parent.next;
  }
}
/**
 * Locates the component within the given LView and returns the matching index
 */


function findViaComponent(lView, componentInstance) {
  var componentIndices = lView[TVIEW].components;

  if (componentIndices) {
    for (var i = 0; i < componentIndices.length; i++) {
      var elementComponentIndex = componentIndices[i];
      var componentView = getComponentLViewByIndex(elementComponentIndex, lView);

      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    var rootComponent = rootComponentView[CONTEXT];

    if (rootComponent === componentInstance) {
      // we are dealing with the root element here therefore we know that the
      // element is the very first element after the HEADER data in the lView
      return HEADER_OFFSET;
    }
  }

  return -1;
}
/**
 * Locates the directive within the given LView and returns the matching index
 */


function findViaDirective(lView, directiveInstance) {
  // if a directive is monkey patched then it will (by default)
  // have a reference to the LView of the current view. The
  // element bound to the directive being search lives somewhere
  // in the view data. We loop through the nodes and check their
  // list of directives for the instance.
  var tNode = lView[TVIEW].firstChild;

  while (tNode) {
    var directiveIndexStart = tNode.directiveStart;
    var directiveIndexEnd = tNode.directiveEnd;

    for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }

    tNode = traverseNextElement(tNode);
  }

  return -1;
}
/**
 * Returns a list of directives extracted from the given view based on the
 * provided list of directive index values.
 *
 * @param nodeIndex The node index
 * @param lView The target view data
 * @param includeComponents Whether or not to include components in returned directives
 */


function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
  var tNode = lView[TVIEW].data[nodeIndex];
  var directiveStartIndex = tNode.directiveStart;
  if (directiveStartIndex == 0) return EMPTY_ARRAY;
  var directiveEndIndex = tNode.directiveEnd;
  if (!includeComponents && tNode.flags & 2
  /* isComponentHost */
  ) directiveStartIndex++;
  return lView.slice(directiveStartIndex, directiveEndIndex);
}

function getComponentAtNodeIndex(nodeIndex, lView) {
  var tNode = lView[TVIEW].data[nodeIndex];
  var directiveStartIndex = tNode.directiveStart;
  return tNode.flags & 2
  /* isComponentHost */
  ? lView[directiveStartIndex] : null;
}
/**
 * Returns a map of local references (local reference name => element or directive instance) that
 * exist on a given element.
 */


function discoverLocalRefs(lView, nodeIndex) {
  var tNode = lView[TVIEW].data[nodeIndex];

  if (tNode && tNode.localNames) {
    var result = {};
    var localIndex = tNode.index + 1;

    for (var i = 0; i < tNode.localNames.length; i += 2) {
      result[tNode.localNames[i]] = lView[localIndex];
      localIndex++;
    }

    return result;
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ERROR_TYPE = 'ngType';
var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
var ERROR_LOGGER = 'ngErrorLogger';

function wrappedError(message, originalError) {
  var msg = "".concat(message, " caused by: ").concat(originalError instanceof Error ? originalError.message : originalError);
  var error = Error(msg);
  error[ERROR_ORIGINAL_ERROR] = originalError;
  return error;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getType(error) {
  return error[ERROR_TYPE];
}

function getDebugContext(error) {
  return error[ERROR_DEBUG_CONTEXT];
}

function getOriginalError(error) {
  return error[ERROR_ORIGINAL_ERROR];
}

function getErrorLogger(error) {
  return error && error[ERROR_LOGGER] || defaultErrorLogger;
}

function defaultErrorLogger(console) {
  for (var _len8 = arguments.length, values = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
    values[_key8 - 1] = arguments[_key8];
  }

  console.error.apply(console, values);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * @NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * @publicApi
 */


var ErrorHandler = /*#__PURE__*/function () {
  function ErrorHandler() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ErrorHandler);

    /**
     * @internal
     */
    this._console = console;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ErrorHandler, [{
    key: "handleError",
    value: function handleError(error) {
      var originalError = this._findOriginalError(error);

      var context = this._findContext(error); // Note: Browser consoles show the place from where console.error was called.
      // We can use this to give users additional information about the error.


      var errorLogger = getErrorLogger(error);
      errorLogger(this._console, "ERROR", error);

      if (originalError) {
        errorLogger(this._console, "ORIGINAL ERROR", originalError);
      }

      if (context) {
        errorLogger(this._console, 'ERROR CONTEXT', context);
      }
    }
    /** @internal */

  }, {
    key: "_findContext",
    value: function _findContext(error) {
      return error ? getDebugContext(error) || this._findContext(getOriginalError(error)) : null;
    }
    /** @internal */

  }, {
    key: "_findOriginalError",
    value: function _findOriginalError(error) {
      var e = error && getOriginalError(error);

      while (e && getOriginalError(e)) {
        e = getOriginalError(e);
      }

      return e || null;
    }
  }]);

  return ErrorHandler;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines a schema that allows an NgModule to contain the following:
 * - Non-Angular elements named with dash case (`-`).
 * - Element properties named with dash case (`-`).
 * Dash case is the naming convention for custom elements.
 *
 * @publicApi
 */


var CUSTOM_ELEMENTS_SCHEMA = {
  name: 'custom-elements'
};
/**
 * Defines a schema that allows any property on any element.
 *
 * This schema allows you to ignore the errors related to any unknown elements or properties in a
 * template. The usage of this schema is generally discouraged because it prevents useful validation
 * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.
 *
 * @publicApi
 */

var NO_ERRORS_SCHEMA = {
  name: 'no-errors-schema'
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Disallowed strings in the comment.
 *
 * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
 */

var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
/**
 * Delimiter in the disallowed strings which needs to be wrapped with zero with character.
 */

var COMMENT_DELIMITER = /(<|>)/;
var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
/**
 * Escape the content of comment strings so that it can be safely inserted into a comment node.
 *
 * The issue is that HTML does not specify any way to escape comment end text inside the comment.
 * Consider: `<!-- The way you close a comment is with ">", and "->" at the beginning or by "-->" or
 * "--!>" at the end. -->`. Above the `"-->"` is meant to be text not an end to the comment. This
 * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)
 *
 * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
 *
 * ```
 * div.innerHTML = div.innerHTML
 * ```
 *
 * One would expect that the above code would be safe to do, but it turns out that because comment
 * text is not escaped, the comment may contain text which will prematurely close the comment
 * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which
 * may contain such text and expect them to be safe.)
 *
 * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and
 * surrounding them with `_>_` where the `_` is a zero width space `\u200B`. The result is that if a
 * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the
 * text it will render normally but it will not cause the HTML parser to close/open the comment.
 *
 * @param value text to make safe for comment node by escaping the comment open/close character
 *     sequence.
 */

function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, function (text) {
    return text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED);
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
 */

/**
 * Creates an `Array` construction with a given name. This is useful when
 * looking for memory consumption to see what time of array it is.
 *
 *
 * @param name Name to give to the constructor
 * @returns A subclass of `Array` if possible. This can only be done in
 *          environments which support `class` construct.
 */


function createNamedArrayType(name) {
  // This should never be called in prod mode, so let's verify that is the case.
  if (ngDevMode) {
    try {
      // If this function were compromised the following could lead to arbitrary
      // script execution. We bless it with Trusted Types anyway since this
      // function is stripped out of production binaries.
      return newTrustedFunctionForDev('Array', "return class ".concat(name, " extends Array{}"))(Array);
    } catch (e) {
      // If it does not work just give up and fall back to regular Array.
      return Array;
    }
  } else {
    throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function normalizeDebugBindingName(name) {
  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
  return "ng-reflect-".concat(name);
}

var CAMEL_CASE_REGEXP = /([A-Z])/g;

function camelCaseToDashCase(input) {
  return input.replace(CAMEL_CASE_REGEXP, function () {
    for (var _len9 = arguments.length, m = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      m[_key9] = arguments[_key9];
    }

    return '-' + m[1].toLowerCase();
  });
}

function normalizeDebugBindingValue(value) {
  try {
    // Limit the size of the value as otherwise the DOM just gets polluted.
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e) {
    return '[ERROR] Exception while trying to serialize the value';
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$4 = function ɵ0$4() {
  return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
  setTimeout // everything else
  ).bind(_global);
};

var defaultScheduler = ɵ0$4();
/**
 *
 * @codeGenApi
 */

function ɵɵresolveWindow(element) {
  return element.ownerDocument.defaultView;
}
/**
 *
 * @codeGenApi
 */


function ɵɵresolveDocument(element) {
  return element.ownerDocument;
}
/**
 *
 * @codeGenApi
 */


function ɵɵresolveBody(element) {
  return element.ownerDocument.body;
}
/**
 * The special delimiter we use to separate property names, prefixes, and suffixes
 * in property binding metadata. See storeBindingMetadata().
 *
 * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
 * because it is a very uncommon character that is unlikely to be part of a user's
 * property names or interpolation strings. If it is in fact used in a property
 * binding, DebugElement.properties will not return the correct value for that
 * binding. However, there should be no runtime effect for real applications.
 *
 * This character is typically rendered as a question mark inside of a diamond.
 * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
 *
 */


var INTERPOLATION_DELIMITER = "\uFFFD";
/**
 * Unwrap a value which might be behind a closure (for forward declaration reasons).
 */

function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Called when there are multiple component selectors that match a given node */


function throwMultipleComponentError(tNode) {
  throw new RuntimeError("300"
  /* MULTIPLE_COMPONENTS_MATCH */
  , "Multiple components match node with tagname ".concat(tNode.value));
}
/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */


function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
  var field = propName ? " for '".concat(propName, "'") : '';
  var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value".concat(field, ": '").concat(oldValue, "'. Current value: '").concat(currValue, "'.");

  if (creationMode) {
    msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook?";
  } // TODO: include debug context, see `viewDebugError` function in
  // `packages/core/src/view/errors.ts` for reference.


  throw new RuntimeError("100"
  /* EXPRESSION_CHANGED_AFTER_CHECKED */
  , msg);
}

function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  var _meta$split = meta.split(INTERPOLATION_DELIMITER),
      _meta$split2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_5__.default)(_meta$split),
      propName = _meta$split2[0],
      prefix = _meta$split2[1],
      chunks = _meta$split2.slice(2);

  var oldValue = prefix,
      newValue = prefix;

  for (var i = 0; i < chunks.length; i++) {
    var slotIdx = rootIndex + i;
    oldValue += "".concat(lView[slotIdx]).concat(chunks[i]);
    newValue += "".concat(slotIdx === expressionIndex ? changedValue : lView[slotIdx]).concat(chunks[i]);
  }

  return {
    propName: propName,
    oldValue: oldValue,
    newValue: newValue
  };
}
/**
 * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
 * - property name (for property bindings or interpolations)
 * - old and new values, enriched using information from metadata
 *
 * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
 * function description.
 */


function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  var tData = lView[TVIEW].data;
  var metadata = tData[bindingIndex];

  if (typeof metadata === 'string') {
    // metadata for property interpolation
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    } // metadata for property binding


    return {
      propName: metadata,
      oldValue: oldValue,
      newValue: newValue
    };
  } // metadata is not available for this expression, check if this expression is a part of the
  // property interpolation by going from the current binding index left and look for a string that
  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
  // [..., 'id�Prefix � and � suffix', null, null, null, ...]


  if (metadata === null) {
    var idx = bindingIndex - 1;

    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
      idx--;
    }

    var meta = tData[idx];

    if (typeof meta === 'string') {
      var matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of
      // property interpolations), so we subtract one from total number of found delimiters

      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }

  return {
    propName: undefined,
    oldValue: oldValue,
    newValue: newValue
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Flags for renderer-specific style modifiers.
 * @publicApi
 */


var RendererStyleFlags2;

(function (RendererStyleFlags2) {
  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.

  /**
   * Marks a style as important.
   */
  RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
  /**
   * Marks a style as using dash case naming (this-is-dash-case).
   */

  RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _icuContainerIterate;
/**
 * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.
 */


function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
/**
 * Ensures that `IcuContainerVisitor`'s implementation is present.
 *
 * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the
 * bundler to tree shake ICU logic and only load it if ICU instruction is executed.
 */


function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === undefined) {
    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it
    // can be inlined into call-site.
    _icuContainerIterate = loader();
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


var unusedValueExportToPlacateAjd$5 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
 * that LContainer, which is an LView
 * @param lView the lView whose parent to get
 */

function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  var parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
/**
 * Retrieve the root view from any component or `LView` by walking the parent `LView` until
 * reaching the root `LView`.
 *
 * @param componentOrLView any component or `LView`
 */


function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, 'component');
  var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);

  while (lView && !(lView[FLAGS] & 512
  /* IsRoot */
  )) {
    lView = getLViewParent(lView);
  }

  ngDevMode && assertLView(lView);
  return lView;
}
/**
 * Returns the `RootContext` instance that is associated with
 * the application where the target is situated. It does this by walking the parent views until it
 * gets to the root view, then getting the context off of that.
 *
 * @param viewOrComponent the `LView` or component to get the root context for.
 */


function getRootContext(viewOrComponent) {
  var rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
  return rootView[CONTEXT];
}
/**
 * Gets the first `LContainer` in the LView or `null` if none exists.
 */


function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
/**
 * Gets the next `LContainer` that is a sibling of the given container.
 */


function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}

function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }

  return viewOrContainer;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd;
/**
 * NOTE: for performance reasons, the possible actions are inlined within the function instead of
 * being passed as an argument.
 */

function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  // If this slot was allocated for a text node dynamically created by i18n, the text node itself
  // won't be created until i18nApply() in the update block, so this node should be skipped.
  // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
  // in `i18n_spec.ts`.
  if (lNodeToHandle != null) {
    var lContainer;
    var isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
    // it has LContainer so that we can process all of those cases appropriately.

    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
      lNodeToHandle = lNodeToHandle[HOST];
    }

    var rNode = unwrapRNode(lNodeToHandle);
    ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);

    if (action === 0
    /* Create */
    && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1
    /* Insert */
    && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2
    /* Detach */
    ) {
      nativeRemoveNode(renderer, rNode, isComponent);
    } else if (action === 3
    /* Destroy */
    ) {
      ngDevMode && ngDevMode.rendererDestroyNode++;
      renderer.destroyNode(rNode);
    }

    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}

function createTextNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateTextNode++;
  ngDevMode && ngDevMode.rendererSetText++;
  return isProceduralRenderer(renderer) ? renderer.createText(value) : renderer.createTextNode(value);
}

function updateTextNode(renderer, rNode, value) {
  ngDevMode && ngDevMode.rendererSetText++;
  isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;
}

function createCommentNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateComment++; // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same
  // method name.

  return renderer.createComment(escapeCommentText(value));
}
/**
 * Creates a native element from a tag name, using a renderer.
 * @param renderer A renderer to use
 * @param name the tag name
 * @param namespace Optional namespace for element.
 * @returns the element created
 */


function createElementNode(renderer, name, namespace) {
  ngDevMode && ngDevMode.rendererCreateElement++;

  if (isProceduralRenderer(renderer)) {
    return renderer.createElement(name, namespace);
  } else {
    return namespace === null ? renderer.createElement(name) : renderer.createElementNS(namespace, name);
  }
}
/**
 * Removes all DOM elements associated with a view.
 *
 * Because some root nodes of the view may be containers, we sometimes need
 * to propagate deeply into the nested containers to remove all elements in the
 * views beneath it.
 *
 * @param tView The `TView' of the `LView` from which elements should be added or removed
 * @param lView The view from which elements should be added or removed
 */


function removeViewFromContainer(tView, lView) {
  var renderer = lView[RENDERER];
  applyView(tView, lView, renderer, 2
  /* Detach */
  , null, null);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
/**
 * Adds all DOM elements associated with a view.
 *
 * Because some root nodes of the view may be containers, we sometimes need
 * to propagate deeply into the nested containers to add all elements in the
 * views beneath it.
 *
 * @param tView The `TView' of the `LView` from which elements should be added or removed
 * @param parentTNode The `TNode` where the `LView` should be attached to.
 * @param renderer Current renderer to use for DOM manipulations.
 * @param lView The view from which elements should be added or removed
 * @param parentNativeNode The parent `RElement` where it should be inserted into.
 * @param beforeNode The node before which elements should be added, if insert mode
 */


function addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1
  /* Insert */
  , parentNativeNode, beforeNode);
}
/**
 * Detach a `LView` from the DOM by detaching its nodes.
 *
 * @param tView The `TView' of the `LView` to be detached
 * @param lView the `LView` to be detached.
 */


function renderDetachView(tView, lView) {
  applyView(tView, lView, lView[RENDERER], 2
  /* Detach */
  , null, null);
}
/**
 * Traverses down and up the tree of views and containers to remove listeners and
 * call onDestroy callbacks.
 *
 * Notes:
 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
 *  - Must process containers instead of their views to avoid splicing
 *  when views are destroyed and re-added.
 *  - Using a while loop because it's faster than recursion
 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
 *
 *  @param rootView The view to destroy
 */


function destroyViewTree(rootView) {
  // If the view has no children, we can clean it up and return early.
  var lViewOrLContainer = rootView[CHILD_HEAD];

  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }

  while (lViewOrLContainer) {
    var next = null;

    if (isLView(lViewOrLContainer)) {
      // If LView, traverse down to child.
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.

      var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView) next = firstView;
    }

    if (!next) {
      // Only clean up view when moving to the side or up, as destroy hooks
      // should be called in order from the bottom up.
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }

        lViewOrLContainer = lViewOrLContainer[PARENT];
      }

      if (lViewOrLContainer === null) lViewOrLContainer = rootView;

      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }

      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }

    lViewOrLContainer = next;
  }
}
/**
 * Inserts a view into a container.
 *
 * This adds the view to the container's array of active views in the correct
 * position. It also adds the view's elements to the DOM if the container isn't a
 * root node of another view (in that case, the view's elements will be added when
 * the container's parent view is added later).
 *
 * @param tView The `TView' of the `LView` to insert
 * @param lView The view to insert
 * @param lContainer The container into which the view should be inserted
 * @param index Which index in the container to insert the child view into
 */


function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  var indexInContainer = CONTAINER_HEADER_OFFSET + index;
  var containerLength = lContainer.length;

  if (index > 0) {
    // This is a new view, we need to add it to the children.
    lContainer[indexInContainer - 1][NEXT] = lView;
  }

  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }

  lView[PARENT] = lContainer; // track views where declaration and insertion points are different

  var declarationLContainer = lView[DECLARATION_LCONTAINER];

  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  } // notify query that a new view has been added


  var lQueries = lView[QUERIES];

  if (lQueries !== null) {
    lQueries.insertView(tView);
  } // Sets the attached flag


  lView[FLAGS] |= 128
  /* Attached */
  ;
}
/**
 * Track views created from the declaration container (TemplateRef) and inserted into a
 * different LContainer.
 */


function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, 'LView required');
  ngDevMode && assertLContainer(declarationContainer);
  var movedViews = declarationContainer[MOVED_VIEWS];
  var insertedLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertedLContainer);
  var insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
  var declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');

  if (declaredComponentLView !== insertedComponentLView) {
    // At this point the declaration-component is not same as insertion-component; this means that
    // this is a transplanted view. Mark the declared lView as having transplanted views so that
    // those views can participate in CD.
    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
  }

  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}

function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
  var movedViews = declarationContainer[MOVED_VIEWS];
  var declarationViewIndex = movedViews.indexOf(lView);
  var insertionLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag
  // would be cleared and the counter decremented), we need to decrement the view counter here
  // instead.

  if (lView[FLAGS] & 1024
  /* RefreshTransplantedView */
  ) {
    lView[FLAGS] &= ~1024
    /* RefreshTransplantedView */
    ;
    updateTransplantedViewCount(insertionLContainer, -1);
  }

  movedViews.splice(declarationViewIndex, 1);
}
/**
 * Detaches a view from a container.
 *
 * This method removes the view from the container's array of active views. It also
 * removes the view's elements from the DOM.
 *
 * @param lContainer The container from which to detach a view
 * @param removeIndex The index of the view to detach
 * @returns Detached LView instance.
 */


function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
  var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  var viewToDetach = lContainer[indexInContainer];

  if (viewToDetach) {
    var declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];

    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }

    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }

    var removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach); // notify query that a view has been removed

    var lQueries = removedLView[QUERIES];

    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }

    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null; // Unsets the attached flag

    viewToDetach[FLAGS] &= ~128
    /* Attached */
    ;
  }

  return viewToDetach;
}
/**
 * A standalone function which destroys an LView,
 * conducting clean up (e.g. removing listeners, calling onDestroys).
 *
 * @param tView The `TView' of the `LView` to be destroyed
 * @param lView The view to be destroyed.
 */


function destroyLView(tView, lView) {
  if (!(lView[FLAGS] & 256
  /* Destroyed */
  )) {
    var renderer = lView[RENDERER];

    if (isProceduralRenderer(renderer) && renderer.destroyNode) {
      applyView(tView, lView, renderer, 3
      /* Destroy */
      , null, null);
    }

    destroyViewTree(lView);
  }
}
/**
 * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
 * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
 * can be propagated to @Output listeners.
 *
 * @param tView `TView` for the `LView` to clean up.
 * @param lView The LView to clean up
 */


function cleanUpView(tView, lView) {
  if (!(lView[FLAGS] & 256
  /* Destroyed */
  )) {
    // Usually the Attached flag is removed when the view is detached from its parent, however
    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
    lView[FLAGS] &= ~128
    /* Attached */
    ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
    // really more of an "afterDestroy" hook if you think about it.

    lView[FLAGS] |= 256
    /* Destroyed */
    ;
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView); // For component views only, the local renderer is destroyed at clean up time.

    if (lView[TVIEW].type === 1
    /* Component */
    && isProceduralRenderer(lView[RENDERER])) {
      ngDevMode && ngDevMode.rendererDestroy++;
      lView[RENDERER].destroy();
    }

    var declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container

    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      // and this is a projected view
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      } // For embedded views still attached to a container: remove query result from this view.


      var lQueries = lView[QUERIES];

      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
  }
}
/** Removes listeners and unsubscribes from output subscriptions */


function processCleanups(tView, lView) {
  var tCleanup = tView.cleanup;
  var lCleanup = lView[CLEANUP]; // `LCleanup` contains both share information with `TCleanup` as well as instance specific
  // information appended at the end. We need to know where the end of the `TCleanup` information
  // is, and we track this with `lastLCleanupIndex`.

  var lastLCleanupIndex = -1;

  if (tCleanup !== null) {
    for (var i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === 'string') {
        // This is a native DOM listener
        var idxOrTargetGetter = tCleanup[i + 1];
        var target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);
        var listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];
        var useCaptureOrSubIdx = tCleanup[i + 3];

        if (typeof useCaptureOrSubIdx === 'boolean') {
          // native DOM listener registered with Renderer3
          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
        } else {
          if (useCaptureOrSubIdx >= 0) {
            // unregister
            lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();
          } else {
            // Subscription
            lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();
          }
        }

        i += 2;
      } else {
        // This is a cleanup function that is grouped with the index of its context
        var context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];
        tCleanup[i].call(context);
      }
    }
  }

  if (lCleanup !== null) {
    for (var _i2 = lastLCleanupIndex + 1; _i2 < lCleanup.length; _i2++) {
      var instanceCleanupFn = lCleanup[_i2];
      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');
      instanceCleanupFn();
    }

    lView[CLEANUP] = null;
  }
}
/** Calls onDestroy hooks for this view */


function executeOnDestroys(tView, lView) {
  var destroyHooks;

  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (var i = 0; i < destroyHooks.length; i += 2) {
      var context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.

      if (!(context instanceof NodeInjectorFactory)) {
        var toCall = destroyHooks[i + 1];

        if (Array.isArray(toCall)) {
          for (var j = 0; j < toCall.length; j += 2) {
            var callContext = context[toCall[j]];
            var hook = toCall[j + 1];
            profiler(4
            /* LifecycleHookStart */
            , callContext, hook);

            try {
              hook.call(callContext);
            } finally {
              profiler(5
              /* LifecycleHookEnd */
              , callContext, hook);
            }
          }
        } else {
          profiler(4
          /* LifecycleHookStart */
          , context, toCall);

          try {
            toCall.call(context);
          } finally {
            profiler(5
            /* LifecycleHookEnd */
            , context, toCall);
          }
        }
      }
    }
  }
}
/**
 * Returns a native element if a node can be inserted into the given parent.
 *
 * There are two reasons why we may not be able to insert a element immediately.
 * - Projection: When creating a child content element of a component, we have to skip the
 *   insertion because the content of a component will be projected.
 *   `<component><content>delayed due to projection</content></component>`
 * - Parent container is disconnected: This can happen when we are inserting a view into
 *   parent container, which itself is disconnected. For example the parent container is part
 *   of a View which has not be inserted or is made for projection but has not been inserted
 *   into destination.
 *
 * @param tView: Current `TView`.
 * @param tNode: `TNode` for which we wish to retrieve render parent.
 * @param lView: Current `LView`.
 */


function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
/**
 * Get closest `RElement` or `null` if it can't be found.
 *
 * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.
 * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).
 * If `TNode` is `null` then return host `RElement`:
 *   - return `null` if projection
 *   - return `null` if parent container is disconnected (we have no parent.)
 *
 * @param tView: Current `TView`.
 * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is
 *     needed).
 * @param lView: Current `LView`.
 * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)
 */


function getClosestRElement(tView, tNode, lView) {
  var parentTNode = tNode; // Skip over element and ICU containers as those are represented by a comment node and
  // can't be used as a render parent.

  while (parentTNode !== null && parentTNode.type & (8
  /* ElementContainer */
  | 32
  /* Icu */
  )) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  } // If the parent tNode is null, then we are inserting across views: either into an embedded view
  // or a component view.


  if (parentTNode === null) {
    // We are inserting a root element of the component view into the component host element and
    // it should always be eager.
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(parentTNode, 3
    /* AnyRNode */
    | 4
    /* Container */
    );

    if (parentTNode.flags & 2
    /* isComponentHost */
    ) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      var encapsulation = tView.data[parentTNode.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the
      // parent element is not a component. Component's content nodes are not inserted immediately
      // because they will be projected, and so doing insert at this point would be wasteful.
      // Since the projection would then move it to its final destination. Note that we can't
      // make this assumption when using the Shadow DOM, because the native projection placeholders
      // (<content> or <slot>) have to be in place as elements are being inserted.

      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {
        return null;
      }
    }

    return getNativeByTNode(parentTNode, lView);
  }
}
/**
 * Inserts a native node before another native node for a given parent using {@link Renderer3}.
 * This is a utility function that can be used when native nodes were determined - it abstracts an
 * actual renderer being used.
 */


function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  ngDevMode && ngDevMode.rendererInsertBefore++;

  if (isProceduralRenderer(renderer)) {
    renderer.insertBefore(parent, child, beforeNode, isMove);
  } else {
    parent.insertBefore(child, beforeNode, isMove);
  }
}

function nativeAppendChild(renderer, parent, child) {
  ngDevMode && ngDevMode.rendererAppendChild++;
  ngDevMode && assertDefined(parent, 'parent node must be defined');

  if (isProceduralRenderer(renderer)) {
    renderer.appendChild(parent, child);
  } else {
    parent.appendChild(child);
  }
}

function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
/** Removes a node from the DOM given its native parent. */


function nativeRemoveChild(renderer, parent, child, isHostElement) {
  if (isProceduralRenderer(renderer)) {
    renderer.removeChild(parent, child, isHostElement);
  } else {
    parent.removeChild(child);
  }
}
/**
 * Returns a native parent of a given native node.
 */


function nativeParentNode(renderer, node) {
  return isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode;
}
/**
 * Returns a native sibling of a given native node.
 */


function nativeNextSibling(renderer, node) {
  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
}
/**
 * Find a node in front of which `currentTNode` should be inserted.
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
/**
 * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into
 * account)
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * does not take `TNode.insertBeforeIndex` into account.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8
  /* ElementContainer */
  | 32
  /* Icu */
  )) {
    return getNativeByTNode(parentTNode, lView);
  }

  return null;
}
/**
 * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.
 *
 * This function will only be set if i18n code runs.
 */


var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
/**
 * Tree shakable boundary for `processI18nInsertBefore` function.
 *
 * This function will only be set if i18n code runs.
 */

var _processI18nInsertBefore;

function setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;
  _processI18nInsertBefore = processI18nInsertBefore;
}
/**
 * Appends the `child` native node (or a collection of nodes) to the `parent`.
 *
 * @param tView The `TView' to be appended
 * @param lView The current LView
 * @param childRNode The native child (or children) that should be appended
 * @param childTNode The TNode of the child element
 */


function appendChild(tView, lView, childRNode, childTNode) {
  var parentRNode = getParentRElement(tView, childTNode, lView);
  var renderer = lView[RENDERER];
  var parentTNode = childTNode.parent || lView[T_HOST];
  var anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);

  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (var i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }

  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
/**
 * Returns the first native node for a given LView, starting from the provided TNode.
 *
 * Native nodes are returned in the order in which those appear in the native tree (DOM).
 */


function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 32
    /* Icu */
    | 16
    /* Projection */
    );
    var tNodeType = tNode.type;

    if (tNodeType & 3
    /* AnyRNode */
    ) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4
    /* Container */
    ) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8
    /* ElementContainer */
    ) {
      var elIcuContainerChild = tNode.child;

      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        var rNodeOrLContainer = lView[tNode.index];

        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 32
    /* Icu */
    ) {
      var nextRNode = icuContainerIterate(tNode, lView);
      var rNode = nextRNode(); // If the ICU container has no nodes, than we use the ICU anchor as the node.

      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      var projectionNodes = getProjectionNodes(lView, tNode);

      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }

        var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }

  return null;
}

function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    var componentView = lView[DECLARATION_COMPONENT_VIEW];
    var componentHost = componentView[T_HOST];
    var slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }

  return null;
}

function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;

  if (nextViewIndex < lContainer.length) {
    var lView = lContainer[nextViewIndex];
    var firstTNodeOfView = lView[TVIEW].firstChild;

    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }

  return lContainer[NATIVE];
}
/**
 * Removes a native node itself using a given renderer. To remove the node we are looking up its
 * parent from the native tree as not all platforms / browsers support the equivalent of
 * node.remove().
 *
 * @param renderer A renderer to be used
 * @param rNode The native node that should be removed
 * @param isHostElement A flag indicating if a node to be removed is a host of a component.
 */


function nativeRemoveNode(renderer, rNode, isHostElement) {
  ngDevMode && ngDevMode.rendererRemoveNode++;
  var nativeParent = nativeParentNode(renderer, rNode);

  if (nativeParent) {
    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
  }
}
/**
 * Performs the operation of `action` on the node. Typically this involves inserting or removing
 * nodes on the LView or projection boundary.
 */


function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 16
    /* Projection */
    | 32
    /* Icu */
    );
    var rawSlotValue = lView[tNode.index];
    var tNodeType = tNode.type;

    if (isProjection) {
      if (action === 0
      /* Create */
      ) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 4
        /* isProjected */
        ;
      }
    }

    if ((tNode.flags & 64
    /* isDetached */
    ) !== 64
    /* isDetached */
    ) {
      if (tNodeType & 8
      /* ElementContainer */
      ) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32
      /* Icu */
      ) {
        var nextRNode = icuContainerIterate(tNode, lView);
        var rNode = void 0;

        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }

        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16
      /* Projection */
      ) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 4
        /* Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }

    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}

function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
/**
 * `applyProjection` performs operation on the projection.
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
 * @param lView The `LView` which needs to be inserted, detached, destroyed.
 * @param tProjectionNode node to project
 */


function applyProjection(tView, lView, tProjectionNode) {
  var renderer = lView[RENDERER];
  var parentRNode = getParentRElement(tView, tProjectionNode, lView);
  var parentTNode = tProjectionNode.parent || lView[T_HOST];
  var beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0
  /* Create */
  , lView, tProjectionNode, parentRNode, beforeNode);
}
/**
 * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
 * detach, destroy)
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param renderer Render to use
 * @param action action to perform (insert, detach, destroy)
 * @param lView The LView which needs to be inserted, detached, destroyed.
 * @param tProjectionNode node to project
 * @param parentRElement parent DOM element for insertion/removal.
 * @param beforeNode Before which node the insertions should happen.
 */


function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  var componentLView = lView[DECLARATION_COMPONENT_VIEW];
  var componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
  var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];

  if (Array.isArray(nodeToProjectOrRNodes)) {
    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
    // need to support passing projectable nodes, so we cheat and put them in the TNode
    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
    // because we know that that TView is not shared and therefore it will not be a problem.
    // This should be refactored and cleaned up.
    for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {
      var rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    var nodeToProject = nodeToProjectOrRNodes;
    var projectedComponentLView = componentLView[PARENT];
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
/**
 * `applyContainer` performs an operation on the container and its views as specified by
 * `action` (insert, detach, destroy)
 *
 * Inserting a Container is complicated by the fact that the container may have Views which
 * themselves have containers or projections.
 *
 * @param renderer Renderer to use
 * @param action action to perform (insert, detach, destroy)
 * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
 * @param parentRElement parent DOM element for insertion/removal.
 * @param beforeNode Before which node the insertions should happen.
 */


function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  var anchor = lContainer[NATIVE]; // LContainer has its own before node.

  var native = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor
  // node (comment in the DOM) that will be different from the LContainer's host node. In this
  // particular case we need to execute action on 2 nodes:
  // - container's host node (this is done in the executeActionOnElementOrContainer)
  // - container's host node (this is done here)

  if (anchor !== native) {
    // This is very strange to me (Misko). I would expect that the native is same as anchor. I
    // don't see a reason why they should be different, but they are.
    //
    // If they are we need to process the second anchor as well.
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }

  for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    var lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
/**
 * Writes class/style to element.
 *
 * @param renderer Renderer to use.
 * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
 * @param rNode The Node to write to.
 * @param prop Property to write to. This would be the class/style name.
 * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
 *        otherwise).
 */


function applyStyling(renderer, isClassBased, rNode, prop, value) {
  var isProcedural = isProceduralRenderer(renderer);

  if (isClassBased) {
    // We actually want JS true/false here because any truthy value should add the class
    if (!value) {
      ngDevMode && ngDevMode.rendererRemoveClass++;

      if (isProcedural) {
        renderer.removeClass(rNode, prop);
      } else {
        rNode.classList.remove(prop);
      }
    } else {
      ngDevMode && ngDevMode.rendererAddClass++;

      if (isProcedural) {
        renderer.addClass(rNode, prop);
      } else {
        ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
        rNode.classList.add(prop);
      }
    }
  } else {
    var flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;

    if (value == null
    /** || value === undefined */
    ) {
      ngDevMode && ngDevMode.rendererRemoveStyle++;

      if (isProcedural) {
        renderer.removeStyle(rNode, prop, flags);
      } else {
        rNode.style.removeProperty(prop);
      }
    } else {
      // A value is important if it ends with `!important`. The style
      // parser strips any semicolons at the end of the value.
      var isImportant = typeof value === 'string' ? value.endsWith('!important') : false;

      if (isImportant) {
        // !important has to be stripped from the value for it to be valid.
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }

      ngDevMode && ngDevMode.rendererSetStyle++;

      if (isProcedural) {
        renderer.setStyle(rNode, prop, value, flags);
      } else {
        ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
        rNode.style.setProperty(prop, value, isImportant ? 'important' : '');
      }
    }
  }
}
/**
 * Write `cssText` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param renderer Renderer to use
 * @param element The element which needs to be updated.
 * @param newValue The new class list to write.
 */


function writeDirectStyle(renderer, element, newValue) {
  ngDevMode && assertString(newValue, '\'newValue\' should be a string');

  if (isProceduralRenderer(renderer)) {
    renderer.setAttribute(element, 'style', newValue);
  } else {
    element.style.cssText = newValue;
  }

  ngDevMode && ngDevMode.rendererSetStyle++;
}
/**
 * Write `className` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param renderer Renderer to use
 * @param element The element which needs to be updated.
 * @param newValue The new class list to write.
 */


function writeDirectClass(renderer, element, newValue) {
  ngDevMode && assertString(newValue, '\'newValue\' should be a string');

  if (isProceduralRenderer(renderer)) {
    if (newValue === '') {
      // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
      renderer.removeAttribute(element, 'class');
    } else {
      renderer.setAttribute(element, 'class', newValue);
    }
  } else {
    element.className = newValue;
  }

  ngDevMode && ngDevMode.rendererSetClassName++;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an index of `classToSearch` in `className` taking token boundaries into account.
 *
 * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
 *
 * @param className A string containing classes (whitespace separated)
 * @param classToSearch A class name to locate
 * @param startingIndex Starting location of search
 * @returns an index of the located class (or -1 if not found)
 */


function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
  var end = className.length;

  while (true) {
    var foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1) return foundIndex;

    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32
    /* SPACE */
    ) {
      // Ensure that it has leading whitespace
      var length = classToSearch.length;

      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32
      /* SPACE */
      ) {
        // Ensure that it has trailing whitespace
        return foundIndex;
      }
    } // False positive, keep searching from where we left off.


    startingIndex = foundIndex + 1;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;
var NG_TEMPLATE_SELECTOR = 'ng-template';
/**
 * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
 *
 * @param attrs `TAttributes` to search through.
 * @param cssClassToMatch class to match (lowercase)
 * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
 *    addition to the `AttributeMarker.Classes`.
 */

function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
  // It is strange to me that sometimes the class information comes in form of `class` attribute
  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
  // if that is the right behavior.
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
  var i = 0;

  while (i < attrs.length) {
    var item = attrs[i++];

    if (isProjectionMode && item === 'class') {
      item = attrs[i];

      if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
        return true;
      }
    } else if (item === 1
    /* Classes */
    ) {
      // We found the classes section. Start searching for the class.
      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
        // while we have strings
        if (item.toLowerCase() === cssClassToMatch) return true;
      }

      return false;
    }
  }

  return false;
}
/**
 * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
 *
 * @param tNode current TNode
 */


function isInlineTemplate(tNode) {
  return tNode.type === 4
  /* Container */
  && tNode.value !== NG_TEMPLATE_SELECTOR;
}
/**
 * Function that checks whether a given tNode matches tag-based selector and has a valid type.
 *
 * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
 * directive matching mode:
 * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
 * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
 * tag name was extracted from * syntax so we would match the same directive twice);
 * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
 * (applicable to TNodeType.Container only).
 */


function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  var tagNameToCompare = tNode.type === 4
  /* Container */
  && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
/**
 * A utility function to match an Ivy node static data against a simple CSS selector
 *
 * @param node static data of the node to match
 * @param selector The selector to try matching against the node.
 * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
 * directive matching.
 * @returns true if node matches the selector.
 */


function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
  var mode = 4
  /* ELEMENT */
  ;
  var nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.

  var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing ":not" selectors, we skip to the next ":not" if the
  // current one doesn't match

  var skipToNextSelector = false;

  for (var i = 0; i < selector.length; i++) {
    var current = selector[i];

    if (typeof current === 'number') {
      // If we finish processing a :not selector and it hasn't failed, return false
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      } // If we are skipping to the next :not() and this mode flag is positive,
      // it's a part of the current :not() selector, and we should keep skipping


      if (skipToNextSelector && isPositive(current)) continue;
      skipToNextSelector = false;
      mode = current | mode & 1
      /* NOT */
      ;
      continue;
    }

    if (skipToNextSelector) continue;

    if (mode & 4
    /* ELEMENT */
    ) {
      mode = 2
      /* ATTRIBUTE */
      | mode & 1
      /* NOT */
      ;

      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else {
      var selectorAttrValue = mode & 8
      /* CLASS */
      ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with
      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])

      if (mode & 8
      /* CLASS */
      && tNode.attrs !== null) {
        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }

        continue;
      }

      var attrName = mode & 8
      /* CLASS */
      ? 'class' : current;
      var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);

      if (attrIndexInNode === -1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
        continue;
      }

      if (selectorAttrValue !== '') {
        var nodeAttrValue = void 0;

        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = '';
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0
          /* NamespaceURI */
          , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match
          // selectors without case-sensitivity
          // (selectors are already in lowercase when generated)

          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }

        var compareAgainstClassName = mode & 8
        /* CLASS */
        ? nodeAttrValue : null;

        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2
        /* ATTRIBUTE */
        && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }
      }
    }
  }

  return isPositive(mode) || skipToNextSelector;
}

function isPositive(mode) {
  return (mode & 1
  /* NOT */
  ) === 0;
}
/**
 * Examines the attribute's definition array for a node to find the index of the
 * attribute that matches the given `name`.
 *
 * NOTE: This will not match namespaced attributes.
 *
 * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
 * The following table summarizes which types of attributes we attempt to match:
 *
 * ===========================================================================================================
 * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
 * Attributes
 * ===========================================================================================================
 * Inline + Projection     | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Inline + Directive      | NO                | NO                  | YES                 | NO
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Projection | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Directive  | YES               | YES                 | NO                  | YES
 * ===========================================================================================================
 *
 * @param name the name of the attribute to find
 * @param attrs the attribute array to examine
 * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
 * rather than a manually expanded template node (e.g `<ng-template>`).
 * @param isProjectionMode true if we are matching against content projection otherwise we are
 * matching against directives.
 */


function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
  if (attrs === null) return -1;
  var i = 0;

  if (isProjectionMode || !isInlineTemplate) {
    var bindingsMode = false;

    while (i < attrs.length) {
      var maybeAttrName = attrs[i];

      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3
      /* Bindings */
      || maybeAttrName === 6
      /* I18n */
      ) {
        bindingsMode = true;
      } else if (maybeAttrName === 1
      /* Classes */
      || maybeAttrName === 2
      /* Styles */
      ) {
        var value = attrs[++i]; // We should skip classes here because we have a separate mechanism for
        // matching classes in projection mode.

        while (typeof value === 'string') {
          value = attrs[++i];
        }

        continue;
      } else if (maybeAttrName === 4
      /* Template */
      ) {
        // We do not care about Template attributes in this scenario.
        break;
      } else if (maybeAttrName === 0
      /* NamespaceURI */
      ) {
        // Skip the whole namespaced attribute and value. This is by design.
        i += 4;
        continue;
      } // In binding mode there are only names, rather than name-value pairs.


      i += bindingsMode ? 1 : 2;
    } // We did not match the attribute


    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}

function isNodeMatchingSelectorList(tNode, selector) {
  var isProjectionMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  for (var i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }

  return false;
}

function getProjectAsAttrValue(tNode) {
  var nodeAttrs = tNode.attrs;

  if (nodeAttrs != null) {
    var ngProjectAsAttrIdx = nodeAttrs.indexOf(5
    /* ProjectAs */
    ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
    // (attribute names are stored at even indexes)

    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }

  return null;
}

function getNameOnlyMarkerIndex(nodeAttrs) {
  for (var i = 0; i < nodeAttrs.length; i++) {
    var nodeAttr = nodeAttrs[i];

    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }

  return nodeAttrs.length;
}

function matchTemplateAttribute(attrs, name) {
  var i = attrs.indexOf(4
  /* Template */
  );

  if (i > -1) {
    i++;

    while (i < attrs.length) {
      var attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the
      // attrs array (that starts with a number that represents an attribute marker).

      if (typeof attr === 'number') return -1;
      if (attr === name) return i;
      i++;
    }
  }

  return -1;
}
/**
 * Checks whether a selector is inside a CssSelectorList
 * @param selector Selector to be checked.
 * @param list List in which to look for the selector.
 */


function isSelectorInSelectorList(selector, list) {
  selectorListLoop: for (var i = 0; i < list.length; i++) {
    var currentSelectorInList = list[i];

    if (selector.length !== currentSelectorInList.length) {
      continue;
    }

    for (var j = 0; j < selector.length; j++) {
      if (selector[j] !== currentSelectorInList[j]) {
        continue selectorListLoop;
      }
    }

    return true;
  }

  return false;
}

function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
}

function stringifyCSSSelector(selector) {
  var result = selector[0];
  var i = 1;
  var mode = 2
  /* ATTRIBUTE */
  ;
  var currentChunk = '';
  var isNegativeMode = false;

  while (i < selector.length) {
    var valueOrMarker = selector[i];

    if (typeof valueOrMarker === 'string') {
      if (mode & 2
      /* ATTRIBUTE */
      ) {
        var attrValue = selector[++i];
        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
      } else if (mode & 8
      /* CLASS */
      ) {
        currentChunk += '.' + valueOrMarker;
      } else if (mode & 4
      /* ELEMENT */
      ) {
        currentChunk += ' ' + valueOrMarker;
      }
    } else {
      //
      // Append current chunk to the final result in case we come across SelectorFlag, which
      // indicates that the previous section of a selector is over. We need to accumulate content
      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
      // ```
      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
      // ```
      // should be transformed to `.classA :not(.classB .classC)`.
      //
      // Note: for negative selector part, we accumulate content between flags until we find the
      // next negative flag. This is needed to support a case where `:not()` rule contains more than
      // one chunk, e.g. the following selector:
      // ```
      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
      // ```
      // should be stringified to `:not(p.foo) :not(.bar)`
      //
      if (currentChunk !== '' && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = '';
      }

      mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
      // mode is maintained for remaining chunks of a selector.

      isNegativeMode = isNegativeMode || !isPositive(mode);
    }

    i++;
  }

  if (currentChunk !== '') {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }

  return result;
}
/**
 * Generates string representation of CSS selector in parsed form.
 *
 * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
 * additional parsing at runtime (for example, for directive matching). However in some cases (for
 * example, while bootstrapping a component), a string version of the selector is required to query
 * for the host element on the page. This function takes the parsed form of a selector and returns
 * its string representation.
 *
 * @param selectorList selector in parsed form
 * @returns string representation of a given selector
 */


function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(',');
}
/**
 * Extracts attributes and classes information from a given CSS selector.
 *
 * This function is used while creating a component dynamically. In this case, the host element
 * (that is created dynamically) should contain attributes and classes specified in component's CSS
 * selector.
 *
 * @param selector CSS selector in parsed form (in a form of array)
 * @returns object with `attrs` and `classes` fields that contain extracted information
 */


function extractAttrsAndClassesFromSelector(selector) {
  var attrs = [];
  var classes = [];
  var i = 1;
  var mode = 2
  /* ATTRIBUTE */
  ;

  while (i < selector.length) {
    var valueOrMarker = selector[i];

    if (typeof valueOrMarker === 'string') {
      if (mode === 2
      /* ATTRIBUTE */
      ) {
        if (valueOrMarker !== '') {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8
      /* CLASS */
      ) {
        classes.push(valueOrMarker);
      }
    } else {
      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
      // mode is maintained for remaining chunks of a selector. Since attributes and classes are
      // extracted only for "positive" part of the selector, we can stop here.
      if (!isPositive(mode)) break;
      mode = valueOrMarker;
    }

    i++;
  }

  return {
    attrs: attrs,
    classes: classes
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** A special value which designates that a value has not changed. */


var NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {
  __brand__: 'NO_CHANGE'
} : {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Advances to an element for later binding instructions.
 *
 * Used in conjunction with instructions like {@link property} to act on elements with specified
 * indices, for example those created with {@link element} or {@link elementStart}.
 *
 * ```ts
 * (rf: RenderFlags, ctx: any) => {
 *   if (rf & 1) {
 *     text(0, 'Hello');
 *     text(1, 'Goodbye')
 *     element(2, 'div');
 *   }
 *   if (rf & 2) {
 *     advance(2); // Advance twice to the <div>.
 *     property('title', 'test');
 *   }
 *  }
 * ```
 * @param delta Number of elements to advance forwards by.
 *
 * @codeGenApi
 */

function ɵɵadvance(delta) {
  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());
}

function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView, index); // Flush the initial hooks for elements in the view that have been added up to this point.
  // PERF WARNING: do NOT extract this to a separate function without running benchmarks

  if (!checkNoChangesMode) {
    var hooksInitPhaseCompleted = (lView[FLAGS] & 3
    /* InitPhaseStateMask */
    ) === 3
    /* InitPhaseCompleted */
    ;

    if (hooksInitPhaseCompleted) {
      var preOrderCheckHooks = tView.preOrderCheckHooks;

      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      var preOrderHooks = tView.preOrderHooks;

      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0
        /* OnInitHooksToBeRun */
        , index);
      }
    }
  } // We must set the selected index *after* running the hooks, because hooks may have side-effects
  // that cause other template functions to run, thus updating the selected index, which is global
  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
  // will be altered by the time we leave the `ɵɵadvance` instruction.


  setSelectedIndex(index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(prev, 0, 32767
  /* UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(next, 0, 32767
  /* UNSIGNED_MASK */
  );
  return prev << 17
  /* PREV_SHIFT */
  | next << 2
  /* NEXT_SHIFT */
  ;
}

function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange >> 17
  /* PREV_SHIFT */
  & 32767
  /* UNSIGNED_MASK */
  ;
}

function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 2
  /* PREV_DUPLICATE */
  ) == 2
  /* PREV_DUPLICATE */
  ;
}

function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  ngDevMode && assertNumberInRange(previous, 0, 32767
  /* UNSIGNED_MASK */
  );
  return tStylingRange & ~4294836224
  /* PREV_MASK */
  | previous << 17
  /* PREV_SHIFT */
  ;
}

function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange | 2
  /* PREV_DUPLICATE */
  ;
}

function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 131068
  /* NEXT_MASK */
  ) >> 2
  /* NEXT_SHIFT */
  ;
}

function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  ngDevMode && assertNumberInRange(next, 0, 32767
  /* UNSIGNED_MASK */
  );
  return tStylingRange & ~131068
  /* NEXT_MASK */
  | //
  next << 2
  /* NEXT_SHIFT */
  ;
}

function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 1
  /* NEXT_DUPLICATE */
  ) === 1
  /* NEXT_DUPLICATE */
  ;
}

function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange | 1
  /* NEXT_DUPLICATE */
  ;
}

function getTStylingRangeTail(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  var next = getTStylingRangeNext(tStylingRange);
  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Patch a `debug` property on top of the existing object.
 *
 * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
 *
 * @param obj Object to patch
 * @param debug Value to patch
 */


function attachDebugObject(obj, debug) {
  if (ngDevMode) {
    Object.defineProperty(obj, 'debug', {
      value: debug,
      enumerable: false
    });
  } else {
    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
  }
}
/**
 * Patch a `debug` property getter on top of the existing object.
 *
 * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
 *
 * @param obj Object to patch
 * @param debugGetter Getter returning a value to patch
 */


function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, 'debug', {
      get: debugGetter,
      enumerable: false
    });
  } else {
    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NG_DEV_MODE = (typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode();
/*
 * This file contains conditionally attached classes which provide human readable (debug) level
 * information for `LView`, `LContainer` and other internal data structures. These data structures
 * are stored internally as array which makes it very difficult during debugging to reason about the
 * current state of the system.
 *
 * Patching the array with extra property does change the array's hidden class' but it does not
 * change the cost of access, therefore this patching should not have significant if any impact in
 * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
 *
 * So instead of seeing:
 * ```
 * Array(30) [Object, 659, null, …]
 * ```
 *
 * You get to see:
 * ```
 * LViewDebug {
 *   views: [...],
 *   flags: {attached: true, ...}
 *   nodes: [
 *     {html: '<div id="123">', ..., nodes: [
 *       {html: '<span>', ..., nodes: null}
 *     ]}
 *   ]
 * }
 * ```
 */

var LVIEW_COMPONENT_CACHE;
var LVIEW_EMBEDDED_CACHE;
var LVIEW_ROOT;
/**
 * This function clones a blueprint and creates LView.
 *
 * Simple slice will keep the same type, and we need it to be LView
 */

function cloneToLViewFromTViewBlueprint(tView) {
  var debugTView = tView;
  var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
  return lView.concat(tView.blueprint);
}

function getLViewToClone(type, name) {
  switch (type) {
    case 0
    /* Root */
    :
      if (LVIEW_ROOT === undefined) LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
      return LVIEW_ROOT;

    case 1
    /* Component */
    :
      if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();
      var componentArray = LVIEW_COMPONENT_CACHE.get(name);

      if (componentArray === undefined) {
        componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
        LVIEW_COMPONENT_CACHE.set(name, componentArray);
      }

      return componentArray;

    case 2
    /* Embedded */
    :
      if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();
      var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);

      if (embeddedArray === undefined) {
        embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
        LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
      }

      return embeddedArray;
  }
}

function nameSuffix(text) {
  if (text == null) return '';
  var index = text.lastIndexOf('_Template');
  return '_' + (index === -1 ? text : text.substr(0, index));
}
/**
 * This class is a debug version of Object literal so that we can have constructor name show up
 * in
 * debug tools in ngDevMode.
 */


var TViewConstructor = /*#__PURE__*/function () {
  function TView(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TView);

    this.type = type;
    this.blueprint = blueprint;
    this.template = template;
    this.queries = queries;
    this.viewQuery = viewQuery;
    this.declTNode = declTNode;
    this.data = data;
    this.bindingStartIndex = bindingStartIndex;
    this.expandoStartIndex = expandoStartIndex;
    this.hostBindingOpCodes = hostBindingOpCodes;
    this.firstCreatePass = firstCreatePass;
    this.firstUpdatePass = firstUpdatePass;
    this.staticViewQueries = staticViewQueries;
    this.staticContentQueries = staticContentQueries;
    this.preOrderHooks = preOrderHooks;
    this.preOrderCheckHooks = preOrderCheckHooks;
    this.contentHooks = contentHooks;
    this.contentCheckHooks = contentCheckHooks;
    this.viewHooks = viewHooks;
    this.viewCheckHooks = viewCheckHooks;
    this.destroyHooks = destroyHooks;
    this.cleanup = cleanup;
    this.contentQueries = contentQueries;
    this.components = components;
    this.directiveRegistry = directiveRegistry;
    this.pipeRegistry = pipeRegistry;
    this.firstChild = firstChild;
    this.schemas = schemas;
    this.consts = consts;
    this.incompleteFirstPass = incompleteFirstPass;
    this._decls = _decls;
    this._vars = _vars;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TView, [{
    key: "template_",
    get: function get() {
      var buf = [];
      processTNodeChildren(this.firstChild, buf);
      return buf.join('');
    }
  }, {
    key: "type_",
    get: function get() {
      return TViewTypeAsString[this.type] || "TViewType.?".concat(this.type, "?");
    }
  }]);

  return TView;
}();

var TNode = /*#__PURE__*/function () {
  function TNode(tView_, //
  type, //
  index, //
  insertBeforeIndex, //
  injectorIndex, //
  directiveStart, //
  directiveEnd, //
  directiveStylingLast, //
  propertyBindings, //
  flags, //
  providerIndexes, //
  value, //
  attrs, //
  mergedAttrs, //
  localNames, //
  initialInputs, //
  inputs, //
  outputs, //
  tViews, //
  next, //
  projectionNext, //
  child, //
  parent, //
  projection, //
  styles, //
  stylesWithoutHost, //
  residualStyles, //
  classes, //
  classesWithoutHost, //
  residualClasses, //
  classBindings, //
  styleBindings) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TNode);

    this.tView_ = tView_;
    this.type = type;
    this.index = index;
    this.insertBeforeIndex = insertBeforeIndex;
    this.injectorIndex = injectorIndex;
    this.directiveStart = directiveStart;
    this.directiveEnd = directiveEnd;
    this.directiveStylingLast = directiveStylingLast;
    this.propertyBindings = propertyBindings;
    this.flags = flags;
    this.providerIndexes = providerIndexes;
    this.value = value;
    this.attrs = attrs;
    this.mergedAttrs = mergedAttrs;
    this.localNames = localNames;
    this.initialInputs = initialInputs;
    this.inputs = inputs;
    this.outputs = outputs;
    this.tViews = tViews;
    this.next = next;
    this.projectionNext = projectionNext;
    this.child = child;
    this.parent = parent;
    this.projection = projection;
    this.styles = styles;
    this.stylesWithoutHost = stylesWithoutHost;
    this.residualStyles = residualStyles;
    this.classes = classes;
    this.classesWithoutHost = classesWithoutHost;
    this.residualClasses = residualClasses;
    this.classBindings = classBindings;
    this.styleBindings = styleBindings;
  }
  /**
   * Return a human debug version of the set of `NodeInjector`s which will be consulted when
   * resolving tokens from this `TNode`.
   *
   * When debugging applications, it is often difficult to determine which `NodeInjector`s will be
   * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be
   * consulted in order when resolving a token starting at this `TNode`.
   *
   * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is
   * difficult to reason about.
   *
   * @param lView The `LView` instance for this `TNode`.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TNode, [{
    key: "debugNodeInjectorPath",
    value: function debugNodeInjectorPath(lView) {
      var path = [];
      var injectorIndex = getInjectorIndex(this, lView);

      if (injectorIndex === -1) {
        // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for
        // parent NodeInjector.
        var parentLocation = getParentInjectorLocation(this, lView);

        if (parentLocation !== NO_PARENT_INJECTOR) {
          // We found a parent, so start searching from the parent location.
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        } else {// No parents have been found, so there are no `NodeInjector`s to consult.
        }
      }

      while (injectorIndex !== -1) {
        ngDevMode && assertNodeInjector(lView, injectorIndex);
        var tNode = lView[TVIEW].data[injectorIndex + 8
        /* TNODE */
        ];
        path.push(buildDebugNode(tNode, lView));
        var _parentLocation = lView[injectorIndex + 8
        /* PARENT */
        ];

        if (_parentLocation === NO_PARENT_INJECTOR) {
          injectorIndex = -1;
        } else {
          injectorIndex = getParentInjectorIndex(_parentLocation);
          lView = getParentInjectorView(_parentLocation, lView);
        }
      }

      return path;
    }
  }, {
    key: "type_",
    get: function get() {
      return toTNodeTypeAsString(this.type) || "TNodeType.?".concat(this.type, "?");
    }
  }, {
    key: "flags_",
    get: function get() {
      var flags = [];
      if (this.flags & 16
      /* hasClassInput */
      ) flags.push('TNodeFlags.hasClassInput');
      if (this.flags & 8
      /* hasContentQuery */
      ) flags.push('TNodeFlags.hasContentQuery');
      if (this.flags & 32
      /* hasStyleInput */
      ) flags.push('TNodeFlags.hasStyleInput');
      if (this.flags & 128
      /* hasHostBindings */
      ) flags.push('TNodeFlags.hasHostBindings');
      if (this.flags & 2
      /* isComponentHost */
      ) flags.push('TNodeFlags.isComponentHost');
      if (this.flags & 1
      /* isDirectiveHost */
      ) flags.push('TNodeFlags.isDirectiveHost');
      if (this.flags & 64
      /* isDetached */
      ) flags.push('TNodeFlags.isDetached');
      if (this.flags & 4
      /* isProjected */
      ) flags.push('TNodeFlags.isProjected');
      return flags.join('|');
    }
  }, {
    key: "template_",
    get: function get() {
      if (this.type & 1
      /* Text */
      ) return this.value;
      var buf = [];
      var tagName = typeof this.value === 'string' && this.value || this.type_;
      buf.push('<', tagName);

      if (this.flags) {
        buf.push(' ', this.flags_);
      }

      if (this.attrs) {
        for (var i = 0; i < this.attrs.length;) {
          var attrName = this.attrs[i++];

          if (typeof attrName == 'number') {
            break;
          }

          var attrValue = this.attrs[i++];
          buf.push(' ', attrName, '="', attrValue, '"');
        }
      }

      buf.push('>');
      processTNodeChildren(this.child, buf);
      buf.push('</', tagName, '>');
      return buf.join('');
    }
  }, {
    key: "styleBindings_",
    get: function get() {
      return toDebugStyleBinding(this, false);
    }
  }, {
    key: "classBindings_",
    get: function get() {
      return toDebugStyleBinding(this, true);
    }
  }, {
    key: "providerIndexStart_",
    get: function get() {
      return this.providerIndexes & 1048575
      /* ProvidersStartIndexMask */
      ;
    }
  }, {
    key: "providerIndexEnd_",
    get: function get() {
      return this.providerIndexStart_ + (this.providerIndexes >>> 20
      /* CptViewProvidersCountShift */
      );
    }
  }]);

  return TNode;
}();

var TNodeDebug = TNode;

function toDebugStyleBinding(tNode, isClassBased) {
  var tData = tNode.tView_.data;
  var bindings = [];
  var range = isClassBased ? tNode.classBindings : tNode.styleBindings;
  var prev = getTStylingRangePrev(range);
  var next = getTStylingRangeNext(range);
  var isTemplate = next !== 0;
  var cursor = isTemplate ? next : prev;

  while (cursor !== 0) {
    var itemKey = tData[cursor];
    var itemRange = tData[cursor + 1];
    bindings.unshift({
      key: itemKey,
      index: cursor,
      isTemplate: isTemplate,
      prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
      nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
      nextIndex: getTStylingRangeNext(itemRange),
      prevIndex: getTStylingRangePrev(itemRange)
    });
    if (cursor === prev) isTemplate = false;
    cursor = getTStylingRangePrev(itemRange);
  }

  bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
  return bindings;
}

function processTNodeChildren(tNode, buf) {
  while (tNode) {
    buf.push(tNode.template_);
    tNode = tNode.next;
  }
}

var TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || null;
var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
// `LView` constructor could have side-effects.

/**
 * This function clones a blueprint and creates TData.
 *
 * Simple slice will keep the same type, and we need it to be TData
 */

function cloneToTViewData(list) {
  if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();
  return TVIEWDATA_EMPTY.concat(list);
}

var LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || null;
var MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || null;
var TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || null;
var TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || null;
var TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || null;
var TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || null;
var LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || null;
var TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || null;

function attachLViewDebug(lView) {
  attachDebugObject(lView, new LViewDebug(lView));
}

function attachLContainerDebug(lContainer) {
  attachDebugObject(lContainer, new LContainerDebug(lContainer));
}

function toDebug(obj) {
  if (obj) {
    var debug = obj.debug;
    assertDefined(debug, 'Object does not have a debug representation.');
    return debug;
  } else {
    return obj;
  }
}
/**
 * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
 * reading.
 *
 * @param value possibly wrapped native DOM node.
 * @param includeChildren If `true` then the serialized HTML form will include child elements
 * (same
 * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
 * itself
 * (will not serialize child elements).
 */


function toHtml(value) {
  var includeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var node = unwrapRNode(value);

  if (node) {
    switch (node.nodeType) {
      case Node.TEXT_NODE:
        return node.textContent;

      case Node.COMMENT_NODE:
        return "<!--".concat(node.textContent, "-->");

      case Node.ELEMENT_NODE:
        var outerHTML = node.outerHTML;

        if (includeChildren) {
          return outerHTML;
        } else {
          var innerHTML = '>' + node.innerHTML + '<';
          return outerHTML.split(innerHTML)[0] + '>';
        }

    }
  }

  return null;
}

var LViewDebug = /*#__PURE__*/function () {
  function LViewDebug(_raw_lView) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, LViewDebug);

    this._raw_lView = _raw_lView;
  }
  /**
   * Flags associated with the `LView` unpacked into a more readable state.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(LViewDebug, [{
    key: "flags",
    get: function get() {
      var flags = this._raw_lView[FLAGS];
      return {
        __raw__flags__: flags,
        initPhaseState: flags & 3
        /* InitPhaseStateMask */
        ,
        creationMode: !!(flags & 4
        /* CreationMode */
        ),
        firstViewPass: !!(flags & 8
        /* FirstLViewPass */
        ),
        checkAlways: !!(flags & 16
        /* CheckAlways */
        ),
        dirty: !!(flags & 64
        /* Dirty */
        ),
        attached: !!(flags & 128
        /* Attached */
        ),
        destroyed: !!(flags & 256
        /* Destroyed */
        ),
        isRoot: !!(flags & 512
        /* IsRoot */
        ),
        indexWithinInitPhase: flags >> 11
        /* IndexWithinInitPhaseShift */

      };
    }
  }, {
    key: "parent",
    get: function get() {
      return toDebug(this._raw_lView[PARENT]);
    }
  }, {
    key: "hostHTML",
    get: function get() {
      return toHtml(this._raw_lView[HOST], true);
    }
  }, {
    key: "html",
    get: function get() {
      return (this.nodes || []).map(mapToHTML).join('');
    }
  }, {
    key: "context",
    get: function get() {
      return this._raw_lView[CONTEXT];
    }
    /**
     * The tree of nodes associated with the current `LView`. The nodes have been normalized into
     * a tree structure with relevant details pulled out for readability.
     */

  }, {
    key: "nodes",
    get: function get() {
      var lView = this._raw_lView;
      var tNode = lView[TVIEW].firstChild;
      return toDebugNodes(tNode, lView);
    }
  }, {
    key: "template",
    get: function get() {
      return this.tView.template_;
    }
  }, {
    key: "tView",
    get: function get() {
      return this._raw_lView[TVIEW];
    }
  }, {
    key: "cleanup",
    get: function get() {
      return this._raw_lView[CLEANUP];
    }
  }, {
    key: "injector",
    get: function get() {
      return this._raw_lView[INJECTOR];
    }
  }, {
    key: "rendererFactory",
    get: function get() {
      return this._raw_lView[RENDERER_FACTORY];
    }
  }, {
    key: "renderer",
    get: function get() {
      return this._raw_lView[RENDERER];
    }
  }, {
    key: "sanitizer",
    get: function get() {
      return this._raw_lView[SANITIZER];
    }
  }, {
    key: "childHead",
    get: function get() {
      return toDebug(this._raw_lView[CHILD_HEAD]);
    }
  }, {
    key: "next",
    get: function get() {
      return toDebug(this._raw_lView[NEXT]);
    }
  }, {
    key: "childTail",
    get: function get() {
      return toDebug(this._raw_lView[CHILD_TAIL]);
    }
  }, {
    key: "declarationView",
    get: function get() {
      return toDebug(this._raw_lView[DECLARATION_VIEW]);
    }
  }, {
    key: "queries",
    get: function get() {
      return this._raw_lView[QUERIES];
    }
  }, {
    key: "tHost",
    get: function get() {
      return this._raw_lView[T_HOST];
    }
  }, {
    key: "decls",
    get: function get() {
      return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);
    }
  }, {
    key: "vars",
    get: function get() {
      return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);
    }
  }, {
    key: "expando",
    get: function get() {
      return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
    }
    /**
     * Normalized view of child views (and containers) attached at this location.
     */

  }, {
    key: "childViews",
    get: function get() {
      var childViews = [];
      var child = this.childHead;

      while (child) {
        childViews.push(child);
        child = child.next;
      }

      return childViews;
    }
  }]);

  return LViewDebug;
}();

function mapToHTML(node) {
  if (node.type === 'ElementContainer') {
    return (node.children || []).map(mapToHTML).join('');
  } else if (node.type === 'IcuContainer') {
    throw new Error('Not implemented');
  } else {
    return toHtml(node.native, true) || '';
  }
}

function toLViewRange(tView, lView, start, end) {
  var content = [];

  for (var index = start; index < end; index++) {
    content.push({
      index: index,
      t: tView.data[index],
      l: lView[index]
    });
  }

  return {
    start: start,
    end: end,
    length: end - start,
    content: content
  };
}
/**
 * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
 *
 * @param tNode
 * @param lView
 */


function toDebugNodes(tNode, lView) {
  if (tNode) {
    var debugNodes = [];
    var tNodeCursor = tNode;

    while (tNodeCursor) {
      debugNodes.push(buildDebugNode(tNodeCursor, lView));
      tNodeCursor = tNodeCursor.next;
    }

    return debugNodes;
  } else {
    return [];
  }
}

function buildDebugNode(tNode, lView) {
  var rawValue = lView[tNode.index];
  var native = unwrapRNode(rawValue);
  var factories = [];
  var instances = [];
  var tView = lView[TVIEW];

  for (var i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    var def = tView.data[i];
    factories.push(def.type);
    instances.push(lView[i]);
  }

  return {
    html: toHtml(native),
    type: toTNodeTypeAsString(tNode.type),
    tNode: tNode,
    native: native,
    children: toDebugNodes(tNode.child, lView),
    factories: factories,
    instances: instances,
    injector: buildNodeInjectorDebug(tNode, tView, lView),

    get injectorResolutionPath() {
      return tNode.debugNodeInjectorPath(lView);
    }

  };
}

function buildNodeInjectorDebug(tNode, tView, lView) {
  var viewProviders = [];

  for (var i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {
    viewProviders.push(tView.data[i]);
  }

  var providers = [];

  for (var _i3 = tNode.providerIndexEnd_; _i3 < tNode.directiveEnd; _i3++) {
    providers.push(tView.data[_i3]);
  }

  var nodeInjectorDebug = {
    bloom: toBloom(lView, tNode.injectorIndex),
    cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),
    providers: providers,
    viewProviders: viewProviders,
    parentInjectorIndex: lView[tNode.providerIndexStart_ - 1]
  };
  return nodeInjectorDebug;
}
/**
 * Convert a number at `idx` location in `array` into binary representation.
 *
 * @param array
 * @param idx
 */


function binary(array, idx) {
  var value = array[idx]; // If not a number we print 8 `?` to retain alignment but let user know that it was called on
  // wrong type.

  if (typeof value !== 'number') return '????????'; // We prefix 0s so that we have constant length number

  var text = '00000000' + value.toString(2);
  return text.substring(text.length - 8);
}
/**
 * Convert a bloom filter at location `idx` in `array` into binary representation.
 *
 * @param array
 * @param idx
 */


function toBloom(array, idx) {
  if (idx < 0) {
    return 'NO_NODE_INJECTOR';
  }

  return "".concat(binary(array, idx + 7), "_").concat(binary(array, idx + 6), "_").concat(binary(array, idx + 5), "_").concat(binary(array, idx + 4), "_").concat(binary(array, idx + 3), "_").concat(binary(array, idx + 2), "_").concat(binary(array, idx + 1), "_").concat(binary(array, idx + 0));
}

var LContainerDebug = /*#__PURE__*/function () {
  function LContainerDebug(_raw_lContainer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, LContainerDebug);

    this._raw_lContainer = _raw_lContainer;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(LContainerDebug, [{
    key: "hasTransplantedViews",
    get: function get() {
      return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
    }
  }, {
    key: "views",
    get: function get() {
      return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);
    }
  }, {
    key: "parent",
    get: function get() {
      return toDebug(this._raw_lContainer[PARENT]);
    }
  }, {
    key: "movedViews",
    get: function get() {
      return this._raw_lContainer[MOVED_VIEWS];
    }
  }, {
    key: "host",
    get: function get() {
      return this._raw_lContainer[HOST];
    }
  }, {
    key: "native",
    get: function get() {
      return this._raw_lContainer[NATIVE];
    }
  }, {
    key: "next",
    get: function get() {
      return toDebug(this._raw_lContainer[NEXT]);
    }
  }]);

  return LContainerDebug;
}();

var ɵ0$5 = function ɵ0$5() {
  return Promise.resolve(null);
};
/**
 * A permanent marker promise which signifies that the current CD tree is
 * clean.
 */


var _CLEAN_PROMISE = ɵ0$5();
/**
 * Invoke `HostBindingsFunction`s for view.
 *
 * This methods executes `TView.hostBindingOpCodes`. It is used to execute the
 * `HostBindingsFunction`s associated with the current `LView`.
 *
 * @param tView Current `TView`.
 * @param lView Current `LView`.
 */


function processHostBindingOpCodes(tView, lView) {
  var hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null) return;

  try {
    for (var i = 0; i < hostBindingOpCodes.length; i++) {
      var opCode = hostBindingOpCodes[i];

      if (opCode < 0) {
        // Negative numbers are element indexes.
        setSelectedIndex(~opCode);
      } else {
        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
        var directiveIdx = opCode;
        var bindingRootIndx = hostBindingOpCodes[++i];
        var hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        var context = lView[directiveIdx];
        hostBindingFn(2
        /* Update */
        , context);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
/** Refreshes all content queries declared by directives in a given view */


function refreshContentQueries(tView, lView) {
  var contentQueries = tView.contentQueries;

  if (contentQueries !== null) {
    for (var i = 0; i < contentQueries.length; i += 2) {
      var queryStartIdx = contentQueries[i];
      var directiveDefIdx = contentQueries[i + 1];

      if (directiveDefIdx !== -1) {
        var _directiveDef2 = tView.data[directiveDefIdx];
        ngDevMode && assertDefined(_directiveDef2, 'DirectiveDef not found.');
        ngDevMode && assertDefined(_directiveDef2.contentQueries, 'contentQueries function should be defined');
        setCurrentQueryIndex(queryStartIdx);

        _directiveDef2.contentQueries(2
        /* Update */
        , lView[directiveDefIdx], directiveDefIdx);
      }
    }
  }
}
/** Refreshes child components in the current view (update mode). */


function refreshChildComponents(hostLView, components) {
  for (var i = 0; i < components.length; i++) {
    refreshComponent(hostLView, components[i]);
  }
}
/** Renders child components in the current view (creation mode). */


function renderChildComponents(hostLView, components) {
  for (var i = 0; i < components.length; i++) {
    renderComponent(hostLView, components[i]);
  }
}

function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
  var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4
  /* CreationMode */
  | 128
  /* Attached */
  | 8
  /* FirstLViewPass */
  ;
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context;
  lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];
  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
  lView[T_HOST] = tHostNode;
  ngDevMode && assertEqual(tView.type == 2
  /* Embedded */
  ? parentLView !== null : true, true, 'Embedded views must have parentLView');
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2
  /* Embedded */
  ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  ngDevMode && attachLViewDebug(lView);
  return lView;
}

function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.'); // Keep this function short, so that the VM will inline it.

  ngDevMode && assertPureTNodeType(type);
  var tNode = tView.data[index];

  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);

    if (isInI18nBlock()) {
      // If we are in i18n block then all elements should be pre declared through `Placeholder`
      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was
      // removed, so we mark it as detached.
      tNode.flags |= 64
      /* isDetached */
      ;
    }
  } else if (tNode.type & 64
  /* Placeholder */
  ) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    var parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');
  }

  setCurrentTNode(tNode, true);
  return tNode;
}

function createTNodeAtIndex(tView, index, type, name, attrs) {
  var currentTNode = getCurrentTNodePlaceholderOk();
  var isParent = isCurrentTNodeParent();
  var parent = isParent ? currentTNode : currentTNode && currentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places.

  var tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one
  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
  // the index 1 or more, so we can't just check node index.

  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }

  if (currentTNode !== null) {
    if (isParent) {
      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?
      if (currentTNode.child == null && tNode.parent !== null) {
        // We are in the same view, which means we are adding content node to the parent view.
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want
        // to break the links which i18n created.
        currentTNode.next = tNode;
      }
    }
  }

  return tNode;
}
/**
 * When elements are created dynamically after a view blueprint is created (e.g. through
 * i18nApply()), we need to adjust the blueprint for future
 * template passes.
 *
 * @param tView `TView` associated with `LView`
 * @param lView The `LView` containing the blueprint to adjust
 * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
 * @param initialValue Initial value to store in blueprint
 */


function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0) return -1;

  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');
    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');
    assertFirstUpdatePass(tView);
  }

  var allocIdx = lView.length;

  for (var i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }

  return allocIdx;
} //////////////////////////
//// Render
//////////////////////////

/**
 * Processes a view in the creation mode. This includes a number of steps in a specific order:
 * - creating view query functions (if any);
 * - executing a template function in the creation mode;
 * - updating static queries (if any);
 * - creating child components defined in a given view.
 */


function renderView(tView, lView, context) {
  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
  enterView(lView);

  try {
    var viewQuery = tView.viewQuery;

    if (viewQuery !== null) {
      executeViewQueryFn(1
      /* Create */
      , viewQuery, context);
    } // Execute a template associated with this view, if it exists. A template function might not be
    // defined for the root component views.


    var templateFn = tView.template;

    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1
      /* Create */
      , context);
    } // This needs to be set before children are processed to support recursive components.
    // This must be set to false immediately after the first creation run because in an
    // ngFor loop, all the views will be created together before update mode runs and turns
    // off firstCreatePass. If we don't set it here, instances will perform directive
    // matching, etc again and again.


    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    } // We resolve content queries specifically marked as `static` in creation mode. Dynamic
    // content queries are resolved during change detection (i.e. update mode), after embedded
    // views are refreshed (see block above).


    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    } // We must materialize query results before child components are processed
    // in case a child component has projected a container. The LContainer needs
    // to exist so the embedded views are properly attached by the container.


    if (tView.staticViewQueries) {
      executeViewQueryFn(2
      /* Update */
      , tView.viewQuery, context);
    } // Render child component views.


    var components = tView.components;

    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    // If we didn't manage to get past the first template pass due to
    // an error, mark the view as corrupted so we can try to recover.
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }

    throw error;
  } finally {
    lView[FLAGS] &= ~4
    /* CreationMode */
    ;
    leaveView();
  }
}
/**
 * Processes a view in update mode. This includes a number of steps in a specific order:
 * - executing a template function in update mode;
 * - executing hooks;
 * - refreshing queries;
 * - setting host bindings;
 * - refreshing child (embedded and component) views.
 */


function refreshView(tView, lView, templateFn, context) {
  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
  var flags = lView[FLAGS];
  if ((flags & 256
  /* Destroyed */
  ) === 256
  /* Destroyed */
  ) return;
  enterView(lView); // Check no changes mode is a dev only mode used to verify that bindings have not changed
  // since they were assigned. We do not want to execute lifecycle hooks in that mode.

  var isInCheckNoChangesPass = isInCheckNoChangesMode();

  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);

    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2
      /* Update */
      , context);
    }

    var hooksInitPhaseCompleted = (flags & 3
    /* InitPhaseStateMask */
    ) === 3
    /* InitPhaseCompleted */
    ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks

    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        var preOrderCheckHooks = tView.preOrderCheckHooks;

        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        var preOrderHooks = tView.preOrderHooks;

        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0
          /* OnInitHooksToBeRun */
          , null);
        }

        incrementInitPhaseFlags(lView, 0
        /* OnInitHooksToBeRun */
        );
      }
    } // First mark transplanted views that are declared in this lView as needing a refresh at their
    // insertion points. This is needed to avoid the situation where the template is defined in this
    // `LView` but its declaration appears after the insertion component.


    markTransplantedViewsForRefresh(lView);
    refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.

    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    } // execute content hooks (AfterContentInit, AfterContentChecked)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks


    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        var contentCheckHooks = tView.contentCheckHooks;

        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        var contentHooks = tView.contentHooks;

        if (contentHooks !== null) {
          executeInitAndCheckHooks(lView, contentHooks, 1
          /* AfterContentInitHooksToBeRun */
          );
        }

        incrementInitPhaseFlags(lView, 1
        /* AfterContentInitHooksToBeRun */
        );
      }
    }

    processHostBindingOpCodes(tView, lView); // Refresh child component views.

    var components = tView.components;

    if (components !== null) {
      refreshChildComponents(lView, components);
    } // View queries must execute after refreshing child components because a template in this view
    // could be inserted in a child component. If the view query executes before child component
    // refresh, the template might not yet be inserted.


    var viewQuery = tView.viewQuery;

    if (viewQuery !== null) {
      executeViewQueryFn(2
      /* Update */
      , viewQuery, context);
    } // execute view hooks (AfterViewInit, AfterViewChecked)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks


    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        var viewCheckHooks = tView.viewCheckHooks;

        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        var viewHooks = tView.viewHooks;

        if (viewHooks !== null) {
          executeInitAndCheckHooks(lView, viewHooks, 2
          /* AfterViewInitHooksToBeRun */
          );
        }

        incrementInitPhaseFlags(lView, 2
        /* AfterViewInitHooksToBeRun */
        );
      }
    }

    if (tView.firstUpdatePass === true) {
      // We need to make sure that we only flip the flag on successful `refreshView` only
      // Don't do this in `finally` block.
      // If we did this in `finally` block then an exception could block the execution of styling
      // instructions which in turn would be unable to insert themselves into the styling linked
      // list. The result of this would be that if the exception would not be throw on subsequent CD
      // the styling would be unable to process it data and reflect to the DOM.
      tView.firstUpdatePass = false;
    } // Do not reset the dirty state when running in check no changes mode. We don't want components
    // to behave differently depending on whether check no changes is enabled or not. For example:
    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
    // no changes cycle, the component would be not be dirty for the next update pass. This would
    // be different in production mode where the component dirty state is not reset.


    if (!isInCheckNoChangesPass) {
      lView[FLAGS] &= ~(64
      /* Dirty */
      | 8
      /* FirstLViewPass */
      );
    }

    if (lView[FLAGS] & 1024
    /* RefreshTransplantedView */
    ) {
      lView[FLAGS] &= ~1024
      /* RefreshTransplantedView */
      ;
      updateTransplantedViewCount(lView[PARENT], -1);
    }
  } finally {
    leaveView();
  }
}

function renderComponentOrTemplate(tView, lView, templateFn, context) {
  var rendererFactory = lView[RENDERER_FACTORY];
  var normalExecutionPath = !isInCheckNoChangesMode();
  var creationModeIsActive = isCreationMode(lView);

  try {
    if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
      rendererFactory.begin();
    }

    if (creationModeIsActive) {
      renderView(tView, lView, context);
    }

    refreshView(tView, lView, templateFn, context);
  } finally {
    if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
      rendererFactory.end();
    }
  }
}

function executeTemplate(tView, lView, templateFn, rf, context) {
  var prevSelectedIndex = getSelectedIndex();
  var isUpdatePhase = rf & 2
  /* Update */
  ;

  try {
    setSelectedIndex(-1);

    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      // When we're updating, inherently select 0 so we don't
      // have to generate that instruction for most update blocks.
      selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());
    }

    var preHookType = isUpdatePhase ? 2
    /* TemplateUpdateStart */
    : 0
    /* TemplateCreateStart */
    ;
    profiler(preHookType, context);
    templateFn(rf, context);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    var postHookType = isUpdatePhase ? 3
    /* TemplateUpdateEnd */
    : 1
    /* TemplateCreateEnd */
    ;
    profiler(postHookType, context);
  }
} //////////////////////////
//// Element
//////////////////////////


function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    var start = tNode.directiveStart;
    var end = tNode.directiveEnd;

    for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {
      var def = tView.data[directiveIndex];

      if (def.contentQueries) {
        def.contentQueries(1
        /* Create */
        , lView[directiveIndex], directiveIndex);
      }
    }
  }
}
/**
 * Creates directive instances.
 */


function createDirectivesInstances(tView, lView, tNode) {
  if (!getBindingsEnabled()) return;
  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));

  if ((tNode.flags & 128
  /* hasHostBindings */
  ) === 128
  /* hasHostBindings */
  ) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
/**
 * Takes a list of local names and indices and pushes the resolved local variable values
 * to LView in the same order as they are loaded in the template with load().
 */


function saveResolvedLocalsInData(viewData, tNode) {
  var localRefExtractor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getNativeByTNode;
  var localNames = tNode.localNames;

  if (localNames !== null) {
    var localIndex = tNode.index + 1;

    for (var i = 0; i < localNames.length; i += 2) {
      var index = localNames[i + 1];
      var value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
/**
 * Gets TView from a template function or creates a new TView
 * if it doesn't already exist.
 *
 * @param def ComponentDef
 * @returns TView
 */


function getOrCreateTComponentView(def) {
  var tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't
  // complete successfully since we can't know for sure whether it's in a usable shape.

  if (tView === null || tView.incompleteFirstPass) {
    // Declaration node here is null since this function is called when we dynamically create a
    // component and hence there is no declaration.
    var declTNode = null;
    return def.tView = createTView(1
    /* Component */
    , declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
  }

  return tView;
}
/**
 * Creates a TView instance
 *
 * @param type Type of `TView`.
 * @param declTNode Declaration location of this `TView`.
 * @param templateFn Template function
 * @param decls The number of nodes, local refs, and pipes in this template
 * @param directives Registry of directives for this view
 * @param pipes Registry of pipes for this view
 * @param viewQuery View queries for this view
 * @param schemas Schemas for this view
 * @param consts Constants for this view
 */


function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {
  ngDevMode && ngDevMode.tView++;
  var bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,
  // we don't know which directives are active on this template. As soon as a directive is matched
  // that has a host binding, we will update the blueprint with that def's hostVars count.

  var initialViewLength = bindingStartIndex + vars;
  var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  var consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;
  var tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, // type: TViewType,
  blueprint, // blueprint: LView,
  templateFn, // template: ComponentTemplate<{}>|null,
  null, // queries: TQueries|null
  viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
  declTNode, // declTNode: TNode|null,
  cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
  bindingStartIndex, // bindingStartIndex: number,
  initialViewLength, // expandoStartIndex: number,
  null, // hostBindingOpCodes: HostBindingOpCodes,
  true, // firstCreatePass: boolean,
  true, // firstUpdatePass: boolean,
  false, // staticViewQueries: boolean,
  false, // staticContentQueries: boolean,
  null, // preOrderHooks: HookData|null,
  null, // preOrderCheckHooks: HookData|null,
  null, // contentHooks: HookData|null,
  null, // contentCheckHooks: HookData|null,
  null, // viewHooks: HookData|null,
  null, // viewCheckHooks: HookData|null,
  null, // destroyHooks: DestroyHookData|null,
  null, // cleanup: any[]|null,
  null, // contentQueries: number[]|null,
  null, // components: number[]|null,
  typeof directives === 'function' ? //
  directives() : //
  directives, // directiveRegistry: DirectiveDefList|null,
  typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
  null, // firstChild: TNode|null,
  schemas, // schemas: SchemaMetadata[]|null,
  consts, // consts: TConstants|null
  false, // incompleteFirstPass: boolean
  decls, // ngDevMode only: decls
  vars) : {
    type: type,
    blueprint: blueprint,
    template: templateFn,
    queries: null,
    viewQuery: viewQuery,
    declTNode: declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex: bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === 'function' ? directives() : directives,
    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
    firstChild: null,
    schemas: schemas,
    consts: consts,
    incompleteFirstPass: false
  };

  if (ngDevMode) {
    // For performance reasons it is important that the tView retains the same shape during runtime.
    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
    // prevent class transitions.
    Object.seal(tView);
  }

  return tView;
}

function createViewBlueprint(bindingStartIndex, initialViewLength) {
  var blueprint = ngDevMode ? new LViewBlueprint() : [];

  for (var i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }

  return blueprint;
}

function createError(text, token) {
  return new Error("Renderer: ".concat(text, " [").concat(stringifyForError(token), "]"));
}

function assertHostNodeExists(rElement, elementOrSelector) {
  if (!rElement) {
    if (typeof elementOrSelector === 'string') {
      throw createError('Host node with selector not found:', elementOrSelector);
    } else {
      throw createError('Host node is required:', elementOrSelector);
    }
  }
}
/**
 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
 *
 * @param rendererFactory Factory function to create renderer instance.
 * @param elementOrSelector Render element or CSS selector to locate the element.
 * @param encapsulation View Encapsulation defined for component that requests host element.
 */


function locateHostElement(renderer, elementOrSelector, encapsulation) {
  if (isProceduralRenderer(renderer)) {
    // When using native Shadow DOM, do not clear host element to allow native slot projection
    var preserveContent = encapsulation === ViewEncapsulation.ShadowDom;
    return renderer.selectRootElement(elementOrSelector, preserveContent);
  }

  var rElement = typeof elementOrSelector === 'string' ? renderer.querySelector(elementOrSelector) : elementOrSelector;
  ngDevMode && assertHostNodeExists(rElement, elementOrSelector); // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
  // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
  // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
  // renderer, and procedural renderer case is handled above.

  rElement.textContent = '';
  return rElement;
}
/**
 * Saves context for this cleanup function in LView.cleanupInstances.
 *
 * On the first template pass, saves in TView:
 * - Cleanup function
 * - Index of context we just saved in LView.cleanupInstances
 *
 * This function can also be used to store instance specific cleanup fns. In that case the `context`
 * is `null` and the function is store in `LView` (rather than it `TView`).
 */


function storeCleanupWithContext(tView, lView, context, cleanupFn) {
  var lCleanup = getOrCreateLViewCleanup(lView);

  if (context === null) {
    // If context is null that this is instance specific callback. These callbacks can only be
    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }

    lCleanup.push(cleanupFn);
  } else {
    lCleanup.push(context);

    if (tView.firstCreatePass) {
      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
    }
  }
}

function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
  ngDevMode && assertNotSame(attrs, undefined, '\'undefined\' is not valid value for \'attrs\'');
  ngDevMode && ngDevMode.tNode++;
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  var injectorIndex = tParent ? tParent.injectorIndex : -1;
  var tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView
  type, // type: TNodeType
  index, // index: number
  null, // insertBeforeIndex: null|-1|number|number[]
  injectorIndex, // injectorIndex: number
  -1, // directiveStart: number
  -1, // directiveEnd: number
  -1, // directiveStylingLast: number
  null, // propertyBindings: number[]|null
  0, // flags: TNodeFlags
  0, // providerIndexes: TNodeProviderIndexes
  value, // value: string|null
  attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
  null, // mergedAttrs
  null, // localNames: (string|number)[]|null
  undefined, // initialInputs: (string[]|null)[]|null|undefined
  null, // inputs: PropertyAliases|null
  null, // outputs: PropertyAliases|null
  null, // tViews: ITView|ITView[]|null
  null, // next: ITNode|null
  null, // projectionNext: ITNode|null
  null, // child: ITNode|null
  tParent, // parent: TElementNode|TContainerNode|null
  null, // projection: number|(ITNode|RNode[])[]|null
  null, // styles: string|null
  null, // stylesWithoutHost: string|null
  undefined, // residualStyles: string|null
  null, // classes: string|null
  null, // classesWithoutHost: string|null
  undefined, // residualClasses: string|null
  0, // classBindings: TStylingRange;
  0) : {
    type: type,
    index: index,
    insertBeforeIndex: null,
    injectorIndex: injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    propertyBindings: null,
    flags: 0,
    providerIndexes: 0,
    value: value,
    attrs: attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: undefined,
    inputs: null,
    outputs: null,
    tViews: null,
    next: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: undefined,
    classes: null,
    classesWithoutHost: null,
    residualClasses: undefined,
    classBindings: 0,
    styleBindings: 0
  };

  if (ngDevMode) {
    // For performance reasons it is important that the tNode retains the same shape during runtime.
    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
    // prevent class transitions.
    Object.seal(tNode);
  }

  return tNode;
}

function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
  for (var publicName in inputAliasMap) {
    if (inputAliasMap.hasOwnProperty(publicName)) {
      propStore = propStore === null ? {} : propStore;
      var internalName = inputAliasMap[publicName];

      if (propStore.hasOwnProperty(publicName)) {
        propStore[publicName].push(directiveDefIdx, internalName);
      } else {
        propStore[publicName] = [directiveDefIdx, internalName];
      }
    }
  }

  return propStore;
}
/**
 * Initializes data structures required to work with directive inputs and outputs.
 * Initialization is done for all directives matched on a given TNode.
 */


function initializeInputAndOutputAliases(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  var start = tNode.directiveStart;
  var end = tNode.directiveEnd;
  var tViewData = tView.data;
  var tNodeAttrs = tNode.attrs;
  var inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
  var inputsStore = null;
  var outputsStore = null;

  for (var i = start; i < end; i++) {
    var _directiveDef3 = tViewData[i];
    var directiveInputs = _directiveDef3.inputs; // Do not use unbound attributes as inputs to structural directives, since structural
    // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
    // should be set for inline templates.

    var initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;
    inputsFromAttrs.push(initialInputs);
    inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
    outputsStore = generatePropertyAliases(_directiveDef3.outputs, i, outputsStore);
  }

  if (inputsStore !== null) {
    if (inputsStore.hasOwnProperty('class')) {
      tNode.flags |= 16
      /* hasClassInput */
      ;
    }

    if (inputsStore.hasOwnProperty('style')) {
      tNode.flags |= 32
      /* hasStyleInput */
      ;
    }
  }

  tNode.initialInputs = inputsFromAttrs;
  tNode.inputs = inputsStore;
  tNode.outputs = outputsStore;
}
/**
 * Mapping between attributes names that don't correspond to their element property names.
 *
 * Performance note: this function is written as a series of if checks (instead of, say, a property
 * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
 * mapping property names. Do NOT change without benchmarking.
 *
 * Note: this mapping has to be kept in sync with the equally named mapping in the template
 * type-checking machinery of ngtsc.
 */


function mapPropName(name) {
  if (name === 'class') return 'className';
  if (name === 'for') return 'htmlFor';
  if (name === 'formaction') return 'formAction';
  if (name === 'innerHtml') return 'innerHTML';
  if (name === 'readonly') return 'readOnly';
  if (name === 'tabindex') return 'tabIndex';
  return name;
}

function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
  var element = getNativeByTNode(tNode, lView);
  var inputData = tNode.inputs;
  var dataValue;

  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
    setInputsForProperty(tView, lView, dataValue, propName, value);
    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);

    if (ngDevMode) {
      setNgReflectProperties(lView, element, tNode.type, dataValue, value);
    }
  } else if (tNode.type & 3
  /* AnyRNode */
  ) {
    propName = mapPropName(propName);

    if (ngDevMode) {
      validateAgainstEventProperties(propName);

      if (!validateProperty(tView, element, propName, tNode)) {
        // Return here since we only log warnings for unknown properties.
        logUnknownPropertyError(propName, tNode);
        return;
      }

      ngDevMode.rendererSetProperty++;
    } // It is assumed that the sanitizer is only added when the compiler determines that the
    // property is risky, so sanitization can be done without further checks.


    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;

    if (isProceduralRenderer(renderer)) {
      renderer.setProperty(element, propName, value);
    } else if (!isAnimationProp(propName)) {
      element.setProperty ? element.setProperty(propName, value) : element[propName] = value;
    }
  } else if (tNode.type & 12
  /* AnyContainer */
  ) {
    // If the node is a container and the property didn't
    // match any of the inputs or schemas we should throw.
    if (ngDevMode && !matchingSchemas(tView, tNode.value)) {
      logUnknownPropertyError(propName, tNode);
    }
  }
}
/** If node is an OnPush component, marks its LView dirty. */


function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  var childComponentLView = getComponentLViewByIndex(viewIndex, lView);

  if (!(childComponentLView[FLAGS] & 16
  /* CheckAlways */
  )) {
    childComponentLView[FLAGS] |= 64
    /* Dirty */
    ;
  }
}

function setNgReflectProperty(lView, element, type, attrName, value) {
  var renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  var debugValue = normalizeDebugBindingValue(value);

  if (type & 3
  /* AnyRNode */
  ) {
    if (value == null) {
      isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) : element.removeAttribute(attrName);
    } else {
      isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) : element.setAttribute(attrName, debugValue);
    }
  } else {
    var textContent = escapeCommentText("bindings=".concat(JSON.stringify((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__.default)({}, attrName, debugValue), null, 2)));

    if (isProceduralRenderer(renderer)) {
      renderer.setValue(element, textContent);
    } else {
      element.textContent = textContent;
    }
  }
}

function setNgReflectProperties(lView, element, type, dataValue, value) {
  if (type & (3
  /* AnyRNode */
  | 4
  /* Container */
  )) {
    /**
     * dataValue is an array containing runtime input or output names for the directives:
     * i+0: directive instance index
     * i+1: privateName
     *
     * e.g. [0, 'change', 'change-minified']
     * we want to set the reflected property with the privateName: dataValue[i+1]
     */
    for (var i = 0; i < dataValue.length; i += 2) {
      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
    }
  }
}

function validateProperty(tView, element, propName, tNode) {
  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
  // defined as an array (as an empty array in case `schemas` field is not defined) and we should
  // execute the check below.
  if (tView.schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element
  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).

  if (matchingSchemas(tView, tNode.value) || propName in element || isAnimationProp(propName)) {
    return true;
  } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
  // need to account for both here, while being careful for `typeof null` also returning 'object'.


  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
}

function matchingSchemas(tView, tagName) {
  var schemas = tView.schemas;

  if (schemas !== null) {
    for (var i = 0; i < schemas.length; i++) {
      var schema = schemas[i];

      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
        return true;
      }
    }
  }

  return false;
}
/**
 * Logs an error that a property is not supported on an element.
 * @param propName Name of the invalid property.
 * @param tNode Node on which we encountered the property.
 */


function logUnknownPropertyError(propName, tNode) {
  var message = "Can't bind to '".concat(propName, "' since it isn't a known property of '").concat(tNode.value, "'.");
  console.error(formatRuntimeError("303"
  /* UNKNOWN_BINDING */
  , message));
}
/**
 * Instantiate a root component.
 */


function instantiateRootComponent(tView, lView, def) {
  var rootTNode = getCurrentTNode();

  if (tView.firstCreatePass) {
    if (def.providersResolver) def.providersResolver(def);
    var directiveIndex = allocExpando(tView, lView, 1, null);
    ngDevMode && assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');
    configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);
  }

  var directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);
  attachPatchData(directive, lView);
  var native = getNativeByTNode(rootTNode, lView);

  if (native) {
    attachPatchData(native, lView);
  }

  return directive;
}
/**
 * Resolve the matched directives on a node.
 */


function resolveDirectives(tView, lView, tNode, localRefs) {
  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
  // tsickle.
  ngDevMode && assertFirstCreatePass(tView);
  var hasDirectives = false;

  if (getBindingsEnabled()) {
    var directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
    var exportsMap = localRefs === null ? null : {
      '': -1
    };

    if (directiveDefs !== null) {
      hasDirectives = true;
      initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in
      // the viewEngine:
      // - viewProviders have priority over providers
      // - the last directive in NgModule.declarations has priority over the previous one
      // So to match these rules, the order in which providers are added in the arrays is very
      // important.

      for (var i = 0; i < directiveDefs.length; i++) {
        var def = directiveDefs[i];
        if (def.providersResolver) def.providersResolver(def);
      }

      var preOrderHooksFound = false;
      var preOrderCheckHooksFound = false;
      var directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);
      ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');

      for (var _i4 = 0; _i4 < directiveDefs.length; _i4++) {
        var _def2 = directiveDefs[_i4]; // Merge the attrs in the order of matches. This assumes that the first directive is the
        // component itself, so that the component has the least priority.

        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, _def2.hostAttrs);
        configureViewWithDirective(tView, tNode, lView, directiveIdx, _def2);
        saveNameToExportMap(directiveIdx, _def2, exportsMap);
        if (_def2.contentQueries !== null) tNode.flags |= 8
        /* hasContentQuery */
        ;
        if (_def2.hostBindings !== null || _def2.hostAttrs !== null || _def2.hostVars !== 0) tNode.flags |= 128
        /* hasHostBindings */
        ;
        var lifeCycleHooks = _def2.type.prototype; // Only push a node index into the preOrderHooks array if this is the first
        // pre-order hook found on this node.

        if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
          // We will push the actual hook function into this array later during dir instantiation.
          // We cannot do it now because we must ensure hooks are registered in the same
          // order that directives are created (i.e. injection order).
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);
          preOrderHooksFound = true;
        }

        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);
          preOrderCheckHooksFound = true;
        }

        directiveIdx++;
      }

      initializeInputAndOutputAliases(tView, tNode);
    }

    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  } // Merge the template attrs last so that they have the highest priority.


  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  return hasDirectives;
}
/**
 * Add `hostBindings` to the `TView.hostBindingOpCodes`.
 *
 * @param tView `TView` to which the `hostBindings` should be added.
 * @param tNode `TNode` the element which contains the directive
 * @param lView `LView` current `LView`
 * @param directiveIdx Directive index in view.
 * @param directiveVarsIdx Where will the directive's vars be stored
 * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
 */


function registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  var hostBindings = def.hostBindings;

  if (hostBindings) {
    var hostBindingOpCodes = tView.hostBindingOpCodes;

    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }

    var elementIndx = ~tNode.index;

    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      // Conditionally add select element so that we are more efficient in execution.
      // NOTE: this is strictly not necessary and it trades code size for runtime perf.
      // (We could just always add it.)
      hostBindingOpCodes.push(elementIndx);
    }

    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
/**
 * Returns the last selected element index in the `HostBindingOpCodes`
 *
 * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only
 * if it changes. This method returns the last index (or '0' if not found.)
 *
 * Selected element index are only the ones which are negative.
 */


function lastSelectedElementIdx(hostBindingOpCodes) {
  var i = hostBindingOpCodes.length;

  while (i > 0) {
    var value = hostBindingOpCodes[--i];

    if (typeof value === 'number' && value < 0) {
      return value;
    }
  }

  return 0;
}
/**
 * Instantiate all the directives that were previously resolved on the current node.
 */


function instantiateAllDirectives(tView, lView, tNode, native) {
  var start = tNode.directiveStart;
  var end = tNode.directiveEnd;

  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }

  attachPatchData(native, lView);
  var initialInputs = tNode.initialInputs;

  for (var i = start; i < end; i++) {
    var def = tView.data[i];
    var isComponent = isComponentDef(def);

    if (isComponent) {
      ngDevMode && assertTNodeType(tNode, 3
      /* AnyRNode */
      );
      addComponentLogic(lView, tNode, def);
    }

    var directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);

    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }

    if (isComponent) {
      var componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = directive;
    }
  }
}

function invokeDirectivesHostBindings(tView, lView, tNode) {
  var start = tNode.directiveStart;
  var end = tNode.directiveEnd;
  var firstCreatePass = tView.firstCreatePass;
  var elementIndex = tNode.index;
  var currentDirectiveIndex = getCurrentDirectiveIndex();

  try {
    setSelectedIndex(elementIndex);

    for (var dirIndex = start; dirIndex < end; dirIndex++) {
      var def = tView.data[dirIndex];
      var directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);

      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
/**
 * Invoke the host bindings in creation mode.
 *
 * @param def `DirectiveDef` which may contain the `hostBindings` function.
 * @param directive Instance of directive.
 */


function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1
    /* Create */
    , directive);
  }
}
/**
 * Matches the current node against all available selectors.
 * If a component is matched (at most one), it is returned in first position in the array.
 */


function findDirectiveDefMatches(tView, viewData, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  );
  var registry = tView.directiveRegistry;
  var matches = null;

  if (registry) {
    for (var i = 0; i < registry.length; i++) {
      var def = registry[i];

      if (isNodeMatchingSelectorList(tNode, def.selectors,
      /* isProjectionMode */
      false)) {
        matches || (matches = ngDevMode ? new MatchesArray() : []);
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);

        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2
            /* Element */
            , "\"".concat(tNode.value, "\" tags cannot be used as component hosts. ") + "Please use a different tag to activate the ".concat(stringify(def.type), " component."));
            if (tNode.flags & 2
            /* isComponentHost */
            ) throwMultipleComponentError(tNode);
          }

          markAsComponentHost(tView, tNode); // The component is always stored first with directives after.

          matches.unshift(def);
        } else {
          matches.push(def);
        }
      }
    }
  }

  return matches;
}
/**
 * Marks a given TNode as a component's host. This consists of:
 * - setting appropriate TNode flags;
 * - storing index of component's host element so it will be queued for view refresh during CD.
 */


function markAsComponentHost(tView, hostTNode) {
  ngDevMode && assertFirstCreatePass(tView);
  hostTNode.flags |= 2
  /* isComponentHost */
  ;
  (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
}
/** Caches local names and their matching directive indices for query and template lookups. */


function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  if (localRefs) {
    var localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined
    // in the template to ensure the data is loaded in the same slots as their refs
    // in the template (for template queries).

    for (var i = 0; i < localRefs.length; i += 2) {
      var index = exportsMap[localRefs[i + 1]];
      if (index == null) throw new RuntimeError("301"
      /* EXPORT_NOT_FOUND */
      , "Export of name '".concat(localRefs[i + 1], "' not found!"));
      localNames.push(localRefs[i], index);
    }
  }
}
/**
 * Builds up an export map as directives are created, so local refs can be quickly mapped
 * to their directive instances.
 */


function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (var i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }

    if (isComponentDef(def)) exportsMap[''] = directiveIdx;
  }
}
/**
 * Initializes the flags on the current node, setting all indices to the initial index,
 * the directive count to 0, and adding the isComponent flag.
 * @param index the initial index
 */


function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
  tNode.flags |= 1
  /* isDirectiveHost */
  ; // When the first directive is created on a node, save the index

  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
/**
 * Setup directive for instantiation.
 *
 * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well
 * as `LView`. `TView` gets the `DirectiveDef`.
 *
 * @param tView `TView`
 * @param tNode `TNode`
 * @param lView `LView`
 * @param directiveIndex Index where the directive will be stored in the Expando.
 * @param def `DirectiveDef`
 */


function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');
  tView.data[directiveIndex] = def;
  var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}

function addComponentLogic(lView, hostTNode, def) {
  var native = getNativeByTNode(hostTNode, lView);
  var tView = getOrCreateTComponentView(def); // Only component views should be added to the view tree directly. Embedded views are
  // accessed through their containers because they may be removed / re-added later.

  var rendererFactory = lView[RENDERER_FACTORY];
  var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64
  /* Dirty */
  : 16
  /* CheckAlways */
  , native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null)); // Component view will always be created before any injected LContainers,
  // so this is a regular element, wrap it with the component view

  lView[hostTNode.index] = componentView;
}

function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2
    /* Element */
    , "Attempted to set attribute `".concat(name, "` on a container node. ") + "Host bindings are not valid on ng-container or ng-template.");
  }

  var element = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
}

function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    ngDevMode && ngDevMode.rendererRemoveAttribute++;
    isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) : element.removeAttribute(name);
  } else {
    ngDevMode && ngDevMode.rendererSetAttribute++;
    var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);

    if (isProceduralRenderer(renderer)) {
      renderer.setAttribute(element, name, strValue, namespace);
    } else {
      namespace ? element.setAttributeNS(namespace, name, strValue) : element.setAttribute(name, strValue);
    }
  }
}
/**
 * Sets initial input properties on directive instances from attribute data
 *
 * @param lView Current LView that is being processed.
 * @param directiveIndex Index of the directive in directives array
 * @param instance Instance of the directive on which to set the initial inputs
 * @param def The directive def that contains the list of inputs
 * @param tNode The static data for this node
 */


function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  var initialInputs = initialInputData[directiveIndex];

  if (initialInputs !== null) {
    var setInput = def.setInput;

    for (var i = 0; i < initialInputs.length;) {
      var publicName = initialInputs[i++];
      var privateName = initialInputs[i++];
      var value = initialInputs[i++];

      if (setInput !== null) {
        def.setInput(instance, value, publicName, privateName);
      } else {
        instance[privateName] = value;
      }

      if (ngDevMode) {
        var nativeElement = getNativeByTNode(tNode, lView);
        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
      }
    }
  }
}
/**
 * Generates initialInputData for a node and stores it in the template's static storage
 * so subsequent template invocations don't have to recalculate it.
 *
 * initialInputData is an array containing values that need to be set as input properties
 * for directives on this node, but only once on creation. We need this array to support
 * the case where you set an @Input property of a directive using attribute-like syntax.
 * e.g. if you have a `name` @Input, you can set it once like this:
 *
 * <my-component name="Bess"></my-component>
 *
 * @param inputs The list of inputs from the directive def
 * @param attrs The static attrs on this node
 */


function generateInitialInputs(inputs, attrs) {
  var inputsToStore = null;
  var i = 0;

  while (i < attrs.length) {
    var attrName = attrs[i];

    if (attrName === 0
    /* NamespaceURI */
    ) {
      // We do not allow inputs on namespaced attributes.
      i += 4;
      continue;
    } else if (attrName === 5
    /* ProjectAs */
    ) {
      // Skip over the `ngProjectAs` value.
      i += 2;
      continue;
    } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.


    if (typeof attrName === 'number') break;

    if (inputs.hasOwnProperty(attrName)) {
      if (inputsToStore === null) inputsToStore = [];
      inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
    }

    i += 2;
  }

  return inputsToStore;
} //////////////////////////
//// ViewContainer & View
//////////////////////////
// Not sure why I need to do `any` here but TS complains later.


var LContainerArray = (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode() && createNamedArrayType('LContainer');
/**
 * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
 *
 * @param hostNative The host element for the LContainer
 * @param hostTNode The host TNode for the LContainer
 * @param currentView The parent view of the LContainer
 * @param native The native comment element
 * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
 * @returns LContainer
 */

function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native); // https://jsperf.com/array-literal-vs-new-array-really

  var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
  true, // Boolean `true` in this position signifies that this is an `LContainer`
  false, // has transplanted views
  currentView, // parent
  null, // next
  0, // transplanted views to refresh count
  tNode, // t_host
  native, // native,
  null, // view refs
  null);
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
  ngDevMode && attachLContainerDebug(lContainer);
  return lContainer;
}
/**
 * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
 * them by executing an associated template function.
 */


function refreshEmbeddedViews(lView) {
  for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      var embeddedLView = lContainer[i];
      var embeddedTView = embeddedLView[TVIEW];
      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');

      if (viewAttachedToChangeDetector(embeddedLView)) {
        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
      }
    }
  }
}
/**
 * Mark transplanted views as needing to be refreshed at their insertion points.
 *
 * @param lView The `LView` that may have transplanted views.
 */


function markTransplantedViewsForRefresh(lView) {
  for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;
    var movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');

    for (var i = 0; i < movedViews.length; i++) {
      var movedLView = movedViews[i];
      var insertionLContainer = movedLView[PARENT];
      ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for
      // refresh.

      if ((movedLView[FLAGS] & 1024
      /* RefreshTransplantedView */
      ) === 0) {
        updateTransplantedViewCount(insertionLContainer, 1);
      } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
      // those that aren't (declaration component === insertion component). In the latter case,
      // it's fine to add the flag, as we will clear it immediately in
      // `refreshEmbeddedViews` for the view currently being refreshed.


      movedLView[FLAGS] |= 1024
      /* RefreshTransplantedView */
      ;
    }
  }
} /////////////

/**
 * Refreshes components by entering the component view and processing its bindings, queries, etc.
 *
 * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
 */


function refreshComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
  var componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

  if (viewAttachedToChangeDetector(componentView)) {
    var tView = componentView[TVIEW];

    if (componentView[FLAGS] & (16
    /* CheckAlways */
    | 64
    /* Dirty */
    )) {
      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
      refreshContainsDirtyView(componentView);
    }
  }
}
/**
 * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
 * children or descendants of the given lView.
 *
 * @param lView The lView which contains descendant transplanted views that need to be refreshed.
 */


function refreshContainsDirtyView(lView) {
  for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      var embeddedLView = lContainer[i];

      if (embeddedLView[FLAGS] & 1024
      /* RefreshTransplantedView */
      ) {
        var embeddedTView = embeddedLView[TVIEW];
        ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
      } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
        refreshContainsDirtyView(embeddedLView);
      }
    }
  }

  var tView = lView[TVIEW]; // Refresh child component views.

  var components = tView.components;

  if (components !== null) {
    for (var _i5 = 0; _i5 < components.length; _i5++) {
      var componentView = getComponentLViewByIndex(components[_i5], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

      if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
        refreshContainsDirtyView(componentView);
      }
    }
  }
}

function renderComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
  var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  var componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  renderView(componentTView, componentView, componentView[CONTEXT]);
}
/**
 * Syncs an LView instance with its blueprint if they have gotten out of sync.
 *
 * Typically, blueprints and their view instances should always be in sync, so the loop here
 * will be skipped. However, consider this case of two components side-by-side:
 *
 * App template:
 * ```
 * <comp></comp>
 * <comp></comp>
 * ```
 *
 * The following will happen:
 * 1. App template begins processing.
 * 2. First <comp> is matched as a component and its LView is created.
 * 3. Second <comp> is matched as a component and its LView is created.
 * 4. App template completes processing, so it's time to check child templates.
 * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
 * 6. Second <comp> template is checked. Its blueprint has been updated by the first
 * <comp> template, but its LView was created before this update, so it is out of sync.
 *
 * Note that embedded views inside ngFor loops will never be out of sync because these views
 * are processed as soon as they are created.
 *
 * @param tView The `TView` that contains the blueprint for syncing
 * @param lView The view to sync
 */


function syncViewWithBlueprint(tView, lView) {
  for (var i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
/**
 * Adds LView or LContainer to the end of the current view tree.
 *
 * This structure will be used to traverse through nested views to remove listeners
 * and call onDestroy callbacks.
 *
 * @param lView The view where LView or LContainer should be added
 * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
 * @param lViewOrLContainer The LView or LContainer to add to the view tree
 * @returns The state passed in
 */


function addToViewTree(lView, lViewOrLContainer) {
  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
  // of order, the change detection will run out of order, as the act of retrieving the the
  // LContainer from the RNode is what adds it to the queue.
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }

  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
} ///////////////////////////////
//// Change detection
///////////////////////////////

/**
 * Marks current view and all ancestors dirty.
 *
 * Returns the root view because it is found as a byproduct of marking the view tree
 * dirty, and can be used by methods that consume markViewDirty() to easily schedule
 * change detection. Otherwise, such methods would need to traverse up the view tree
 * an additional time to get the root view and schedule a tick on it.
 *
 * @param lView The starting LView to mark dirty
 * @returns the root LView
 */


function markViewDirty(lView) {
  while (lView) {
    lView[FLAGS] |= 64
    /* Dirty */
    ;
    var parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container

    if (isRootView(lView) && !parent) {
      return lView;
    } // continue otherwise


    lView = parent;
  }

  return null;
}
/**
 * Used to schedule change detection on the whole application.
 *
 * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
 * It is usually called indirectly by calling `markDirty` when the view needs to be
 * re-rendered.
 *
 * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
 * `scheduleTick` requests. The scheduling function can be overridden in
 * `renderComponent`'s `scheduler` option.
 */


function scheduleTick(rootContext, flags) {
  var nothingScheduled = rootContext.flags === 0
  /* Empty */
  ;

  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
    // https://github.com/angular/angular/issues/39296
    // should only attach the flags when really scheduling a tick
    rootContext.flags |= flags;
    var res;
    rootContext.clean = new Promise(function (r) {
      return res = r;
    });
    rootContext.scheduler(function () {
      if (rootContext.flags & 1
      /* DetectChanges */
      ) {
        rootContext.flags &= ~1
        /* DetectChanges */
        ;
        tickRootContext(rootContext);
      }

      if (rootContext.flags & 2
      /* FlushPlayers */
      ) {
        rootContext.flags &= ~2
        /* FlushPlayers */
        ;
        var playerHandler = rootContext.playerHandler;

        if (playerHandler) {
          playerHandler.flushPlayers();
        }
      }

      rootContext.clean = _CLEAN_PROMISE;
      res(null);
    });
  }
}

function tickRootContext(rootContext) {
  for (var i = 0; i < rootContext.components.length; i++) {
    var rootComponent = rootContext.components[i];
    var lView = readPatchedLView(rootComponent);
    var tView = lView[TVIEW];
    renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
  }
}

function detectChangesInternal(tView, lView, context) {
  var rendererFactory = lView[RENDERER_FACTORY];
  if (rendererFactory.begin) rendererFactory.begin();

  try {
    refreshView(tView, lView, tView.template, context);
  } catch (error) {
    handleError(lView, error);
    throw error;
  } finally {
    if (rendererFactory.end) rendererFactory.end();
  }
}
/**
 * Synchronously perform change detection on a root view and its components.
 *
 * @param lView The view which the change detection should be performed on.
 */


function detectChangesInRootView(lView) {
  tickRootContext(lView[CONTEXT]);
}

function checkNoChangesInternal(tView, view, context) {
  setIsInCheckNoChangesMode(true);

  try {
    detectChangesInternal(tView, view, context);
  } finally {
    setIsInCheckNoChangesMode(false);
  }
}
/**
 * Checks the change detector on a root view and its components, and throws if any changes are
 * detected.
 *
 * This is used in development mode to verify that running change detection doesn't
 * introduce other changes.
 *
 * @param lView The view which the change detection should be checked on.
 */


function checkNoChangesInRootView(lView) {
  setIsInCheckNoChangesMode(true);

  try {
    detectChangesInRootView(lView);
  } finally {
    setIsInCheckNoChangesMode(false);
  }
}

function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
  setCurrentQueryIndex(0);
  viewQueryFn(flags, component);
} ///////////////////////////////
//// Bindings & interpolations
///////////////////////////////

/**
 * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
 *
 * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
 * - a bound property name;
 * - a static parts of interpolated strings;
 *
 * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
 * property binding metadata will be stored in `TView.data` at the same index as a bound value in
 * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
 * following format:
 * - `propertyName` for bound properties;
 * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
 * interpolated properties.
 *
 * @param tData `TData` where meta-data will be saved;
 * @param tNode `TNode` that is a target of the binding;
 * @param propertyName bound property name;
 * @param bindingIndex binding index in `LView`
 * @param interpolationParts static interpolation parts (for property interpolations)
 */


function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex) {
  // Binding meta-data are stored only the first time a given property instruction is processed.
  // Since we don't have a concept of the "first update pass" we need to check for presence of the
  // binding meta-data to decide if one should be stored (or if was stored already).
  if (tData[bindingIndex] === null) {
    if (tNode.inputs == null || !tNode.inputs[propertyName]) {
      var propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      var bindingMetadata = propertyName;

      for (var _len10 = arguments.length, interpolationParts = new Array(_len10 > 4 ? _len10 - 4 : 0), _key10 = 4; _key10 < _len10; _key10++) {
        interpolationParts[_key10 - 4] = arguments[_key10];
      }

      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }

      tData[bindingIndex] = bindingMetadata;
    }
  }
}

var CLEAN_PROMISE = _CLEAN_PROMISE;

function getOrCreateLViewCleanup(view) {
  // top level variables should not be exported for performance reasons (PERF_NOTES.md)
  return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
}

function getOrCreateTViewCleanup(tView) {
  return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
}
/**
 * There are cases where the sub component's renderer needs to be included
 * instead of the current renderer (see the componentSyntheticHost* instructions).
 */


function loadComponentRenderer(currentDef, tNode, lView) {
  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
  // component (see packages/core/src/render3/component.ts). This is not consistent with the process
  // of creating inner components, when current directive index is available in the state. In order
  // to avoid relying on current def being `null` (thus special-casing root component creation), the
  // process of creating root component should be unified with the process of creating inner
  // components.
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }

  return lView[RENDERER];
}
/** Handles an error thrown in an LView. */


function handleError(lView, error) {
  var injector = lView[INJECTOR];
  var errorHandler = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler && errorHandler.handleError(error);
}
/**
 * Set the inputs of directives at the current node to corresponding value.
 *
 * @param tView The current TView
 * @param lView the `LView` which contains the directives.
 * @param inputs mapping between the public "input" name and privately-known,
 *        possibly minified, property names to write to.
 * @param value Value to set.
 */


function setInputsForProperty(tView, lView, inputs, publicName, value) {
  for (var i = 0; i < inputs.length;) {
    var index = inputs[i++];
    var privateName = inputs[i++];
    var instance = lView[index];
    ngDevMode && assertIndexInRange(lView, index);
    var def = tView.data[index];

    if (def.setInput !== null) {
      def.setInput(instance, value, publicName, privateName);
    } else {
      instance[privateName] = value;
    }
  }
}
/**
 * Updates a text binding at a given index in a given LView.
 */


function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, 'Value should be a string');
  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
  ngDevMode && assertIndexInRange(lView, index);
  var element = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element, 'native element should exist');
  updateTextNode(lView[RENDERER], element, value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compute the static styling (class/style) from `TAttributes`.
 *
 * This function should be called during `firstCreatePass` only.
 *
 * @param tNode The `TNode` into which the styling information should be loaded.
 * @param attrs `TAttributes` containing the styling information.
 * @param writeToHost Where should the resulting static styles be written?
 *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
 *   - `true` Write to `TNode.styles` / `TNode.classes`
 */


function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
  var styles = writeToHost ? tNode.styles : null;
  var classes = writeToHost ? tNode.classes : null;
  var mode = 0;

  if (attrs !== null) {
    for (var i = 0; i < attrs.length; i++) {
      var value = attrs[i];

      if (typeof value === 'number') {
        mode = value;
      } else if (mode == 1
      /* Classes */
      ) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2
      /* Styles */
      ) {
        var style = value;
        var styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
      }
    }
  }

  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Synchronously perform change detection on a component (and possibly its sub-components).
 *
 * This function triggers change detection in a synchronous way on a component.
 *
 * @param component The component which the change detection should be performed on.
 */


function detectChanges(component) {
  var view = getComponentViewByInstance(component);
  detectChangesInternal(view[TVIEW], view, component);
}
/**
 * Marks the component as dirty (needing change detection). Marking a component dirty will
 * schedule a change detection on it at some point in the future.
 *
 * Marking an already dirty component as dirty won't do anything. Only one outstanding change
 * detection can be scheduled per component tree.
 *
 * @param component Component to mark as dirty.
 */


function markDirty(component) {
  ngDevMode && assertDefined(component, 'component');
  var rootView = markViewDirty(getComponentViewByInstance(component));
  ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
  scheduleTick(rootView[CONTEXT], 1
  /* DetectChanges */
  );
}
/**
 * Used to perform change detection on the whole application.
 *
 * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
 * executes lifecycle hooks and conditionally checks components based on their
 * `ChangeDetectionStrategy` and dirtiness.
 *
 * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
 * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
 * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
 * be changed when calling `renderComponent` and providing the `scheduler` option.
 */


function tick(component) {
  var rootView = getRootView(component);
  var rootContext = rootView[CONTEXT];
  tickRootContext(rootContext);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
 *
 * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
 * project.
 *
 * @publicApi
 */


var INJECTOR$1 = new InjectionToken('INJECTOR', // Dissable tslint because this is const enum which gets inlined not top level prop access.
// tslint:disable-next-line: no-toplevel-property-access
-1
/* Injector */
);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var NullInjector = /*#__PURE__*/function () {
  function NullInjector() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NullInjector);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NullInjector, [{
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

      if (notFoundValue === THROW_IF_NOT_FOUND) {
        var error = new Error("NullInjectorError: No provider for ".concat(stringify(token), "!"));
        error.name = 'NullInjectorError';
        throw error;
      }

      return notFoundValue;
    }
  }]);

  return NullInjector;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An internal token whose presence in an injector indicates that the injector should treat itself
 * as a root scoped injector when processing requests for unknown tokens which may indicate
 * they are provided in the root scope.
 */


var INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marker which indicates that a value has not yet been created from the factory function.
 */

var NOT_YET = {};
/**
 * Marker which indicates that the factory function for a token is in the process of being called.
 *
 * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
 * injection of a dependency has recursively attempted to inject the original token, and there is
 * a circular dependency among the providers.
 */

var CIRCULAR = {};
/**
 * A lazily initialized NullInjector.
 */

var NULL_INJECTOR = undefined;

function getNullInjector() {
  if (NULL_INJECTOR === undefined) {
    NULL_INJECTOR = new NullInjector();
  }

  return NULL_INJECTOR;
}
/**
 * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
 *
 * @publicApi
 */


function createInjector(defType) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var name = arguments.length > 3 ? arguments[3] : undefined;
  var injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);

  injector._resolveInjectorDefTypes();

  return injector;
}
/**
 * Creates a new injector without eagerly resolving its injector types. Can be used in places
 * where resolving the injector types immediately can lead to an infinite loop. The injector types
 * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
 */


function createInjectorWithoutInjectorInstances(defType) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var name = arguments.length > 3 ? arguments[3] : undefined;
  return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
}

var R3Injector = /*#__PURE__*/function () {
  function R3Injector(def, additionalProviders, parent) {
    var _this2 = this;

    var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, R3Injector);

    this.parent = parent;
    /**
     * Map of tokens to records which contain the instances of those tokens.
     * - `null` value implies that we don't have the record. Used by tree-shakable injectors
     * to prevent further searches.
     */

    this.records = new Map();
    /**
     * The transitive set of `InjectorType`s which define this injector.
     */

    this.injectorDefTypes = new Set();
    /**
     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
     */

    this.onDestroy = new Set();
    this._destroyed = false;
    var dedupStack = []; // Start off by creating Records for every provider declared in every InjectorType
    // included transitively in additional providers then do the same for `def`. This order is
    // important because `def` may include providers that override ones in additionalProviders.

    additionalProviders && deepForEach(additionalProviders, function (provider) {
      return _this2.processProvider(provider, def, additionalProviders);
    });
    deepForEach([def], function (injectorDef) {
      return _this2.processInjectorType(injectorDef, [], dedupStack);
    }); // Make sure the INJECTOR token provides this injector.

    this.records.set(INJECTOR$1, makeRecord(undefined, this)); // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
    // any injectable scoped to APP_ROOT_SCOPE.

    var record = this.records.get(INJECTOR_SCOPE);
    this.scope = record != null ? record.value : null; // Source name, used for debugging

    this.source = source || (typeof def === 'object' ? null : stringify(def));
  }
  /**
   * Flag indicating that this injector was previously destroyed.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(R3Injector, [{
    key: "destroyed",
    get: function get() {
      return this._destroyed;
    }
    /**
     * Destroy the injector and release references to every instance or provider associated with it.
     *
     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
     * hook was found.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().

      this._destroyed = true;

      try {
        // Call all the lifecycle hooks.
        this.onDestroy.forEach(function (service) {
          return service.ngOnDestroy();
        });
      } finally {
        // Release all references.
        this.records.clear();
        this.onDestroy.clear();
        this.injectorDefTypes.clear();
      }
    }
  }, {
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
      this.assertNotDestroyed(); // Set the injection context.

      var previousInjector = setCurrentInjector(this);
      var previousInjectImplementation = setInjectImplementation(undefined);

      try {
        // Check for the SkipSelf flag.
        if (!(flags & InjectFlags.SkipSelf)) {
          // SkipSelf isn't set, check if the record belongs to this injector.
          var record = this.records.get(token);

          if (record === undefined) {
            // No record, but maybe the token is scoped to this injector. Look for an injectable
            // def with a scope matching this injector.
            var def = couldBeInjectableType(token) && getInjectableDef(token);

            if (def && this.injectableDefInScope(def)) {
              // Found an injectable def and it's scoped to this injector. Pretend as if it was here
              // all along.
              record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
            } else {
              record = null;
            }

            this.records.set(token, record);
          } // If a record was found, get the instance for it and return it.


          if (record != null
          /* NOT null || undefined */
          ) {
            return this.hydrate(token, record);
          }
        } // Select the next injector based on the Self flag - if self is set, the next injector is
        // the NullInjector, otherwise it's the parent.


        var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
        // is undefined, the value is null, otherwise it's the notFoundValue.

        notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
        return nextInjector.get(token, notFoundValue);
      } catch (e) {
        if (e.name === 'NullInjectorError') {
          var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
          path.unshift(stringify(token));

          if (previousInjector) {
            // We still have a parent injector, keep throwing
            throw e;
          } else {
            // Format & throw the final error message when we don't have any previous injector
            return catchInjectorError(e, token, 'R3InjectorError', this.source);
          }
        } else {
          throw e;
        }
      } finally {
        // Lastly, restore the previous injection context.
        setInjectImplementation(previousInjectImplementation);
        setCurrentInjector(previousInjector);
      }
    }
    /** @internal */

  }, {
    key: "_resolveInjectorDefTypes",
    value: function _resolveInjectorDefTypes() {
      var _this3 = this;

      this.injectorDefTypes.forEach(function (defType) {
        return _this3.get(defType);
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var tokens = [],
          records = this.records;
      records.forEach(function (v, token) {
        return tokens.push(stringify(token));
      });
      return "R3Injector[".concat(tokens.join(', '), "]");
    }
  }, {
    key: "assertNotDestroyed",
    value: function assertNotDestroyed() {
      if (this._destroyed) {
        throw new Error('Injector has already been destroyed.');
      }
    }
    /**
     * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
     * to this injector.
     *
     * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
     * the function will return "true" to indicate that the providers of the type definition need
     * to be processed. This allows us to process providers of injector types after all imports of
     * an injector definition are processed. (following View Engine semantics: see FW-1349)
     */

  }, {
    key: "processInjectorType",
    value: function processInjectorType(defOrWrappedDef, parents, dedupStack) {
      var _this4 = this;

      defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
      if (!defOrWrappedDef) return false; // Either the defOrWrappedDef is an InjectorType (with injector def) or an
      // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
      // read, so care is taken to only do the read once.
      // First attempt to read the injector def (`ɵinj`).

      var def = getInjectorDef(defOrWrappedDef); // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.

      var ngModule = def == null && defOrWrappedDef.ngModule || undefined; // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
      // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
      // is the `ngModule`.

      var defType = ngModule === undefined ? defOrWrappedDef : ngModule; // Check for circular dependencies.

      if (ngDevMode && parents.indexOf(defType) !== -1) {
        var defName = stringify(defType);
        var path = parents.map(stringify);
        throwCyclicDependencyError(defName, path);
      } // Check for multiple imports of the same module


      var isDuplicate = dedupStack.indexOf(defType) !== -1; // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
      // `InjectorDef` is on its `ngModule`.

      if (ngModule !== undefined) {
        def = getInjectorDef(ngModule);
      } // If no definition was found, it might be from exports. Remove it.


      if (def == null) {
        return false;
      } // Add providers in the same way that @NgModule resolution did:
      // First, include providers from any imports.


      if (def.imports != null && !isDuplicate) {
        // Before processing defType's imports, add it to the set of parents. This way, if it ends
        // up deeply importing itself, this can be detected.
        ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module

        dedupStack.push(defType);
        var importTypesWithProviders;

        try {
          deepForEach(def.imports, function (imported) {
            if (_this4.processInjectorType(imported, parents, dedupStack)) {
              if (importTypesWithProviders === undefined) importTypesWithProviders = []; // If the processed import is an injector type with providers, we store it in the
              // list of import types with providers, so that we can process those afterwards.

              importTypesWithProviders.push(imported);
            }
          });
        } finally {
          // Remove it from the parents set when finished.
          ngDevMode && parents.pop();
        } // Imports which are declared with providers (TypeWithProviders) need to be processed
        // after all imported modules are processed. This is similar to how View Engine
        // processes/merges module imports in the metadata resolver. See: FW-1349.


        if (importTypesWithProviders !== undefined) {
          var _loop = function _loop(i) {
            var _importTypesWithProvi = importTypesWithProviders[i],
                ngModule = _importTypesWithProvi.ngModule,
                providers = _importTypesWithProvi.providers;
            deepForEach(providers, function (provider) {
              return _this4.processProvider(provider, ngModule, providers || EMPTY_ARRAY);
            });
          };

          for (var i = 0; i < importTypesWithProviders.length; i++) {
            _loop(i);
          }
        }
      } // Track the InjectorType and add a provider for it. It's important that this is done after the
      // def's imports.


      this.injectorDefTypes.add(defType);

      var factory = getFactoryDef(defType) || function () {
        return new defType();
      };

      this.records.set(defType, makeRecord(factory, NOT_YET)); // Next, include providers listed on the definition itself.

      var defProviders = def.providers;

      if (defProviders != null && !isDuplicate) {
        var injectorType = defOrWrappedDef;
        deepForEach(defProviders, function (provider) {
          return _this4.processProvider(provider, injectorType, defProviders);
        });
      }

      return ngModule !== undefined && defOrWrappedDef.providers !== undefined;
    }
    /**
     * Process a `SingleProvider` and add it.
     */

  }, {
    key: "processProvider",
    value: function processProvider(provider, ngModuleType, providers) {
      // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
      // property.
      provider = resolveForwardRef(provider);
      var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.

      var record = providerToRecord(provider, ngModuleType, providers);

      if (!isTypeProvider(provider) && provider.multi === true) {
        // If the provider indicates that it's a multi-provider, process it specially.
        // First check whether it's been defined already.
        var multiRecord = this.records.get(token);

        if (multiRecord) {
          // It has. Throw a nice error if
          if (ngDevMode && multiRecord.multi === undefined) {
            throwMixedMultiProviderError();
          }
        } else {
          multiRecord = makeRecord(undefined, NOT_YET, true);

          multiRecord.factory = function () {
            return injectArgs(multiRecord.multi);
          };

          this.records.set(token, multiRecord);
        }

        token = provider;
        multiRecord.multi.push(provider);
      } else {
        var existing = this.records.get(token);

        if (ngDevMode && existing && existing.multi !== undefined) {
          throwMixedMultiProviderError();
        }
      }

      this.records.set(token, record);
    }
  }, {
    key: "hydrate",
    value: function hydrate(token, record) {
      if (ngDevMode && record.value === CIRCULAR) {
        throwCyclicDependencyError(stringify(token));
      } else if (record.value === NOT_YET) {
        record.value = CIRCULAR;
        record.value = record.factory();
      }

      if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
        this.onDestroy.add(record.value);
      }

      return record.value;
    }
  }, {
    key: "injectableDefInScope",
    value: function injectableDefInScope(def) {
      if (!def.providedIn) {
        return false;
      }

      var providedIn = resolveForwardRef(def.providedIn);

      if (typeof providedIn === 'string') {
        return providedIn === 'any' || providedIn === this.scope;
      } else {
        return this.injectorDefTypes.has(providedIn);
      }
    }
  }]);

  return R3Injector;
}();

function injectableDefOrInjectorDefFactory(token) {
  // Most tokens will have an injectable def directly on them, which specifies a factory directly.
  var injectableDef = getInjectableDef(token);
  var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);

  if (factory !== null) {
    return factory;
  } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
  // If it's missing that, it's an error.


  if (token instanceof InjectionToken) {
    throw new Error("Token ".concat(stringify(token), " is missing a \u0275prov definition."));
  } // Undecorated types can sometimes be created if they have no constructor arguments.


  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  } // There was no way to resolve a factory for this token.


  throw new Error('unreachable');
}

function getUndecoratedInjectableFactory(token) {
  // If the token has parameters then it has dependencies that we cannot resolve implicitly.
  var paramLength = token.length;

  if (paramLength > 0) {
    var args = newArray(paramLength, '?');
    throw new Error("Can't resolve all parameters for ".concat(stringify(token), ": (").concat(args.join(', '), ")."));
  } // The constructor function appears to have no parameters.
  // This might be because it inherits from a super-class. In which case, use an injectable
  // def from an ancestor if there is one.
  // Otherwise this really is a simple class with no dependencies, so return a factory that
  // just instantiates the zero-arg constructor.


  var inheritedInjectableDef = getInheritedInjectableDef(token);

  if (inheritedInjectableDef !== null) {
    return function () {
      return inheritedInjectableDef.factory(token);
    };
  } else {
    return function () {
      return new token();
    };
  }
}

function providerToRecord(provider, ngModuleType, providers) {
  if (isValueProvider(provider)) {
    return makeRecord(undefined, provider.useValue);
  } else {
    var factory = providerToFactory(provider, ngModuleType, providers);
    return makeRecord(factory, NOT_YET);
  }
}
/**
 * Converts a `SingleProvider` into a factory function.
 *
 * @param provider provider to convert to factory
 */


function providerToFactory(provider, ngModuleType, providers) {
  var factory = undefined;

  if (isTypeProvider(provider)) {
    var unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = function factory() {
        return resolveForwardRef(provider.useValue);
      };
    } else if (isFactoryProvider(provider)) {
      factory = function factory() {
        return provider.useFactory.apply(provider, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(provider.deps || [])));
      };
    } else if (isExistingProvider(provider)) {
      factory = function factory() {
        return ɵɵinject(resolveForwardRef(provider.useExisting));
      };
    } else {
      var classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));

      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }

      if (hasDeps(provider)) {
        factory = function factory() {
          return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(classRef, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(provider.deps)));
        };
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }

  return factory;
}

function makeRecord(factory, value) {
  var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    factory: factory,
    value: value,
    multi: multi ? [] : undefined
  };
}

function isValueProvider(value) {
  return value !== null && typeof value == 'object' && USE_VALUE in value;
}

function isExistingProvider(value) {
  return !!(value && value.useExisting);
}

function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}

function isTypeProvider(value) {
  return typeof value === 'function';
}

function isClassProvider(value) {
  return !!value.useClass;
}

function hasDeps(value) {
  return !!value.deps;
}

function hasOnDestroy(value) {
  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';
}

function couldBeInjectableType(value) {
  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
  return new StaticInjector(providers, parent, name);
}

function INJECTOR_IMPL__POST_R3__(providers, parent, name) {
  return createInjector({
    name: name
  }, parent, providers, name);
}

var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;
/**
 * Concrete injectors implement this interface. Injectors are configured
 * with [providers](guide/glossary#provider) that associate
 * dependencies of various types with [injection tokens](guide/glossary#di-token).
 *
 * @see ["DI Providers"](guide/dependency-injection-providers).
 * @see `StaticProvider`
 *
 * @usageNotes
 *
 *  The following example creates a service injector instance.
 *
 * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
 *
 * ### Usage example
 *
 * {@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 *
 * {@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * @publicApi
 */

var Injector = /*#__PURE__*/function () {
  function Injector() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Injector);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Injector, null, [{
    key: "create",
    value: function create(options, parent) {
      if (Array.isArray(options)) {
        return INJECTOR_IMPL(options, parent, '');
      } else {
        return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
      }
    }
  }]);

  return Injector;
}();

Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
Injector.NULL = new NullInjector();
/** @nocollapse */

Injector.ɵprov = ɵɵdefineInjectable({
  token: Injector,
  providedIn: 'any',
  factory: function factory() {
    return ɵɵinject(INJECTOR$1);
  }
});
/**
 * @internal
 * @nocollapse
 */

Injector.__NG_ELEMENT_ID__ = -1
/* Injector */
;

var IDENT = function IDENT(value) {
  return value;
};

var ɵ0$6 = IDENT;
var EMPTY = [];
var CIRCULAR$1 = IDENT;

var MULTI_PROVIDER_FN = function MULTI_PROVIDER_FN() {
  return Array.prototype.slice.call(arguments);
};

var ɵ1$1 = MULTI_PROVIDER_FN;
var NO_NEW_LINE$1 = 'ɵ';

var StaticInjector = /*#__PURE__*/function () {
  function StaticInjector(providers) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.NULL;
    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, StaticInjector);

    this.parent = parent;
    this.source = source;
    var records = this._records = new Map();
    records.set(Injector, {
      token: Injector,
      fn: IDENT,
      deps: EMPTY,
      value: this,
      useNew: false
    });
    records.set(INJECTOR$1, {
      token: INJECTOR$1,
      fn: IDENT,
      deps: EMPTY,
      value: this,
      useNew: false
    });
    this.scope = recursivelyProcessProviders(records, providers);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(StaticInjector, [{
    key: "get",
    value: function get(token, notFoundValue) {
      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
      var records = this._records;
      var record = records.get(token);

      if (record === undefined) {
        // This means we have never seen this record, see if it is tree shakable provider.
        var injectableDef = getInjectableDef(token);

        if (injectableDef) {
          var providedIn = injectableDef && resolveForwardRef(injectableDef.providedIn);

          if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
            records.set(token, record = resolveProvider({
              provide: token,
              useFactory: injectableDef.factory,
              deps: EMPTY
            }));
          }
        }

        if (record === undefined) {
          // Set record to null to make sure that we don't go through expensive lookup above again.
          records.set(token, null);
        }
      }

      var lastInjector = setCurrentInjector(this);

      try {
        return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
      } catch (e) {
        return catchInjectorError(e, token, 'StaticInjectorError', this.source);
      } finally {
        setCurrentInjector(lastInjector);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var tokens = [],
          records = this._records;
      records.forEach(function (v, token) {
        return tokens.push(stringify(token));
      });
      return "StaticInjector[".concat(tokens.join(', '), "]");
    }
  }]);

  return StaticInjector;
}();

function resolveProvider(provider) {
  var deps = computeDeps(provider);
  var fn = IDENT;
  var value = EMPTY;
  var useNew = false;
  var provide = resolveForwardRef(provider.provide);

  if (USE_VALUE in provider) {
    // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
    value = provider.useValue;
  } else if (provider.useFactory) {
    fn = provider.useFactory;
  } else if (provider.useExisting) {// Just use IDENT
  } else if (provider.useClass) {
    useNew = true;
    fn = resolveForwardRef(provider.useClass);
  } else if (typeof provide == 'function') {
    useNew = true;
    fn = provide;
  } else {
    throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
  }

  return {
    deps: deps,
    fn: fn,
    useNew: useNew,
    value: value
  };
}

function multiProviderMixError(token) {
  return staticError('Cannot mix multi providers and regular providers', token);
}

function recursivelyProcessProviders(records, provider) {
  var scope = null;

  if (provider) {
    provider = resolveForwardRef(provider);

    if (Array.isArray(provider)) {
      // if we have an array recurse into the array
      for (var i = 0; i < provider.length; i++) {
        scope = recursivelyProcessProviders(records, provider[i]) || scope;
      }
    } else if (typeof provider === 'function') {
      // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
      // error messages
      throw staticError('Function/Class not supported', provider);
    } else if (provider && typeof provider === 'object' && provider.provide) {
      // At this point we have what looks like a provider: {provide: ?, ....}
      var token = resolveForwardRef(provider.provide);
      var resolvedProvider = resolveProvider(provider);

      if (provider.multi === true) {
        // This is a multi provider.
        var multiProvider = records.get(token);

        if (multiProvider) {
          if (multiProvider.fn !== MULTI_PROVIDER_FN) {
            throw multiProviderMixError(token);
          }
        } else {
          // Create a placeholder factory which will look up the constituents of the multi provider.
          records.set(token, multiProvider = {
            token: provider.provide,
            deps: [],
            useNew: false,
            fn: MULTI_PROVIDER_FN,
            value: EMPTY
          });
        } // Treat the provider as the token.


        token = provider;
        multiProvider.deps.push({
          token: token,
          options: 6
          /* Default */

        });
      }

      var record = records.get(token);

      if (record && record.fn == MULTI_PROVIDER_FN) {
        throw multiProviderMixError(token);
      }

      if (token === INJECTOR_SCOPE) {
        scope = resolvedProvider.value;
      }

      records.set(token, resolvedProvider);
    } else {
      throw staticError('Unexpected provider', provider);
    }
  }

  return scope;
}

function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
  try {
    return resolveToken(token, record, records, parent, notFoundValue, flags);
  } catch (e) {
    // ensure that 'e' is of type Error.
    if (!(e instanceof Error)) {
      e = new Error(e);
    }

    var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
    path.unshift(token);

    if (record && record.value == CIRCULAR$1) {
      // Reset the Circular flag.
      record.value = EMPTY;
    }

    throw e;
  }
}

function resolveToken(token, record, records, parent, notFoundValue, flags) {
  var value;

  if (record && !(flags & InjectFlags.SkipSelf)) {
    // If we don't have a record, this implies that we don't own the provider hence don't know how
    // to resolve it.
    value = record.value;

    if (value == CIRCULAR$1) {
      throw Error(NO_NEW_LINE$1 + 'Circular dependency');
    } else if (value === EMPTY) {
      record.value = CIRCULAR$1;
      var obj = undefined;
      var useNew = record.useNew;
      var fn = record.fn;
      var depRecords = record.deps;
      var deps = EMPTY;

      if (depRecords.length) {
        deps = [];

        for (var i = 0; i < depRecords.length; i++) {
          var depRecord = depRecords[i];
          var options = depRecord.options;
          var childRecord = options & 2
          /* CheckSelf */
          ? records.get(depRecord.token) : undefined;
          deps.push(tryResolveToken( // Current Token to resolve
          depRecord.token, // A record which describes how to resolve the token.
          // If undefined, this means we don't have such a record
          childRecord, // Other records we know about.
          records, // If we don't know how to resolve dependency and we should not check parent for it,
          // than pass in Null injector.
          !childRecord && !(options & 4
          /* CheckParent */
          ) ? Injector.NULL : parent, options & 1
          /* Optional */
          ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));
        }
      }

      record.value = value = useNew ? (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(fn, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(deps)) : fn.apply(obj, deps);
    }
  } else if (!(flags & InjectFlags.Self)) {
    value = parent.get(token, notFoundValue, InjectFlags.Default);
  } else if (!(flags & InjectFlags.Optional)) {
    value = Injector.NULL.get(token, notFoundValue);
  } else {
    value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
  }

  return value;
}

function computeDeps(provider) {
  var deps = EMPTY;
  var providerDeps = provider.deps;

  if (providerDeps && providerDeps.length) {
    deps = [];

    for (var i = 0; i < providerDeps.length; i++) {
      var options = 6
      /* Default */
      ;
      var token = resolveForwardRef(providerDeps[i]);

      if (Array.isArray(token)) {
        for (var j = 0, annotations = token; j < annotations.length; j++) {
          var annotation = annotations[j];

          if (annotation instanceof Optional || annotation == Optional) {
            options = options | 1
            /* Optional */
            ;
          } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
            options = options & ~2
            /* CheckSelf */
            ;
          } else if (annotation instanceof Self || annotation == Self) {
            options = options & ~4
            /* CheckParent */
            ;
          } else if (annotation instanceof Inject) {
            token = annotation.token;
          } else {
            token = resolveForwardRef(annotation);
          }
        }
      }

      deps.push({
        token: token,
        options: options
      });
    }
  } else if (provider.useExisting) {
    var _token = resolveForwardRef(provider.useExisting);

    deps = [{
      token: _token,
      options: 6
      /* Default */

    }];
  } else if (!providerDeps && !(USE_VALUE in provider)) {
    // useValue & useExisting are the only ones which are exempt from deps all others need it.
    throw staticError('\'deps\' required', provider);
  }

  return deps;
}

function staticError(text, obj) {
  return new Error(formatError(text, obj, 'StaticInjectorError'));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieves the component instance associated with a given DOM element.
 *
 * @usageNotes
 * Given the following DOM structure:
 *
 * ```html
 * <app-root>
 *   <div>
 *     <child-comp></child-comp>
 *   </div>
 * </app-root>
 * ```
 *
 * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
 * associated with this DOM element.
 *
 * Calling the function on `<app-root>` will return the `MyApp` instance.
 *
 *
 * @param element DOM element from which the component should be retrieved.
 * @returns Component instance associated with the element or `null` if there
 *    is no component associated with it.
 *
 * @publicApi
 * @globalApi ng
 */


function getComponent(element) {
  assertDomElement(element);
  var context = getLContext(element);
  if (context === null) return null;

  if (context.component === undefined) {
    context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
  }

  return context.component;
}
/**
 * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
 * view that the element is part of. Otherwise retrieves the instance of the component whose view
 * owns the element (in this case, the result is the same as calling `getOwningComponent`).
 *
 * @param element Element for which to get the surrounding component instance.
 * @returns Instance of the component that is around the element or null if the element isn't
 *    inside any component.
 *
 * @publicApi
 * @globalApi ng
 */


function getContext(element) {
  assertDomElement(element);
  var context = getLContext(element);
  return context === null ? null : context.lView[CONTEXT];
}
/**
 * Retrieves the component instance whose view contains the DOM element.
 *
 * For example, if `<child-comp>` is used in the template of `<app-comp>`
 * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
 * would return `<app-comp>`.
 *
 * @param elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @returns Component instance whose view owns the DOM element or null if the element is not
 *    part of a component view.
 *
 * @publicApi
 * @globalApi ng
 */


function getOwningComponent(elementOrDir) {
  var context = getLContext(elementOrDir);
  if (context === null) return null;
  var lView = context.lView;
  var parent;
  ngDevMode && assertLView(lView);

  while (lView[TVIEW].type === 2
  /* Embedded */
  && (parent = getLViewParent(lView))) {
    lView = parent;
  }

  return lView[FLAGS] & 512
  /* IsRoot */
  ? null : lView[CONTEXT];
}
/**
 * Retrieves all root components associated with a DOM element, directive or component instance.
 * Root components are those which have been bootstrapped by Angular.
 *
 * @param elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @returns Root components associated with the target object.
 *
 * @publicApi
 * @globalApi ng
 */


function getRootComponents(elementOrDir) {
  return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(getRootContext(elementOrDir).components);
}
/**
 * Retrieves an `Injector` associated with an element, component or directive instance.
 *
 * @param elementOrDir DOM element, component or directive instance for which to
 *    retrieve the injector.
 * @returns Injector associated with the element, component or directive instance.
 *
 * @publicApi
 * @globalApi ng
 */


function getInjector(elementOrDir) {
  var context = getLContext(elementOrDir);
  if (context === null) return Injector.NULL;
  var tNode = context.lView[TVIEW].data[context.nodeIndex];
  return new NodeInjector(tNode, context.lView);
}
/**
 * Retrieve a set of injection tokens at a given DOM node.
 *
 * @param element Element for which the injection tokens should be retrieved.
 */


function getInjectionTokens(element) {
  var context = getLContext(element);
  if (context === null) return [];
  var lView = context.lView;
  var tView = lView[TVIEW];
  var tNode = tView.data[context.nodeIndex];
  var providerTokens = [];
  var startIndex = tNode.providerIndexes & 1048575
  /* ProvidersStartIndexMask */
  ;
  var endIndex = tNode.directiveEnd;

  for (var i = startIndex; i < endIndex; i++) {
    var value = tView.data[i];

    if (isDirectiveDefHack(value)) {
      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
      // design flaw.  We should always store same type so that we can be monomorphic. The issue
      // is that for Components/Directives we store the def instead the type. The correct behavior
      // is that we should always be storing injectable type in this location.
      value = value.type;
    }

    providerTokens.push(value);
  }

  return providerTokens;
}
/**
 * Retrieves directive instances associated with a given DOM node. Does not include
 * component instances.
 *
 * @usageNotes
 * Given the following DOM structure:
 *
 * ```html
 * <app-root>
 *   <button my-button></button>
 *   <my-comp></my-comp>
 * </app-root>
 * ```
 *
 * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
 * directive that is associated with the DOM node.
 *
 * Calling `getDirectives` on `<my-comp>` will return an empty array.
 *
 * @param node DOM node for which to get the directives.
 * @returns Array of directives associated with the node.
 *
 * @publicApi
 * @globalApi ng
 */


function getDirectives(node) {
  // Skip text nodes because we can't have directives associated with them.
  if (node instanceof Text) {
    return [];
  }

  var context = getLContext(node);

  if (context === null) {
    return [];
  }

  var lView = context.lView;
  var tView = lView[TVIEW];
  var nodeIndex = context.nodeIndex;

  if (!(tView === null || tView === void 0 ? void 0 : tView.data[nodeIndex])) {
    return [];
  }

  if (context.directives === undefined) {
    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
  } // The `directives` in this case are a named array called `LComponentView`. Clone the
  // result so we don't expose an internal data structure in the user's console.


  return context.directives === null ? [] : (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(context.directives);
}
/**
 * Returns the debug (partial) metadata for a particular directive or component instance.
 * The function accepts an instance of a directive or component and returns the corresponding
 * metadata.
 *
 * @param directiveOrComponentInstance Instance of a directive or component
 * @returns metadata of the passed directive or component
 *
 * @publicApi
 * @globalApi ng
 */


function getDirectiveMetadata(directiveOrComponentInstance) {
  var constructor = directiveOrComponentInstance.constructor;

  if (!constructor) {
    throw new Error('Unable to find the instance constructor');
  } // In case a component inherits from a directive, we may have component and directive metadata
  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.


  var componentDef = getComponentDef(constructor);

  if (componentDef) {
    return {
      inputs: componentDef.inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }

  var directiveDef = getDirectiveDef(constructor);

  if (directiveDef) {
    return {
      inputs: directiveDef.inputs,
      outputs: directiveDef.outputs
    };
  }

  return null;
}
/**
 * Retrieve map of local references.
 *
 * The references are retrieved as a map of local reference name to element or directive instance.
 *
 * @param target DOM element, component or directive instance for which to retrieve
 *    the local references.
 */


function getLocalRefs(target) {
  var context = getLContext(target);
  if (context === null) return {};

  if (context.localRefs === undefined) {
    context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
  }

  return context.localRefs || {};
}
/**
 * Retrieves the host element of a component or directive instance.
 * The host element is the DOM element that matched the selector of the directive.
 *
 * @param componentOrDirective Component or directive instance for which the host
 *     element should be retrieved.
 * @returns Host element of the target.
 *
 * @publicApi
 * @globalApi ng
 */


function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
/**
 * Retrieves the rendered text for a given component.
 *
 * This function retrieves the host element of a component and
 * and then returns the `textContent` for that element. This implies
 * that the text returned will include re-projected content of
 * the component as well.
 *
 * @param component The component to return the content text for.
 */


function getRenderedText(component) {
  var hostElement = getHostElement(component);
  return hostElement.textContent || '';
}
/**
 * Retrieves a list of event listeners associated with a DOM element. The list does include host
 * listeners, but it does not include event listeners defined outside of the Angular context
 * (e.g. through `addEventListener`).
 *
 * @usageNotes
 * Given the following DOM structure:
 *
 * ```html
 * <app-root>
 *   <div (click)="doSomething()"></div>
 * </app-root>
 * ```
 *
 * Calling `getListeners` on `<div>` will return an object that looks as follows:
 *
 * ```ts
 * {
 *   name: 'click',
 *   element: <div>,
 *   callback: () => doSomething(),
 *   useCapture: false
 * }
 * ```
 *
 * @param element Element for which the DOM listeners should be retrieved.
 * @returns Array of event listeners on the DOM element.
 *
 * @publicApi
 * @globalApi ng
 */


function getListeners(element) {
  assertDomElement(element);
  var lContext = getLContext(element);
  if (lContext === null) return [];
  var lView = lContext.lView;
  var tView = lView[TVIEW];
  var lCleanup = lView[CLEANUP];
  var tCleanup = tView.cleanup;
  var listeners = [];

  if (tCleanup && lCleanup) {
    for (var i = 0; i < tCleanup.length;) {
      var firstParam = tCleanup[i++];
      var secondParam = tCleanup[i++];

      if (typeof firstParam === 'string') {
        var name = firstParam;
        var listenerElement = unwrapRNode(lView[secondParam]);
        var callback = lCleanup[tCleanup[i++]];
        var useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.
        // if useCaptureOrIndx is positive number then it in unsubscribe method
        // if useCaptureOrIndx is negative number then it is a Subscription

        var type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';
        var useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;

        if (element == listenerElement) {
          listeners.push({
            element: element,
            name: name,
            callback: callback,
            useCapture: useCapture,
            type: type
          });
        }
      }
    }
  }

  listeners.sort(sortListeners);
  return listeners;
}

function sortListeners(a, b) {
  if (a.name == b.name) return 0;
  return a.name < b.name ? -1 : 1;
}
/**
 * This function should not exist because it is megamorphic and only mostly correct.
 *
 * See call site for more info.
 */


function isDirectiveDefHack(obj) {
  return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
}
/**
 * Returns the attached `DebugNode` instance for an element in the DOM.
 *
 * @param element DOM element which is owned by an existing component's view.
 */


function getDebugNode(element) {
  if (ngDevMode && !(element instanceof Node)) {
    throw new Error('Expecting instance of DOM Element');
  }

  var lContext = getLContext(element);

  if (lContext === null) {
    return null;
  }

  var lView = lContext.lView;
  var nodeIndex = lContext.nodeIndex;

  if (nodeIndex !== -1) {
    var valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own
    // data. In this situation the TNode is not accessed at the same spot.

    var tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);
    ngDevMode && assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');
    return buildDebugNode(tNode, lView);
  }

  return null;
}
/**
 * Retrieve the component `LView` from component/element.
 *
 * NOTE: `LView` is a private and should not be leaked outside.
 *       Don't export this method to `ng.*` on window.
 *
 * @param target DOM element or component instance for which to retrieve the LView.
 */


function getComponentLView(target) {
  var lContext = getLContext(target);
  var nodeIndx = lContext.nodeIndex;
  var lView = lContext.lView;
  var componentLView = lView[nodeIndx];
  ngDevMode && assertLView(componentLView);
  return componentLView;
}
/** Asserts that a value is a DOM Element. */


function assertDomElement(value) {
  if (typeof Element !== 'undefined' && !(value instanceof Element)) {
    throw new Error('Expecting instance of DOM Element');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks a component for check (in case of OnPush components) and synchronously
 * performs change detection on the application this component belongs to.
 *
 * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
 *
 * @publicApi
 * @globalApi ng
 */


function applyChanges(component) {
  markDirty(component);
  getRootComponents(component).forEach(function (rootComponent) {
    return detectChanges(rootComponent);
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file introduces series of globally accessible debug tools
 * to allow for the Angular debugging story to function.
 *
 * To see this in action run the following command:
 *
 *   bazel run --config=ivy
 *   //packages/core/test/bundling/todo:devserver
 *
 *  Then load `localhost:5432` and start using the console tools.
 */

/**
 * This value reflects the property on the window where the dev
 * tools are patched (window.ng).
 * */


var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
var _published = false;
/**
 * Publishes a collection of default debug tools onto`window.ng`.
 *
 * These functions are available globally when Angular is in development
 * mode and are automatically stripped away from prod mode is on.
 */

function publishDefaultGlobalUtils() {
  if (!_published) {
    _published = true;
    /**
     * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
     * The contract of the function might be changed in any release and/or the function can be
     * removed completely.
     */

    publishGlobalUtil('ɵsetProfiler', setProfiler);
    publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata);
    publishGlobalUtil('getComponent', getComponent);
    publishGlobalUtil('getContext', getContext);
    publishGlobalUtil('getListeners', getListeners);
    publishGlobalUtil('getOwningComponent', getOwningComponent);
    publishGlobalUtil('getHostElement', getHostElement);
    publishGlobalUtil('getInjector', getInjector);
    publishGlobalUtil('getRootComponents', getRootComponents);
    publishGlobalUtil('getDirectives', getDirectives);
    publishGlobalUtil('applyChanges', applyChanges);
  }
}
/**
 * Publishes the given function to `window.ng` so that it can be
 * used from the browser console when an application is not in production.
 */


function publishGlobalUtil(name, fn) {
  if (typeof COMPILED === 'undefined' || !COMPILED) {
    // Note: we can't export `ng` when using closure enhanced optimization as:
    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
    // - we can't declare a closure extern as the namespace `ng` is already used within Google
    //   for typings for AngularJS (via `goog.provide('ng....')`).
    var w = _global;
    ngDevMode && assertDefined(fn, 'function not defined');

    if (w) {
      var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];

      if (!container) {
        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
      }

      container[name] = fn;
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$7 = function ɵ0$7(token, notFoundValue) {
  throwProviderNotFoundError(token, 'NullInjector');
}; // TODO: A hack to not pull in the NullInjector from @angular/core.


var NULL_INJECTOR$1 = {
  get: ɵ0$7
};
/**
 * Bootstraps a Component into an existing host element and returns an instance
 * of the component.
 *
 * Use this function to bootstrap a component into the DOM tree. Each invocation
 * of this function will create a separate tree of components, injectors and
 * change detection cycles and lifetimes. To dynamically insert a new component
 * into an existing tree such that it shares the same injection, change detection
 * and object lifetime, use {@link ViewContainer#createComponent}.
 *
 * @param componentType Component to bootstrap
 * @param options Optional parameters which control bootstrapping
 */

function renderComponent$1(componentType
/* Type as workaround for: Microsoft/TypeScript/issues/4881 */
) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  ngDevMode && publishDefaultGlobalUtils();
  ngDevMode && assertComponentType(componentType);
  var rendererFactory = opts.rendererFactory || domRendererFactory3;
  var sanitizer = opts.sanitizer || null;
  var componentDef = getComponentDef(componentType);
  if (componentDef.type != componentType) componentDef.type = componentType; // The first index of the first selector is the tag name.

  var componentTag = componentDef.selectors[0][0];
  var hostRenderer = rendererFactory.createRenderer(null, null);
  var hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
  var rootFlags = componentDef.onPush ? 64
  /* Dirty */
  | 512
  /* IsRoot */
  : 16
  /* CheckAlways */
  | 512
  /* IsRoot */
  ;
  var rootContext = createRootContext(opts.scheduler, opts.playerHandler);
  var renderer = rendererFactory.createRenderer(hostRNode, componentDef);
  var rootTView = createTView(0
  /* Root */
  , null, null, 1, 0, null, null, null, null, null);
  var rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null, opts.injector || null);
  enterView(rootView);
  var component;

  try {
    if (rendererFactory.begin) rendererFactory.begin();
    var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
    component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null); // create mode pass

    renderView(rootTView, rootView, null); // update mode pass

    refreshView(rootTView, rootView, null, null);
  } finally {
    leaveView();
    if (rendererFactory.end) rendererFactory.end();
  }

  return component;
}
/**
 * Creates the root component view and the root component node.
 *
 * @param rNode Render host element.
 * @param def ComponentDef
 * @param rootView The parent view where the host node is stored
 * @param rendererFactory Factory to be used for creating child renderers.
 * @param hostRenderer The current renderer
 * @param sanitizer The sanitizer, if provided
 *
 * @returns Component view created
 */


function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
  var tView = rootView[TVIEW];
  var index = HEADER_OFFSET;
  ngDevMode && assertIndexInRange(rootView, index);
  rootView[index] = rNode; // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at
  // the same time we want to communicate the debug `TNode` that this is a special `TNode`
  // representing a host element.

  var tNode = getOrCreateTNode(tView, index, 2
  /* Element */
  , '#host', null);
  var mergedAttrs = tNode.mergedAttrs = def.hostAttrs;

  if (mergedAttrs !== null) {
    computeStaticStyling(tNode, mergedAttrs, true);

    if (rNode !== null) {
      setUpAttributes(hostRenderer, rNode, mergedAttrs);

      if (tNode.classes !== null) {
        writeDirectClass(hostRenderer, rNode, tNode.classes);
      }

      if (tNode.styles !== null) {
        writeDirectStyle(hostRenderer, rNode, tNode.styles);
      }
    }
  }

  var viewRenderer = rendererFactory.createRenderer(rNode, def);
  var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64
  /* Dirty */
  : 16
  /* CheckAlways */
  , rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null);

  if (tView.firstCreatePass) {
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
    markAsComponentHost(tView, tNode);
    initTNodeFlags(tNode, rootView.length, 1);
  }

  addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST

  return rootView[index] = componentView;
}
/**
 * Creates a root component and sets it up with features and host bindings. Shared by
 * renderComponent() and ViewContainerRef.createComponent().
 */


function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
  var tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData

  var component = instantiateRootComponent(tView, rootLView, componentDef);
  rootContext.components.push(component);
  componentView[CONTEXT] = component;
  hostFeatures && hostFeatures.forEach(function (feature) {
    return feature(component, componentDef);
  }); // We want to generate an empty QueryList for root content queries for backwards
  // compatibility with ViewEngine.

  if (componentDef.contentQueries) {
    var tNode = getCurrentTNode();
    ngDevMode && assertDefined(tNode, 'TNode expected');
    componentDef.contentQueries(1
    /* Create */
    , component, tNode.directiveStart);
  }

  var rootTNode = getCurrentTNode();
  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');

  if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
    setSelectedIndex(rootTNode.index);
    var rootTView = rootLView[TVIEW];
    registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);
    invokeHostBindingsInCreationMode(componentDef, component);
  }

  return component;
}

function createRootContext(scheduler, playerHandler) {
  return {
    components: [],
    scheduler: scheduler || defaultScheduler,
    clean: CLEAN_PROMISE,
    playerHandler: playerHandler || null,
    flags: 0
    /* Empty */

  };
}
/**
 * Used to enable lifecycle hooks on the root component.
 *
 * Include this feature when calling `renderComponent` if the root component
 * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
 * be called properly.
 *
 * Example:
 *
 * ```
 * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
 * ```
 */


function LifecycleHooksFeature(component, def) {
  var lView = readPatchedLView(component);
  ngDevMode && assertDefined(lView, 'LView is required');
  var tView = lView[TVIEW];
  var tNode = getCurrentTNode();
  ngDevMode && assertDefined(tNode, 'TNode is required');
  registerPostOrderHooks(tView, tNode);
}
/**
 * Wait on component until it is rendered.
 *
 * This function returns a `Promise` which is resolved when the component's
 * change detection is executed. This is determined by finding the scheduler
 * associated with the `component`'s render tree and waiting until the scheduler
 * flushes. If nothing is scheduled, the function returns a resolved promise.
 *
 * Example:
 * ```
 * await whenRendered(myComponent);
 * ```
 *
 * @param component Component to wait upon
 * @returns Promise which resolves when the component is rendered.
 */


function whenRendered(component) {
  return getRootContext(component).clean;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
/**
 * Merges the definition from a super class to a sub class.
 * @param definition The definition that is a SubClass of another directive of component
 *
 * @codeGenApi
 */


function ɵɵInheritDefinitionFeature(definition) {
  var superType = getSuperType(definition.type);
  var shouldInheritFields = true;
  var inheritanceChain = [definition];

  while (superType) {
    var superDef = undefined;

    if (isComponentDef(definition)) {
      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
      superDef = superType.ɵcmp || superType.ɵdir;
    } else {
      if (superType.ɵcmp) {
        throw new Error('Directives cannot inherit Components');
      } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.


      superDef = superType.ɵdir;
    }

    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that
        // would've justified object creation. Unwrap them if necessary.

        var writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings

        var superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries

        var superViewQuery = superDef.viewQuery;
        var superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs

        fillProperties(definition.inputs, superDef.inputs);
        fillProperties(definition.declaredInputs, superDef.declaredInputs);
        fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.
        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).

        if (isComponentDef(superDef) && superDef.data.animation) {
          // If super def is a Component, the `definition` is also a Component, since Directives can
          // not inherit Components (we throw an error above and cannot reach this code).
          var defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      } // Run parent features


      var features = superDef.features;

      if (features) {
        for (var i = 0; i < features.length; i++) {
          var feature = features[i];

          if (feature && feature.ngInherit) {
            feature(definition);
          } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
          // def already has all the necessary information inherited from its super class(es), so we
          // can stop merging fields from super classes. However we need to iterate through the
          // prototype chain to look for classes that might contain other "features" (like
          // NgOnChanges), which we should invoke for the original `definition`. We set the
          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
          // logic and only invoking functions from the "features" list.


          if (feature === ɵɵInheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }

    superType = Object.getPrototypeOf(superType);
  }

  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
/**
 * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
 *
 * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
 * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
 * type.
 */


function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  var hostVars = 0;
  var hostAttrs = null; // We process the inheritance order from the base to the leaves here.

  for (var i = inheritanceChain.length - 1; i >= 0; i--) {
    var def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.

    def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.

    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}

function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}

function inheritViewQuery(definition, superViewQuery) {
  var prevViewQuery = definition.viewQuery;

  if (prevViewQuery) {
    definition.viewQuery = function (rf, ctx) {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}

function inheritContentQueries(definition, superContentQueries) {
  var prevContentQueries = definition.contentQueries;

  if (prevContentQueries) {
    definition.contentQueries = function (rf, ctx, directiveIndex) {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}

function inheritHostBindings(definition, superHostBindings) {
  var prevHostBindings = definition.hostBindings;

  if (prevHostBindings) {
    definition.hostBindings = function (rf, ctx) {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Fields which exist on either directive or component definitions, and need to be copied from
 * parent to child classes by the `ɵɵCopyDefinitionFeature`.
 */


var COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.
'providersResolver' // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
// as inputs, outputs, and host binding functions.
];
/**
 * Fields which exist only on component definitions, and need to be copied from parent to child
 * classes by the `ɵɵCopyDefinitionFeature`.
 *
 * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
 * since those should go in `COPY_DIRECTIVE_FIELDS` above.
 */

var COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template
// semantics.
'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.
'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.
'schemas'];
/**
 * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
 * definition.
 *
 * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
 * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
 * generates a skeleton definition on the child class, and applies this feature.
 *
 * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
 * including things like the component template function.
 *
 * @param definition The definition of a child class which inherits from a parent class with its
 * own definition.
 *
 * @codeGenApi
 */

function ɵɵCopyDefinitionFeature(definition) {
  var superType = getSuperType(definition.type);
  var superDef = undefined;

  if (isComponentDef(definition)) {
    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
    superDef = superType.ɵcmp;
  } else {
    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
    superDef = superType.ɵdir;
  } // Needed because `definition` fields are readonly.


  var defAny = definition; // Copy over any fields that apply to either directives or components.

  var _iterator2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(COPY_DIRECTIVE_FIELDS),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _field = _step2.value;
      defAny[_field] = superDef[_field];
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  if (isComponentDef(superDef)) {
    // Copy over any component-specific fields.
    var _iterator3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(COPY_COMPONENT_FIELDS),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var field = _step3.value;
        defAny[field] = superDef[field];
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _symbolIterator = null;

function getSymbolIterator() {
  if (!_symbolIterator) {
    var _Symbol = _global['Symbol'];

    if (_Symbol && _Symbol.iterator) {
      _symbolIterator = _Symbol.iterator;
    } else {
      // es6-shim specific logic
      var keys = Object.getOwnPropertyNames(Map.prototype);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
          _symbolIterator = key;
        }
      }
    }
  }

  return _symbolIterator;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function devModeEqual(a, b) {
  var isListLikeIterableA = isListLikeIterable(a);
  var isListLikeIterableB = isListLikeIterable(b);

  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    var isAObject = a && (typeof a === 'object' || typeof a === 'function');
    var isBObject = b && (typeof b === 'object' || typeof b === 'function');

    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}
/**
 * Indicates that the result of a {@link Pipe} transformation has changed even though the
 * reference has not changed.
 *
 * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
 * is stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 *
 * @publicApi
 * @deprecated from v10 stop using. (No replacement, deemed unnecessary.)
 */


var WrappedValue = /*#__PURE__*/function () {
  function WrappedValue(value) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, WrappedValue);

    this.wrapped = value;
  }
  /** Creates a wrapped value. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(WrappedValue, null, [{
    key: "wrap",
    value: function wrap(value) {
      return new WrappedValue(value);
    }
    /**
     * Returns the underlying value of a wrapped value.
     * Returns the given `value` when it is not wrapped.
     **/

  }, {
    key: "unwrap",
    value: function unwrap(value) {
      return WrappedValue.isWrapped(value) ? value.wrapped : value;
    }
    /** Returns true if `value` is a wrapped value. */

  }, {
    key: "isWrapped",
    value: function isWrapped(value) {
      return value instanceof WrappedValue;
    }
  }]);

  return WrappedValue;
}();

function isListLikeIterable(obj) {
  if (!isJsObject(obj)) return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
}

function areIterablesEqual(a, b, comparator) {
  var iterator1 = a[getSymbolIterator()]();
  var iterator2 = b[getSymbolIterator()]();

  while (true) {
    var item1 = iterator1.next();
    var item2 = iterator2.next();
    if (item1.done && item2.done) return true;
    if (item1.done || item2.done) return false;
    if (!comparator(item1.value, item2.value)) return false;
  }
}

function iterateListLike(obj, fn) {
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      fn(obj[i]);
    }
  } else {
    var iterator = obj[getSymbolIterator()]();
    var item;

    while (!(item = iterator.next()).done) {
      fn(item.value);
    }
  }
}

function isJsObject(o) {
  return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO(misko): consider inlining

/** Updates binding and returns the value. */


function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
/** Gets the current binding value. */


function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
  return lView[bindingIndex];
}
/**
 * Updates binding if changed, then returns whether it was updated.
 *
 * This function also checks the `CheckNoChangesMode` and throws if changes are made.
 * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
 * behavior.
 *
 * @param lView current `LView`
 * @param bindingIndex The binding in the `LView` to check
 * @param value New value to check against `lView[bindingIndex]`
 * @returns `true` if the bindings has changed. (Throws if binding has changed during
 *          `CheckNoChangesMode`)
 */


function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
  ngDevMode && assertLessThan(bindingIndex, lView.length, "Slot should have been initialized to NO_CHANGE");
  var oldValue = lView[bindingIndex];

  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      // View engine didn't report undefined values as changed on the first checkNoChanges pass
      // (before the change detection was run).
      var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;

      if (!devModeEqual(oldValueToCompare, value)) {
        var details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
      } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
      // For this reason we exit as if no change. The early exit is needed to prevent the changed
      // value to be written into `LView` (If we would write the new value that we would not see it
      // as change on next CD.)


      return false;
    }

    lView[bindingIndex] = value;
    return true;
  }
}
/** Updates 2 bindings if changed, then returns whether either was updated. */


function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  var different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
/** Updates 3 bindings if changed, then returns whether any was updated. */


function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
/** Updates 4 bindings if changed, then returns whether any was updated. */


function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Updates the value of or removes a bound attribute on an Element.
 *
 * Used in the case of `[attr.title]="value"`
 *
 * @param name name The name of the attribute.
 * @param value value The attribute is removed when value is `null` or `undefined`.
 *                  Otherwise the attribute value is set to the stringified value.
 * @param sanitizer An optional function used to sanitize the value.
 * @param namespace Optional namespace to use when setting the attribute.
 *
 * @codeGenApi
 */


function ɵɵattribute(name, value, sanitizer, namespace) {
  var lView = getLView();
  var bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
  }

  return ɵɵattribute;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create interpolation bindings with a variable number of expressions.
 *
 * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
 * Those are faster because there is no need to create an array of expressions and iterate over it.
 *
 * `values`:
 * - has static text at even indexes,
 * - has evaluated expressions at odd indexes.
 *
 * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
 */


function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
  var isBindingUpdated = false;
  var bindingIndex = getBindingIndex();

  for (var i = 1; i < values.length; i += 2) {
    // Check if bindings (odd indexes) have changed
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }

  setBindingIndex(bindingIndex);

  if (!isBindingUpdated) {
    return NO_CHANGE;
  } // Build the updated content


  var content = values[0];

  for (var _i6 = 1; _i6 < values.length; _i6 += 2) {
    content += renderStringify(values[_i6]) + values[_i6 + 1];
  }

  return content;
}
/**
 * Creates an interpolation binding with 1 expression.
 *
 * @param prefix static value used for concatenation only.
 * @param v0 value checked for change.
 * @param suffix static value used for concatenation only.
 */


function interpolation1(lView, prefix, v0, suffix) {
  var different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 2 expressions.
 */


function interpolation2(lView, prefix, v0, i0, v1, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 3 expressions.
 */


function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
/**
 * Create an interpolation binding with 4 expressions.
 */


function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 5 expressions.
 */


function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 6 expressions.
 */


function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 7 expressions.
 */


function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 8 expressions.
 */


function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  var bindingIndex = getBindingIndex();
  var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
/**
 *
 * Update an interpolated attribute on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
  }

  return ɵɵattributeInterpolate1;
}
/**
 *
 * Update an interpolated attribute on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
  }

  return ɵɵattributeInterpolate2;
}
/**
 *
 * Update an interpolated attribute on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }

  return ɵɵattributeInterpolate3;
}
/**
 *
 * Update an interpolated attribute on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }

  return ɵɵattributeInterpolate4;
}
/**
 *
 * Update an interpolated attribute on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }

  return ɵɵattributeInterpolate5;
}
/**
 *
 * Update an interpolated attribute on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }

  return ɵɵattributeInterpolate6;
}
/**
 *
 * Update an interpolated attribute on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }

  return ɵɵattributeInterpolate7;
}
/**
 *
 * Update an interpolated attribute on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
  var lView = getLView();
  var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }

  return ɵɵattributeInterpolate8;
}
/**
 * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * @param attrName The name of the attribute to update.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
  var lView = getLView();
  var interpolated = interpolationV(lView, values);

  if (interpolated !== NO_CHANGE) {
    var tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);

    if (ngDevMode) {
      var interpolationInBetween = [values[0]]; // prefix

      for (var i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }

      storePropertyBindingMetadata.apply(void 0, [getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
    }
  }

  return ɵɵattributeInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  var tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the "create" only version

  var tNode = getOrCreateTNode(tView, index, 4
  /* Container */
  , tagName || null, getConstant(tViewConsts, attrsIndex));
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  registerPostOrderHooks(tView, tNode);
  var embeddedTView = tNode.tViews = createTView(2
  /* Embedded */
  , tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);

  if (tView.queries !== null) {
    tView.queries.template(tView, tNode);
    embeddedTView.queries = tView.queries.embeddedTView(tNode);
  }

  return tNode;
}
/**
 * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
 *
 * <ng-template #foo>
 *    <div></div>
 * </ng-template>
 *
 * @param index The index of the container in the data array
 * @param templateFn Inline template
 * @param decls The number of nodes, local refs, and pipes for this template
 * @param vars The number of bindings for this template
 * @param tagName The name of the container element, if applicable
 * @param attrsIndex Index of template attributes in the `consts` array.
 * @param localRefs Index of the local references in the `consts` array.
 * @param localRefExtractor A function which extracts local-refs values from the template.
 *        Defaults to the current element associated with the local-ref.
 *
 * @codeGenApi
 */


function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  var lView = getLView();
  var tView = getTView();
  var adjustedIndex = index + HEADER_OFFSET;
  var tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, false);
  var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
  appendChild(tView, lView, comment, tNode);
  attachPatchData(comment, lView);
  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
  }

  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode, localRefExtractor);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Store a value in the `data` at a given `index`. */


function store(tView, lView, index, value) {
  // We don't store any static data for local variables, so the first time
  // we see the template, we should store as null to avoid a sparse array
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }

  lView[index] = value;
}
/**
 * Retrieves a local reference from the current contextViewData.
 *
 * If the reference to retrieve is in a parent view, this instruction is used in conjunction
 * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
 *
 * @param index The index of the local ref in contextViewData.
 *
 * @codeGenApi
 */


function ɵɵreference(index) {
  var contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of @angular/core.
 */


var angularCoreDiEnv = {
  'ɵɵdefineInjectable': ɵɵdefineInjectable,
  'ɵɵdefineInjector': ɵɵdefineInjector,
  'ɵɵinject': ɵɵinject,
  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
  'resolveForwardRef': resolveForwardRef
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
 * injectable def (`ɵprov`) onto the injectable type.
 */

function compileInjectable(type, meta) {
  var ngInjectableDef = null;
  var ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it

  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: function get() {
        if (ngInjectableDef === null) {
          var compiler = getCompilerFacade({
            usage: 0
            /* Decorator */
            ,
            kind: 'injectable',
            type: type
          });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275prov.js"), getInjectableMetadata(type, meta));
        }

        return ngInjectableDef;
      }
    });
  } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it


  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: function get() {
        if (ngFactoryDef === null) {
          var compiler = getCompilerFacade({
            usage: 0
            /* Decorator */
            ,
            kind: 'injectable',
            type: type
          });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
            name: type.name,
            type: type,
            typeArgumentCount: 0,
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }

        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}

var ɵ0$8 = getClosureSafeProperty;
var USE_VALUE$1 = getClosureSafeProperty({
  provide: String,
  useValue: ɵ0$8
});

function isUseClassProvider(meta) {
  return meta.useClass !== undefined;
}

function isUseValueProvider(meta) {
  return USE_VALUE$1 in meta;
}

function isUseFactoryProvider(meta) {
  return meta.useFactory !== undefined;
}

function isUseExistingProvider(meta) {
  return meta.useExisting !== undefined;
}

function getInjectableMetadata(type, srcMeta) {
  // Allow the compilation of a class with a `@Injectable()` decorator without parameters
  var meta = srcMeta || {
    providedIn: null
  };
  var compilerMeta = {
    name: type.name,
    type: type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };

  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
    compilerMeta.deps = convertDependencies(meta.deps);
  } // Check to see if the user explicitly provided a `useXxxx` property.


  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }

  return compilerMeta;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$9 = getClosureSafeProperty;
var USE_VALUE$2 = getClosureSafeProperty({
  provide: String,
  useValue: ɵ0$9
});

function convertInjectableProviderToFactory(type, provider) {
  if (!provider) {
    var reflectionCapabilities = new ReflectionCapabilities();
    var deps = reflectionCapabilities.parameters(type); // TODO - convert to flags.

    return function () {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(type, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(deps)));
    };
  }

  if (USE_VALUE$2 in provider) {
    var valueProvider = provider;
    return function () {
      return valueProvider.useValue;
    };
  } else if (provider.useExisting) {
    var existingProvider = provider;
    return function () {
      return ɵɵinject(resolveForwardRef(existingProvider.useExisting));
    };
  } else if (provider.useFactory) {
    var factoryProvider = provider;
    return function () {
      return factoryProvider.useFactory.apply(factoryProvider, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(factoryProvider.deps || EMPTY_ARRAY)));
    };
  } else if (provider.useClass) {
    var classProvider = provider;
    var _deps = provider.deps;

    if (!_deps) {
      var _reflectionCapabilities = new ReflectionCapabilities();

      _deps = _reflectionCapabilities.parameters(type);
    }

    return function () {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(resolveForwardRef(classProvider.useClass), (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(_deps)));
    };
  } else {
    var _deps2 = provider.deps;

    if (!_deps2) {
      var _reflectionCapabilities2 = new ReflectionCapabilities();

      _deps2 = _reflectionCapabilities2.parameters(type);
    }

    return function () {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(type, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(injectArgs(_deps2)));
    };
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$a = function ɵ0$a(type, meta) {
  return SWITCH_COMPILE_INJECTABLE(type, meta);
};
/**
 * Injectable decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, ɵ0$a);
/**
 * Supports @Injectable() in JIT mode for Render2.
 */

function render2CompileInjectable(injectableType, options) {
  if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
    injectableType.ɵprov = ɵɵdefineInjectable({
      token: injectableType,
      providedIn: options.providedIn,
      factory: convertInjectableProviderToFactory(injectableType, options)
    });
  }
}

var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;
var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function findFirstClosedCycle(keys) {
  var res = [];

  for (var i = 0; i < keys.length; ++i) {
    if (res.indexOf(keys[i]) > -1) {
      res.push(keys[i]);
      return res;
    }

    res.push(keys[i]);
  }

  return res;
}

function constructResolvingPath(keys) {
  if (keys.length > 1) {
    var reversed = findFirstClosedCycle(keys.slice().reverse());
    var tokenStrs = reversed.map(function (k) {
      return stringify(k.token);
    });
    return ' (' + tokenStrs.join(' -> ') + ')';
  }

  return '';
}

function injectionError(injector, key, constructResolvingMessage, originalError) {
  var keys = [key];
  var errMsg = constructResolvingMessage(keys);
  var error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);
  error.addKey = addKey;
  error.keys = keys;
  error.injectors = [injector];
  error.constructResolvingMessage = constructResolvingMessage;
  error[ERROR_ORIGINAL_ERROR] = originalError;
  return error;
}

function addKey(injector, key) {
  this.injectors.push(injector);
  this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property

  this.message = this.constructResolvingMessage(this.keys);
}
/**
 * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
 * {@link Injector} does not have a {@link Provider} for the given key.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 */


function noProviderError(injector, key) {
  return injectionError(injector, key, function (keys) {
    var first = stringify(keys[0].token);
    return "No provider for ".concat(first, "!").concat(constructResolvingPath(keys));
  });
}
/**
 * Thrown when dependencies form a cycle.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 */


function cyclicDependencyError(injector, key) {
  return injectionError(injector, key, function (keys) {
    return "Cannot instantiate cyclic dependency!".concat(constructResolvingPath(keys));
  });
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);

 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 */


function instantiationError(injector, originalException, originalStack, key) {
  return injectionError(injector, key, function (keys) {
    var first = stringify(keys[0].token);
    return "".concat(originalException.message, ": Error during instantiation of ").concat(first, "!").concat(constructResolvingPath(keys), ".");
  }, originalException);
}
/**
 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
 * creation.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 */


function invalidProviderError(provider) {
  return Error("Invalid provider - only instances of Provider and Type are allowed, got: ".concat(provider));
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 *
 */


function noAnnotationError(typeOrFunc, params) {
  var signature = [];

  for (var i = 0, ii = params.length; i < ii; i++) {
    var parameter = params[i];

    if (!parameter || parameter.length == 0) {
      signature.push('?');
    } else {
      signature.push(parameter.map(stringify).join(' '));
    }
  }

  return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 *
 */


function outOfBoundsError(index) {
  return Error("Index ".concat(index, " is out-of-bounds."));
} // TODO: add a working example after alpha38 is released

/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 */


function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
  return Error("Cannot mix multi providers and regular providers, got: ".concat(provider1, " ").concat(provider2));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A unique object used for retrieving items from the {@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 *
 * @deprecated No replacement
 * @publicApi
 */


var ReflectiveKey = /*#__PURE__*/function () {
  /**
   * Private
   */
  function ReflectiveKey(token, id) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ReflectiveKey);

    this.token = token;
    this.id = id;

    if (!token) {
      throw new Error('Token must be defined!');
    }

    this.displayName = stringify(this.token);
  }
  /**
   * Retrieves a `Key` for a token.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ReflectiveKey, null, [{
    key: "get",
    value: function get(token) {
      return _globalKeyRegistry.get(resolveForwardRef(token));
    }
    /**
     * @returns the number of keys registered in the system.
     */

  }, {
    key: "numberOfKeys",
    get: function get() {
      return _globalKeyRegistry.numberOfKeys;
    }
  }]);

  return ReflectiveKey;
}();

var KeyRegistry = /*#__PURE__*/function () {
  function KeyRegistry() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, KeyRegistry);

    this._allKeys = new Map();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(KeyRegistry, [{
    key: "get",
    value: function get(token) {
      if (token instanceof ReflectiveKey) return token;

      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }

      var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);

      this._allKeys.set(token, newKey);

      return newKey;
    }
  }, {
    key: "numberOfKeys",
    get: function get() {
      return this._allKeys.size;
    }
  }]);

  return KeyRegistry;
}();

var _globalKeyRegistry = new KeyRegistry();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */


var Reflector = /*#__PURE__*/function () {
  function Reflector(reflectionCapabilities) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Reflector);

    this.reflectionCapabilities = reflectionCapabilities;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Reflector, [{
    key: "updateCapabilities",
    value: function updateCapabilities(caps) {
      this.reflectionCapabilities = caps;
    }
  }, {
    key: "factory",
    value: function factory(type) {
      return this.reflectionCapabilities.factory(type);
    }
  }, {
    key: "parameters",
    value: function parameters(typeOrFunc) {
      return this.reflectionCapabilities.parameters(typeOrFunc);
    }
  }, {
    key: "annotations",
    value: function annotations(typeOrFunc) {
      return this.reflectionCapabilities.annotations(typeOrFunc);
    }
  }, {
    key: "propMetadata",
    value: function propMetadata(typeOrFunc) {
      return this.reflectionCapabilities.propMetadata(typeOrFunc);
    }
  }, {
    key: "hasLifecycleHook",
    value: function hasLifecycleHook(type, lcProperty) {
      return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    }
  }, {
    key: "getter",
    value: function getter(name) {
      return this.reflectionCapabilities.getter(name);
    }
  }, {
    key: "setter",
    value: function setter(name) {
      return this.reflectionCapabilities.setter(name);
    }
  }, {
    key: "method",
    value: function method(name) {
      return this.reflectionCapabilities.method(name);
    }
  }, {
    key: "importUri",
    value: function importUri(type) {
      return this.reflectionCapabilities.importUri(type);
    }
  }, {
    key: "resourceUri",
    value: function resourceUri(type) {
      return this.reflectionCapabilities.resourceUri(type);
    }
  }, {
    key: "resolveIdentifier",
    value: function resolveIdentifier(name, moduleUrl, members, runtime) {
      return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
    }
  }, {
    key: "resolveEnum",
    value: function resolveEnum(identifier, name) {
      return this.reflectionCapabilities.resolveEnum(identifier, name);
    }
  }]);

  return Reflector;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */


var reflector = new Reflector(new ReflectionCapabilities());
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */

var ReflectiveDependency = /*#__PURE__*/function () {
  function ReflectiveDependency(key, optional, visibility) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ReflectiveDependency);

    this.key = key;
    this.optional = optional;
    this.visibility = visibility;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ReflectiveDependency, null, [{
    key: "fromKey",
    value: function fromKey(key) {
      return new ReflectiveDependency(key, false, null);
    }
  }]);

  return ReflectiveDependency;
}();

var _EMPTY_LIST = [];

var ResolvedReflectiveProvider_ = function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ResolvedReflectiveProvider_);

  this.key = key;
  this.resolvedFactories = resolvedFactories;
  this.multiProvider = multiProvider;
  this.resolvedFactory = this.resolvedFactories[0];
};
/**
 * An internal resolved representation of a factory function created by resolving `Provider`.
 * @publicApi
 */


var ResolvedReflectiveFactory = function ResolvedReflectiveFactory(
/**
 * Factory function which can return an instance of an object represented by a key.
 */
factory,
/**
 * Arguments (dependencies) to the `factory` function.
 */
dependencies) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ResolvedReflectiveFactory);

  this.factory = factory;
  this.dependencies = dependencies;
};
/**
 * Resolve a single provider.
 */


function resolveReflectiveFactory(provider) {
  var factoryFn;
  var resolvedDeps;

  if (provider.useClass) {
    var useClass = resolveForwardRef(provider.useClass);
    factoryFn = reflector.factory(useClass);
    resolvedDeps = _dependenciesFor(useClass);
  } else if (provider.useExisting) {
    factoryFn = function factoryFn(aliasInstance) {
      return aliasInstance;
    };

    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
  } else if (provider.useFactory) {
    factoryFn = provider.useFactory;
    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
  } else {
    factoryFn = function factoryFn() {
      return provider.useValue;
    };

    resolvedDeps = _EMPTY_LIST;
  }

  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the `Provider` into `ResolvedProvider`.
 *
 * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
 * syntax.
 */


function resolveReflectiveProvider(provider) {
  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
}
/**
 * Resolve a list of Providers.
 */


function resolveReflectiveProviders(providers) {
  var normalized = _normalizeProviders(providers, []);

  var resolved = normalized.map(resolveReflectiveProvider);
  var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
  return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
 * multi providers have been merged.
 */


function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
  for (var i = 0; i < providers.length; i++) {
    var provider = providers[i];
    var existing = normalizedProvidersMap.get(provider.key.id);

    if (existing) {
      if (provider.multiProvider !== existing.multiProvider) {
        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
      }

      if (provider.multiProvider) {
        for (var j = 0; j < provider.resolvedFactories.length; j++) {
          existing.resolvedFactories.push(provider.resolvedFactories[j]);
        }
      } else {
        normalizedProvidersMap.set(provider.key.id, provider);
      }
    } else {
      var resolvedProvider = void 0;

      if (provider.multiProvider) {
        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
      } else {
        resolvedProvider = provider;
      }

      normalizedProvidersMap.set(provider.key.id, resolvedProvider);
    }
  }

  return normalizedProvidersMap;
}

function _normalizeProviders(providers, res) {
  providers.forEach(function (b) {
    if (b instanceof Type) {
      res.push({
        provide: b,
        useClass: b
      });
    } else if (b && typeof b == 'object' && b.provide !== undefined) {
      res.push(b);
    } else if (Array.isArray(b)) {
      _normalizeProviders(b, res);
    } else {
      throw invalidProviderError(b);
    }
  });
  return res;
}

function constructDependencies(typeOrFunc, dependencies) {
  if (!dependencies) {
    return _dependenciesFor(typeOrFunc);
  } else {
    var params = dependencies.map(function (t) {
      return [t];
    });
    return dependencies.map(function (t) {
      return _extractToken(typeOrFunc, t, params);
    });
  }
}

function _dependenciesFor(typeOrFunc) {
  var params = reflector.parameters(typeOrFunc);
  if (!params) return [];

  if (params.some(function (p) {
    return p == null;
  })) {
    throw noAnnotationError(typeOrFunc, params);
  }

  return params.map(function (p) {
    return _extractToken(typeOrFunc, p, params);
  });
}

function _extractToken(typeOrFunc, metadata, params) {
  var token = null;
  var optional = false;

  if (!Array.isArray(metadata)) {
    if (metadata instanceof Inject) {
      return _createDependency(metadata.token, optional, null);
    } else {
      return _createDependency(metadata, optional, null);
    }
  }

  var visibility = null;

  for (var i = 0; i < metadata.length; ++i) {
    var paramMetadata = metadata[i];

    if (paramMetadata instanceof Type) {
      token = paramMetadata;
    } else if (paramMetadata instanceof Inject) {
      token = paramMetadata.token;
    } else if (paramMetadata instanceof Optional) {
      optional = true;
    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
      visibility = paramMetadata;
    } else if (paramMetadata instanceof InjectionToken) {
      token = paramMetadata;
    }
  }

  token = resolveForwardRef(token);

  if (token != null) {
    return _createDependency(token, optional, visibility);
  } else {
    throw noAnnotationError(typeOrFunc, params);
  }
}

function _createDependency(token, optional, visibility) {
  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Threshold for the dynamic version


var UNDEFINED = {};
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * @usageNotes
 * ### Example
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * @Injectable()
 * class Engine {
 * }
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
 * @publicApi
 */

var ReflectiveInjector = /*#__PURE__*/function () {
  function ReflectiveInjector() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ReflectiveInjector);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ReflectiveInjector, null, [{
    key: "resolve",
    value:
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of `ResolvedReflectiveProvider`s.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     */
    function resolve(providers) {
      return resolveReflectiveProviders(providers);
    }
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, `Provider`,
     * or a recursive array of more providers.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     */

  }, {
    key: "resolveAndCreate",
    value: function resolveAndCreate(providers, parent) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    }
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     */

  }, {
    key: "fromResolvedProviders",
    value: function fromResolvedProviders(providers, parent) {
      return new ReflectiveInjector_(providers, parent);
    }
  }]);

  return ReflectiveInjector;
}();

var ReflectiveInjector_ = /*#__PURE__*/function () {
  /**
   * Private
   */
  function ReflectiveInjector_(_providers, _parent) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ReflectiveInjector_);

    /** @internal */
    this._constructionCounter = 0;
    this._providers = _providers;
    this.parent = _parent || null;
    var len = _providers.length;
    this.keyIds = [];
    this.objs = [];

    for (var i = 0; i < len; i++) {
      this.keyIds[i] = _providers[i].key.id;
      this.objs[i] = UNDEFINED;
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ReflectiveInjector_, [{
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
      return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    }
  }, {
    key: "resolveAndCreateChild",
    value: function resolveAndCreateChild(providers) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return this.createChildFromResolved(ResolvedReflectiveProviders);
    }
  }, {
    key: "createChildFromResolved",
    value: function createChildFromResolved(providers) {
      var inj = new ReflectiveInjector_(providers);
      inj.parent = this;
      return inj;
    }
  }, {
    key: "resolveAndInstantiate",
    value: function resolveAndInstantiate(provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    }
  }, {
    key: "instantiateResolved",
    value: function instantiateResolved(provider) {
      return this._instantiateProvider(provider);
    }
  }, {
    key: "getProviderAtIndex",
    value: function getProviderAtIndex(index) {
      if (index < 0 || index >= this._providers.length) {
        throw outOfBoundsError(index);
      }

      return this._providers[index];
    }
    /** @internal */

  }, {
    key: "_new",
    value: function _new(provider) {
      if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
        throw cyclicDependencyError(this, provider.key);
      }

      return this._instantiateProvider(provider);
    }
  }, {
    key: "_getMaxNumberOfObjects",
    value: function _getMaxNumberOfObjects() {
      return this.objs.length;
    }
  }, {
    key: "_instantiateProvider",
    value: function _instantiateProvider(provider) {
      if (provider.multiProvider) {
        var res = [];

        for (var i = 0; i < provider.resolvedFactories.length; ++i) {
          res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
        }

        return res;
      } else {
        return this._instantiate(provider, provider.resolvedFactories[0]);
      }
    }
  }, {
    key: "_instantiate",
    value: function _instantiate(provider, ResolvedReflectiveFactory) {
      var _this5 = this;

      var factory = ResolvedReflectiveFactory.factory;
      var deps;

      try {
        deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {
          return _this5._getByReflectiveDependency(dep);
        });
      } catch (e) {
        if (e.addKey) {
          e.addKey(this, provider.key);
        }

        throw e;
      }

      var obj;

      try {
        obj = factory.apply(void 0, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(deps));
      } catch (e) {
        throw instantiationError(this, e, e.stack, provider.key);
      }

      return obj;
    }
  }, {
    key: "_getByReflectiveDependency",
    value: function _getByReflectiveDependency(dep) {
      return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    }
  }, {
    key: "_getByKey",
    value: function _getByKey(key, visibility, notFoundValue) {
      if (key === ReflectiveInjector_.INJECTOR_KEY) {
        return this;
      }

      if (visibility instanceof Self) {
        return this._getByKeySelf(key, notFoundValue);
      } else {
        return this._getByKeyDefault(key, notFoundValue, visibility);
      }
    }
  }, {
    key: "_getObjByKeyId",
    value: function _getObjByKeyId(keyId) {
      for (var i = 0; i < this.keyIds.length; i++) {
        if (this.keyIds[i] === keyId) {
          if (this.objs[i] === UNDEFINED) {
            this.objs[i] = this._new(this._providers[i]);
          }

          return this.objs[i];
        }
      }

      return UNDEFINED;
    }
    /** @internal */

  }, {
    key: "_throwOrNull",
    value: function _throwOrNull(key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) {
        return notFoundValue;
      } else {
        throw noProviderError(this, key);
      }
    }
    /** @internal */

  }, {
    key: "_getByKeySelf",
    value: function _getByKeySelf(key, notFoundValue) {
      var obj = this._getObjByKeyId(key.id);

      return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
    }
    /** @internal */

  }, {
    key: "_getByKeyDefault",
    value: function _getByKeyDefault(key, notFoundValue, visibility) {
      var inj;

      if (visibility instanceof SkipSelf) {
        inj = this.parent;
      } else {
        inj = this;
      }

      while (inj instanceof ReflectiveInjector_) {
        var inj_ = inj;

        var obj = inj_._getObjByKeyId(key.id);

        if (obj !== UNDEFINED) return obj;
        inj = inj_.parent;
      }

      if (inj !== null) {
        return inj.get(key.token, notFoundValue);
      } else {
        return this._throwOrNull(key, notFoundValue);
      }
    }
  }, {
    key: "displayName",
    get: function get() {
      var providers = _mapProviders(this, function (b) {
        return ' "' + b.key.displayName + '" ';
      }).join(', ');

      return "ReflectiveInjector(providers: [".concat(providers, "])");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.displayName;
    }
  }]);

  return ReflectiveInjector_;
}();

ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);

function _mapProviders(injector, fn) {
  var res = [];

  for (var i = 0; i < injector._providers.length; ++i) {
    res[i] = fn(injector.getProviderAtIndex(i));
  }

  return res;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function ɵɵdirectiveInject(token) {
  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
  var lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests
  // if inject utilities are used before bootstrapping.

  if (lView === null) {
    // Verify that we will not get into infinite loop.
    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);
    return ɵɵinject(token, flags);
  }

  var tNode = getCurrentTNode();
  return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * @codeGenApi
 */


function ɵɵinvalidFactory() {
  var msg = ngDevMode ? "This constructor was not compatible with Dependency Injection." : 'invalid';
  throw new Error(msg);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a property on a selected element.
 *
 * Operates on the element selected by index via the {@link select} instruction.
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
 *
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 * @returns This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵproperty(propName, value, sanitizer) {
  var lView = getLView();
  var bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵproperty;
}
/**
 * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
 * directive input.
 */


function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  var inputs = tNode.inputs;
  var property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.

  setInputsForProperty(tView, lView, inputs[property], property, value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  var tViewConsts = tView.consts;
  var attrs = getConstant(tViewConsts, attrsIndex);
  var tNode = getOrCreateTNode(tView, index, 2
  /* Element */
  , name, attrs);
  var hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  ngDevMode && logUnknownElementError(tView, native, tNode, hasDirectives);

  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }

  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }

  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }

  return tNode;
}
/**
 * Create DOM element. The instruction must later be followed by `elementEnd()` call.
 *
 * @param index Index of the element in the LView array
 * @param name Name of the DOM Node
 * @param attrsIndex Index of the element's attributes in the `consts` array.
 * @param localRefsIndex Index of the element's local references in the `consts` array.
 *
 * Attributes and localRefs are passed as an array of strings where elements with an even index
 * hold an attribute name and elements with an odd index hold an attribute value, ex.:
 * ['id', 'warning5', 'class', 'alert']
 *
 * @codeGenApi
 */


function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
  var lView = getLView();
  var tView = getTView();
  var adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  var renderer = lView[RENDERER];
  var native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());
  var tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  var mergedAttrs = tNode.mergedAttrs;

  if (mergedAttrs !== null) {
    setUpAttributes(renderer, native, mergedAttrs);
  }

  var classes = tNode.classes;

  if (classes !== null) {
    writeDirectClass(renderer, native, classes);
  }

  var styles = tNode.styles;

  if (styles !== null) {
    writeDirectStyle(renderer, native, styles);
  }

  if ((tNode.flags & 64
  /* isDetached */
  ) !== 64
  /* isDetached */
  ) {
    // In the i18n case, the translation may have removed this element, so only add it if it is not
    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
    appendChild(tView, lView, native, tNode);
  } // any immediate children of a component or template container must be pre-emptively
  // monkey-patched with the component view data so that the element can be inspected
  // later on using any element discovery utility methods (see `element_discovery.ts`)


  if (getElementDepthCount() === 0) {
    attachPatchData(native, lView);
  }

  increaseElementDepthCount();

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }

  if (localRefsIndex !== null) {
    saveResolvedLocalsInData(lView, tNode);
  }
}
/**
 * Mark the end of the element.
 *
 * @codeGenApi
 */


function ɵɵelementEnd() {
  var currentTNode = getCurrentTNode();
  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');

  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }

  var tNode = currentTNode;
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  );
  decreaseElementDepthCount();
  var tView = getTView();

  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);

    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }

  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
  }

  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
  }
}
/**
 * Creates an empty element using {@link elementStart} and {@link elementEnd}
 *
 * @param index Index of the element in the data array
 * @param name Name of the DOM Node
 * @param attrsIndex Index of the element's attributes in the `consts` array.
 * @param localRefsIndex Index of the element's local references in the `consts` array.
 *
 * @codeGenApi
 */


function ɵɵelement(index, name, attrsIndex, localRefsIndex) {
  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);
  ɵɵelementEnd();
}

function logUnknownElementError(tView, element, tNode, hasDirectives) {
  var schemas = tView.schemas; // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
  // defined as an array (as an empty array in case `schemas` field is not defined) and we should
  // execute the check below.

  if (schemas === null) return;
  var tagName = tNode.value; // If the element matches any directive, it's considered as valid.

  if (!hasDirectives && tagName !== null) {
    // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered
    // as a custom element. Note that unknown elements with a dash in their name won't be instances
    // of HTMLUnknownElement in browsers that support web components.
    var isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
    // because while most browsers return 'function', IE returns 'object'.
    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);

    if (isUnknown && !matchingSchemas(tView, tagName)) {
      var message = "'".concat(tagName, "' is not a known element:\n");
      message += "1. If '".concat(tagName, "' is an Angular component, then verify that it is part of this module.\n");

      if (tagName && tagName.indexOf('-') > -1) {
        message += "2. If '".concat(tagName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.");
      } else {
        message += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
      }

      console.error(formatRuntimeError("304"
      /* UNKNOWN_ELEMENT */
      , message));
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
  ngDevMode && ngDevMode.firstCreatePass++;
  var tViewConsts = tView.consts;
  var attrs = getConstant(tViewConsts, attrsIndex);
  var tNode = getOrCreateTNode(tView, index, 8
  /* ElementContainer */
  , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify
  // and execute directives on the ng-container.

  if (attrs !== null) {
    computeStaticStyling(tNode, attrs, true);
  }

  var localRefs = getConstant(tViewConsts, localRefsIndex);
  resolveDirectives(tView, lView, tNode, localRefs);

  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }

  return tNode;
}
/**
 * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
 * The instruction must later be followed by `elementContainerEnd()` call.
 *
 * @param index Index of the element in the LView array
 * @param attrsIndex Index of the container attributes in the `consts` array.
 * @param localRefsIndex Index of the container's local references in the `consts` array.
 *
 * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
 * the DOM (as a comment node can't have attributes). Attributes are here only for directive
 * matching purposes and setting initial inputs of directives.
 *
 * @codeGenApi
 */


function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
  var lView = getLView();
  var tView = getTView();
  var adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
  var tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  ngDevMode && ngDevMode.rendererCreateComment++;
  var native = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');
  appendChild(tView, lView, native, tNode);
  attachPatchData(native, lView);

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }

  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
}
/**
 * Mark the end of the <ng-container>.
 *
 * @codeGenApi
 */


function ɵɵelementContainerEnd() {
  var currentTNode = getCurrentTNode();
  var tView = getTView();

  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(currentTNode);
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }

  ngDevMode && assertTNodeType(currentTNode, 8
  /* ElementContainer */
  );

  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);

    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
}
/**
 * Creates an empty logical container using {@link elementContainerStart}
 * and {@link elementContainerEnd}
 *
 * @param index Index of the element in the LView array
 * @param attrsIndex Index of the container attributes in the `consts` array.
 * @param localRefsIndex Index of the container's local references in the `consts` array.
 *
 * @codeGenApi
 */


function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);
  ɵɵelementContainerEnd();
}
/**
 * Returns the current OpaqueViewState instance.
 *
 * Used in conjunction with the restoreView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * @codeGenApi
 */


function ɵɵgetCurrentView() {
  return getLView();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Determine if the argument is shaped like a Promise
 */


function isPromise(obj) {
  // allow any Promise/A+ compliant thenable.
  // It's up to the caller to ensure that obj.then conforms to the spec
  return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is a Subscribable
 */


function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === 'function';
}
/**
 * Determine if the argument is an Observable
 *
 * Strictly this tests that the `obj` is `Subscribable`, since `Observable`
 * types need additional methods, such as `lift()`. But it is adequate for our
 * needs since within the Angular framework code we only ever need to use the
 * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects
 * into `Observable` as needed.
 */


var isObservable = isSubscribable;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds an event listener to the current node.
 *
 * If an output exists on one of the node's directives, it also subscribes to the output
 * and saves the subscription for later cleanup.
 *
 * @param eventName Name of the event
 * @param listenerFn The function to be called when event emits
 * @param useCapture Whether or not to use capture in event listener
 * @param eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @codeGenApi
 */

function ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {
  var lView = getLView();
  var tView = getTView();
  var tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);
  return ɵɵlistener;
}
/**
 * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
 * in the component's renderer. Normally all host listeners are evaluated with the
 * parent component's renderer, but, in the case of animation @triggers, they need
 * to be evaluated with the sub component's renderer (because that's where the
 * animation triggers are defined).
 *
 * Do not use this instruction as a replacement for `listener`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * @param eventName Name of the event
 * @param listenerFn The function to be called when event emits
 * @param useCapture Whether or not to use capture in event listener
 * @param eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @codeGenApi
 */


function ɵɵsyntheticHostListener(eventName, listenerFn) {
  var tNode = getCurrentTNode();
  var lView = getLView();
  var tView = getTView();
  var currentDef = getCurrentDirectiveDef(tView.data);
  var renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);
  return ɵɵsyntheticHostListener;
}
/**
 * A utility function that checks if a given element has already an event handler registered for an
 * event with a specified name. The TView.cleanup data structure is used to find out which events
 * are registered for a given element.
 */


function findExistingListener(tView, lView, eventName, tNodeIdx) {
  var tCleanup = tView.cleanup;

  if (tCleanup != null) {
    for (var i = 0; i < tCleanup.length - 1; i += 2) {
      var cleanupEventName = tCleanup[i];

      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
        // We have found a matching event name on the same node but it might not have been
        // registered yet, so we must explicitly verify entries in the LView cleanup data
        // structures.
        var lCleanup = lView[CLEANUP];
        var listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
      // 2-element entries (for directive and queries destroy hooks). As such we can encounter
      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
      // documentation of TView.cleanup for more details of this data structure layout.


      if (typeof cleanupEventName === 'string') {
        i += 2;
      }
    }
  }

  return null;
}

function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {
  var isTNodeDirectiveHost = isDirectiveHost(tNode);
  var firstCreatePass = tView.firstCreatePass;
  var tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
  var context = lView[CONTEXT]; // When the ɵɵlistener instruction was generated and is executed we know that there is either a
  // native listener or a directive output on this element. As such we we know that we will have to
  // register a listener and store its cleanup function on LView.

  var lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  );
  var processOutputs = true; // Adding a native event listener is applicable when:
  // - The corresponding TNode represents a DOM element.
  // - The event target has a resolver (usually resulting in a global object,
  //   such as `window` or `document`).

  if (tNode.type & 3
  /* AnyRNode */
  || eventTargetResolver) {
    var native = getNativeByTNode(tNode, lView);
    var target = eventTargetResolver ? eventTargetResolver(native) : native;
    var lCleanupIndex = lCleanup.length;
    var idxOrTargetGetter = eventTargetResolver ? function (_lView) {
      return eventTargetResolver(unwrapRNode(_lView[tNode.index]));
    } : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all
    // events (including outputs).

    if (isProceduralRenderer(renderer)) {
      // There might be cases where multiple directives on the same element try to register an event
      // handler function for the same event. In this situation we want to avoid registration of
      // several native listeners as each registration would be intercepted by NgZone and
      // trigger change detection. This would mean that a single user action would result in several
      // change detections being invoked. To avoid this situation we want to have only one call to
      // native handler registration (for the same element and same type of event).
      //
      // In order to have just one native event handler in presence of multiple handler functions,
      // we just register a first handler function as a native event listener and then chain
      // (coalesce) other handler functions on top of the first native handler function.
      var existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an
      // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
      // view engine.
      // Also, we don't have to search for existing listeners is there are no directives
      // matching on a given node as we can't register multiple event handlers for the same event in
      // a template (this would mean having duplicate attributes).

      if (!eventTargetResolver && isTNodeDirectiveHost) {
        existingListener = findExistingListener(tView, lView, eventName, tNode.index);
      }

      if (existingListener !== null) {
        // Attach a new listener to coalesced listeners list, maintaining the order in which
        // listeners are registered. For performance reasons, we keep a reference to the last
        // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
        // the entire set each time we need to add a new listener.
        var lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
        lastListenerFn.__ngNextListenerFn__ = listenerFn;
        existingListener.__ngLastListenerFn__ = listenerFn;
        processOutputs = false;
      } else {
        listenerFn = wrapListener(tNode, lView, context, listenerFn, false
        /** preventDefault */
        );
        var cleanupFn = renderer.listen(target, eventName, listenerFn);
        ngDevMode && ngDevMode.rendererAddEventListener++;
        lCleanup.push(listenerFn, cleanupFn);
        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
      }
    } else {
      listenerFn = wrapListener(tNode, lView, context, listenerFn, true
      /** preventDefault */
      );
      target.addEventListener(eventName, listenerFn, useCapture);
      ngDevMode && ngDevMode.rendererAddEventListener++;
      lCleanup.push(listenerFn);
      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
    }
  } else {
    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush
    // ancestors are marked dirty when an event occurs.
    listenerFn = wrapListener(tNode, lView, context, listenerFn, false
    /** preventDefault */
    );
  } // subscribe to directive outputs


  var outputs = tNode.outputs;
  var props;

  if (processOutputs && outputs !== null && (props = outputs[eventName])) {
    var propsLength = props.length;

    if (propsLength) {
      for (var i = 0; i < propsLength; i += 2) {
        var index = props[i];
        ngDevMode && assertIndexInRange(lView, index);
        var minifiedName = props[i + 1];
        var directiveInstance = lView[index];
        var output = directiveInstance[minifiedName];

        if (ngDevMode && !isObservable(output)) {
          throw new Error("@Output ".concat(minifiedName, " not initialized in '").concat(directiveInstance.constructor.name, "'."));
        }

        var subscription = output.subscribe(listenerFn);
        var idx = lCleanup.length;
        lCleanup.push(listenerFn, subscription);
        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
      }
    }
  }
}

function executeListenerWithErrorHandling(lView, context, listenerFn, e) {
  try {
    profiler(6
    /* OutputStart */
    , context, listenerFn); // Only explicitly returning false from a listener should preventDefault

    return listenerFn(e) !== false;
  } catch (error) {
    handleError(lView, error);
    return false;
  } finally {
    profiler(7
    /* OutputEnd */
    , context, listenerFn);
  }
}
/**
 * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
 * if applicable.
 *
 * @param tNode The TNode associated with this listener
 * @param lView The LView that contains this listener
 * @param listenerFn The listener function to call
 * @param wrapWithPreventDefault Whether or not to prevent default behavior
 * (the procedural renderer does this already, so in those cases, we should skip)
 */


function wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {
  // Note: we are performing most of the work in the listener function itself
  // to optimize listener registration.
  return function wrapListenerIn_markDirtyAndPreventDefault(e) {
    // Ivy uses `Function` as a special token that allows us to unwrap the function
    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
    if (e === Function) {
      return listenerFn;
    } // In order to be backwards compatible with View Engine, events on component host nodes
    // must also mark the component view itself dirty (i.e. the view that it owns).


    var startView = tNode.flags & 2
    /* isComponentHost */
    ? getComponentLViewByIndex(tNode.index, lView) : lView; // See interfaces/view.ts for more on LViewFlags.ManualOnPush

    if ((lView[FLAGS] & 32
    /* ManualOnPush */
    ) === 0) {
      markViewDirty(startView);
    }

    var result = executeListenerWithErrorHandling(lView, context, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for
    // their presence and invoke as needed.

    var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;

    while (nextListenerFn) {
      // We should prevent default if any of the listeners explicitly return false
      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }

    if (wrapWithPreventDefault && result === false) {
      e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)

      e.returnValue = false;
    }

    return result;
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieves a context at the level specified and saves it as the global, contextViewData.
 * Will get the next level up if level is not specified.
 *
 * This is used to save contexts of parent views so they can be bound in embedded views, or
 * in conjunction with reference() to bind a ref from a parent view.
 *
 * @param level The relative level of the view from which to grab context compared to contextVewData
 * @returns context
 *
 * @codeGenApi
 */


function ɵɵnextContext() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return nextContextImpl(level);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Checks a given node against matching projection slots and returns the
 * determined slot index. Returns "null" if no slot matched the given node.
 *
 * This function takes into account the parsed ngProjectAs selector from the
 * node's attributes. If present, it will check whether the ngProjectAs selector
 * matches any of the projection slot selectors.
 */


function matchingProjectionSlotIndex(tNode, projectionSlots) {
  var wildcardNgContentIndex = null;
  var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);

  for (var i = 0; i < projectionSlots.length; i++) {
    var slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching
    // any selector. This is necessary to be backwards compatible with view engine.

    if (slotValue === '*') {
      wildcardNgContentIndex = i;
      continue;
    } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
    // to the list of selectors, otherwise we fall back to matching against the node.


    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,
    /* isProjectionMode */
    true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i; // first matching selector "captures" a given node
    }
  }

  return wildcardNgContentIndex;
}
/**
 * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
 * It takes all the selectors from the entire component's template and decides where
 * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
 * backed by a selector).
 *
 * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
 * un-parsed form.
 *
 * The parsed form is needed for efficient matching of a node against a given CSS selector.
 * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
 *
 * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
 * drawbacks:
 * - having only a textual form would require runtime parsing of CSS selectors;
 * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
 * template author).
 *
 * @param projectionSlots? A collection of projection slots. A projection slot can be based
 *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
 *        all nodes which do not match any selector. If not specified, a single wildcard
 *        selector projection slot will be defined.
 *
 * @codeGenApi
 */


function ɵɵprojectionDef(projectionSlots) {
  var componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];

  if (!componentNode.projection) {
    // If no explicit projection slots are defined, fall back to a single
    // projection slot with the wildcard selector.
    var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    var projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    var tails = projectionHeads.slice();
    var componentChild = componentNode.child;

    while (componentChild !== null) {
      var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;

      if (slotIndex !== null) {
        if (tails[slotIndex]) {
          tails[slotIndex].projectionNext = componentChild;
        } else {
          projectionHeads[slotIndex] = componentChild;
        }

        tails[slotIndex] = componentChild;
      }

      componentChild = componentChild.next;
    }
  }
}
/**
 * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
 * to the projectionDef instruction.
 *
 * @param nodeIndex
 * @param selectorIndex:
 *        - 0 when the selector is `*` (or unspecified as this is the default value),
 *        - 1 based index of the selector from the {@link projectionDef}
 *
 * @codeGenApi
 */


function ɵɵprojection(nodeIndex) {
  var selectorIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var attrs = arguments.length > 2 ? arguments[2] : undefined;
  var lView = getLView();
  var tView = getTView();
  var tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16
  /* Projection */
  , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.

  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content

  setCurrentTNodeAsNotParent();

  if ((tProjectionNode.flags & 64
  /* isDetached */
  ) !== 64
  /* isDetached */
  ) {
    // re-distribution of projectable nodes is stored on a component's view level
    applyProjection(tView, lView, tProjectionNode);
  }
}
/**
 *
 * Update an interpolated property on an element with a lone bound value
 *
 * Used when the value passed to a property has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div title="{{v0}}"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate('title', v0);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate(propName, v0, sanitizer) {
  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);
  return ɵɵpropertyInterpolate;
}
/**
 *
 * Update an interpolated property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
  }

  return ɵɵpropertyInterpolate1;
}
/**
 *
 * Update an interpolated property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
  }

  return ɵɵpropertyInterpolate2;
}
/**
 *
 * Update an interpolated property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }

  return ɵɵpropertyInterpolate3;
}
/**
 *
 * Update an interpolated property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }

  return ɵɵpropertyInterpolate4;
}
/**
 *
 * Update an interpolated property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }

  return ɵɵpropertyInterpolate5;
}
/**
 *
 * Update an interpolated property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }

  return ɵɵpropertyInterpolate6;
}
/**
 *
 * Update an interpolated property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }

  return ɵɵpropertyInterpolate7;
}
/**
 *
 * Update an interpolated property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }

  return ɵɵpropertyInterpolate8;
}
/**
 * Update an interpolated property on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update.
 * @param values The collection of values and the strings inbetween those values, beginning with a
 * string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolateV(propName, values, sanitizer) {
  var lView = getLView();
  var interpolatedValue = interpolationV(lView, values);

  if (interpolatedValue !== NO_CHANGE) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);

    if (ngDevMode) {
      var interpolationInBetween = [values[0]]; // prefix

      for (var i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }

      storePropertyBindingMetadata.apply(void 0, [tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
    }
  }

  return ɵɵpropertyInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * NOTE: The word `styling` is used interchangeably as style or class styling.
 *
 * This file contains code to link styling instructions together so that they can be replayed in
 * priority order. The file exists because Ivy styling instruction execution order does not match
 * that of the priority order. The purpose of this code is to create a linked list so that the
 * instructions can be traversed in priority order when computing the styles.
 *
 * Assume we are dealing with the following code:
 * ```
 * @Component({
 *   template: `
 *     <my-cmp [style]=" {color: '#001'} "
 *             [style.color]=" #002 "
 *             dir-style-color-1
 *             dir-style-color-2> `
 * })
 * class ExampleComponent {
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#001'});
 *     ɵɵstyleProp('color', '#002');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `[dir-style-color-1]',
 * })
 * class Style1Directive {
 *   @HostBinding('style') style = {color: '#005'};
 *   @HostBinding('style.color') color = '#006';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#005'});
 *     ɵɵstyleProp('color', '#006');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `[dir-style-color-2]',
 * })
 * class Style2Directive {
 *   @HostBinding('style') style = {color: '#007'};
 *   @HostBinding('style.color') color = '#008';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#007'});
 *     ɵɵstyleProp('color', '#008');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `my-cmp',
 * })
 * class MyComponent {
 *   @HostBinding('style') style = {color: '#003'};
 *   @HostBinding('style.color') color = '#004';
 *
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#003'});
 *     ɵɵstyleProp('color', '#004');
 *     ...
 *   }
 * }
 * ```
 *
 * The Order of instruction execution is:
 *
 * NOTE: the comment binding location is for illustrative purposes only.
 *
 * ```
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * ```
 *
 * The correct priority order of concatenation is:
 *
 * ```
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * ```
 *
 * What color should be rendered?
 *
 * Once the items are correctly sorted in the list, the answer is simply the last item in the
 * concatenation list which is `#002`.
 *
 * To do so we keep a linked list of all of the bindings which pertain to this element.
 * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
 * us to traverse them in the order of priority.
 *
 * |Idx|`TView.data`|`LView`          | Notes
 * |---|------------|-----------------|--------------
 * |...|            |                 |
 * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
 * |11 |`30 | 12`   | ...             |
 * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
 * |13 |`10 | 0`    | ...             |
 * |...|            |                 |
 * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
 * |21 |`0 | 22`    | ...             |
 * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
 * |23 |`20 | 24`   | ...             |
 * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
 * |25 |`22 | 26`   | ...             |
 * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
 * |27 |`24 | 28`   | ...             |
 * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
 * |29 |`26 | 30`   | ...             |
 * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
 * |31 |`28 | 10`   | ...             |
 *
 * The above data structure allows us to re-concatenate the styling no matter which data binding
 * changes.
 *
 * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
 * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
 * there is a map (which may contain the name). This information is useful in knowing if other
 * styles with higher priority need to be searched for overwrites.
 *
 * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
 * `tnode_linked_list_spec.ts` for working example.
 */


var __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
/**
 * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
 * list of styles and compute the duplicate flag.
 *
 * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
 *
 * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
 * the head/tail of the template portion of the styles.
 *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
 *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
 *
 * @param tData The `TData` to insert into.
 * @param tNode `TNode` associated with the styling element.
 * @param tStylingKey See `TStylingKey`.
 * @param index location of where `tStyleValue` should be stored (and linked into list.)
 * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
 *               template.)
 * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 */


function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  var tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  var tmplHead = getTStylingRangePrev(tBindings);
  var tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  var isKeyDuplicateOfStatic = false;
  var tStylingKey;

  if (Array.isArray(tStylingKeyWithStatic)) {
    // We are case when the `TStylingKey` contains static fields as well.
    var staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1]; // unwrap.
    // We need to check if our key is present in the static so that we can mark it as duplicate.

    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      // tStylingKey is present in the statics, need to mark it as duplicate.
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }

  if (isHostBinding) {
    // We are inserting host bindings
    // If we don't have template bindings then `tail` is 0.
    var hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first
    // template bindings (there are none.) Instead the head points to the tail of the template.

    if (hasTemplateBindings) {
      // template head's "prev" will point to last host binding or to 0 if no host bindings yet
      var previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host
      // binding to point to this one

      if (previousNode !== 0) {
        // We need to update the template-tail value to point to us.
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      } // The "previous" of the template binding head should point to this host binding


      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host
      // binding to point to this one

      if (tmplHead !== 0) {
        // We need to update the template-tail value to point to us.
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      } // if we don't have template, the head points to template-tail, and needs to be advanced.


      tmplHead = index;
    }
  } else {
    // We are inserting in template section.
    // We need to set this binding's "previous" to the current template tail
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');

    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      // We need to update the previous value "next" to point to this binding
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }

    tmplTail = index;
  } // Now we need to update / compute the duplicates.
  // Starting with our location search towards head (least priority)


  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }

  markDuplicates(tData, tStylingKey, index, true, isClassBinding);
  markDuplicates(tData, tStylingKey, index, false, isClassBinding);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);

  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
/**
 * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
 *
 * @param tNode `TNode` where the residual is stored.
 * @param tStylingKey `TStylingKey` to store.
 * @param tData `TData` associated with the current `LView`.
 * @param index location of where `tStyleValue` should be stored (and linked into list.)
 * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 */


function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  var residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;

  if (residual != null
  /* or undefined */
  && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    // We have duplicate in the residual so mark ourselves as duplicate.
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
/**
 * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
 * `TStyleValue`.
 *
 * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
 * with it set to `false` to search both the previous as well as next items in the list.
 *
 * No duplicate case
 * ```
 *   [style.color]
 *   [style.width.px] <<- index
 *   [style.height.px]
 * ```
 *
 * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
 * duplicates because `width` is not found in any other part of the linked list.
 *
 * Duplicate case
 * ```
 *   [style.color]
 *   [style.width.em]
 *   [style.width.px] <<- index
 * ```
 * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
 * because `width` is found in the chain.
 *
 * Map case 1
 * ```
 *   [style.width.px]
 *   [style.color]
 *   [style]  <<- index
 * ```
 * In the above case adding `[style]` will produce a duplicate with any other bindings because
 * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
 *
 * Map case 2
 * ```
 *   [style]
 *   [style.width.px]
 *   [style.color]  <<- index
 * ```
 * In the above case adding `[style.color]` will produce a duplicate because there is already a
 * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
 * `width`.
 *
 * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
 * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
 *        the linked list.
 * @param index Starting location in the linked list to search from
 * @param isPrevDir Direction.
 *        - `true` for previous (lower priority);
 *        - `false` for next (higher priority).
 */


function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
  var tStylingAtIndex = tData[index + 1];
  var isMap = tStylingKey === null;
  var cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  var foundDuplicate = false; // We keep iterating as long as we have a cursor
  // AND either:
  // - we found what we are looking for, OR
  // - we are a map in which case we have to continue searching even after we find what we were
  //   looking for since we are a wild card and everything needs to be flipped to duplicate.

  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    var tStylingValueAtCursor = tData[cursor];
    var tStyleRangeAtCursor = tData[cursor + 1];

    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }

    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }

  if (foundDuplicate) {
    // if we found a duplicate, than mark ourselves.
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
/**
 * Determines if two `TStylingKey`s are a match.
 *
 * When computing whether a binding contains a duplicate, we need to compare if the instruction
 * `TStylingKey` has a match.
 *
 * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
 * - `color`
 *    - `color`    // Match another color
 *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
 *    - `['', 'color', 'other', true]` // wrapped `color` so match
 *    - `['', null, 'other', true]`       // wrapped `null` so match
 *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
 * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
 *
 * @param tStylingKeyCursor
 * @param tStylingKey
 */


function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');

  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.
  ) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
    // statics and we need to check those as well.
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)


var parserState = {
  textEnd: 0,
  key: 0,
  keyEnd: 0,
  value: 0,
  valueEnd: 0
};
/**
 * Retrieves the last parsed `key` of style.
 * @param text the text to substring the key from.
 */

function getLastParsedKey(text) {
  return text.substring(parserState.key, parserState.keyEnd);
}
/**
 * Retrieves the last parsed `value` of style.
 * @param text the text to substring the key from.
 */


function getLastParsedValue(text) {
  return text.substring(parserState.value, parserState.valueEnd);
}
/**
 * Initializes `className` string for parsing and parses the first token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 * @param text `className` to parse
 * @returns index where the next invocation of `parseClassNameNext` should resume.
 */


function parseClassName(text) {
  resetParserState(text);
  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses next `className` token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 *
 * @param text `className` to parse
 * @param index where the parsing should resume.
 * @returns index where the next invocation of `parseClassNameNext` should resume.
 */


function parseClassNameNext(text, index) {
  var end = parserState.textEnd;

  if (end === index) {
    return -1;
  }

  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
  return consumeWhitespace(text, index, end);
}
/**
 * Initializes `cssText` string for parsing and parses the first key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 * ```
 * @param text `cssText` to parse
 * @returns index where the next invocation of `parseStyleNext` should resume.
 */


function parseStyle(text) {
  resetParserState(text);
  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses the next `cssText` key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 *
 * @param text `cssText` to parse
 * @param index where the parsing should resume.
 * @returns index where the next invocation of `parseStyleNext` should resume.
 */


function parseStyleNext(text, startIndex) {
  var end = parserState.textEnd;
  var index = parserState.key = consumeWhitespace(text, startIndex, end);

  if (end === index) {
    // we reached an end so just quit
    return -1;
  }

  index = parserState.keyEnd = consumeStyleKey(text, index, end);
  index = consumeSeparator(text, index, end, 58
  /* COLON */
  );
  index = parserState.value = consumeWhitespace(text, index, end);
  index = parserState.valueEnd = consumeStyleValue(text, index, end);
  return consumeSeparator(text, index, end, 59
  /* SEMI_COLON */
  );
}
/**
 * Reset the global state of the styling parser.
 * @param text The styling text to parse.
 */


function resetParserState(text) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text.length;
}
/**
 * Returns index of next non-whitespace character.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
 *          that location.)
 */


function consumeWhitespace(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32
  /* SPACE */
  ) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Returns index of last char in class token.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last char in class token.
 */


function consumeClassToken(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32
  /* SPACE */
  ) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes all of the characters belonging to style key and token.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last style key character.
 */


function consumeStyleKey(text, startIndex, endIndex) {
  var ch;

  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45
  /* DASH */
  || ch === 95
  /* UNDERSCORE */
  || (ch & -33
  /* UPPER_CASE */
  ) >= 65
  /* A */
  && (ch & -33
  /* UPPER_CASE */
  ) <= 90
  /* Z */
  || ch >= 48
  /* ZERO */
  && ch <= 57
  /* NINE */
  )) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes all whitespace and the separator `:` after the style key.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after separator and surrounding whitespace.
 */


function consumeSeparator(text, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text, startIndex, endIndex);

  if (startIndex < endIndex) {
    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text, String.fromCharCode(separator), startIndex);
    }

    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes style value honoring `url()` and `""` text.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last style value character.
 */


function consumeStyleValue(text, startIndex, endIndex) {
  var ch1 = -1; // 1st previous character

  var ch2 = -1; // 2nd previous character

  var ch3 = -1; // 3rd previous character

  var i = startIndex;
  var lastChIndex = i;

  while (i < endIndex) {
    var ch = text.charCodeAt(i++);

    if (ch === 59
    /* SEMI_COLON */
    ) {
      return lastChIndex;
    } else if (ch === 34
    /* DOUBLE_QUOTE */
    || ch === 39
    /* SINGLE_QUOTE */
    ) {
      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85
    /* U */
    && ch2 === 82
    /* R */
    && ch1 === 76
    /* L */
    && ch === 40
    /* OPEN_PAREN */
    ) {
      lastChIndex = i = consumeQuotedText(text, 41
      /* CLOSE_PAREN */
      , i, endIndex);
    } else if (ch > 32
    /* SPACE */
    ) {
      // if we have a non-whitespace character then capture its location
      lastChIndex = i;
    }

    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33
    /* UPPER_CASE */
    ;
  }

  return lastChIndex;
}
/**
 * Consumes all of the quoted characters.
 *
 * @param text Text to scan
 * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after quoted characters.
 */


function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
  var ch1 = -1; // 1st previous character

  var index = startIndex;

  while (index < endIndex) {
    var ch = text.charCodeAt(index++);

    if (ch == quoteCharCode && ch1 !== 92
    /* BACK_SLASH */
    ) {
      return index;
    }

    if (ch == 92
    /* BACK_SLASH */
    && ch1 === 92
    /* BACK_SLASH */
    ) {
      // two back slashes cancel each other out. For example `"\\"` should properly end the
      // quotation. (It should not assume that the last `"` is escaped.)
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }

  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}

function malformedStyleError(text, expecting, index) {
  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
  throw throwError("Malformed style at location ".concat(index, " in string '") + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.substr(index + 1) + "'. Expecting '".concat(expecting, "'."));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a style binding on an element with the provided value.
 *
 * If the style value is falsy then it will be removed from the element
 * (or assigned a different value depending if there are any styles placed
 * on the element with `styleMap` or any static styles that are
 * present from when the element was created with `styling`).
 *
 * Note that the styling element is updated as part of `stylingApply`.
 *
 * @param prop A valid CSS property.
 * @param value New value to write (`null` or an empty string to remove).
 * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
 *
 * Note that this will apply the provided style value to the host element if this function is called
 * within a host binding function.
 *
 * @codeGenApi
 */


function ɵɵstyleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return ɵɵstyleProp;
}
/**
 * Update a class binding on an element with the provided value.
 *
 * This instruction is meant to handle the `[class.foo]="exp"` case and,
 * therefore, the class binding itself must already be allocated using
 * `styling` within the creation block.
 *
 * @param prop A valid CSS class (only one).
 * @param value A true/false value which will turn the class on or off.
 *
 * Note that this will apply the provided class value to the host element if this function
 * is called within a host binding function.
 *
 * @codeGenApi
 */


function ɵɵclassProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return ɵɵclassProp;
}
/**
 * Update style bindings using an object literal on an element.
 *
 * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
 * When styles are applied to the element they will then be updated with respect to
 * any styles/classes set via `styleProp`. If any styles are set to falsy
 * then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 *
 * @param styles A key/value style map of the styles that will be applied to the given element.
 *        Any missing styles (that have already been applied to the element beforehand) will be
 *        removed (unset) from the element's styling.
 *
 * Note that this will apply the provided styleMap value to the host element if this function
 * is called within a host binding.
 *
 * @codeGenApi
 */


function ɵɵstyleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
/**
 * Parse text as style and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵstyleMap`.
 *
 * @param keyValueArray KeyValueArray to add parsed values to.
 * @param text text to parse.
 */


function styleStringParser(keyValueArray, text) {
  for (var i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
  }
}
/**
 * Update class bindings using an object literal or class-string on an element.
 *
 * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
 * When classes are applied to the element they will then be updated with
 * respect to any styles/classes set via `classProp`. If any
 * classes are set to falsy then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 * Note that this will the provided classMap value to the host element if this function is called
 * within a host binding.
 *
 * @param classes A key/value map or string of CSS classes that will be added to the
 *        given element. Any missing classes (that have already been applied to the element
 *        beforehand) will be removed (unset) from the element's list of CSS classes.
 *
 * @codeGenApi
 */


function ɵɵclassMap(classes) {
  checkStylingMap(keyValueArraySet, classStringParser, classes, true);
}
/**
 * Parse text as class and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵclassMap`.
 *
 * @param keyValueArray KeyValueArray to add parsed values to.
 * @param text text to parse.
 */


function classStringParser(keyValueArray, text) {
  for (var i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
  }
}
/**
 * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
 *
 * @param prop property name.
 * @param value binding value.
 * @param suffix suffix for the property (e.g. `em` or `px`)
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function checkStylingProperty(prop, value, suffix, isClassBased) {
  var lView = getLView();
  var tView = getTView(); // Styling instructions use 2 slots per binding.
  // 1. one for the value / TStylingKey
  // 2. one for the intermittent-value / TStylingRange

  var bindingIndex = incrementBindingIndex(2);

  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }

  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    var tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
/**
 * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
 *
 * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 *        function so that `style` can be processed. This is done for tree shaking purposes.
 * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
 *        have different parsers.)
 * @param value bound value from application
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
  var tView = getTView();
  var bindingIndex = incrementBindingIndex(2);

  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }

  var lView = getLView();

  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
    // if so as not to read unnecessarily.
    var tNode = tView.data[getSelectedIndex()];

    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        // verify that if we are shadowing then `TData` is appropriately marked so that we skip
        // processing this binding in styling resolution.
        var tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
      } // VE does not concatenate the static portion like we are doing here.
      // Instead VE just ignores the static completely if dynamic binding is present.
      // Because of locality we have already set the static portion because we don't know if there
      // is a dynamic portion until later. If we would ignore the static portion it would look like
      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
      // thing as it would think that the static portion was removed. For this reason we
      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.


      var staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');

      if (staticPrefix !== null) {
        // We want to make sure that falsy values of `value` become empty strings.
        value = concatStringsWithSpace(staticPrefix, value ? value : '');
      } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
      // This takes over the `[style]` binding. (Same for `[class]`)


      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
/**
 * Determines when the binding is in `hostBindings` section
 *
 * @param tView Current `TView`
 * @param bindingIndex index of binding which we would like if it is in `hostBindings`
 */


function isInHostBindings(tView, bindingIndex) {
  // All host bindings are placed after the expando section.
  return bindingIndex >= tView.expandoStartIndex;
}
/**
 * Collects the necessary information to insert the binding into a linked list of style bindings
 * using `insertTStylingBinding`.
 *
 * @param tView `TView` where the binding linked list will be stored.
 * @param tStylingKey Property/key of the binding.
 * @param bindingIndex Index of binding associated with the `prop`
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  var tData = tView.data;

  if (tData[bindingIndex + 1] === null) {
    // The above check is necessary because we don't clear first update pass until first successful
    // (no exception) template execution. This prevents the styling instruction from double adding
    // itself to the list.
    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
    // if so as not to read unnecessarily.
    var tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, 'TNode expected');
    var isHostBindings = isInHostBindings(tView, bindingIndex);

    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
      // If there is a directive which uses `@Input('style')` or `@Input('class')` than
      // we need to neutralize this binding since that directive is shadowing it.
      // We turn this into a noop by setting the key to `false`
      tStylingKey = false;
    }

    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
/**
 * Adds static styling information to the binding if applicable.
 *
 * The linked list of styles not only stores the list and keys, but also stores static styling
 * information on some of the keys. This function determines if the key should contain the styling
 * information and computes it.
 *
 * See `TStylingStatic` for more details.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  var hostDirectiveDef = getCurrentDirectiveDef(tData);
  var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

  if (hostDirectiveDef === null) {
    // We are in template node.
    // If template node already had styling instruction then it has already collected the static
    // styling and there is no need to collect them again. We know that we are the first styling
    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
    var isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;

    if (isFirstStylingInstructionInTemplate) {
      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
      // they are already merged and it would not be possible to figure which property belongs where
      // in the priority.
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.

      residual = null;
    }
  } else {
    // We are in host binding node and there was no binding instruction in template node.
    // This means that we need to compute the residual.
    var directiveStylingLast = tNode.directiveStylingLast;
    var isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;

    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);

      if (residual === null) {
        // - If `null` than either:
        //    - Template styling instruction already ran and it has consumed the static
        //      styling into its `TStylingKey` and so there is no need to update residual. Instead
        //      we need to update the `TStylingKey` associated with the first template node
        //      instruction. OR
        //    - Some other styling instruction ran and determined that there are no residuals
        var templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);

        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
          // Only recompute if `templateStylingKey` had static values. (If no static value found
          // then there is nothing to do since this operation can only produce less static keys, not
          // more.)
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]
          /* unwrap previous statics */
          , isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        // We only need to recompute residual if it is not `null`.
        // - If existing residual (implies there was no template styling). This means that some of
        //   the statics may have moved from the residual to the `stylingKey` and so we have to
        //   recompute.
        // - If `undefined` this is the first time we are running.
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }

  if (residual !== undefined) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }

  return stylingKey;
}
/**
 * Retrieve the `TStylingKey` for the template styling instruction.
 *
 * This is needed since `hostBinding` styling instructions are inserted after the template
 * instruction. While the template instruction needs to update the residual in `TNode` the
 * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
 * the template instruction is downstream from the `hostBindings` instructions.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @return `TStylingKey` if found or `undefined` if not found.
 */


function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;

  if (getTStylingRangeNext(bindings) === 0) {
    // There does not seem to be a styling instruction in the `template`.
    return undefined;
  }

  return tData[getTStylingRangePrev(bindings)];
}
/**
 * Update the `TStylingKey` of the first template instruction in `TNode`.
 *
 * Logically `hostBindings` styling instructions are of lower priority than that of the template.
 * However, they execute after the template styling instructions. This means that they get inserted
 * in front of the template styling instructions.
 *
 * If we have a template styling instruction and a new `hostBindings` styling instruction is
 * executed it means that it may need to steal static fields from the template instruction. This
 * method allows us to update the first template instruction `TStylingKey` with a new value.
 *
 * Assume:
 * ```
 * <div my-dir style="color: red" [style.color]="tmplExp"></div>
 *
 * @Directive({
 *   host: {
 *     'style': 'width: 100px',
 *     '[style.color]': 'dirExp',
 *   }
 * })
 * class MyDir {}
 * ```
 *
 * when `[style.color]="tmplExp"` executes it creates this data structure.
 * ```
 *  ['', 'color', 'color', 'red', 'width', '100px'],
 * ```
 *
 * The reason for this is that the template instruction does not know if there are styling
 * instructions and must assume that there are none and must collect all of the static styling.
 * (both
 * `color' and 'width`)
 *
 * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
 * ```
 *  ['', 'color', 'width', '100px'],  // newly inserted
 *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
 * ```
 *
 * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
 * update it like so:
 * ```
 *  ['', 'color', 'width', '100px'],
 *  ['', 'color', 'color', 'red'],    // UPDATE
 * ```
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param tStylingKey New `TStylingKey` which is replacing the old one.
 */


function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
/**
 * Collect all static values after the current `TNode.directiveStylingLast` index.
 *
 * Collect the remaining styling information which has not yet been collected by an existing
 * styling instruction.
 *
 * @param tData `TData` where the `DirectiveDefs` are stored.
 * @param tNode `TNode` which contains the directive range.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectResidual(tData, tNode, isClassBased) {
  var residual = undefined;
  var directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
  // collecting things after the last `hostBindings` directive which had a styling instruction.)

  for (var i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    var attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }

  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
/**
 * Collect the static styling information with lower priority than `hostDirectiveDef`.
 *
 * (This is opposite of residual styling.)
 *
 * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
 *        styling. (Or `null` if template styling)
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param stylingKey Existing `TStylingKey` to update or wrap.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  // We need to loop because there can be directives which have `hostAttrs` but don't have
  // `hostBindings` so this loop catches up to the current directive..
  var currentDirective = null;
  var directiveEnd = tNode.directiveEnd;
  var directiveStylingLast = tNode.directiveStylingLast;

  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }

  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, 'expected to be defined');
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef) break;
    directiveStylingLast++;
  }

  if (hostDirectiveDef !== null) {
    // we only advance the styling cursor if we are collecting data from host bindings.
    // Template executes before host bindings and so if we would update the index,
    // host bindings would not get their statics.
    tNode.directiveStylingLast = directiveStylingLast;
  }

  return stylingKey;
}
/**
 * Convert `TAttrs` into `TStylingStatic`.
 *
 * @param stylingKey existing `TStylingKey` to update or wrap.
 * @param attrs `TAttributes` to process.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  var desiredMarker = isClassBased ? 1
  /* Classes */
  : 2
  /* Styles */
  ;
  var currentMarker = -1
  /* ImplicitAttributes */
  ;

  if (attrs !== null) {
    for (var i = 0; i < attrs.length; i++) {
      var item = attrs[i];

      if (typeof item === 'number') {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
          }

          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }

  return stylingKey === undefined ? null : stylingKey;
}
/**
 * Convert user input to `KeyValueArray`.
 *
 * This function takes user input which could be `string`, Object literal, or iterable and converts
 * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
 * where
 * even indexes contain keys and odd indexes contain values for those keys).
 *
 * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
 * independent
 * way.
 * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
 * applied)
 *
 * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
 * difference in linear fashion without the need to allocate any additional data.
 *
 * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
 * which values need to be deleted, over the new `Map` to determine additions, and we would have to
 * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
 *
 * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 *        function so that `style` can be processed. This is done
 *        for tree shaking purposes.
 * @param stringParser The parser is passed in so that it will be tree shakable. See
 *        `styleStringParser` and `classStringParser`
 * @param value The value to parse/convert to `KeyValueArray`
 */


function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
  if (value == null
  /*|| value === undefined */
  || value === '') return EMPTY_ARRAY;
  var styleKeyValueArray = [];
  var unwrappedValue = unwrapSafeValue(value);

  if (Array.isArray(unwrappedValue)) {
    for (var i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === 'object') {
    for (var key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === 'string') {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
  }

  return styleKeyValueArray;
}
/**
 * Set a `value` for a `key`.
 *
 * See: `keyValueArraySet` for details
 *
 * @param keyValueArray KeyValueArray to add to.
 * @param key Style key to add.
 * @param value The value to set.
 */


function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
/**
 * Update map based styling.
 *
 * Map based styling could be anything which contains more than one binding. For example `string`,
 * or object literal. Dealing with all of these types would complicate the logic so
 * instead this function expects that the complex input is first converted into normalized
 * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
 * very cheap to compute deltas between the previous and current value.
 *
 * @param tView Associated `TView.data` contains the linked list of binding priorities.
 * @param tNode `TNode` where the binding is located.
 * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param renderer Renderer to use if any updates.
 * @param oldKeyValueArray Previous value represented as `KeyValueArray`
 * @param newKeyValueArray Current value represented as `KeyValueArray`
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param bindingIndex Binding index of the binding.
 */


function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
    oldKeyValueArray = EMPTY_ARRAY;
  }

  var oldIndex = 0;
  var newIndex = 0;
  var oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  var newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;

  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
    var oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
    var newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
    var setKey = null;
    var setValue = undefined;

    if (oldKey === newKey) {
      // UPDATE: Keys are equal => new value is overwriting old value.
      oldIndex += 2;
      newIndex += 2;

      if (oldValue !== newValue) {
        setKey = newKey;
        setValue = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
      // `"background" < "color"` so we need to delete `"background"` because it is not found in the
      // new array.
      oldIndex += 2;
      setKey = oldKey;
    } else {
      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
      // `"color" > "background"` so we need to add `color` because it is in new array but not in
      // old array.
      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
      newIndex += 2;
      setKey = newKey;
      setValue = newValue;
    }

    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
    }

    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
/**
 * Update a simple (property name) styling.
 *
 * This function takes `prop` and updates the DOM to that value. The function takes the binding
 * value as well as binding priority into consideration to determine which value should be written
 * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
 * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
 *
 * @param tView Associated `TView.data` contains the linked list of binding priorities.
 * @param tNode `TNode` where the binding is located.
 * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param renderer Renderer to use if any updates.
 * @param prop Either style property name or a class name.
 * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param bindingIndex Binding index of the binding.
 */


function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3
  /* AnyRNode */
  )) {
    // It is possible to have styling on non-elements (such as ng-container).
    // This is rare, but it does happen. In such a case, just ignore the binding.
    return;
  }

  var tData = tView.data;
  var tRange = tData[bindingIndex + 1];
  var higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;

  if (!isStylingValuePresent(higherPriorityValue)) {
    // We don't have a next duplicate, or we did not find a duplicate value.
    if (!isStylingValuePresent(value)) {
      // We should delete current value or restore to lower priority value.
      if (getTStylingRangePrevDuplicate(tRange)) {
        // We have a possible prev duplicate, let's retrieve it.
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }

    var rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
/**
 * Search for styling value with higher priority which is overwriting current value, or a
 * value of lower priority to which we should fall back if the value is `undefined`.
 *
 * When value is being applied at a location, related values need to be consulted.
 * - If there is a higher priority binding, we should be using that one instead.
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
 *   requires that we check `exp2` to see if it is set to value other than `undefined`.
 * - If there is a lower priority binding and we are changing to `undefined`
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
 *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
 *
 * NOTE: The styling stores two values.
 * 1. The raw value which came from the application is stored at `index + 0` location. (This value
 *    is used for dirty checking).
 * 2. The normalized value is stored at `index + 1`.
 *
 * @param tData `TData` used for traversing the priority.
 * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
 *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
 *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
 *   - `null` search prev and go all the way to end. Return last value where
 *     `isStylingValuePresent(value)` is true.
 * @param lView `LView` used for retrieving the actual values.
 * @param prop Property which we are interested in.
 * @param index Starting index in the linked list of styling bindings where the search should start.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  // `TNode` to use for resolving static styling. Also controls search direction.
  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
  //   - `null` search prev and go all the way to end. Return last value where
  //     `isStylingValuePresent(value)` is true.
  var isPrevDirection = tNode === null;
  var value = undefined;

  while (index > 0) {
    var rawKey = tData[index];
    var containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.

    var key = containsStatics ? rawKey[1] : rawKey;
    var isStylingMap = key === null;
    var valueAtLViewIndex = lView[index + 1];

    if (valueAtLViewIndex === NO_CHANGE) {
      // In firstUpdatePass the styling instructions create a linked list of styling.
      // On subsequent passes it is possible for a styling instruction to try to read a binding
      // which
      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
      // we have `undefined` (or empty array in case of styling-map instruction) instead. This
      // allows the resolution to apply the value (which may later be overwritten when the
      // binding actually executes.)
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;
    }

    var currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;

    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }

    if (isStylingValuePresent(currentValue)) {
      value = currentValue;

      if (isPrevDirection) {
        return value;
      }
    }

    var tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }

  if (tNode !== null) {
    // in case where we are going in next direction AND we did not find anything, we need to
    // consult residual styling
    var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

    if (residual != null
    /** OR residual !=== undefined */
    ) {
      value = keyValueArrayGet(residual, prop);
    }
  }

  return value;
}
/**
 * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
 * resolution should be used.)
 *
 * @param value Binding style value.
 */


function isStylingValuePresent(value) {
  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
  // have an opinion as to what this binding should be and you should consult other bindings by
  // priority to determine the valid value.
  // This is extracted into a single function so that we have a single place to control this.
  return value !== undefined;
}
/**
 * Normalizes and/or adds a suffix to the value.
 *
 * If value is `null`/`undefined` no suffix is added
 * @param value
 * @param suffix
 */


function normalizeSuffix(value, suffix) {
  if (value == null
  /** || value === undefined */
  ) {// do nothing
  } else if (typeof suffix === 'string') {
    value = value + suffix;
  } else if (typeof value === 'object') {
    value = stringify(unwrapSafeValue(value));
  }

  return value;
}
/**
 * Tests if the `TNode` has input shadow.
 *
 * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
 * `@Input('class')` as input.
 *
 * @param tNode `TNode` which we would like to see if it has shadow.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 16
  /* hasClassInput */
  : 32
  /* hasStyleInput */
  )) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create static text node
 *
 * @param index Index of the node in the data array
 * @param value Static string value to write.
 *
 * @codeGenApi
 */


function ɵɵtext(index) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var lView = getLView();
  var tView = getTView();
  var adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  var tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1
  /* Text */
  , value, null) : tView.data[adjustedIndex];
  var textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);
  appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.

  setCurrentTNode(tNode, false);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update text content with a lone bound value
 *
 * Used when a text node has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div>{{v0}}</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate(v0);
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate(v0) {
  ɵɵtextInterpolate1('', v0, '');
  return ɵɵtextInterpolate;
}
/**
 *
 * Update text content with single bound value surrounded by other text.
 *
 * Used when a text node has 1 interpolated value in it:
 *
 * ```html
 * <div>prefix{{v0}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate1('prefix', v0, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate1(prefix, v0, suffix) {
  var lView = getLView();
  var interpolated = interpolation1(lView, prefix, v0, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate1;
}
/**
 *
 * Update text content with 2 bound values surrounded by other text.
 *
 * Used when a text node has 2 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {
  var lView = getLView();
  var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate2;
}
/**
 *
 * Update text content with 3 bound values surrounded by other text.
 *
 * Used when a text node has 3 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  var lView = getLView();
  var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate3;
}
/**
 *
 * Update text content with 4 bound values surrounded by other text.
 *
 * Used when a text node has 4 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see ɵɵtextInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  var lView = getLView();
  var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate4;
}
/**
 *
 * Update text content with 5 bound values surrounded by other text.
 *
 * Used when a text node has 5 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  var lView = getLView();
  var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate5;
}
/**
 *
 * Update text content with 6 bound values surrounded by other text.
 *
 * Used when a text node has 6 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change. @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  var lView = getLView();
  var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate6;
}
/**
 *
 * Update text content with 7 bound values surrounded by other text.
 *
 * Used when a text node has 7 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  var lView = getLView();
  var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate7;
}
/**
 *
 * Update text content with 8 bound values surrounded by other text.
 *
 * Used when a text node has 8 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  var lView = getLView();
  var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate8;
}
/**
 * Update text content with 9 or more bound values other surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 *
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵtextInterpolateV(values) {
  var lView = getLView();
  var interpolated = interpolationV(lView, values);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated class on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div class="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate1(prefix, v0, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 * Update an interpolated class on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @codeGenApi
 */


function ɵɵclassMapInterpolateV(values) {
  var lView = getLView();
  var interpolatedValue = interpolationV(lView, values);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated style on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style="key: {{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate1(prefix, v0, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate3(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate4(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate5(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
 *             key5: {{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate6(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate7(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}; key7: {{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate8(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, '; key7: ', v7, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  var lView = getLView();
  var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 * Update an interpolated style on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolateV(
 *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
 * @codeGenApi
 */


function ɵɵstyleMapInterpolateV(values) {
  var lView = getLView();
  var interpolatedValue = interpolationV(lView, values);
  ɵɵstyleMap(interpolatedValue);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated style property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate1;
}
/**
 *
 * Update an interpolated style property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate2;
}
/**
 *
 * Update an interpolated style property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate3;
}
/**
 *
 * Update an interpolated style property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate4;
}
/**
 *
 * Update an interpolated style property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate5;
}
/**
 *
 * Update an interpolated style property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate6;
}
/**
 *
 * Update an interpolated style property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate7(
 *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate7;
}
/**
 *
 * Update an interpolated style property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
 * '-', v7, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate8;
}
/**
 * Update an interpolated style property on an element with 9 or more bound values surrounded by
 * text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
 * </div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolateV(
 *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`..
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
  var lView = getLView();
  var interpolatedValue = interpolationV(lView, values);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a property on a host element. Only applies to native node properties, not inputs.
 *
 * Operates on the element selected by index via the {@link select} instruction.
 *
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 * @returns This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵhostProperty(propName, value, sanitizer) {
  var lView = getLView();
  var bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵhostProperty;
}
/**
 * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
 * the component's renderer. Normally all host bindings are evaluated with the parent
 * component's renderer, but, in the case of animation @triggers, they need to be
 * evaluated with the sub component's renderer (because that's where the animation
 * triggers are defined).
 *
 * Do not use this instruction as a replacement for `elementProperty`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * @param index The index of the element to update in the data array
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 *
 * @codeGenApi
 */


function ɵɵsyntheticHostProperty(propName, value, sanitizer) {
  var lView = getLView();
  var bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    var tView = getTView();
    var tNode = getSelectedTNode();
    var currentDef = getCurrentDirectiveDef(tView.data);
    var renderer = loadComponentRenderer(currentDef, tNode, lView);
    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵsyntheticHostProperty;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */


if (typeof ngI18nClosureMode === 'undefined') {
  // These property accesses can be ignored because ngI18nClosureMode will be set to false
  // when optimizing code and the whole if statement will be dropped.
  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
  (function () {
    // tslint:disable-next-line:no-toplevel-property-access
    _global['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.
    // tslint:disable-next-line:no-toplevel-property-access
    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
  })();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY.


var u = undefined;

function plural(n) {
  var i = Math.floor(Math.abs(n)),
      v = n.toString().replace(/^[^.]*\.?/, '').length;
  if (i === 1 && v === 0) return 1;
  return 5;
}

var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "×", "‰", "∞", "NaN", ":"], ["#,##0.###", "#,##0%", "¤#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This const is used to store the locale data registered with `registerLocaleData`
 */

var LOCALE_DATA = {};
/**
 * Register locale data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
 *
 * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
 */

function registerLocaleData(data, localeId, extraData) {
  if (typeof localeId !== 'string') {
    extraData = localeId;
    localeId = data[LocaleDataIndex.LocaleId];
  }

  localeId = localeId.toLowerCase().replace(/_/g, '-');
  LOCALE_DATA[localeId] = data;

  if (extraData) {
    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
  }
}
/**
 * Finds the locale data for a given locale.
 *
 * @param locale The locale code.
 * @returns The locale data.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 */


function findLocaleData(locale) {
  var normalizedLocale = normalizeLocale(locale);
  var match = getLocaleData(normalizedLocale);

  if (match) {
    return match;
  } // let's try to find a parent locale


  var parentLocale = normalizedLocale.split('-')[0];
  match = getLocaleData(parentLocale);

  if (match) {
    return match;
  }

  if (parentLocale === 'en') {
    return localeEn;
  }

  throw new Error("Missing locale data for the locale \"".concat(locale, "\"."));
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * @param locale The code of the locale whose currency code we want.
 * @returns The code of the default currency for the given locale.
 *
 */


function getLocaleCurrencyCode(locale) {
  var data = findLocaleData(locale);
  return data[LocaleDataIndex.CurrencyCode] || null;
}
/**
 * Retrieves the plural function used by ICU expressions to determine the plural case to use
 * for a given locale.
 * @param locale A locale code for the locale format rules to use.
 * @returns The plural function for the locale.
 * @see `NgPlural`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 */


function getLocalePluralCase(locale) {
  var data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
/**
 * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
 * or from the global `ng.common.locale`.
 */


function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }

  return LOCALE_DATA[normalizedLocale];
}
/**
 * Helper function to remove all the locale data from `LOCALE_DATA`.
 */


function unregisterAllLocaleData() {
  LOCALE_DATA = {};
}
/**
 * Index of each type of locale data from the locale data array
 */


var LocaleDataIndex;

(function (LocaleDataIndex) {
  LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
  LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
  LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
  LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
  LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
  LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
  LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
  LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
  LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
  LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
  LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
  LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
  LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
  LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
  LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
  LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
  LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
  LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
  LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
  LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
  LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
  LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
})(LocaleDataIndex || (LocaleDataIndex = {}));
/**
 * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
 */


function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, '-');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
/**
 * Returns the plural case based on the locale
 */

function getPluralCase(value, locale) {
  var plural = getLocalePluralCase(locale)(parseInt(value, 10));
  var result = pluralMapping[plural];
  return result !== undefined ? result : 'other';
}
/**
 * The locale id that the application is using by default (for translations and ICU expressions).
 */


var DEFAULT_LOCALE_ID = 'en-US';
/**
 * USD currency code that the application uses by default for CurrencyPipe when no
 * DEFAULT_CURRENCY_CODE is provided.
 */

var USD_CURRENCY_CODE = 'USD';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks that the next string is an element name.
 *
 * See `I18nMutateOpCodes` documentation.
 */

var ELEMENT_MARKER = {
  marker: 'element'
};
/**
 * Marks that the next string is comment text need for ICU.
 *
 * See `I18nMutateOpCodes` documentation.
 */

var ICU_MARKER = {
  marker: 'ICU'
};
/**
 * See `I18nCreateOpCodes`
 */

var I18nCreateOpCode;

(function (I18nCreateOpCode) {
  /**
   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and
   * `COMMENT`.
   */
  I18nCreateOpCode[I18nCreateOpCode["SHIFT"] = 2] = "SHIFT";
  /**
   * Should the node be appended to parent imedditatly after creation.
   */

  I18nCreateOpCode[I18nCreateOpCode["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
  /**
   * If set the node should be comment (rather than a text) node.
   */

  I18nCreateOpCode[I18nCreateOpCode["COMMENT"] = 2] = "COMMENT";
})(I18nCreateOpCode || (I18nCreateOpCode = {})); // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


var unusedValueExportToPlacateAjd$6 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The locale id that the application is currently using (for translations and ICU expressions).
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 */

var LOCALE_ID = DEFAULT_LOCALE_ID;
/**
 * Sets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 *
 * @param localeId
 */

function setLocaleId(localeId) {
  assertDefined(localeId, "Expected localeId to be defined");

  if (typeof localeId === 'string') {
    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
  }
}
/**
 * Gets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 */


function getLocaleId() {
  return LOCALE_ID;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * takes `TNode.insertBeforeIndex` into account.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  var tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  var insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;

  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
/**
 * Process `TNode.insertBeforeIndex` by adding i18n text nodes.
 *
 * See `TNode.insertBeforeIndex`
 */


function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  var tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;

  if (Array.isArray(tNodeInsertBeforeIndex)) {
    // An array indicates that there are i18n nodes that need to be added as children of this
    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so
    // only now can be added. The first element of the array is the normal index where we should
    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of
    // `childRNode`.
    ngDevMode && assertDomNode(childRNode);
    var i18nParent = childRNode;
    var anchorRNode = null;

    if (!(childTNode.type & 3
    /* AnyRNode */
    )) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }

    if (i18nParent !== null && (childTNode.flags & 2
    /* isComponentHost */
    ) === 0) {
      for (var i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.
        // see `assertDomNode` below.
        var i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list
 * `tNode.insertBeforeIndex`.
 *
 * Things to keep in mind:
 * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the
 *    `ɵɵi18nStart` instruction.
 * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by
 *    `ɵɵelementStart` instruction.
 * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a
 *    smaller index `TNode` is guaranteed to be created before a larger one)
 *
 * We use the above three invariants to determine `TNode.insertBeforeIndex`.
 *
 * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,
 * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that
 * the next node is not yet created and therefore we can't insert in front of it.
 *
 * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't
 *        know if there will be further `TNode`s inserted after.)
 * Rule2: If `previousTNode` is created after the `tNode` being inserted, then
 *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check
 *        previous to see if we can update its `insertBeforeTNode`)
 *
 * See `TNode.insertBeforeIndex` for more context.
 *
 * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in
 *     reverse order. (If `TNode` would have `previous` this would not be necessary.)
 * @param newTNode A TNode to add to the `previousTNodes` list.
 */


function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  // Start with Rule1
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');
  previousTNodes.push(newTNode);

  if (previousTNodes.length > 1) {
    for (var i = previousTNodes.length - 2; i >= 0; i--) {
      var existingTNode = previousTNodes[i]; // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.
      // It is safe to ignore them.

      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)
          // then add the `insertBeforeIndex`.
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}

function isI18nText(tNode) {
  return !(tNode.type & 64
  /* Placeholder */
  );
}

function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}

function getInsertBeforeIndex(tNode) {
  var index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}

function setInsertBeforeIndex(tNode, value) {
  var index = tNode.insertBeforeIndex;

  if (Array.isArray(index)) {
    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieve `TIcu` at a given `index`.
 *
 * The `TIcu` can be stored either directly (if it is nested ICU) OR
 * it is stored inside tho `TIcuContainer` if it is top level ICU.
 *
 * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
 * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
 * expressed (parent ICU may have selected a case which does not contain it.)
 *
 * @param tView Current `TView`.
 * @param index Index where the value should be read from.
 */


function getTIcu(tView, index) {
  var value = tView.data[index];
  if (value === null || typeof value === 'string') return null;

  if (ngDevMode && !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {
    throwError('We expect to get \'null\'|\'TIcu\'|\'TIcuContainer\', but got: ' + value);
  } // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be
  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it
  // will be just two cases which fits into the browser inline cache (inline cache can take up to
  // 4)


  var tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
/**
 * Store `TIcu` at a give `index`.
 *
 * The `TIcu` can be stored either directly (if it is nested ICU) OR
 * it is stored inside tho `TIcuContainer` if it is top level ICU.
 *
 * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
 * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
 * expressed (parent ICU may have selected a case which does not contain it.)
 *
 * @param tView Current `TView`.
 * @param index Index where the value should be stored at in `Tview.data`
 * @param tIcu The TIcu to store.
 */


function setTIcu(tView, index, tIcu) {
  var tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \'null\'|\'TIcuContainer\'');

  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(tNode, 32
    /* Icu */
    );
    tNode.value = tIcu;
  }
}
/**
 * Set `TNode.insertBeforeIndex` taking the `Array` into account.
 *
 * See `TNode.insertBeforeIndex`
 */


function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  var insertBeforeIndex = tNode.insertBeforeIndex;

  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [null
    /* may be updated to number later */
    , index];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');
    insertBeforeIndex.push(index);
  }
}
/**
 * Create `TNode.type=TNodeType.Placeholder` node.
 *
 * See `TNodeType.Placeholder` for more information.
 */


function createTNodePlaceholder(tView, previousTNodes, index) {
  var tNode = createTNodeAtIndex(tView, index, 64
  /* Placeholder */
  , null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
/**
 * Returns current ICU case.
 *
 * ICU cases are stored as index into the `TIcu.cases`.
 * At times it is necessary to communicate that the ICU case just switched and that next ICU update
 * should update all bindings regardless of the mask. In such a case the we store negative numbers
 * for cases which have just been switched. This function removes the negative flag.
 */


function getCurrentICUCaseIndex(tIcu, lView) {
  var currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}

function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17
  /* SHIFT_PARENT */
  ;
}

function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070
  /* MASK_REF */
  ) >>> 1
  /* SHIFT_REF */
  ;
}

function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1
  /* MASK_INSTRUCTION */
  ;
}

function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');
  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');
  return opCode | parentIdx << 17
  /* SHIFT_PARENT */
  | refIdx << 1
  /* SHIFT_REF */
  ;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Keep track of which input bindings in `ɵɵi18nExp` have changed.
 *
 * This is used to efficiently update expressions in i18n only when the corresponding input has
 * changed.
 *
 * 1) Each bit represents which of the `ɵɵi18nExp` has changed.
 * 2) There are 32 bits allowed in JS.
 * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more
 * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means
 * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare
 * so in practice it should not be an issue.)
 */


var changeMask = 0;
/**
 * Keeps track of which bit needs to be updated in `changeMask`
 *
 * This value gets incremented on every call to `ɵɵi18nExp`
 */

var changeMaskCounter = 0;
/**
 * Keep track of which input bindings in `ɵɵi18nExp` have changed.
 *
 * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.
 *
 * @param hasChange did `ɵɵi18nExp` detect a change.
 */

function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }

  changeMaskCounter++;
}

function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, "tView should be defined");
    var tI18n = tView.data[index]; // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`

    var updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    var bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  } // Reset changeMask & maskBit to default for the next update cycle


  changeMask = 0;
  changeMaskCounter = 0;
}
/**
 * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.
 *
 * Creates text (and comment) nodes which are internationalized.
 *
 * @param lView Current lView
 * @param createOpCodes Set of op-codes to apply
 * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is
 *     a root node.
 * @param insertInFrontOf DOM node that should be used as an anchor.
 */


function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  var renderer = lView[RENDERER];

  for (var i = 0; i < createOpCodes.length; i++) {
    var opCode = createOpCodes[i++];
    var text = createOpCodes[i];
    var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    var index = opCode >>> I18nCreateOpCode.SHIFT;
    var rNode = lView[index];

    if (rNode === null) {
      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a
      // case which was already instantiated, no need to create new DOM nodes.
      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);
    }

    if (appendNow && parentRNode !== null) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
/**
 * Apply `I18nMutateOpCodes` OpCodes.
 *
 * @param tView Current `TView`
 * @param mutableOpCodes Mutable OpCodes to process
 * @param lView Current `LView`
 * @param anchorRNode place where the i18n node should be inserted.
 */


function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  var renderer = lView[RENDERER]; // `rootIdx` represents the node into which all inserts happen.

  var rootIdx = null; // `rootRNode` represents the real node into which we insert. This can be different from
  // `lView[rootIdx]` if we have projection.
  //  - null we don't have a parent (as can be the case in when we are inserting into a root of
  //    LView which has no parent.)
  //  - `RElement` The element representing the root after taking projection into account.

  var rootRNode;

  for (var i = 0; i < mutableOpCodes.length; i++) {
    var opCode = mutableOpCodes[i];

    if (typeof opCode == 'string') {
      var textNodeIndex = mutableOpCodes[++i];

      if (lView[textNodeIndex] === null) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = createTextNode(renderer, opCode);
      }
    } else if (typeof opCode == 'number') {
      switch (opCode & 1
      /* MASK_INSTRUCTION */
      ) {
        case 0
        /* AppendChild */
        :
          var parentIdx = getParentFromIcuCreateOpCode(opCode);

          if (rootIdx === null) {
            // The first operation should save the `rootIdx` because the first operation
            // must insert into the root. (Only subsequent operations can insert into a dynamic
            // parent)
            rootIdx = parentIdx;
            rootRNode = nativeParentNode(renderer, anchorRNode);
          }

          var insertInFrontOf = void 0;
          var parentRNode = void 0;

          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          } // FIXME(misko): Refactor with `processI18nText`


          if (parentRNode !== null) {
            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.
            // In such a case there is no "root" we can attach to. This is fine, as we still need to
            // create the elements. When the `LView` gets later added to a parent these "root" nodes
            // get picked up and added.
            ngDevMode && assertDomNode(parentRNode);
            var refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref'); // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n
            // which can't have components.

            var child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            var tIcu = getTIcu(tView, refIdx);

            if (tIcu !== null && typeof tIcu === 'object') {
              // If we just added a comment node which has ICU then that ICU may have already been
              // rendered and therefore we need to re-add it here.
              ngDevMode && assertTIcu(tIcu);
              var caseIndex = getCurrentICUCaseIndex(tIcu, lView);

              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }

          break;

        case 1
        /* Attr */
        :
          var elementNodeIndex = opCode >>> 1
          /* SHIFT_REF */
          ;
          var attrName = mutableOpCodes[++i];
          var attrValue = mutableOpCodes[++i]; // This code is used for ICU expressions only, since we don't support
          // directives/components in ICUs, we don't need to worry about inputs here

          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;

        default:
          throw new Error("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          var commentValue = mutableOpCodes[++i];
          var commentNodeIndex = mutableOpCodes[++i];

          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, 'string', "Expected \"".concat(commentValue, "\" to be a comment node value"));
            ngDevMode && ngDevMode.rendererCreateComment++;
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            var commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

            attachPatchData(commentRNode, lView);
          }

          break;

        case ELEMENT_MARKER:
          var tagName = mutableOpCodes[++i];
          var _elementNodeIndex = mutableOpCodes[++i];

          if (lView[_elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, 'string', "Expected \"".concat(tagName, "\" to be an element node tag name"));
            ngDevMode && ngDevMode.rendererCreateElement++;
            ngDevMode && assertIndexInExpandoRange(lView, _elementNodeIndex);
            var elementRNode = lView[_elementNodeIndex] = createElementNode(renderer, tagName, null); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

            attachPatchData(elementRNode, lView);
          }

          break;

        default:
          ngDevMode && throwError("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
      }
    }
  }
}
/**
 * Apply `I18nUpdateOpCodes` OpCodes
 *
 * @param tView Current `TView`
 * @param lView Current `LView`
 * @param updateOpCodes OpCodes to process
 * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
 * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
 *     `bindingsStartIndex`)
 */


function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {
  for (var i = 0; i < updateOpCodes.length; i++) {
    // bit code to check if we should apply the next update
    var checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes

    var skipCodes = updateOpCodes[++i];

    if (checkBit & changeMask) {
      // The value has been updated since last checked
      var value = '';

      for (var j = i + 1; j <= i + skipCodes; j++) {
        var opCode = updateOpCodes[j];

        if (typeof opCode == 'string') {
          value += opCode;
        } else if (typeof opCode == 'number') {
          if (opCode < 0) {
            // Negative opCode represent `i18nExp` values offset.
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            var nodeIndex = opCode >>> 2
            /* SHIFT_REF */
            ;

            switch (opCode & 3
            /* MASK_OPCODE */
            ) {
              case 1
              /* Attr */
              :
                var propName = updateOpCodes[++j];
                var sanitizeFn = updateOpCodes[++j];
                var tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');

                if (typeof tNodeOrTagName === 'string') {
                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does
                  // not have TNode), in which case we know that there are no directives, and hence
                  // we use attribute setting.
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                }

                break;

              case 0
              /* Text */
              :
                var rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;

              case 2
              /* IcuSwitch */
              :
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;

              case 3
              /* IcuUpdate */
              :
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      var _opCode = updateOpCodes[i + 1];

      if (_opCode > 0 && (_opCode & 3
      /* MASK_OPCODE */
      ) === 3
      /* IcuUpdate */
      ) {
        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but
        // we still need to execute `icuUpdateCase` because the case has changed recently due to
        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in
        // pairs.)
        var _nodeIndex = _opCode >>> 2
        /* SHIFT_REF */
        ;

        var tIcu = getTIcu(tView, _nodeIndex);
        var currentIndex = lView[tIcu.currentCaseLViewIndex];

        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }

    i += skipCodes;
  }
}
/**
 * Apply OpCodes associated with updating an existing ICU.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
 * @param lView Current `LView`
 */


function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  var activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

  if (activeCaseIndex !== null) {
    var mask = changeMask;

    if (activeCaseIndex < 0) {
      // Clear the flag.
      // Negative number means that the ICU was freshly created and we need to force the update.
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex; // -1 is same as all bits on, which simulates creation since it marks all bits dirty

      mask = -1;
    }

    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
/**
 * Apply OpCodes associated with switching a case on ICU.
 *
 * This involves tearing down existing case and than building up a new case.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param lView Current `LView`
 * @param value Value of the case to update to.
 */


function applyIcuSwitchCase(tView, tIcu, lView, value) {
  // Rebuild a new case for this ICU
  var caseIndex = getCaseIndex(tIcu, value);
  var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;

    if (caseIndex !== null) {
      // Add the nodes for the new case
      var anchorRNode = lView[tIcu.anchorIdx];

      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
    }
  }
}
/**
 * Apply OpCodes associated with tearing ICU case.
 *
 * This involves tearing down existing case and than building up a new case.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param lView Current `LView`
 */


function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  var activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

  if (activeCaseIndex !== null) {
    var removeCodes = tIcu.remove[activeCaseIndex];

    for (var i = 0; i < removeCodes.length; i++) {
      var nodeOrIcuIndex = removeCodes[i];

      if (nodeOrIcuIndex > 0) {
        // Positive numbers are `RNode`s.
        var rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        // Negative numbers are ICUs
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
/**
 * Returns the index of the current case of an ICU expression depending on the main binding value
 *
 * @param icuExpression
 * @param bindingValue The value of the main binding used by this ICU expression
 */


function getCaseIndex(icuExpression, bindingValue) {
  var index = icuExpression.cases.indexOf(bindingValue);

  if (index === -1) {
    switch (icuExpression.type) {
      case 1
      /* plural */
      :
        {
          var resolvedCase = getPluralCase(bindingValue, getLocaleId());
          index = icuExpression.cases.indexOf(resolvedCase);

          if (index === -1 && resolvedCase !== 'other') {
            index = icuExpression.cases.indexOf('other');
          }

          break;
        }

      case 0
      /* select */
      :
        {
          index = icuExpression.cases.indexOf('other');
          break;
        }
    }
  }

  return index === -1 ? null : index;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function loadIcuContainerVisitor() {
  var _stack = [];

  var _index = -1;

  var _lView;

  var _removes;
  /**
   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`
   * to determine which root belong to the ICU.
   *
   * Example of usage.
   * ```
   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);
   * let rNode: RNode|null;
   * while(rNode = nextRNode()) {
   *   console.log(rNode);
   * }
   * ```
   *
   * @param tIcuContainerNode Current `TIcuContainerNode`
   * @param lView `LView` where the `RNode`s should be looked up.
   */


  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _lView = lView;

    while (_stack.length) {
      _stack.pop();
    }

    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(tIcuContainerNode.value, lView);
    return icuContainerIteratorNext;
  }

  function enterIcu(tIcu, lView) {
    _index = 0;
    var currentCase = getCurrentICUCaseIndex(tIcu, lView);

    if (currentCase !== null) {
      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
      _removes = tIcu.remove[currentCase];
    } else {
      _removes = EMPTY_ARRAY;
    }
  }

  function icuContainerIteratorNext() {
    if (_index < _removes.length) {
      var removeOpCode = _removes[_index++];
      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');

      if (removeOpCode > 0) {
        var rNode = _lView[removeOpCode];
        ngDevMode && assertDomNode(rNode);
        return rNode;
      } else {
        _stack.push(_index, _removes); // ICUs are represented by negative indices


        var tIcuIndex = ~removeOpCode;
        var tIcu = _lView[TVIEW].data[tIcuIndex];
        ngDevMode && assertTIcu(tIcu);
        enterIcu(tIcu, _lView);
        return icuContainerIteratorNext();
      }
    } else {
      if (_stack.length === 0) {
        return null;
      } else {
        _removes = _stack.pop();
        _index = _stack.pop();
        return icuContainerIteratorNext();
      }
    }
  }

  return icuContainerIteratorStart;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Converts `I18nCreateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.
 * This function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nCreateOpCodes` if attached as a method.
 * @param opcodes `I18nCreateOpCodes` if invoked as a function.
 */


function i18nCreateOpCodesToString(opcodes) {
  var createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  var lines = [];

  for (var i = 0; i < createOpCodes.length; i++) {
    var opCode = createOpCodes[i++];
    var text = createOpCodes[i];
    var isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    var appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    var index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push("lView[".concat(index, "] = document.").concat(isComment ? 'createComment' : 'createText', "(").concat(JSON.stringify(text), ");"));

    if (appendNow) {
      lines.push("parent.appendChild(lView[".concat(index, "]);"));
    }
  }

  return lines;
}
/**
 * Converts `I18nUpdateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
 * This function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nUpdateOpCodes` if attached as a method.
 * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
 */


function i18nUpdateOpCodesToString(opcodes) {
  var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  var lines = [];

  function consumeOpCode(value) {
    var ref = value >>> 2
    /* SHIFT_REF */
    ;
    var opCode = value & 3
    /* MASK_OPCODE */
    ;

    switch (opCode) {
      case 0
      /* Text */
      :
        return "(lView[".concat(ref, "] as Text).textContent = $$$");

      case 1
      /* Attr */
      :
        var attrName = parser.consumeString();
        var sanitizationFn = parser.consumeFunction();

        var _value = sanitizationFn ? "(".concat(sanitizationFn, ")($$$)") : '$$$';

        return "(lView[".concat(ref, "] as Element).setAttribute('").concat(attrName, "', ").concat(_value, ")");

      case 2
      /* IcuSwitch */
      :
        return "icuSwitchCase(".concat(ref, ", $$$)");

      case 3
      /* IcuUpdate */
      :
        return "icuUpdateCase(".concat(ref, ")");
    }

    throw new Error('unexpected OpCode');
  }

  while (parser.hasMore()) {
    var mask = parser.consumeNumber();
    var size = parser.consumeNumber();
    var end = parser.i + size;
    var statements = [];
    var statement = '';

    while (parser.i < end) {
      var value = parser.consumeNumberOrString();

      if (typeof value === 'string') {
        statement += value;
      } else if (value < 0) {
        // Negative numbers are ref indexes
        // Here `i` refers to current binding index. It is to signify that the value is relative,
        // rather than absolute.
        statement += '${lView[i' + value + ']}';
      } else {
        // Positive numbers are operations.
        var opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
        statement = '';
      }
    }

    lines.push("if (mask & 0b".concat(mask.toString(2), ") { ").concat(statements.join(' '), " }"));
  }

  return lines;
}
/**
 * Converts `I18nCreateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This
 * function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nCreateOpCodes` if attached as a method.
 * @param opcodes `I18nCreateOpCodes` if invoked as a function.
 */


function icuCreateOpCodesToString(opcodes) {
  var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  var lines = [];

  function consumeOpCode(opCode) {
    var parent = getParentFromIcuCreateOpCode(opCode);
    var ref = getRefFromIcuCreateOpCode(opCode);

    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0
      /* AppendChild */
      :
        return "(lView[".concat(parent, "] as Element).appendChild(lView[").concat(lastRef, "])");

      case 1
      /* Attr */
      :
        return "(lView[".concat(ref, "] as Element).setAttribute(\"").concat(parser.consumeString(), "\", \"").concat(parser.consumeString(), "\")");
    }

    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));
  }

  var lastRef = -1;

  while (parser.hasMore()) {
    var value = parser.consumeNumberStringOrMarker();

    if (value === ICU_MARKER) {
      var text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push("lView[".concat(lastRef, "] = document.createComment(\"").concat(text, "\")"));
    } else if (value === ELEMENT_MARKER) {
      var _text = parser.consumeString();

      lastRef = parser.consumeNumber();
      lines.push("lView[".concat(lastRef, "] = document.createElement(\"").concat(_text, "\")"));
    } else if (typeof value === 'string') {
      lastRef = parser.consumeNumber();
      lines.push("lView[".concat(lastRef, "] = document.createTextNode(\"").concat(value, "\")"));
    } else if (typeof value === 'number') {
      var line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error('Unexpected value');
    }
  }

  return lines;
}
/**
 * Converts `I18nRemoveOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This
 * function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nRemoveOpCodes` if attached as a method.
 * @param opcodes `I18nRemoveOpCodes` if invoked as a function.
 */


function i18nRemoveOpCodesToString(opcodes) {
  var removeCodes = opcodes || (Array.isArray(this) ? this : []);
  var lines = [];

  for (var i = 0; i < removeCodes.length; i++) {
    var nodeOrIcuIndex = removeCodes[i];

    if (nodeOrIcuIndex > 0) {
      // Positive numbers are `RNode`s.
      lines.push("remove(lView[".concat(nodeOrIcuIndex, "])"));
    } else {
      // Negative numbers are ICUs
      lines.push("removeNestedICU(".concat(~nodeOrIcuIndex, ")"));
    }
  }

  return lines;
}

var OpCodeParser = /*#__PURE__*/function () {
  function OpCodeParser(codes) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, OpCodeParser);

    this.i = 0;
    this.codes = codes;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(OpCodeParser, [{
    key: "hasMore",
    value: function hasMore() {
      return this.i < this.codes.length;
    }
  }, {
    key: "consumeNumber",
    value: function consumeNumber() {
      var value = this.codes[this.i++];
      assertNumber(value, 'expecting number in OpCode');
      return value;
    }
  }, {
    key: "consumeString",
    value: function consumeString() {
      var value = this.codes[this.i++];
      assertString(value, 'expecting string in OpCode');
      return value;
    }
  }, {
    key: "consumeFunction",
    value: function consumeFunction() {
      var value = this.codes[this.i++];

      if (value === null || typeof value === 'function') {
        return value;
      }

      throw new Error('expecting function in OpCode');
    }
  }, {
    key: "consumeNumberOrString",
    value: function consumeNumberOrString() {
      var value = this.codes[this.i++];

      if (typeof value === 'string') {
        return value;
      }

      assertNumber(value, 'expecting number or string in OpCode');
      return value;
    }
  }, {
    key: "consumeNumberStringOrMarker",
    value: function consumeNumberStringOrMarker() {
      var value = this.codes[this.i++];

      if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {
        return value;
      }

      assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');
      return value;
    }
  }]);

  return OpCodeParser;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var BINDING_REGEXP = /�(\d+):?\d*�/gi;
var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
var NESTED_ICU = /�(\d+)�/;
var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
var MARKER = "\uFFFD";
var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
/**
 * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
 * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
 * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
 * and later on replaced by a space. We are re-implementing the same idea here, since translations
 * might contain this special character.
 */

var NGSP_UNICODE_REGEXP = /\uE500/g;

function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, ' ');
}
/**
 * Create dynamic nodes from i18n translation block.
 *
 * - Text nodes are created synchronously
 * - TNodes are linked into tree lazily
 *
 * @param tView Current `TView`
 * @parentTNodeIndex index to the parent TNode of this i18n block
 * @param lView Current `LView`
 * @param index Index of `ɵɵi18nStart` instruction.
 * @param message Message to translate.
 * @param subTemplateIndex Index into the sub template of message translation. (ie in case of
 *     `ngIf`) (-1 otherwise)
 */


function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  var rootTNode = getCurrentParentTNode();
  var createOpCodes = [];
  var updateOpCodes = [];
  var existingTNodeStack = [[]];

  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  message = getTranslationForTemplate(message, subTemplateIndex);
  var msgParts = replaceNgsp(message).split(PH_REGEXP);

  for (var i = 0; i < msgParts.length; i++) {
    var value = msgParts[i];

    if ((i & 1) === 0) {
      // Even indexes are text (including bindings & ICU expressions)
      var parts = i18nParseTextIntoPartsAndICU(value);

      for (var j = 0; j < parts.length; j++) {
        var part = parts[j];

        if ((j & 1) === 0) {
          // `j` is odd therefore `part` is string
          var text = part;
          ngDevMode && assertString(text, 'Parsed ICU part should be string');

          if (text !== '') {
            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
          }
        } else {
          // `j` is Even therefor `part` is an `ICUExpression`
          var icuExpression = part; // Verify that ICU expression has the right shape. Translations might contain invalid
          // constructions (while original messages were correct), so ICU parsing at runtime may
          // not succeed (thus `icuExpression` remains a string).
          // Note: we intentionally retain the error here by not using `ngDevMode`, because
          // the value can change based on the locale and users aren't guaranteed to hit
          // an invalid string while they're developing.

          if (typeof icuExpression !== 'object') {
            throw new Error("Unable to parse ICU expression in \"".concat(message, "\" message."));
          }

          var icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? "ICU ".concat(index, ":").concat(icuExpression.mainBinding) : '', true);
          var icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');
          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      // Odd indexes are placeholders (elements and sub-templates)
      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')
      var isClosing = value.charCodeAt(0) === 47
      /* SLASH */
      ;
      var type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(type, 42
      /* STAR */
      , 35
      /* HASH */
      );

      var _index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));

      if (isClosing) {
        existingTNodeStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        var tNode = createTNodePlaceholder(tView, existingTNodeStack[0], _index2);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
      }
    }
  }

  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes
  };
}
/**
 * Allocate space in i18n Range add create OpCode instruction to crete a text or comment node.
 *
 * @param tView Current `TView` needed to allocate space in i18n range.
 * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be
 *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.
 * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
 * @param lView Current `LView` needed to allocate space in i18n range.
 * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.
 * @param text Text to be added when the `Text` or `Comment` node will be created.
 * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.
 */


function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
  var i18nNodeIdx = allocExpando(tView, lView, 1, null);
  var opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  var parentTNode = getCurrentParentTNode();

  if (rootTNode === parentTNode) {
    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.
    // (there is no parent), but in some circumstances (because we are inconsistent about how we set
    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.
    parentTNode = null;
  }

  if (parentTNode === null) {
    // If we don't have a parent that means that we can eagerly add nodes.
    // If we have a parent than these nodes can't be added now (as the parent has not been created
    // yet) and instead the `parentTNode` is responsible for adding it. See
    // `TNode.insertBeforeIndex`
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }

  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }

  createOpCodes.push(opCode, text === null ? '' : text); // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the
  // bindings are.

  var tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32
  /* Icu */
  : 1
  /* Text */
  , text === null ? ngDevMode ? '{{?}}' : '' : text, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  var tNodeIdx = tNode.index;
  setCurrentTNode(tNode, false
  /* Text nodes are self closing */
  );

  if (parentTNode !== null && rootTNode !== parentTNode) {
    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)
    // We have to make sure to add ourselves to the parent.
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }

  return tNode;
}
/**
 * Processes text node in i18n block.
 *
 * Text nodes can have:
 * - Create instruction in `createOpCodes` for creating the text node.
 * - Allocate spec for text node in i18n range of `LView`
 * - If contains binding:
 *    - bindings => allocate space in i18n range of `LView` to store the binding value.
 *    - populate `updateOpCodes` with update instructions.
 *
 * @param tView Current `TView`
 * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will
 *     be added as part of the `i18nStart` instruction or as part of the
 *     `TNode.insertBeforeIndex`.
 * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
 * @param createOpCodes Location where the creation OpCodes will be stored.
 * @param lView Current `LView`
 * @param text The translated text (which may contain binding)
 */


function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
  var hasBinding = text.match(BINDING_REGEXP);
  var tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);

  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);
  }
}
/**
 * See `i18nAttributes` above.
 */


function i18nAttributesFirstPass(tView, index, values) {
  var previousElement = getCurrentTNode();
  var previousElementIndex = previousElement.index;
  var updateOpCodes = [];

  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  if (tView.firstCreatePass && tView.data[index] === null) {
    for (var i = 0; i < values.length; i += 2) {
      var attrName = values[i];
      var message = values[i + 1];

      if (message !== '') {
        // Check if attribute value contains an ICU and throw an error if that's the case.
        // ICUs in element attributes are not supported.
        // Note: we intentionally retain the error here by not using `ngDevMode`, because
        // the `value` can change based on the locale and users aren't guaranteed to hit
        // an invalid string while they're developing.
        if (ICU_REGEXP.test(message)) {
          throw new Error("ICU expressions are not supported in attributes. Message: \"".concat(message, "\"."));
        } // i18n attributes that hit this code path are guaranteed to have bindings, because
        // the compiler treats static i18n attributes as regular attribute bindings.
        // Since this may not be the first i18n attribute on this element we need to pass in how
        // many previous bindings there have already been.


        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }

    tView.data[index] = updateOpCodes;
  }
}
/**
 * Generate the OpCodes to update the bindings of a string.
 *
 * @param updateOpCodes Place where the update opcodes will be stored.
 * @param str The string containing the bindings.
 * @param destinationNode Index of the destination node which will receive the binding.
 * @param attrName Name of the attribute, if the string belongs to an attribute.
 * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
 * @param bindingStart The lView index of the next expression that can be bound via an opCode.
 * @returns The mask value for these bindings
 */


function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');
  var maskIndex = updateOpCodes.length; // Location of mask

  var sizeIndex = maskIndex + 1; // location of size for skipping

  updateOpCodes.push(null, null); // Alloc space for mask and size

  var startIndex = maskIndex + 2; // location of first allocation.

  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  var textParts = str.split(BINDING_REGEXP);
  var mask = 0;

  for (var j = 0; j < textParts.length; j++) {
    var textValue = textParts[j];

    if (j & 1) {
      // Odd indexes are bindings
      var bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== '') {
      // Even indexes are text
      updateOpCodes.push(textValue);
    }
  }

  updateOpCodes.push(destinationNode << 2
  /* SHIFT_REF */
  | (attrName ? 1
  /* Attr */
  : 0
  /* Text */
  ));

  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }

  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
/**
 * Count the number of bindings in the given `opCodes`.
 *
 * It could be possible to speed this up, by passing the number of bindings found back from
 * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more
 * complexity in the code and/or transient objects to be created.
 *
 * Since this function is only called once when the template is instantiated, is trivial in the
 * first instance (since `opCodes` will be an empty array), and it is not common for elements to
 * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.
 */


function countBindings(opCodes) {
  var count = 0;

  for (var i = 0; i < opCodes.length; i++) {
    var opCode = opCodes[i]; // Bindings are negative numbers.

    if (typeof opCode === 'number' && opCode < 0) {
      count++;
    }
  }

  return count;
}
/**
 * Convert binding index to mask bit.
 *
 * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
 * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to
 * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner
 * case is that we will execute binding code more often than necessary. (penalty of performance)
 */


function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}

function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
/**
 * Removes everything inside the sub-templates of a message.
 */


function removeInnerTemplateTranslation(message) {
  var match;
  var res = '';
  var index = 0;
  var inTemplate = false;
  var tagMatched;

  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match.index + match[0].length);
      tagMatched = match[1];
      inTemplate = true;
    } else {
      if (match[0] === "".concat(MARKER, "/*").concat(tagMatched).concat(MARKER)) {
        index = match.index;
        inTemplate = false;
      }
    }
  }

  ngDevMode && assertEqual(inTemplate, false, "Tag mismatch: unable to find the end of the sub-template in the translation \"".concat(message, "\""));
  res += message.substr(index);
  return res;
}
/**
 * Extracts a part of a message and removes the rest.
 *
 * This method is used for extracting a part of the message associated with a template. A
 * translated message can span multiple templates.
 *
 * Example:
 * ```
 * <div i18n>Translate <span *ngIf>me</span>!</div>
 * ```
 *
 * @param message The message to crop
 * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
 * external template and removes all sub-templates.
 */


function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    // We want the root template message, ignore all sub-templates
    return removeInnerTemplateTranslation(message);
  } else {
    // We want a specific sub-template
    var start = message.indexOf(":".concat(subTemplateIndex).concat(MARKER)) + 2 + subTemplateIndex.toString().length;
    var end = message.search(new RegExp("".concat(MARKER, "\\/\\*\\d+:").concat(subTemplateIndex).concat(MARKER)));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
/**
 * Generate the OpCodes for ICU expressions.
 *
 * @param icuExpression
 * @param index Index where the anchor is stored and an optional `TIcuContainerNode`
 *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.
 *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)
 */


function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');
  var bindingMask = 0;
  var tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx: anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  var values = icuExpression.values;

  for (var i = 0; i < values.length; i++) {
    // Each value is an array of strings & other ICU expressions
    var valueArr = values[i];
    var nestedIcus = [];

    for (var j = 0; j < valueArr.length; j++) {
      var value = valueArr[j];

      if (typeof value !== 'string') {
        // It is an nested ICU expression
        var icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node

        valueArr[j] = "<!--\uFFFD".concat(icuIndex, "\uFFFD-->");
      }
    }

    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;
  }

  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
}
/**
 * Parses text containing an ICU expression and produces a JSON object for it.
 * Original code from closure library, modified for Angular.
 *
 * @param pattern Text containing an ICU expression that needs to be parsed.
 *
 */


function parseICUBlock(pattern) {
  var cases = [];
  var values = [];
  var icuType = 1
  /* plural */
  ;
  var mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
    if (type === 'select') {
      icuType = 0
      /* select */
      ;
    } else {
      icuType = 1
      /* plural */
      ;
    }

    mainBinding = parseInt(binding.substr(1), 10);
    return '';
  });
  var parts = i18nParseTextIntoPartsAndICU(pattern); // Looking for (key block)+ sequence. One of the keys has to be "other".

  for (var pos = 0; pos < parts.length;) {
    var key = parts[pos++].trim();

    if (icuType === 1
    /* plural */
    ) {
      // Key can be "=x", we just want "x"
      key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
    }

    if (key.length) {
      cases.push(key);
    }

    var blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);

    if (cases.length > values.length) {
      values.push(blocks);
    }
  } // TODO(ocombe): support ICU expressions in attributes, see #21615


  return {
    type: icuType,
    mainBinding: mainBinding,
    cases: cases,
    values: values
  };
}
/**
 * Breaks pattern into strings and top level {...} blocks.
 * Can be used to break a message into text and ICU expressions, or to break an ICU expression
 * into keys and cases. Original code from closure library, modified for Angular.
 *
 * @param pattern (sub)Pattern to be broken.
 * @returns An `Array<string|IcuExpression>` where:
 *   - odd positions: `string` => text between ICU expressions
 *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.
 */


function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }

  var prevPos = 0;
  var braceStack = [];
  var results = [];
  var braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.

  braces.lastIndex = 0;
  var match;

  while (match = braces.exec(pattern)) {
    var pos = match.index;

    if (match[0] == '}') {
      braceStack.pop();

      if (braceStack.length == 0) {
        // End of the block.
        var block = pattern.substring(prevPos, pos);

        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }

        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        var _substring = pattern.substring(prevPos, pos);

        results.push(_substring);
        prevPos = pos + 1;
      }

      braceStack.push('{');
    }
  }

  var substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
/**
 * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
 *
 */


function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  var create = [];
  var remove = [];
  var update = [];

  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }

  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove);
  tIcu.update.push(update);
  var inertBodyHelper = getInertBodyHelper(getDocument());
  var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');
  var inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;

  if (inertRootNode) {
    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}

function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {
  var bindingMask = 0;
  var currentNode = parentNode.firstChild;

  while (currentNode) {
    var newIndex = allocExpando(tView, lView, 1, null);

    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        var element = currentNode;
        var tagName = element.tagName.toLowerCase();

        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          var elAttrs = element.attributes;

          for (var i = 0; i < elAttrs.length; i++) {
            var attr = elAttrs.item(i);
            var lowerAttrName = attr.name.toLowerCase();

            var _hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding


            if (_hasBinding) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else if (SRCSET_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, sanitizeSrcset);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn("WARNING: ignoring unsafe attribute value " + "".concat(lowerAttrName, " on element ").concat(tagName, " ") + "(see https://g.co/ng/security#xss)");
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          } // Parse the children of this node (if any)


          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove, newIndex, depth);
        }

        break;

      case Node.TEXT_NODE:
        var value = currentNode.textContent || '';
        var hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);
        addRemoveNode(remove, newIndex, depth);

        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }

        break;

      case Node.COMMENT_NODE:
        // Check if the comment node is a placeholder for a nested ICU
        var isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');

        if (isNestedIcu) {
          var nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          var icuExpression = nestedIcus[nestedIcuIndex]; // Create the comment node that will anchor the ICU expression

          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? "nested ICU ".concat(nestedIcuIndex) : '', parentIdx, newIndex);
          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove, newIndex, depth);
        }

        break;
    }

    currentNode = currentNode.nextSibling;
  }

  return bindingMask;
}

function addRemoveNode(remove, index, depth) {
  if (depth === 0) {
    remove.push(index);
  }
}

function addRemoveNestedIcu(remove, index, depth) {
  if (depth === 0) {
    remove.push(~index); // remove ICU at `index`

    remove.push(index); // remove ICU comment at `index`
  }
}

function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2
  /* SHIFT_REF */
  | 2
  /* IcuSwitch */
  );
}

function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(bindingMask, 1, index << 2
  /* SHIFT_REF */
  | 3
  /* IcuUpdate */
  );
}

function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }

  create.push(text, createAtIdx, icuCreateOpCode(0
  /* AppendChild */
  , appendToParentIdx, createAtIdx));
}

function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1
  /* SHIFT_REF */
  | 1
  /* Attr */
  , attr.name, attr.value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// i18nPostprocess consts


var ROOT_TEMPLATE_ID = 0;
var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
/**
 * Handles message string post-processing for internationalization.
 *
 * Handles message string post-processing by transforming it from intermediate
 * format (that might contain some markers that we need to replace) to the final
 * form, consumable by i18nStart instruction. Post processing steps include:
 *
 * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
 * 2. Replace all ICU vars (like "VAR_PLURAL")
 * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
 * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
 *    in case multiple ICUs have the same placeholder name
 *
 * @param message Raw translation string for post processing
 * @param replacements Set of replacements that should be applied
 *
 * @returns Transformed string that can be consumed by i18nStart instruction
 *
 * @codeGenApi
 */

function i18nPostprocess(message) {
  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /**
   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
   *
   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
   * front of �#6�. The post processing step restores the right order by keeping track of the
   * template id stack and looks for placeholders that belong to the currently active template.
   */
  var result = message;

  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    var matches = {};
    var templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {
      var content = phs || tmpl;
      var placeholders = matches[content] || [];

      if (!placeholders.length) {
        content.split('|').forEach(function (placeholder) {
          var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
          var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
          var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
          placeholders.push([templateId, isCloseTemplateTag, placeholder]);
        });
        matches[content] = placeholders;
      }

      if (!placeholders.length) {
        throw new Error("i18n postprocess: unmatched placeholder - ".concat(content));
      }

      var currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      var idx = 0; // find placeholder index that matches current template id

      for (var i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      } // update template id stack based on the current tag extracted


      var _placeholders$idx = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(placeholders[idx], 3),
          templateId = _placeholders$idx[0],
          isCloseTemplateTag = _placeholders$idx[1],
          placeholder = _placeholders$idx[2];

      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      } // remove processed tag from the list


      placeholders.splice(idx, 1);
      return placeholder;
    });
  } // return current result if no replacements specified


  if (!Object.keys(replacements).length) {
    return result;
  }
  /**
   * Step 2: replace all ICU vars (like "VAR_PLURAL")
   */


  result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {
    return replacements.hasOwnProperty(key) ? "".concat(start).concat(replacements[key]).concat(end) : match;
  });
  /**
   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
   */

  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {
    return replacements.hasOwnProperty(key) ? replacements[key] : match;
  });
  /**
   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
   * multiple ICUs have the same placeholder name
   */

  result = result.replace(PP_ICUS_REGEXP, function (match, key) {
    if (replacements.hasOwnProperty(key)) {
      var list = replacements[key];

      if (!list.length) {
        throw new Error("i18n postprocess: unmatched ICU - ".concat(match, " with key: ").concat(key));
      }

      return list.shift();
    }

    return match;
  });
  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks a block of text as translatable.
 *
 * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * @param index A unique index of the translation in the static block.
 * @param messageIndex An index of the translation message from the `def.consts` array.
 * @param subTemplateIndex Optional sub-template index in the `message`.
 *
 * @codeGenApi
 */


function ɵɵi18nStart(index, messageIndex) {
  var subTemplateIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var tView = getTView();
  var lView = getLView();
  var adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, "tView should be defined");
  var message = getConstant(tView.consts, messageIndex);
  var parentTNode = getCurrentParentTNode();

  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }

  var tI18n = tView.data[adjustedIndex];
  var sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  var parentRNode = getClosestRElement(tView, sameViewParentTNode, lView); // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.
  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.

  var insertInFrontOf = parentTNode && parentTNode.type & 8
  /* ElementContainer */
  ? lView[parentTNode.index] : null;
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
/**
 * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
 * into the render tree, moves the placeholder nodes and removes the deleted nodes.
 *
 * @codeGenApi
 */


function ɵɵi18nEnd() {
  setInI18nBlock(false);
}
/**
 *
 * Use this instruction to create a translation block that doesn't contain any placeholder.
 * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
 *
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * @param index A unique index of the translation in the static block.
 * @param messageIndex An index of the translation message from the `def.consts` array.
 * @param subTemplateIndex Optional sub-template index in the `message`.
 *
 * @codeGenApi
 */


function ɵɵi18n(index, messageIndex, subTemplateIndex) {
  ɵɵi18nStart(index, messageIndex, subTemplateIndex);
  ɵɵi18nEnd();
}
/**
 * Marks a list of attributes as translatable.
 *
 * @param index A unique index in the static block
 * @param values
 *
 * @codeGenApi
 */


function ɵɵi18nAttributes(index, attrsIndex) {
  var tView = getTView();
  ngDevMode && assertDefined(tView, "tView should be defined");
  var attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
/**
 * Stores the values of the bindings during each update cycle in order to determine if we need to
 * update the translated nodes.
 *
 * @param value The binding's value
 * @returns This function returns itself so that it may be chained
 * (e.g. `i18nExp(ctx.name)(ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵi18nExp(value) {
  var lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return ɵɵi18nExp;
}
/**
 * Updates a translation block or an i18n attribute when the bindings have changed.
 *
 * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
 * (i18n attribute) on which it should update the content.
 *
 * @codeGenApi
 */


function ɵɵi18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
/**
 * Handles message string post-processing for internationalization.
 *
 * Handles message string post-processing by transforming it from intermediate
 * format (that might contain some markers that we need to replace) to the final
 * form, consumable by i18nStart instruction. Post processing steps include:
 *
 * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
 * 2. Replace all ICU vars (like "VAR_PLURAL")
 * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
 * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
 *    in case multiple ICUs have the same placeholder name
 *
 * @param message Raw translation string for post processing
 * @param replacements Set of replacements that should be applied
 *
 * @returns Transformed string that can be consumed by i18nStart instruction
 *
 * @codeGenApi
 */


function ɵɵi18nPostprocess(message) {
  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return i18nPostprocess(message, replacements);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Resolves the providers which are defined in the DirectiveDef.
 *
 * When inserting the tokens and the factories in their respective arrays, we can assume that
 * this method is called first for the component (if any), and then for other directives on the same
 * node.
 * As a consequence,the providers are always processed in that order:
 * 1) The view providers of the component
 * 2) The providers of the component
 * 3) The providers of the other directives
 * This matches the structure of the injectables arrays of a view (for each node).
 * So the tokens and the factories can be pushed at the end of the arrays, except
 * in one case for multi providers.
 *
 * @param def the directive definition
 * @param providers: Array of `providers`.
 * @param viewProviders: Array of `viewProviders`.
 */


function providersResolver(def, providers, viewProviders) {
  var tView = getTView();

  if (tView.firstCreatePass) {
    var isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated

    resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated

    resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);
  }
}
/**
 * Resolves a provider and publishes it to the DI system.
 */


function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
  provider = resolveForwardRef(provider);

  if (Array.isArray(provider)) {
    // Recursively call `resolveProvider`
    // Recursion is OK in this case because this code will not be in hot-path once we implement
    // cloning of the initial state.
    for (var i = 0; i < provider.length; i++) {
      resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
    }
  } else {
    var tView = getTView();
    var lView = getLView();
    var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    var providerFactory = providerToFactory(provider);
    var tNode = getCurrentTNode();
    var beginIndex = tNode.providerIndexes & 1048575
    /* ProvidersStartIndexMask */
    ;
    var endIndex = tNode.directiveStart;
    var cptViewProvidersCount = tNode.providerIndexes >> 20
    /* CptViewProvidersCountShift */
    ;

    if (isTypeProvider(provider) || !provider.multi) {
      // Single provider case: the factory is created and pushed immediately
      var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);
      var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);

      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;

        if (isViewProvider) {
          tNode.providerIndexes += 1048576
          /* CptViewProvidersCountShifter */
          ;
        }

        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      // Multi provider case:
      // We create a multi factory which is going to aggregate all the values.
      // Since the output of such a factory depends on content or view injection,
      // we create two of them, which are linked together.
      //
      // The first one (for view providers) is always in the first block of the injectables array,
      // and the second one (for providers) is always in the second block.
      // This is important because view providers have higher priority. When a multi token
      // is being looked up, the view providers should be found first.
      // Note that it is not possible to have a multi factory in the third block (directive block).
      //
      // The algorithm to process multi providers is as follows:
      // 1) If the multi provider comes from the `viewProviders` of the component:
      //   a) If the special view providers factory doesn't exist, it is created and pushed.
      //   b) Else, the multi provider is added to the existing multi factory.
      // 2) If the multi provider comes from the `providers` of the component or of another
      // directive:
      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
      //      It is also linked to the multi factory for view providers, if it exists.
      //   b) Else, the multi provider is added to the existing multi factory.
      var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];

      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        // Cases 1.a and 2.a
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);

        var _factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);

        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = _factory;
        }

        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;

        if (isViewProvider) {
          tNode.providerIndexes += 1048576
          /* CptViewProvidersCountShifter */
          ;
        }

        lInjectablesBlueprint.push(_factory);
        lView.push(_factory);
      } else {
        // Cases 1.b and 2.b
        var indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }

      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
/**
 * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
 * @param tView `TView` in which to register the hook.
 * @param provider Provider whose hook should be registered.
 * @param contextIndex Index under which to find the context for the hook when it's being invoked.
 * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
 * provider factory.
 */


function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  var providerIsTypeProvider = isTypeProvider(provider);

  if (providerIsTypeProvider || isClassProvider(provider)) {
    var prototype = (provider.useClass || provider).prototype;
    var ngOnDestroy = prototype.ngOnDestroy;

    if (ngOnDestroy) {
      var hooks = tView.destroyHooks || (tView.destroyHooks = []);

      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
        var existingCallbacksIndex = hooks.indexOf(contextIndex);

        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
/**
 * Add a factory in a multi factory.
 * @returns Index at which the factory was inserted.
 */


function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory.componentProviders++;
  }

  return multiFactory.multi.push(factory) - 1;
}
/**
 * Returns the index of item in the array, but only in the begin to end range.
 */


function indexOf(item, arr, begin, end) {
  for (var i = begin; i < end; i++) {
    if (arr[i] === item) return i;
  }

  return -1;
}
/**
 * Use this with `multi` `providers`.
 */


function multiProvidersFactoryResolver(_, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
/**
 * Use this with `multi` `viewProviders`.
 *
 * This factory knows how to concatenate itself with the existing `multi` `providers`.
 */


function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
  var factories = this.multi;
  var result;

  if (this.providerFactory) {
    var componentCount = this.providerFactory.componentProviders;
    var multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component

    result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.

    multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives

    for (var i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = []; // Insert the `viewProvider` instances.

    multiResolve(factories, result);
  }

  return result;
}
/**
 * Maps an array of factories into an array of values.
 */


function multiResolve(factories, result) {
  for (var i = 0; i < factories.length; i++) {
    var factory = factories[i];
    result.push(factory());
  }

  return result;
}
/**
 * Creates a multi factory.
 */


function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
  var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent && !isViewProvider);
  return factory;
}
/**
 * This feature resolves the providers of a directive (or component),
 * and publish them into the DI system, making it visible to others for injection.
 *
 * For example:
 * ```ts
 * class ComponentWithProviders {
 *   constructor(private greeter: GreeterDE) {}
 *
 *   static ɵcmp = defineComponent({
 *     type: ComponentWithProviders,
 *     selectors: [['component-with-providers']],
 *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
 *    decls: 1,
 *    vars: 1,
 *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
 *      if (fs & RenderFlags.Create) {
 *        ɵɵtext(0);
 *      }
 *      if (fs & RenderFlags.Update) {
 *        ɵɵtextInterpolate(ctx.greeter.greet());
 *      }
 *    },
 *    features: [ɵɵProvidersFeature([GreeterDE])]
 *  });
 * }
 * ```
 *
 * @param definition
 *
 * @codeGenApi
 */


function ɵɵProvidersFeature(providers) {
  var viewProviders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return function (definition) {
    definition.providersResolver = function (def, processProvidersFn) {
      return providersResolver(def, //
      processProvidersFn ? processProvidersFn(providers) : providers, //
      viewProviders);
    };
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents a component created by a `ComponentFactory`.
 * Provides access to the component instance and related objects,
 * and provides the means of destroying the instance.
 *
 * @publicApi
 */


var ComponentRef = function ComponentRef() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentRef);
};
/**
 * Base class for a factory that can create a component dynamically.
 * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
 * Use the resulting `ComponentFactory.create()` method to create a component of that type.
 *
 * @see [Dynamic Components](guide/dynamic-component-loader)
 *
 * @publicApi
 */


var ComponentFactory = function ComponentFactory() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactory);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function noComponentFactoryError(component) {
  var error = Error("No component factory found for ".concat(stringify(component), ". Did you add it to @NgModule.entryComponents?"));
  error[ERROR_COMPONENT] = component;
  return error;
}

var ERROR_COMPONENT = 'ngComponent';

function getComponent$1(error) {
  return error[ERROR_COMPONENT];
}

var _NullComponentFactoryResolver = /*#__PURE__*/function () {
  function _NullComponentFactoryResolver() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, _NullComponentFactoryResolver);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(_NullComponentFactoryResolver, [{
    key: "resolveComponentFactory",
    value: function resolveComponentFactory(component) {
      throw noComponentFactoryError(component);
    }
  }]);

  return _NullComponentFactoryResolver;
}();
/**
 * A simple registry that maps `Components` to generated `ComponentFactory` classes
 * that can be used to create instances of components.
 * Use to obtain the factory for a given component type,
 * then use the factory's `create()` method to create a component of that type.
 *
 * @see [Dynamic Components](guide/dynamic-component-loader)
 * @see [Usage Example](guide/dynamic-component-loader#resolving-components)
 * @see <live-example name="dynamic-component-loader" noDownload></live-example>
of the code in this cookbook
 * @publicApi
 */


var ComponentFactoryResolver = function ComponentFactoryResolver() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactoryResolver);
};

ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();

var CodegenComponentFactoryResolver = /*#__PURE__*/function () {
  function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, CodegenComponentFactoryResolver);

    this._parent = _parent;
    this._ngModule = _ngModule;
    this._factories = new Map();

    for (var i = 0; i < factories.length; i++) {
      var factory = factories[i];

      this._factories.set(factory.componentType, factory);
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(CodegenComponentFactoryResolver, [{
    key: "resolveComponentFactory",
    value: function resolveComponentFactory(component) {
      var factory = this._factories.get(component);

      if (!factory && this._parent) {
        factory = this._parent.resolveComponentFactory(component);
      }

      if (!factory) {
        throw noComponentFactoryError(component);
      }

      return new ComponentFactoryBoundToModule(factory, this._ngModule);
    }
  }]);

  return CodegenComponentFactoryResolver;
}();

var ComponentFactoryBoundToModule = /*#__PURE__*/function (_ComponentFactory) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentFactoryBoundToModule, _ComponentFactory);

  var _super7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentFactoryBoundToModule);

  function ComponentFactoryBoundToModule(factory, ngModule) {
    var _this6;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactoryBoundToModule);

    _this6 = _super7.call(this);
    _this6.factory = factory;
    _this6.ngModule = ngModule;
    _this6.selector = factory.selector;
    _this6.componentType = factory.componentType;
    _this6.ngContentSelectors = factory.ngContentSelectors;
    _this6.inputs = factory.inputs;
    _this6.outputs = factory.outputs;
    return _this6;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentFactoryBoundToModule, [{
    key: "create",
    value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
      return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
    }
  }]);

  return ComponentFactoryBoundToModule;
}(ComponentFactory);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function noop() {// Do nothing.
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Creates an ElementRef from the most recent node.
 *
 * @returns The ElementRef instance to use
 */


function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
/**
 * Creates an ElementRef given a node.
 *
 * @param tNode The node for which you'd like an ElementRef
 * @param lView The view to which the node belongs
 * @returns The ElementRef instance to use
 */


function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}

var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;
var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;
var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 *
 * @security Permitting direct access to the DOM can make your application more vulnerable to
 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
 * [Security Guide](https://g.co/ng/security).
 *
 * @publicApi
 */
// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
// i.e. users have to ask for what they need. With that, we can build better analysis tools
// and could do better codegen in the future.

var ElementRef = function ElementRef(nativeElement) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ElementRef);

  this.nativeElement = nativeElement;
};
/**
 * @internal
 * @nocollapse
 */


ElementRef.__NG_ELEMENT_ID__ = SWITCH_ELEMENT_REF_FACTORY;
/**
 * Unwraps `ElementRef` and return the `nativeElement`.
 *
 * @param value value to unwrap
 * @returns `nativeElement` if `ElementRef` otherwise returns value as is.
 */

function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
/**
 * Creates and initializes a custom renderer that implements the `Renderer2` base class.
 *
 * @publicApi
 */

var RendererFactory2 = function RendererFactory2() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, RendererFactory2);
};
/**
 * Extend this base class to implement custom rendering. By default, Angular
 * renders a template into DOM. You can use custom rendering to intercept
 * rendering calls, or to render to something other than DOM.
 *
 * Create your custom renderer using `RendererFactory2`.
 *
 * Use a custom renderer to bypass Angular's templating and
 * make custom UI changes that can't be expressed declaratively.
 * For example if you need to set a property or an attribute whose name is
 * not statically known, use the `setProperty()` or
 * `setAttribute()` method.
 *
 * @publicApi
 */


var Renderer2 = function Renderer2() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Renderer2);
};
/**
 * @internal
 * @nocollapse
 */


Renderer2.__NG_ELEMENT_ID__ = function () {
  return SWITCH_RENDERER2_FACTORY();
};

var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;
var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;
var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;
/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */

function getOrCreateRenderer2(lView) {
  var renderer = lView[RENDERER];

  if (ngDevMode && !isProceduralRenderer(renderer)) {
    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
  }

  return renderer;
}
/** Injects a Renderer2 for the current component. */


function injectRenderer2() {
  // We need the Renderer to be based on the component that it's being injected into, however since
  // DI happens before we've entered its view, `getLView` will return the parent view instead.
  var lView = getLView();
  var tNode = getCurrentTNode();
  var nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * @publicApi
 */


var Sanitizer = function Sanitizer() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Sanitizer);
};
/** @nocollapse */


Sanitizer.ɵprov = ɵɵdefineInjectable({
  token: Sanitizer,
  providedIn: 'root',
  factory: function factory() {
    return null;
  }
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description Represents the version of Angular
 *
 * @publicApi
 */

var Version = function Version(full) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Version);

  this.full = full;
  this.major = full.split('.')[0];
  this.minor = full.split('.')[1];
  this.patch = full.split('.').slice(2).join('.');
};
/**
 * @publicApi
 */


var VERSION = new Version('12.2.3');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var DefaultIterableDifferFactory = /*#__PURE__*/function () {
  function DefaultIterableDifferFactory() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DefaultIterableDifferFactory);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DefaultIterableDifferFactory, [{
    key: "supports",
    value: function supports(obj) {
      return isListLikeIterable(obj);
    }
  }, {
    key: "create",
    value: function create(trackByFn) {
      return new DefaultIterableDiffer(trackByFn);
    }
  }]);

  return DefaultIterableDifferFactory;
}();

var trackByIdentity = function trackByIdentity(index, item) {
  return item;
};

var ɵ0$b = trackByIdentity;
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 * @publicApi
 */

var DefaultIterableDiffer = /*#__PURE__*/function () {
  function DefaultIterableDiffer(trackByFn) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DefaultIterableDiffer);

    this.length = 0; // Keeps track of the used records at any point in time (during & across `_check()` calls)

    this._linkedRecords = null; // Keeps track of the removed records at any point in time during `_check()` calls.

    this._unlinkedRecords = null;
    this._previousItHead = null;
    this._itHead = null;
    this._itTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._movesHead = null;
    this._movesTail = null;
    this._removalsHead = null;
    this._removalsTail = null; // Keeps track of records where custom track by is the same, but item identity has changed

    this._identityChangesHead = null;
    this._identityChangesTail = null;
    this._trackByFn = trackByFn || trackByIdentity;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DefaultIterableDiffer, [{
    key: "forEachItem",
    value: function forEachItem(fn) {
      var record;

      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    }
  }, {
    key: "forEachOperation",
    value: function forEachOperation(fn) {
      var nextIt = this._itHead;
      var nextRemove = this._removalsHead;
      var addRemoveOffset = 0;
      var moveOffsets = null;

      while (nextIt || nextRemove) {
        // Figure out which is the next record to process
        // Order: remove, add, move
        var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
        var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
        var currentIndex = record.currentIndex; // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary

        if (record === nextRemove) {
          addRemoveOffset--;
          nextRemove = nextRemove._nextRemoved;
        } else {
          nextIt = nextIt._next;

          if (record.previousIndex == null) {
            addRemoveOffset++;
          } else {
            // INVARIANT:  currentIndex < previousIndex
            if (!moveOffsets) moveOffsets = [];
            var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
            var localCurrentIndex = currentIndex - addRemoveOffset;

            if (localMovePreviousIndex != localCurrentIndex) {
              for (var i = 0; i < localMovePreviousIndex; i++) {
                var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                var index = offset + i;

                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                  moveOffsets[i] = offset + 1;
                }
              }

              var previousIndex = record.previousIndex;
              moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
            }
          }
        }

        if (adjPreviousIndex !== currentIndex) {
          fn(record, adjPreviousIndex, currentIndex);
        }
      }
    }
  }, {
    key: "forEachPreviousItem",
    value: function forEachPreviousItem(fn) {
      var record;

      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    }
  }, {
    key: "forEachAddedItem",
    value: function forEachAddedItem(fn) {
      var record;

      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    }
  }, {
    key: "forEachMovedItem",
    value: function forEachMovedItem(fn) {
      var record;

      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    }
  }, {
    key: "forEachRemovedItem",
    value: function forEachRemovedItem(fn) {
      var record;

      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    }
  }, {
    key: "forEachIdentityChange",
    value: function forEachIdentityChange(fn) {
      var record;

      for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
        fn(record);
      }
    }
  }, {
    key: "diff",
    value: function diff(collection) {
      if (collection == null) collection = [];

      if (!isListLikeIterable(collection)) {
        throw new Error("Error trying to diff '".concat(stringify(collection), "'. Only arrays and iterables are allowed"));
      }

      if (this.check(collection)) {
        return this;
      } else {
        return null;
      }
    }
  }, {
    key: "onDestroy",
    value: function onDestroy() {}
  }, {
    key: "check",
    value: function check(collection) {
      var _this7 = this;

      this._reset();

      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      var itemTrackBy;

      if (Array.isArray(collection)) {
        this.length = collection.length;

        for (var _index3 = 0; _index3 < this.length; _index3++) {
          item = collection[_index3];
          itemTrackBy = this._trackByFn(_index3, item);

          if (record === null || !Object.is(record.trackById, itemTrackBy)) {
            record = this._mismatch(record, item, itemTrackBy, _index3);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              // TODO(misko): can we limit this to duplicates only?
              record = this._verifyReinsertion(record, item, itemTrackBy, _index3);
            }

            if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
          }

          record = record._next;
        }
      } else {
        index = 0;
        iterateListLike(collection, function (item) {
          itemTrackBy = _this7._trackByFn(index, item);

          if (record === null || !Object.is(record.trackById, itemTrackBy)) {
            record = _this7._mismatch(record, item, itemTrackBy, index);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              // TODO(misko): can we limit this to duplicates only?
              record = _this7._verifyReinsertion(record, item, itemTrackBy, index);
            }

            if (!Object.is(record.item, item)) _this7._addIdentityChange(record, item);
          }

          record = record._next;
          index++;
        });
        this.length = index;
      }

      this._truncate(record);

      this.collection = collection;
      return this.isDirty;
    }
    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
     * changes.
     */

  }, {
    key: "isDirty",
    get: function get() {
      return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
    }
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * @internal
     */

  }, {
    key: "_reset",
    value: function _reset() {
      if (this.isDirty) {
        var record;

        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }

        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }

        this._additionsHead = this._additionsTail = null;

        for (record = this._movesHead; record !== null; record = record._nextMoved) {
          record.previousIndex = record.currentIndex;
        }

        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
        this._identityChangesHead = this._identityChangesTail = null; // TODO(vicb): when assert gets supported
        // assert(!this.isDirty);
      }
    }
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * @internal
     */

  }, {
    key: "_mismatch",
    value: function _mismatch(record, item, itemTrackBy, index) {
      // The previous record after which we will append the current one.
      var previousRecord;

      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev; // Remove the record from the collection since we know it does not match the item.

        this._remove(record);
      } // See if we have evicted the item, which used to be at some anterior position of _itHead list.


      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

      if (record !== null) {
        // It is an item which we have evicted earlier: reinsert it back into the list.
        // But first we need to check if identity changed, so we can update in view if necessary.
        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

        this._reinsertAfter(record, previousRecord, index);
      } else {
        // Attempt to see if the item is at some posterior position of _itHead list.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);

        if (record !== null) {
          // We have the item in _itHead at/after `index` position. We need to move it forward in the
          // collection.
          // But first we need to check if identity changed, so we can update in view if necessary.
          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

          this._moveAfter(record, previousRecord, index);
        } else {
          // It is a new item: add it.
          record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
        }
      }

      return record;
    }
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * @internal
     */

  }, {
    key: "_verifyReinsertion",
    value: function _verifyReinsertion(record, item, itemTrackBy, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;

        this._addToMoves(record, index);
      }

      return record;
    }
    /**
     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {@link IterableChangeRecord_}.
     *
     * @internal
     */

  }, {
    key: "_truncate",
    value: function _truncate(record) {
      // Anything after that needs to be removed;
      while (record !== null) {
        var nextRecord = record._next;

        this._addToRemovals(this._unlink(record));

        record = nextRecord;
      }

      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }

      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }

      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }

      if (this._itTail !== null) {
        this._itTail._next = null;
      }

      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }

      if (this._identityChangesTail !== null) {
        this._identityChangesTail._nextIdentityChange = null;
      }
    }
    /** @internal */

  }, {
    key: "_reinsertAfter",
    value: function _reinsertAfter(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }

      var prev = record._prevRemoved;
      var next = record._nextRemoved;

      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }

      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }

      this._insertAfter(record, prevRecord, index);

      this._addToMoves(record, index);

      return record;
    }
    /** @internal */

  }, {
    key: "_moveAfter",
    value: function _moveAfter(record, prevRecord, index) {
      this._unlink(record);

      this._insertAfter(record, prevRecord, index);

      this._addToMoves(record, index);

      return record;
    }
    /** @internal */

  }, {
    key: "_addAfter",
    value: function _addAfter(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);

      if (this._additionsTail === null) {
        // TODO(vicb):
        // assert(this._additionsHead === null);
        this._additionsTail = this._additionsHead = record;
      } else {
        // TODO(vicb):
        // assert(_additionsTail._nextAdded === null);
        // assert(record._nextAdded === null);
        this._additionsTail = this._additionsTail._nextAdded = record;
      }

      return record;
    }
    /** @internal */

  }, {
    key: "_insertAfter",
    value: function _insertAfter(record, prevRecord, index) {
      // TODO(vicb):
      // assert(record != prevRecord);
      // assert(record._next === null);
      // assert(record._prev === null);
      var next = prevRecord === null ? this._itHead : prevRecord._next; // TODO(vicb):
      // assert(next != record);
      // assert(prevRecord != record);

      record._next = next;
      record._prev = prevRecord;

      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }

      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }

      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }

      this._linkedRecords.put(record);

      record.currentIndex = index;
      return record;
    }
    /** @internal */

  }, {
    key: "_remove",
    value: function _remove(record) {
      return this._addToRemovals(this._unlink(record));
    }
    /** @internal */

  }, {
    key: "_unlink",
    value: function _unlink(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }

      var prev = record._prev;
      var next = record._next; // TODO(vicb):
      // assert((record._prev = null) === null);
      // assert((record._next = null) === null);

      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }

      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }

      return record;
    }
    /** @internal */

  }, {
    key: "_addToMoves",
    value: function _addToMoves(record, toIndex) {
      // TODO(vicb):
      // assert(record._nextMoved === null);
      if (record.previousIndex === toIndex) {
        return record;
      }

      if (this._movesTail === null) {
        // TODO(vicb):
        // assert(_movesHead === null);
        this._movesTail = this._movesHead = record;
      } else {
        // TODO(vicb):
        // assert(_movesTail._nextMoved === null);
        this._movesTail = this._movesTail._nextMoved = record;
      }

      return record;
    }
  }, {
    key: "_addToRemovals",
    value: function _addToRemovals(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }

      this._unlinkedRecords.put(record);

      record.currentIndex = null;
      record._nextRemoved = null;

      if (this._removalsTail === null) {
        // TODO(vicb):
        // assert(_removalsHead === null);
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        // TODO(vicb):
        // assert(_removalsTail._nextRemoved === null);
        // assert(record._nextRemoved === null);
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }

      return record;
    }
    /** @internal */

  }, {
    key: "_addIdentityChange",
    value: function _addIdentityChange(record, item) {
      record.item = item;

      if (this._identityChangesTail === null) {
        this._identityChangesTail = this._identityChangesHead = record;
      } else {
        this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
      }

      return record;
    }
  }]);

  return DefaultIterableDiffer;
}();

var IterableChangeRecord_ = function IterableChangeRecord_(item, trackById) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, IterableChangeRecord_);

  this.item = item;
  this.trackById = trackById;
  this.currentIndex = null;
  this.previousIndex = null;
  /** @internal */

  this._nextPrevious = null;
  /** @internal */

  this._prev = null;
  /** @internal */

  this._next = null;
  /** @internal */

  this._prevDup = null;
  /** @internal */

  this._nextDup = null;
  /** @internal */

  this._prevRemoved = null;
  /** @internal */

  this._nextRemoved = null;
  /** @internal */

  this._nextAdded = null;
  /** @internal */

  this._nextMoved = null;
  /** @internal */

  this._nextIdentityChange = null;
}; // A linked list of IterableChangeRecords with the same IterableChangeRecord_.item


var _DuplicateItemRecordList = /*#__PURE__*/function () {
  function _DuplicateItemRecordList() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, _DuplicateItemRecordList);

    /** @internal */
    this._head = null;
    /** @internal */

    this._tail = null;
  }
  /**
   * Append the record to the list of duplicates.
   *
   * Note: by design all records in the list of duplicates hold the same value in record.item.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(_DuplicateItemRecordList, [{
    key: "add",
    value: function add(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        // TODO(vicb):
        // assert(record.item ==  _head.item ||
        //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    } // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
    // IterableChangeRecord_.currentIndex >= atOrAfterIndex

  }, {
    key: "get",
    value: function get(trackById, atOrAfterIndex) {
      var record;

      for (record = this._head; record !== null; record = record._nextDup) {
        if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
          return record;
        }
      }

      return null;
    }
    /**
     * Remove one {@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     */

  }, {
    key: "remove",
    value: function remove(record) {
      // TODO(vicb):
      // assert(() {
      //  // verify that the record being removed is in the list.
      //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
      //    if (identical(cursor, record)) return true;
      //  }
      //  return false;
      //});
      var prev = record._prevDup;
      var next = record._nextDup;

      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }

      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }

      return this._head === null;
    }
  }]);

  return _DuplicateItemRecordList;
}();

var _DuplicateMap = /*#__PURE__*/function () {
  function _DuplicateMap() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, _DuplicateMap);

    this.map = new Map();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(_DuplicateMap, [{
    key: "put",
    value: function put(record) {
      var key = record.trackById;
      var duplicates = this.map.get(key);

      if (!duplicates) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }

      duplicates.add(record);
    }
    /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     */

  }, {
    key: "get",
    value: function get(trackById, atOrAfterIndex) {
      var key = trackById;
      var recordList = this.map.get(key);
      return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
    }
    /**
     * Removes a {@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     */

  }, {
    key: "remove",
    value: function remove(record) {
      var key = record.trackById;
      var recordList = this.map.get(key); // Remove the list of duplicates when it gets empty

      if (recordList.remove(record)) {
        this.map.delete(key);
      }

      return record;
    }
  }, {
    key: "isEmpty",
    get: function get() {
      return this.map.size === 0;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.map.clear();
    }
  }]);

  return _DuplicateMap;
}();

function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  var previousIndex = item.previousIndex;
  if (previousIndex === null) return previousIndex;
  var moveOffset = 0;

  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }

  return previousIndex + addRemoveOffset + moveOffset;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DefaultKeyValueDifferFactory = /*#__PURE__*/function () {
  function DefaultKeyValueDifferFactory() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DefaultKeyValueDifferFactory);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DefaultKeyValueDifferFactory, [{
    key: "supports",
    value: function supports(obj) {
      return obj instanceof Map || isJsObject(obj);
    }
  }, {
    key: "create",
    value: function create() {
      return new DefaultKeyValueDiffer();
    }
  }]);

  return DefaultKeyValueDifferFactory;
}();

var DefaultKeyValueDiffer = /*#__PURE__*/function () {
  function DefaultKeyValueDiffer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DefaultKeyValueDiffer);

    this._records = new Map();
    this._mapHead = null; // _appendAfter is used in the check loop

    this._appendAfter = null;
    this._previousMapHead = null;
    this._changesHead = null;
    this._changesTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DefaultKeyValueDiffer, [{
    key: "isDirty",
    get: function get() {
      return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
    }
  }, {
    key: "forEachItem",
    value: function forEachItem(fn) {
      var record;

      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    }
  }, {
    key: "forEachPreviousItem",
    value: function forEachPreviousItem(fn) {
      var record;

      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    }
  }, {
    key: "forEachChangedItem",
    value: function forEachChangedItem(fn) {
      var record;

      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    }
  }, {
    key: "forEachAddedItem",
    value: function forEachAddedItem(fn) {
      var record;

      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    }
  }, {
    key: "forEachRemovedItem",
    value: function forEachRemovedItem(fn) {
      var record;

      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    }
  }, {
    key: "diff",
    value: function diff(map) {
      if (!map) {
        map = new Map();
      } else if (!(map instanceof Map || isJsObject(map))) {
        throw new Error("Error trying to diff '".concat(stringify(map), "'. Only maps and objects are allowed"));
      }

      return this.check(map) ? this : null;
    }
  }, {
    key: "onDestroy",
    value: function onDestroy() {}
    /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     */

  }, {
    key: "check",
    value: function check(map) {
      var _this8 = this;

      this._reset();

      var insertBefore = this._mapHead;
      this._appendAfter = null;

      this._forEach(map, function (value, key) {
        if (insertBefore && insertBefore.key === key) {
          _this8._maybeAddToChanges(insertBefore, value);

          _this8._appendAfter = insertBefore;
          insertBefore = insertBefore._next;
        } else {
          var record = _this8._getOrCreateRecordForKey(key, value);

          insertBefore = _this8._insertBeforeOrAppend(insertBefore, record);
        }
      }); // Items remaining at the end of the list have been deleted


      if (insertBefore) {
        if (insertBefore._prev) {
          insertBefore._prev._next = null;
        }

        this._removalsHead = insertBefore;

        for (var record = insertBefore; record !== null; record = record._nextRemoved) {
          if (record === this._mapHead) {
            this._mapHead = null;
          }

          this._records.delete(record.key);

          record._nextRemoved = record._next;
          record.previousValue = record.currentValue;
          record.currentValue = null;
          record._prev = null;
          record._next = null;
        }
      } // Make sure tails have no next records from previous runs


      if (this._changesTail) this._changesTail._nextChanged = null;
      if (this._additionsTail) this._additionsTail._nextAdded = null;
      return this.isDirty;
    }
    /**
     * Inserts a record before `before` or append at the end of the list when `before` is null.
     *
     * Notes:
     * - This method appends at `this._appendAfter`,
     * - This method updates `this._appendAfter`,
     * - The return value is the new value for the insertion pointer.
     */

  }, {
    key: "_insertBeforeOrAppend",
    value: function _insertBeforeOrAppend(before, record) {
      if (before) {
        var prev = before._prev;
        record._next = before;
        record._prev = prev;
        before._prev = record;

        if (prev) {
          prev._next = record;
        }

        if (before === this._mapHead) {
          this._mapHead = record;
        }

        this._appendAfter = before;
        return before;
      }

      if (this._appendAfter) {
        this._appendAfter._next = record;
        record._prev = this._appendAfter;
      } else {
        this._mapHead = record;
      }

      this._appendAfter = record;
      return null;
    }
  }, {
    key: "_getOrCreateRecordForKey",
    value: function _getOrCreateRecordForKey(key, value) {
      if (this._records.has(key)) {
        var _record = this._records.get(key);

        this._maybeAddToChanges(_record, value);

        var prev = _record._prev;
        var next = _record._next;

        if (prev) {
          prev._next = next;
        }

        if (next) {
          next._prev = prev;
        }

        _record._next = null;
        _record._prev = null;
        return _record;
      }

      var record = new KeyValueChangeRecord_(key);

      this._records.set(key, record);

      record.currentValue = value;

      this._addToAdditions(record);

      return record;
    }
    /** @internal */

  }, {
    key: "_reset",
    value: function _reset() {
      if (this.isDirty) {
        var record; // let `_previousMapHead` contain the state of the map before the changes

        this._previousMapHead = this._mapHead;

        for (record = this._previousMapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        } // Update `record.previousValue` with the value of the item before the changes
        // We need to update all changed items (that's those which have been added and changed)


        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }

        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }

        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = null;
      }
    } // Add the record or a given key to the list of changes only when the value has actually changed

  }, {
    key: "_maybeAddToChanges",
    value: function _maybeAddToChanges(record, newValue) {
      if (!Object.is(newValue, record.currentValue)) {
        record.previousValue = record.currentValue;
        record.currentValue = newValue;

        this._addToChanges(record);
      }
    }
  }, {
    key: "_addToAdditions",
    value: function _addToAdditions(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    }
  }, {
    key: "_addToChanges",
    value: function _addToChanges(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    }
    /** @internal */

  }, {
    key: "_forEach",
    value: function _forEach(obj, fn) {
      if (obj instanceof Map) {
        obj.forEach(fn);
      } else {
        Object.keys(obj).forEach(function (k) {
          return fn(obj[k], k);
        });
      }
    }
  }]);

  return DefaultKeyValueDiffer;
}();

var KeyValueChangeRecord_ = function KeyValueChangeRecord_(key) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, KeyValueChangeRecord_);

  this.key = key;
  this.previousValue = null;
  this.currentValue = null;
  /** @internal */

  this._nextPrevious = null;
  /** @internal */

  this._next = null;
  /** @internal */

  this._prev = null;
  /** @internal */

  this._nextAdded = null;
  /** @internal */

  this._nextRemoved = null;
  /** @internal */

  this._nextChanged = null;
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 *
 * @publicApi
 */


var IterableDiffers = /*#__PURE__*/function () {
  function IterableDiffers(factories) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, IterableDiffers);

    this.factories = factories;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(IterableDiffers, [{
    key: "find",
    value: function find(iterable) {
      var factory = this.factories.find(function (f) {
        return f.supports(iterable);
      });

      if (factory != null) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '".concat(iterable, "' of type '").concat(getTypeNameForDebugging(iterable), "'"));
      }
    }
  }], [{
    key: "create",
    value: function create(factories, parent) {
      if (parent != null) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
      }

      return new IterableDiffers(factories);
    }
    /**
     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {@link IterableDiffers} instance with the provided factories and return a new
     * {@link IterableDiffers} instance.
     *
     * @usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link IterableDiffer} available.
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     */

  }, {
    key: "extend",
    value: function extend(factories) {
      return {
        provide: IterableDiffers,
        useFactory: function useFactory(parent) {
          // if parent is null, it means that we are in the root injector and we have just overridden
          // the default injection mechanism for IterableDiffers, in such a case just assume
          // `defaultIterableDiffersFactory`.
          return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
        },
        // Dependency technically isn't optional, but we can provide a better error message this way.
        deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
      };
    }
  }]);

  return IterableDiffers;
}();
/** @nocollapse */


IterableDiffers.ɵprov = ɵɵdefineInjectable({
  token: IterableDiffers,
  providedIn: 'root',
  factory: defaultIterableDiffersFactory
});

function getTypeNameForDebugging(type) {
  return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 *
 * @publicApi
 */


var KeyValueDiffers = /*#__PURE__*/function () {
  function KeyValueDiffers(factories) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, KeyValueDiffers);

    this.factories = factories;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(KeyValueDiffers, [{
    key: "find",
    value: function find(kv) {
      var factory = this.factories.find(function (f) {
        return f.supports(kv);
      });

      if (factory) {
        return factory;
      }

      throw new Error("Cannot find a differ supporting object '".concat(kv, "'"));
    }
  }], [{
    key: "create",
    value: function create(factories, parent) {
      if (parent) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
      }

      return new KeyValueDiffers(factories);
    }
    /**
     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
     * {@link KeyValueDiffers} instance.
     *
     * @usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link KeyValueDiffer} available.
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     */

  }, {
    key: "extend",
    value: function extend(factories) {
      return {
        provide: KeyValueDiffers,
        useFactory: function useFactory(parent) {
          // if parent is null, it means that we are in the root injector and we have just overridden
          // the default injection mechanism for KeyValueDiffers, in such a case just assume
          // `defaultKeyValueDiffersFactory`.
          return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
        },
        // Dependency technically isn't optional, but we can provide a better error message this way.
        deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
      };
    }
  }]);

  return KeyValueDiffers;
}();
/** @nocollapse */


KeyValueDiffers.ɵprov = ɵɵdefineInjectable({
  token: KeyValueDiffers,
  providedIn: 'root',
  factory: defaultKeyValueDiffersFactory
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function collectNativeNodes(tView, lView, tNode, result) {
  var isProjection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  while (tNode !== null) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 16
    /* Projection */
    | 32
    /* Icu */
    );
    var lNode = lView[tNode.index];

    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    } // A given lNode can represent either a native node or a LContainer (when it is a host of a
    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
    // from the views in this container.


    if (isLContainer(lNode)) {
      for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
        var lViewInAContainer = lNode[i];
        var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;

        if (lViewFirstChildTNode !== null) {
          collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
        }
      }
    }

    var tNodeType = tNode.type;

    if (tNodeType & 8
    /* ElementContainer */
    ) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32
    /* Icu */
    ) {
      var nextRNode = icuContainerIterate(tNode, lView);
      var rNode = void 0;

      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16
    /* Projection */
    ) {
      var nodesInSlot = getProjectionNodes(lView, tNode);

      if (Array.isArray(nodesInSlot)) {
        result.push.apply(result, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(nodesInSlot));
      } else {
        var parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }

    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ViewRef = /*#__PURE__*/function () {
  function ViewRef(
  /**
   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
   *
   * When ViewRef is created for a dynamic component, this also represents the `LView` for the
   * component.
   *
   * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
   * view.
   *
   * @internal
   */
  _lView,
  /**
   * This represents the `LView` associated with the point where `ChangeDetectorRef` was
   * requested.
   *
   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
   */
  _cdRefInjectingView) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewRef);

    this._lView = _lView;
    this._cdRefInjectingView = _cdRefInjectingView;
    this._appRef = null;
    this._attachedToViewContainer = false;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ViewRef, [{
    key: "rootNodes",
    get: function get() {
      var lView = this._lView;
      var tView = lView[TVIEW];
      return collectNativeNodes(tView, lView, tView.firstChild, []);
    }
  }, {
    key: "context",
    get: function get() {
      return this._lView[CONTEXT];
    },
    set: function set(value) {
      this._lView[CONTEXT] = value;
    }
  }, {
    key: "destroyed",
    get: function get() {
      return (this._lView[FLAGS] & 256
      /* Destroyed */
      ) === 256
      /* Destroyed */
      ;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._appRef) {
        this._appRef.detachView(this);
      } else if (this._attachedToViewContainer) {
        var parent = this._lView[PARENT];

        if (isLContainer(parent)) {
          var viewRefs = parent[VIEW_REFS];
          var index = viewRefs ? viewRefs.indexOf(this) : -1;

          if (index > -1) {
            ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');
            detachView(parent, index);
            removeFromArray(viewRefs, index);
          }
        }

        this._attachedToViewContainer = false;
      }

      destroyLView(this._lView[TVIEW], this._lView);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
    }
    /**
     * Marks a view and all of its ancestors dirty.
     *
     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
     * checked when it needs to be re-rendered but the two normal triggers haven't marked it
     * dirty (i.e. inputs haven't changed and events haven't fired in the view).
     *
     * <!-- TODO: Add a link to a chapter on OnPush components -->
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * @Component({
     *   selector: 'app-root',
     *   template: `Number of ticks: {{numberOfTicks}}`
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     * })
     * class AppComponent {
     *   numberOfTicks = 0;
     *
     *   constructor(private ref: ChangeDetectorRef) {
     *     setInterval(() => {
     *       this.numberOfTicks++;
     *       // the following is required, otherwise the view will not be updated
     *       this.ref.markForCheck();
     *     }, 1000);
     *   }
     * }
     * ```
     */

  }, {
    key: "markForCheck",
    value: function markForCheck() {
      markViewDirty(this._cdRefInjectingView || this._lView);
    }
    /**
     * Detaches the view from the change detection tree.
     *
     * Detached views will not be checked during change detection runs until they are
     * re-attached, even if they are dirty. `detach` can be used in combination with
     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
     * detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * @usageNotes
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds. We can do that by detaching
     * the component's change detector and doing a local check every five seconds.
     *
     * ```typescript
     * class DataProvider {
     *   // in a real application the returned data will be different every time
     *   get data() {
     *     return [1,2,3,4,5];
     *   }
     * }
     *
     * @Component({
     *   selector: 'giant-list',
     *   template: `
     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
     *   `,
     * })
     * class GiantList {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
     *     ref.detach();
     *     setInterval(() => {
     *       this.ref.detectChanges();
     *     }, 5000);
     *   }
     * }
     *
     * @Component({
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     <giant-list><giant-list>
     *   `,
     * })
     * class App {
     * }
     * ```
     */

  }, {
    key: "detach",
    value: function detach() {
      this._lView[FLAGS] &= ~128
      /* Attached */
      ;
    }
    /**
     * Re-attaches a view to the change detection tree.
     *
     * This can be used to re-attach views that were previously detached from the tree
     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     *
     * @usageNotes
     * ### Example
     *
     * The following example creates a component displaying `live` data. The component will detach
     * its change detector from the main change detector tree when the component's live property
     * is set to false.
     *
     * ```typescript
     * class DataProvider {
     *   data = 1;
     *
     *   constructor() {
     *     setInterval(() => {
     *       this.data = this.data * 2;
     *     }, 500);
     *   }
     * }
     *
     * @Component({
     *   selector: 'live-data',
     *   inputs: ['live'],
     *   template: 'Data: {{dataProvider.data}}'
     * })
     * class LiveData {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
     *
     *   set live(value) {
     *     if (value) {
     *       this.ref.reattach();
     *     } else {
     *       this.ref.detach();
     *     }
     *   }
     * }
     *
     * @Component({
     *   selector: 'app-root',
     *   providers: [DataProvider],
     *   template: `
     *     Live Update: <input type="checkbox" [(ngModel)]="live">
     *     <live-data [live]="live"><live-data>
     *   `,
     * })
     * class AppComponent {
     *   live = true;
     * }
     * ```
     */

  }, {
    key: "reattach",
    value: function reattach() {
      this._lView[FLAGS] |= 128
      /* Attached */
      ;
    }
    /**
     * Checks the view and its children.
     *
     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
     * local change detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * @usageNotes
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine, the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds.
     *
     * We can do that by detaching the component's change detector and doing a local change detection
     * check every five seconds.
     *
     * See {@link ChangeDetectorRef#detach detach} for more information.
     */

  }, {
    key: "detectChanges",
    value: function detectChanges() {
      detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
    }
    /**
     * Checks the change detector and its children, and throws if any changes are detected.
     *
     * This is used in development mode to verify that running change detection doesn't
     * introduce other changes.
     */

  }, {
    key: "checkNoChanges",
    value: function checkNoChanges() {
      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
    }
  }, {
    key: "attachToViewContainerRef",
    value: function attachToViewContainerRef() {
      if (this._appRef) {
        throw new Error('This view is already attached directly to the ApplicationRef!');
      }

      this._attachedToViewContainer = true;
    }
  }, {
    key: "detachFromAppRef",
    value: function detachFromAppRef() {
      this._appRef = null;
      renderDetachView(this._lView[TVIEW], this._lView);
    }
  }, {
    key: "attachToAppRef",
    value: function attachToAppRef(appRef) {
      if (this._attachedToViewContainer) {
        throw new Error('This view is already attached to a ViewContainer!');
      }

      this._appRef = appRef;
    }
  }]);

  return ViewRef;
}();
/** @internal */


var RootViewRef = /*#__PURE__*/function (_ViewRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(RootViewRef, _ViewRef);

  var _super8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(RootViewRef);

  function RootViewRef(_view) {
    var _this9;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, RootViewRef);

    _this9 = _super8.call(this, _view);
    _this9._view = _view;
    return _this9;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(RootViewRef, [{
    key: "detectChanges",
    value: function detectChanges() {
      detectChangesInRootView(this._view);
    }
  }, {
    key: "checkNoChanges",
    value: function checkNoChanges() {
      checkNoChangesInRootView(this._view);
    }
  }, {
    key: "context",
    get: function get() {
      return null;
    }
  }]);

  return RootViewRef;
}(ViewRef);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;
var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = noop;
var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
/**
 * Base class that provides change detection functionality.
 * A change-detection tree collects all views that are to be checked for changes.
 * Use the methods to add and remove views from the tree, initiate change-detection,
 * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.
 *
 * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)
 * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)
 *
 * @usageNotes
 *
 * The following examples demonstrate how to modify default change-detection behavior
 * to perform explicit detection when needed.
 *
 * ### Use `markForCheck()` with `CheckOnce` strategy
 *
 * The following example sets the `OnPush` change-detection strategy for a component
 * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
 * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).
 *
 * <code-example path="core/ts/change_detect/change-detection.ts"
 * region="mark-for-check"></code-example>
 *
 * ### Detach change detector to limit how often check occurs
 *
 * The following example defines a component with a large list of read-only data
 * that is expected to change constantly, many times per second.
 * To improve performance, we want to check and update the list
 * less often than the changes actually occur. To do that, we detach
 * the component's change detector and perform an explicit local check every five seconds.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
 *
 *
 * ### Reattaching a detached component
 *
 * The following example creates a component displaying live data.
 * The component detaches its change detector from the main change detector tree
 * when the `live` property is set to false, and reattaches it when the property
 * becomes true.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
 *
 * @publicApi
 */

var ChangeDetectorRef = function ChangeDetectorRef() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ChangeDetectorRef);
};
/**
 * @internal
 * @nocollapse
 */


ChangeDetectorRef.__NG_ELEMENT_ID__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY;
/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */

function injectChangeDetectorRef(flags) {
  return createViewRef(getCurrentTNode(), getLView(), (flags & 16
  /* ForPipe */
  ) === 16
  /* ForPipe */
  );
}
/**
 * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
 *
 * @param tNode The node that is requesting a ChangeDetectorRef
 * @param lView The view to which the node belongs
 * @param isPipe Whether the view is being injected into a pipe.
 * @returns The ChangeDetectorRef to use
 */


function createViewRef(tNode, lView, isPipe) {
  if (isComponentHost(tNode) && !isPipe) {
    // The LView represents the location where the component is declared.
    // Instead we want the LView for the component View and so we need to look it up.
    var componentView = getComponentLViewByIndex(tNode.index, lView); // look down

    return new ViewRef(componentView, componentView);
  } else if (tNode.type & (3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  | 32
  /* Icu */
  )) {
    // The LView represents the location where the injection is requested from.
    // We need to locate the containing LView (in case where the `lView` is an embedded view)
    var hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up

    return new ViewRef(hostComponentView, lView);
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Structural diffing for `Object`s and `Map`s.
 */


var keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */

var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;
var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;
var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;
/**
 * Represents an embedded template that can be used to instantiate embedded views.
 * To instantiate embedded views based on a template, use the `ViewContainerRef`
 * method `createEmbeddedView()`.
 *
 * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
 * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
 * is injected into the constructor of the directive,
 * using the `TemplateRef` token.
 *
 * You can also use a `Query` to find a `TemplateRef` associated with
 * a component or a directive.
 *
 * @see `ViewContainerRef`
 * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
 *
 * @publicApi
 */

var TemplateRef = function TemplateRef() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TemplateRef);
};
/**
 * @internal
 * @nocollapse
 */


TemplateRef.__NG_ELEMENT_ID__ = SWITCH_TEMPLATE_REF_FACTORY;
var ViewEngineTemplateRef = TemplateRef;

var R3TemplateRef = /*#__PURE__*/function (_ViewEngineTemplateRe) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(TemplateRef, _ViewEngineTemplateRe);

  var _super9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(TemplateRef);

  function TemplateRef(_declarationLView, _declarationTContainer, elementRef) {
    var _this10;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TemplateRef);

    _this10 = _super9.call(this);
    _this10._declarationLView = _declarationLView;
    _this10._declarationTContainer = _declarationTContainer;
    _this10.elementRef = elementRef;
    return _this10;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TemplateRef, [{
    key: "createEmbeddedView",
    value: function createEmbeddedView(context) {
      var embeddedTView = this._declarationTContainer.tViews;
      var embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16
      /* CheckAlways */
      , null, embeddedTView.declTNode, null, null, null, null);
      var declarationLContainer = this._declarationLView[this._declarationTContainer.index];
      ngDevMode && assertLContainer(declarationLContainer);
      embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
      var declarationViewLQueries = this._declarationLView[QUERIES];

      if (declarationViewLQueries !== null) {
        embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
      }

      renderView(embeddedTView, embeddedLView, context);
      return new ViewRef(embeddedLView);
    }
  }]);

  return TemplateRef;
}(ViewEngineTemplateRef);
/**
 * Creates a TemplateRef given a node.
 *
 * @returns The TemplateRef instance to use
 */


function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
/**
 * Creates a TemplateRef and stores it on the injector.
 *
 * @param hostTNode The node on which a TemplateRef is requested
 * @param hostLView The `LView` to which the node belongs
 * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
 */


function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4
  /* Container */
  ) {
    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
 * Provides access to the `NgModule` instance and related objects.
 *
 * @publicApi
 */


var NgModuleRef = function NgModuleRef() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleRef);
};
/**
 * @publicApi
 */


var NgModuleFactory = function NgModuleFactory() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleFactory);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;
var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;
var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
/**
 * Represents a container where one or more views can be attached to a component.
 *
 * Can contain *host views* (created by instantiating a
 * component with the `createComponent()` method), and *embedded views*
 * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
 *
 * A view container instance can contain other view containers,
 * creating a [view hierarchy](guide/glossary#view-tree).
 *
 * @see `ComponentRef`
 * @see `EmbeddedViewRef`
 *
 * @publicApi
 */

var ViewContainerRef = function ViewContainerRef() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewContainerRef);
};
/**
 * @internal
 * @nocollapse
 */


ViewContainerRef.__NG_ELEMENT_ID__ = SWITCH_VIEW_CONTAINER_REF_FACTORY;
/**
 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
 * already exists, retrieves the existing ViewContainerRef.
 *
 * @returns The ViewContainerRef instance to use
 */

function injectViewContainerRef() {
  var previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}

var VE_ViewContainerRef = ViewContainerRef;

var R3ViewContainerRef = /*#__PURE__*/function (_VE_ViewContainerRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ViewContainerRef, _VE_ViewContainerRef);

  var _super10 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ViewContainerRef);

  function ViewContainerRef(_lContainer, _hostTNode, _hostLView) {
    var _this11;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewContainerRef);

    _this11 = _super10.call(this);
    _this11._lContainer = _lContainer;
    _this11._hostTNode = _hostTNode;
    _this11._hostLView = _hostLView;
    return _this11;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ViewContainerRef, [{
    key: "element",
    get: function get() {
      return createElementRef(this._hostTNode, this._hostLView);
    }
  }, {
    key: "injector",
    get: function get() {
      return new NodeInjector(this._hostTNode, this._hostLView);
    }
    /** @deprecated No replacement */

  }, {
    key: "parentInjector",
    get: function get() {
      var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);

      if (hasParentInjector(parentLocation)) {
        var parentView = getParentInjectorView(parentLocation, this._hostLView);
        var injectorIndex = getParentInjectorIndex(parentLocation);
        ngDevMode && assertNodeInjector(parentView, injectorIndex);
        var parentTNode = parentView[TVIEW].data[injectorIndex + 8
        /* TNODE */
        ];
        return new NodeInjector(parentTNode, parentView);
      } else {
        return new NodeInjector(null, this._hostLView);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      while (this.length > 0) {
        this.remove(this.length - 1);
      }
    }
  }, {
    key: "get",
    value: function get(index) {
      var viewRefs = getViewRefs(this._lContainer);
      return viewRefs !== null && viewRefs[index] || null;
    }
  }, {
    key: "length",
    get: function get() {
      return this._lContainer.length - CONTAINER_HEADER_OFFSET;
    }
  }, {
    key: "createEmbeddedView",
    value: function createEmbeddedView(templateRef, context, index) {
      var viewRef = templateRef.createEmbeddedView(context || {});
      this.insert(viewRef, index);
      return viewRef;
    }
  }, {
    key: "createComponent",
    value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
      var contextInjector = injector || this.parentInjector;

      if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {
        // DO NOT REFACTOR. The code here used to have a `value || undefined` expression
        // which seems to cause internal google apps to fail. This is documented in the
        // following internal bug issue: go/b/142967802
        var result = contextInjector.get(NgModuleRef, null);

        if (result) {
          ngModuleRef = result;
        }
      }

      var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
      this.insert(componentRef.hostView, index);
      return componentRef;
    }
  }, {
    key: "insert",
    value: function insert(viewRef, index) {
      var lView = viewRef._lView;
      var tView = lView[TVIEW];

      if (ngDevMode && viewRef.destroyed) {
        throw new Error('Cannot insert a destroyed View in a ViewContainer!');
      }

      if (viewAttachedToContainer(lView)) {
        // If view is already attached, detach it first so we clean up references appropriately.
        var prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for
        // those cases will be:
        // equal to -1 for views attached to this ViewContainerRef
        // >= 0 for views attached to a different ViewContainerRef

        if (prevIdx !== -1) {
          this.detach(prevIdx);
        } else {
          var prevLContainer = lView[PARENT];
          ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on
          // LView (nor anywhere else).

          var prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
          prevVCRef.detach(prevVCRef.indexOf(viewRef));
        }
      } // Logical operation of adding `LView` to `LContainer`


      var adjustedIdx = this._adjustIndex(index);

      var lContainer = this._lContainer;
      insertView(tView, lView, lContainer, adjustedIdx); // Physical operation of adding the DOM nodes.

      var beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);
      var renderer = lView[RENDERER];
      var parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);

      if (parentRNode !== null) {
        addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
      }

      viewRef.attachToViewContainerRef();
      addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
      return viewRef;
    }
  }, {
    key: "move",
    value: function move(viewRef, newIndex) {
      if (ngDevMode && viewRef.destroyed) {
        throw new Error('Cannot move a destroyed View in a ViewContainer!');
      }

      return this.insert(viewRef, newIndex);
    }
  }, {
    key: "indexOf",
    value: function indexOf(viewRef) {
      var viewRefsArr = getViewRefs(this._lContainer);
      return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
    }
  }, {
    key: "remove",
    value: function remove(index) {
      var adjustedIdx = this._adjustIndex(index, -1);

      var detachedView = detachView(this._lContainer, adjustedIdx);

      if (detachedView) {
        // Before destroying the view, remove it from the container's array of `ViewRef`s.
        // This ensures the view container length is updated before calling
        // `destroyLView`, which could recursively call view container methods that
        // rely on an accurate container length.
        // (e.g. a method on this view container being called by a child directive's OnDestroy
        // lifecycle hook)
        removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
        destroyLView(detachedView[TVIEW], detachedView);
      }
    }
  }, {
    key: "detach",
    value: function detach(index) {
      var adjustedIdx = this._adjustIndex(index, -1);

      var view = detachView(this._lContainer, adjustedIdx);
      var wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
      return wasDetached ? new ViewRef(view) : null;
    }
  }, {
    key: "_adjustIndex",
    value: function _adjustIndex(index) {
      var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (index == null) {
        return this.length + shift;
      }

      if (ngDevMode) {
        assertGreaterThan(index, -1, "ViewRef index must be positive, got ".concat(index)); // +1 because it's legal to insert at the end.

        assertLessThan(index, this.length + 1 + shift, 'index');
      }

      return index;
    }
  }]);

  return ViewContainerRef;
}(VE_ViewContainerRef);

function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}

function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
/**
 * Creates a ViewContainerRef and stores it on the injector.
 *
 * @param ViewContainerRefToken The ViewContainerRef type
 * @param ElementRefToken The ElementRef type
 * @param hostTNode The node that is requesting a ViewContainerRef
 * @param hostLView The view to which the node belongs
 * @returns The ViewContainerRef instance to use
 */


function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(hostTNode, 12
  /* AnyContainer */
  | 3
  /* AnyRNode */
  );
  var lContainer;
  var slotValue = hostLView[hostTNode.index];

  if (isLContainer(slotValue)) {
    // If the host is a container, we don't need to create a new LContainer
    lContainer = slotValue;
  } else {
    var commentNode; // If the host is an element container, the native host element is guaranteed to be a
    // comment and we can reuse that comment as anchor element for the new LContainer.
    // The comment node in question is already part of the DOM structure so we don't need to append
    // it again.

    if (hostTNode.type & 8
    /* ElementContainer */
    ) {
      commentNode = unwrapRNode(slotValue);
    } else {
      // If the host is a regular element, we have to insert a comment node manually which will
      // be used as an anchor when inserting elements. In this specific case we use low-level DOM
      // manipulation to insert it.
      var renderer = hostLView[RENDERER];
      ngDevMode && ngDevMode.rendererCreateComment++;
      commentNode = renderer.createComment(ngDevMode ? 'container' : '');
      var hostNative = getNativeByTNode(hostTNode, hostLView);
      var parentOfHostNative = nativeParentNode(renderer, hostNative);
      nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
    }

    hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);
    addToViewTree(hostLView, lContainer);
  }

  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
  var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '".concat(oldValue, "'. Current value: '").concat(currValue, "'.");

  if (isFirstCheck) {
    msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
  }

  return viewDebugError(msg, context);
}

function viewWrappedDebugError(err, context) {
  if (!(err instanceof Error)) {
    // errors that are not Error instances don't have a stack,
    // so it is ok to wrap them into a new Error object...
    err = new Error(err.toString());
  }

  _addDebugContext(err, context);

  return err;
}

function viewDebugError(msg, context) {
  var err = new Error(msg);

  _addDebugContext(err, context);

  return err;
}

function _addDebugContext(err, context) {
  err[ERROR_DEBUG_CONTEXT] = context;
  err[ERROR_LOGGER] = context.logError.bind(context);
}

function isViewDebugError(err) {
  return !!getDebugContext(err);
}

function viewDestroyedError(action) {
  return new Error("ViewDestroyedError: Attempt to use a destroyed view: ".concat(action));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Called before each cycle of a view's check to detect whether this is in the
// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
// lifecycle methods. Returns true if this check cycle should call lifecycle
// methods.


function shiftInitState(view, priorInitState, newInitState) {
  // Only update the InitState if we are currently in the prior state.
  // For example, only move into CallingInit if we are in BeforeInit. Only
  // move into CallingContentInit if we are in CallingInit. Normally this will
  // always be true because of how checkCycle is called in checkAndUpdateView.
  // However, if checkAndUpdateView is called recursively or if an exception is
  // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
  // from the beginning. This ensures the state is monotonically increasing,
  // terminating in the AfterInit state, which ensures the Init methods are called
  // at least once and only once.
  var state = view.state;
  var initState = state & 1792
  /* InitState_Mask */
  ;

  if (initState === priorInitState) {
    view.state = state & ~1792
    /* InitState_Mask */
    | newInitState;
    view.initIndex = -1;
    return true;
  }

  return initState === newInitState;
} // Returns true if the lifecycle init method should be called for the node with
// the given init index.


function shouldCallLifecycleInitHook(view, initState, index) {
  if ((view.state & 1792
  /* InitState_Mask */
  ) === initState && view.initIndex <= index) {
    view.initIndex = index + 1;
    return true;
  }

  return false;
}
/**
 * Node instance data.
 *
 * We have a separate type per NodeType to save memory
 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
 *
 * To keep our code monomorphic,
 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
 * purposes.
 */


var NodeData = function NodeData() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NodeData);
};
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 */


function asTextData(view, index) {
  return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 */


function asElementData(view, index) {
  return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 */


function asProviderData(view, index) {
  return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 */


function asPureExpressionData(view, index) {
  return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 */


function asQueryList(view, index) {
  return view.nodes[index];
}

var DebugContext = function DebugContext() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugContext);
};
/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 */


var Services = {
  setCurrentNode: undefined,
  createRootView: undefined,
  createEmbeddedView: undefined,
  createComponentView: undefined,
  createNgModuleRef: undefined,
  overrideProvider: undefined,
  overrideComponentView: undefined,
  clearOverrides: undefined,
  checkAndUpdateView: undefined,
  checkNoChangesView: undefined,
  destroyView: undefined,
  resolveDep: undefined,
  createDebugContext: undefined,
  handleEvent: undefined,
  updateDirectives: undefined,
  updateRenderer: undefined,
  dirtyParentQueries: undefined
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var NOOP = function NOOP() {};

var _tokenKeyCache = new Map();

function tokenKey(token) {
  var key = _tokenKeyCache.get(token);

  if (!key) {
    key = stringify(token) + '_' + _tokenKeyCache.size;

    _tokenKeyCache.set(token, key);
  }

  return key;
}

function unwrapValue(view, nodeIdx, bindingIdx, value) {
  if (WrappedValue.isWrapped(value)) {
    value = WrappedValue.unwrap(value);
    var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
    var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
    view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
  }

  return value;
}

var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
var EMPTY_RENDERER_TYPE_ID = '$$empty'; // Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!

function createRendererType2(values) {
  return {
    id: UNDEFINED_RENDERER_TYPE_ID,
    styles: values.styles,
    encapsulation: values.encapsulation,
    data: values.data
  };
}

var _renderCompCount$1 = 0;

function resolveRendererType2(type) {
  if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
    // first time we see this RendererType2. Initialize it...
    var isFilled = type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;

    if (isFilled) {
      type.id = "c".concat(_renderCompCount$1++);
    } else {
      type.id = EMPTY_RENDERER_TYPE_ID;
    }
  }

  if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
    type = null;
  }

  return type || null;
}

function checkBinding(view, def, bindingIdx, value) {
  var oldValues = view.oldValues;

  if (view.state & 2
  /* FirstCheck */
  || !Object.is(oldValues[def.bindingIndex + bindingIdx], value)) {
    return true;
  }

  return false;
}

function checkAndUpdateBinding(view, def, bindingIdx, value) {
  if (checkBinding(view, def, bindingIdx, value)) {
    view.oldValues[def.bindingIndex + bindingIdx] = value;
    return true;
  }

  return false;
}

function checkBindingNoChanges(view, def, bindingIdx, value) {
  var oldValue = view.oldValues[def.bindingIndex + bindingIdx];

  if (view.state & 1
  /* BeforeFirstCheck */
  || !devModeEqual(oldValue, value)) {
    var bindingName = def.bindings[bindingIdx].name;
    throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), "".concat(bindingName, ": ").concat(oldValue), "".concat(bindingName, ": ").concat(value), (view.state & 1
    /* BeforeFirstCheck */
    ) !== 0);
  }
}

function markParentViewsForCheck(view) {
  var currView = view;

  while (currView) {
    if (currView.def.flags & 2
    /* OnPush */
    ) {
      currView.state |= 8
      /* ChecksEnabled */
      ;
    }

    currView = currView.viewContainerParent || currView.parent;
  }
}

function markParentViewsForCheckProjectedViews(view, endView) {
  var currView = view;

  while (currView && currView !== endView) {
    currView.state |= 64
    /* CheckProjectedViews */
    ;
    currView = currView.viewContainerParent || currView.parent;
  }
}

function dispatchEvent(view, nodeIndex, eventName, event) {
  try {
    var nodeDef = view.def.nodes[nodeIndex];
    var startView = nodeDef.flags & 33554432
    /* ComponentView */
    ? asElementData(view, nodeIndex).componentView : view;
    markParentViewsForCheck(startView);
    return Services.handleEvent(view, nodeIndex, eventName, event);
  } catch (e) {
    // Attention: Don't rethrow, as it would cancel Observable subscriptions!
    view.root.errorHandler.handleError(e);
  }
}

function declaredViewContainer(view) {
  if (view.parent) {
    var parentView = view.parent;
    return asElementData(parentView, view.parentNodeDef.nodeIndex);
  }

  return null;
}
/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 */


function viewParentEl(view) {
  var parentView = view.parent;

  if (parentView) {
    return view.parentNodeDef.parent;
  } else {
    return null;
  }
}

function renderNode(view, def) {
  switch (def.flags & 201347067
  /* Types */
  ) {
    case 1
    /* TypeElement */
    :
      return asElementData(view, def.nodeIndex).renderElement;

    case 2
    /* TypeText */
    :
      return asTextData(view, def.nodeIndex).renderText;
  }
}

function elementEventFullName(target, name) {
  return target ? "".concat(target, ":").concat(name) : name;
}

function isComponentView(view) {
  return !!view.parent && !!(view.parentNodeDef.flags & 32768
  /* Component */
  );
}

function isEmbeddedView(view) {
  return !!view.parent && !(view.parentNodeDef.flags & 32768
  /* Component */
  );
}

function filterQueryId(queryId) {
  return 1 << queryId % 32;
}

function splitMatchedQueriesDsl(matchedQueriesDsl) {
  var matchedQueries = {};
  var matchedQueryIds = 0;
  var references = {};

  if (matchedQueriesDsl) {
    matchedQueriesDsl.forEach(function (_ref) {
      var _ref2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_ref, 2),
          queryId = _ref2[0],
          valueType = _ref2[1];

      if (typeof queryId === 'number') {
        matchedQueries[queryId] = valueType;
        matchedQueryIds |= filterQueryId(queryId);
      } else {
        references[queryId] = valueType;
      }
    });
  }

  return {
    matchedQueries: matchedQueries,
    references: references,
    matchedQueryIds: matchedQueryIds
  };
}

function splitDepsDsl(deps, sourceName) {
  return deps.map(function (value) {
    var token;
    var flags;

    if (Array.isArray(value)) {
      var _value2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(value, 2);

      flags = _value2[0];
      token = _value2[1];
    } else {
      flags = 0
      /* None */
      ;
      token = value;
    }

    if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
      Object.defineProperty(token, SOURCE, {
        value: sourceName,
        configurable: true
      });
    }

    return {
      flags: flags,
      token: token,
      tokenKey: tokenKey(token)
    };
  });
}

function getParentRenderElement(view, renderHost, def) {
  var renderParent = def.renderParent;

  if (renderParent) {
    if ((renderParent.flags & 1
    /* TypeElement */
    ) === 0 || (renderParent.flags & 33554432
    /* ComponentView */
    ) === 0 || renderParent.element.componentRendererType && (renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom || // TODO(FW-2290): remove the `encapsulation === 1` fallback logic in v12.
    // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an enum
    // value that is not known (but previously was the value for ViewEncapsulation.Native)
    renderParent.element.componentRendererType.encapsulation === 1)) {
      // only children of non components, or children of components with native encapsulation should
      // be attached.
      return asElementData(view, def.renderParent.nodeIndex).renderElement;
    }
  } else {
    return renderHost;
  }
}

var DEFINITION_CACHE = new WeakMap();

function resolveDefinition(factory) {
  var value = DEFINITION_CACHE.get(factory);

  if (!value) {
    value = factory(function () {
      return NOOP;
    });
    value.factory = factory;
    DEFINITION_CACHE.set(factory, value);
  }

  return value;
}

function rootRenderNodes(view) {
  var renderNodes = [];
  visitRootRenderNodes(view, 0
  /* Collect */
  , undefined, undefined, renderNodes);
  return renderNodes;
}

function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
  // We need to re-compute the parent node in case the nodes have been moved around manually
  if (action === 3
  /* RemoveChild */
  ) {
    parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
  }

  visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}

function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
  for (var i = startIndex; i <= endIndex; i++) {
    var nodeDef = view.def.nodes[i];

    if (nodeDef.flags & (1
    /* TypeElement */
    | 2
    /* TypeText */
    | 8
    /* TypeNgContent */
    )) {
      visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
    } // jump to next sibling


    i += nodeDef.childCount;
  }
}

function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
  var compView = view;

  while (compView && !isComponentView(compView)) {
    compView = compView.parent;
  }

  var hostView = compView.parent;
  var hostElDef = viewParentEl(compView);
  var startIndex = hostElDef.nodeIndex + 1;
  var endIndex = hostElDef.nodeIndex + hostElDef.childCount;

  for (var i = startIndex; i <= endIndex; i++) {
    var nodeDef = hostView.def.nodes[i];

    if (nodeDef.ngContentIndex === ngContentIndex) {
      visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
    } // jump to next sibling


    i += nodeDef.childCount;
  }

  if (!hostView.parent) {
    // a root view
    var projectedNodes = view.root.projectableNodes[ngContentIndex];

    if (projectedNodes) {
      for (var _i7 = 0; _i7 < projectedNodes.length; _i7++) {
        execRenderNodeAction(view, projectedNodes[_i7], action, parentNode, nextSibling, target);
      }
    }
  }
}

function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
  if (nodeDef.flags & 8
  /* TypeNgContent */
  ) {
    visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
  } else {
    var rn = renderNode(view, nodeDef);

    if (action === 3
    /* RemoveChild */
    && nodeDef.flags & 33554432
    /* ComponentView */
    && nodeDef.bindingFlags & 48
    /* CatSyntheticProperty */
    ) {
      // Note: we might need to do both actions.
      if (nodeDef.bindingFlags & 16
      /* SyntheticProperty */
      ) {
        execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
      }

      if (nodeDef.bindingFlags & 32
      /* SyntheticHostProperty */
      ) {
        var compView = asElementData(view, nodeDef.nodeIndex).componentView;
        execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
      }
    } else {
      execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
    }

    if (nodeDef.flags & 16777216
    /* EmbeddedViews */
    ) {
      var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;

      for (var k = 0; k < embeddedViews.length; k++) {
        visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
      }
    }

    if (nodeDef.flags & 1
    /* TypeElement */
    && !nodeDef.element.name) {
      visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
    }
  }
}

function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
  var renderer = view.renderer;

  switch (action) {
    case 1
    /* AppendChild */
    :
      renderer.appendChild(parentNode, renderNode);
      break;

    case 2
    /* InsertBefore */
    :
      renderer.insertBefore(parentNode, renderNode, nextSibling);
      break;

    case 3
    /* RemoveChild */
    :
      renderer.removeChild(parentNode, renderNode);
      break;

    case 0
    /* Collect */
    :
      target.push(renderNode);
      break;
  }
}

var NS_PREFIX_RE = /^:([^:]+):(.+)$/;

function splitNamespace(name) {
  if (name[0] === ':') {
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }

  return ['', name];
}

function calcBindingFlags(bindings) {
  var flags = 0;

  for (var i = 0; i < bindings.length; i++) {
    flags |= bindings[i].flags;
  }

  return flags;
}

function interpolate(valueCount, constAndInterp) {
  var result = '';

  for (var i = 0; i < valueCount * 2; i = i + 2) {
    result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
  }

  return result + constAndInterp[valueCount * 2];
}

function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
  switch (valueCount) {
    case 1:
      return c0 + _toStringWithNull(a1) + c1;

    case 2:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

    case 3:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

    case 4:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

    case 5:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

    case 6:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

    case 7:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

    case 8:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

    case 9:
      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

    default:
      throw new Error("Does not support more than 9 expressions");
  }
}

function _toStringWithNull(v) {
  return v != null ? v.toString() : '';
}

var EMPTY_MAP = {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var UNDEFINED_VALUE = {};
var InjectorRefTokenKey = tokenKey(Injector);
var INJECTORRefTokenKey = tokenKey(INJECTOR$1);
var NgModuleRefTokenKey = tokenKey(NgModuleRef);

function moduleProvideDef(flags, token, value, deps) {
  // Need to resolve forwardRefs as e.g. for `useValue` we
  // lowered the expression and then stopped evaluating it,
  // i.e. also didn't unwrap it.
  value = resolveForwardRef(value);
  var depDefs = splitDepsDsl(deps, stringify(token));
  return {
    // will bet set by the module definition
    index: -1,
    deps: depDefs,
    flags: flags,
    token: token,
    value: value
  };
}

function moduleDef(providers) {
  var providersByKey = {};
  var modules = [];
  var scope = null;

  for (var i = 0; i < providers.length; i++) {
    var provider = providers[i];

    if (provider.token === INJECTOR_SCOPE) {
      scope = provider.value;
    }

    if (provider.flags & 1073741824
    /* TypeNgModule */
    ) {
      modules.push(provider.token);
    }

    provider.index = i;
    providersByKey[tokenKey(provider.token)] = provider;
  }

  return {
    // Will be filled later...
    factory: null,
    providersByKey: providersByKey,
    providers: providers,
    modules: modules,
    scope: scope
  };
}

function initNgModule(data) {
  var def = data._def;
  var providers = data._providers = newArray(def.providers.length);

  for (var i = 0; i < def.providers.length; i++) {
    var provDef = def.providers[i];

    if (!(provDef.flags & 4096
    /* LazyProvider */
    )) {
      // Make sure the provider has not been already initialized outside this loop.
      if (providers[i] === undefined) {
        providers[i] = _createProviderInstance(data, provDef);
      }
    }
  }
}

function resolveNgModuleDep(data, depDef) {
  var notFoundValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Injector.THROW_IF_NOT_FOUND;
  var former = setCurrentInjector(data);

  try {
    if (depDef.flags & 8
    /* Value */
    ) {
      return depDef.token;
    }

    if (depDef.flags & 2
    /* Optional */
    ) {
      notFoundValue = null;
    }

    if (depDef.flags & 1
    /* SkipSelf */
    ) {
      return data._parent.get(depDef.token, notFoundValue);
    }

    var _tokenKey = depDef.tokenKey;

    switch (_tokenKey) {
      case InjectorRefTokenKey:
      case INJECTORRefTokenKey:
      case NgModuleRefTokenKey:
        return data;
    }

    var _providerDef = data._def.providersByKey[_tokenKey];
    var injectableDef;

    if (_providerDef) {
      var providerInstance = data._providers[_providerDef.index];

      if (providerInstance === undefined) {
        providerInstance = data._providers[_providerDef.index] = _createProviderInstance(data, _providerDef);
      }

      return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
    } else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
      var index = data._providers.length;
      data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
        flags: 1024
        /* TypeFactoryProvider */
        | 4096
        /* LazyProvider */
        ,
        value: injectableDef.factory,
        deps: [],
        index: index,
        token: depDef.token
      };
      data._providers[index] = UNDEFINED_VALUE;
      return data._providers[index] = _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]);
    } else if (depDef.flags & 4
    /* Self */
    ) {
      return notFoundValue;
    }

    return data._parent.get(depDef.token, notFoundValue);
  } finally {
    setCurrentInjector(former);
  }
}

function moduleTransitivelyPresent(ngModule, scope) {
  return ngModule._def.modules.indexOf(scope) > -1;
}

function targetsModule(ngModule, def) {
  var providedIn = resolveForwardRef(def.providedIn);
  return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope || moduleTransitivelyPresent(ngModule, providedIn));
}

function _createProviderInstance(ngModule, providerDef) {
  var injectable;

  switch (providerDef.flags & 201347067
  /* Types */
  ) {
    case 512
    /* TypeClassProvider */
    :
      injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
      break;

    case 1024
    /* TypeFactoryProvider */
    :
      injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
      break;

    case 2048
    /* TypeUseExistingProvider */
    :
      injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
      break;

    case 256
    /* TypeValueProvider */
    :
      injectable = providerDef.value;
      break;
  } // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
  // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
  // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
  // set (ngOnDestroy was detected statically).


  if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' && !(providerDef.flags & 131072
  /* OnDestroy */
  ) && typeof injectable.ngOnDestroy === 'function') {
    providerDef.flags |= 131072
    /* OnDestroy */
    ;
  }

  return injectable === undefined ? UNDEFINED_VALUE : injectable;
}

function _createClass(ngModule, ctor, deps) {
  var len = deps.length;

  switch (len) {
    case 0:
      return new ctor();

    case 1:
      return new ctor(resolveNgModuleDep(ngModule, deps[0]));

    case 2:
      return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

    case 3:
      return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

    default:
      var depValues = [];

      for (var i = 0; i < len; i++) {
        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
      }

      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(ctor, depValues);
  }
}

function _callFactory(ngModule, factory, deps) {
  var len = deps.length;

  switch (len) {
    case 0:
      return factory();

    case 1:
      return factory(resolveNgModuleDep(ngModule, deps[0]));

    case 2:
      return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

    case 3:
      return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

    default:
      var depValues = [];

      for (var i = 0; i < len; i++) {
        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
      }

      return factory.apply(void 0, depValues);
  }
}

function callNgModuleLifecycle(ngModule, lifecycles) {
  var def = ngModule._def;
  var destroyed = new Set();

  for (var i = 0; i < def.providers.length; i++) {
    var provDef = def.providers[i];

    if (provDef.flags & 131072
    /* OnDestroy */
    ) {
      var instance = ngModule._providers[i];

      if (instance && instance !== UNDEFINED_VALUE) {
        var onDestroy = instance.ngOnDestroy;

        if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
          onDestroy.apply(instance);
          destroyed.add(instance);
        }
      }
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function attachEmbeddedView(parentView, elementData, viewIndex, view) {
  var embeddedViews = elementData.viewContainer._embeddedViews;

  if (viewIndex === null || viewIndex === undefined) {
    viewIndex = embeddedViews.length;
  }

  view.viewContainerParent = parentView;
  addToArray(embeddedViews, viewIndex, view);
  attachProjectedView(elementData, view);
  Services.dirtyParentQueries(view);
  var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
  renderAttachEmbeddedView(elementData, prevView, view);
}

function attachProjectedView(vcElementData, view) {
  var dvcElementData = declaredViewContainer(view);

  if (!dvcElementData || dvcElementData === vcElementData || view.state & 16
  /* IsProjectedView */
  ) {
    return;
  } // Note: For performance reasons, we
  // - add a view to template._projectedViews only 1x throughout its lifetime,
  //   and remove it not until the view is destroyed.
  //   (hard, as when a parent view is attached/detached we would need to attach/detach all
  //    nested projected views as well, even across component boundaries).
  // - don't track the insertion order of views in the projected views array
  //   (hard, as when the views of the same template are inserted different view containers)


  view.state |= 16
  /* IsProjectedView */
  ;
  var projectedViews = dvcElementData.template._projectedViews;

  if (!projectedViews) {
    projectedViews = dvcElementData.template._projectedViews = [];
  }

  projectedViews.push(view); // Note: we are changing the NodeDef here as we cannot calculate
  // the fact whether a template is used for projection during compilation.

  markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
}

function markNodeAsProjectedTemplate(viewDef, nodeDef) {
  if (nodeDef.flags & 4
  /* ProjectedTemplate */
  ) {
    return;
  }

  viewDef.nodeFlags |= 4
  /* ProjectedTemplate */
  ;
  nodeDef.flags |= 4
  /* ProjectedTemplate */
  ;
  var parentNodeDef = nodeDef.parent;

  while (parentNodeDef) {
    parentNodeDef.childFlags |= 4
    /* ProjectedTemplate */
    ;
    parentNodeDef = parentNodeDef.parent;
  }
}

function detachEmbeddedView(elementData, viewIndex) {
  var embeddedViews = elementData.viewContainer._embeddedViews;

  if (viewIndex == null || viewIndex >= embeddedViews.length) {
    viewIndex = embeddedViews.length - 1;
  }

  if (viewIndex < 0) {
    return null;
  }

  var view = embeddedViews[viewIndex];
  view.viewContainerParent = null;
  removeFromArray(embeddedViews, viewIndex); // See attachProjectedView for why we don't update projectedViews here.

  Services.dirtyParentQueries(view);
  renderDetachView$1(view);
  return view;
}

function detachProjectedView(view) {
  if (!(view.state & 16
  /* IsProjectedView */
  )) {
    return;
  }

  var dvcElementData = declaredViewContainer(view);

  if (dvcElementData) {
    var projectedViews = dvcElementData.template._projectedViews;

    if (projectedViews) {
      removeFromArray(projectedViews, projectedViews.indexOf(view));
      Services.dirtyParentQueries(view);
    }
  }
}

function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
  var embeddedViews = elementData.viewContainer._embeddedViews;
  var view = embeddedViews[oldViewIndex];
  removeFromArray(embeddedViews, oldViewIndex);

  if (newViewIndex == null) {
    newViewIndex = embeddedViews.length;
  }

  addToArray(embeddedViews, newViewIndex, view); // Note: Don't need to change projectedViews as the order in there
  // as always invalid...

  Services.dirtyParentQueries(view);
  renderDetachView$1(view);
  var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
  renderAttachEmbeddedView(elementData, prevView, view);
  return view;
}

function renderAttachEmbeddedView(elementData, prevView, view) {
  var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
  var parentNode = view.renderer.parentNode(prevRenderNode);
  var nextSibling = view.renderer.nextSibling(prevRenderNode); // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
  // However, browsers automatically do `appendChild` when there is no `nextSibling`.

  visitRootRenderNodes(view, 2
  /* InsertBefore */
  , parentNode, nextSibling, undefined);
}

function renderDetachView$1(view) {
  visitRootRenderNodes(view, 3
  /* RemoveChild */
  , null, null, undefined);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var EMPTY_CONTEXT = {}; // Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!

function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
  return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
}

function getComponentViewDefinitionFactory(componentFactory) {
  return componentFactory.viewDefFactory;
}

var ComponentFactory_ = /*#__PURE__*/function (_ComponentFactory2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentFactory_, _ComponentFactory2);

  var _super11 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentFactory_);

  function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
    var _this12;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactory_);

    // Attention: this ctor is called as top level function.
    // Putting any logic in here will destroy closure tree shaking!
    _this12 = _super11.call(this);
    _this12.selector = selector;
    _this12.componentType = componentType;
    _this12._inputs = _inputs;
    _this12._outputs = _outputs;
    _this12.ngContentSelectors = ngContentSelectors;
    _this12.viewDefFactory = viewDefFactory;
    return _this12;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentFactory_, [{
    key: "inputs",
    get: function get() {
      var inputsArr = [];
      var inputs = this._inputs;

      for (var propName in inputs) {
        var templateName = inputs[propName];
        inputsArr.push({
          propName: propName,
          templateName: templateName
        });
      }

      return inputsArr;
    }
  }, {
    key: "outputs",
    get: function get() {
      var outputsArr = [];

      for (var propName in this._outputs) {
        var templateName = this._outputs[propName];
        outputsArr.push({
          propName: propName,
          templateName: templateName
        });
      }

      return outputsArr;
    }
    /**
     * Creates a new component.
     */

  }, {
    key: "create",
    value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
      if (!ngModule) {
        throw new Error('ngModule should be provided');
      }

      var viewDef = resolveDefinition(this.viewDefFactory);
      var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
      var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
      var component = asProviderData(view, componentNodeIndex).instance;

      if (rootSelectorOrNode) {
        view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
      }

      return new ComponentRef_(view, new ViewRef_(view), component);
    }
  }]);

  return ComponentFactory_;
}(ComponentFactory);

var ComponentRef_ = /*#__PURE__*/function (_ComponentRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentRef_, _ComponentRef);

  var _super12 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentRef_);

  function ComponentRef_(_view, _viewRef, _component) {
    var _this13;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentRef_);

    _this13 = _super12.call(this);
    _this13._view = _view;
    _this13._viewRef = _viewRef;
    _this13._component = _component;
    _this13._elDef = _this13._view.def.nodes[0];
    _this13.hostView = _viewRef;
    _this13.changeDetectorRef = _viewRef;
    _this13.instance = _component;
    return _this13;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentRef_, [{
    key: "location",
    get: function get() {
      return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
    }
  }, {
    key: "injector",
    get: function get() {
      return new Injector_(this._view, this._elDef);
    }
  }, {
    key: "componentType",
    get: function get() {
      return this._component.constructor;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._viewRef.destroy();
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      this._viewRef.onDestroy(callback);
    }
  }]);

  return ComponentRef_;
}(ComponentRef);

function createViewContainerData(view, elDef, elData) {
  return new ViewContainerRef_(view, elDef, elData);
}

var ViewContainerRef_ = /*#__PURE__*/function () {
  function ViewContainerRef_(_view, _elDef, _data) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewContainerRef_);

    this._view = _view;
    this._elDef = _elDef;
    this._data = _data;
    /**
     * @internal
     */

    this._embeddedViews = [];
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ViewContainerRef_, [{
    key: "element",
    get: function get() {
      return new ElementRef(this._data.renderElement);
    }
  }, {
    key: "injector",
    get: function get() {
      return new Injector_(this._view, this._elDef);
    }
    /** @deprecated No replacement */

  }, {
    key: "parentInjector",
    get: function get() {
      var view = this._view;
      var elDef = this._elDef.parent;

      while (!elDef && view) {
        elDef = viewParentEl(view);
        view = view.parent;
      }

      return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
    }
  }, {
    key: "clear",
    value: function clear() {
      var len = this._embeddedViews.length;

      for (var i = len - 1; i >= 0; i--) {
        var view = detachEmbeddedView(this._data, i);
        Services.destroyView(view);
      }
    }
  }, {
    key: "get",
    value: function get(index) {
      var view = this._embeddedViews[index];

      if (view) {
        var ref = new ViewRef_(view);
        ref.attachToViewContainerRef(this);
        return ref;
      }

      return null;
    }
  }, {
    key: "length",
    get: function get() {
      return this._embeddedViews.length;
    }
  }, {
    key: "createEmbeddedView",
    value: function createEmbeddedView(templateRef, context, index) {
      var viewRef = templateRef.createEmbeddedView(context || {});
      this.insert(viewRef, index);
      return viewRef;
    }
  }, {
    key: "createComponent",
    value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
      var contextInjector = injector || this.parentInjector;

      if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
        ngModuleRef = contextInjector.get(NgModuleRef);
      }

      var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
      this.insert(componentRef.hostView, index);
      return componentRef;
    }
  }, {
    key: "insert",
    value: function insert(viewRef, index) {
      if (viewRef.destroyed) {
        throw new Error('Cannot insert a destroyed View in a ViewContainer!');
      }

      var viewRef_ = viewRef;
      var viewData = viewRef_._view;
      attachEmbeddedView(this._view, this._data, index, viewData);
      viewRef_.attachToViewContainerRef(this);
      return viewRef;
    }
  }, {
    key: "move",
    value: function move(viewRef, currentIndex) {
      if (viewRef.destroyed) {
        throw new Error('Cannot move a destroyed View in a ViewContainer!');
      }

      var previousIndex = this._embeddedViews.indexOf(viewRef._view);

      moveEmbeddedView(this._data, previousIndex, currentIndex);
      return viewRef;
    }
  }, {
    key: "indexOf",
    value: function indexOf(viewRef) {
      return this._embeddedViews.indexOf(viewRef._view);
    }
  }, {
    key: "remove",
    value: function remove(index) {
      var viewData = detachEmbeddedView(this._data, index);

      if (viewData) {
        Services.destroyView(viewData);
      }
    }
  }, {
    key: "detach",
    value: function detach(index) {
      var view = detachEmbeddedView(this._data, index);
      return view ? new ViewRef_(view) : null;
    }
  }]);

  return ViewContainerRef_;
}();

function createChangeDetectorRef(view) {
  return new ViewRef_(view);
}

var ViewRef_ = /*#__PURE__*/function () {
  function ViewRef_(_view) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewRef_);

    this._view = _view;
    this._viewContainerRef = null;
    this._appRef = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ViewRef_, [{
    key: "rootNodes",
    get: function get() {
      return rootRenderNodes(this._view);
    }
  }, {
    key: "context",
    get: function get() {
      return this._view.context;
    },
    set: function set(value) {
      this._view.context = value;
    }
  }, {
    key: "destroyed",
    get: function get() {
      return (this._view.state & 128
      /* Destroyed */
      ) !== 0;
    }
  }, {
    key: "markForCheck",
    value: function markForCheck() {
      markParentViewsForCheck(this._view);
    }
  }, {
    key: "detach",
    value: function detach() {
      this._view.state &= ~4
      /* Attached */
      ;
    }
  }, {
    key: "detectChanges",
    value: function detectChanges() {
      var fs = this._view.root.rendererFactory;

      if (fs.begin) {
        fs.begin();
      }

      try {
        Services.checkAndUpdateView(this._view);
      } finally {
        if (fs.end) {
          fs.end();
        }
      }
    }
  }, {
    key: "checkNoChanges",
    value: function checkNoChanges() {
      Services.checkNoChangesView(this._view);
    }
  }, {
    key: "reattach",
    value: function reattach() {
      this._view.state |= 4
      /* Attached */
      ;
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      if (!this._view.disposables) {
        this._view.disposables = [];
      }

      this._view.disposables.push(callback);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._appRef) {
        this._appRef.detachView(this);
      } else if (this._viewContainerRef) {
        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
      }

      Services.destroyView(this._view);
    }
  }, {
    key: "detachFromAppRef",
    value: function detachFromAppRef() {
      this._appRef = null;
      renderDetachView$1(this._view);
      Services.dirtyParentQueries(this._view);
    }
  }, {
    key: "attachToAppRef",
    value: function attachToAppRef(appRef) {
      if (this._viewContainerRef) {
        throw new Error('This view is already attached to a ViewContainer!');
      }

      this._appRef = appRef;
    }
  }, {
    key: "attachToViewContainerRef",
    value: function attachToViewContainerRef(vcRef) {
      if (this._appRef) {
        throw new Error('This view is already attached directly to the ApplicationRef!');
      }

      this._viewContainerRef = vcRef;
    }
  }]);

  return ViewRef_;
}();

function createTemplateData(view, def) {
  return new TemplateRef_(view, def);
}

var TemplateRef_ = /*#__PURE__*/function (_TemplateRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(TemplateRef_, _TemplateRef);

  var _super13 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(TemplateRef_);

  function TemplateRef_(_parentView, _def) {
    var _this14;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TemplateRef_);

    _this14 = _super13.call(this);
    _this14._parentView = _parentView;
    _this14._def = _def;
    return _this14;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TemplateRef_, [{
    key: "createEmbeddedView",
    value: function createEmbeddedView(context) {
      return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
    }
  }, {
    key: "elementRef",
    get: function get() {
      return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
    }
  }]);

  return TemplateRef_;
}(TemplateRef);

function createInjector$1(view, elDef) {
  return new Injector_(view, elDef);
}

var Injector_ = /*#__PURE__*/function () {
  function Injector_(view, elDef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Injector_);

    this.view = view;
    this.elDef = elDef;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Injector_, [{
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
      var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432
      /* ComponentView */
      ) !== 0 : false;
      return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {
        flags: 0
        /* None */
        ,
        token: token,
        tokenKey: tokenKey(token)
      }, notFoundValue);
    }
  }]);

  return Injector_;
}();

function nodeValue(view, index) {
  var def = view.def.nodes[index];

  if (def.flags & 1
  /* TypeElement */
  ) {
    var elData = asElementData(view, def.nodeIndex);
    return def.element.template ? elData.template : elData.renderElement;
  } else if (def.flags & 2
  /* TypeText */
  ) {
    return asTextData(view, def.nodeIndex).renderText;
  } else if (def.flags & (20224
  /* CatProvider */
  | 16
  /* TypePipe */
  )) {
    return asProviderData(view, def.nodeIndex).instance;
  }

  throw new Error("Illegal state: read nodeValue for node index ".concat(index));
}

function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
  return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
}

var NgModuleRef_ = /*#__PURE__*/function () {
  function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleRef_);

    this._moduleType = _moduleType;
    this._parent = _parent;
    this._bootstrapComponents = _bootstrapComponents;
    this._def = _def;
    this._destroyListeners = [];
    this._destroyed = false;
    this.injector = this;
    initNgModule(this);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NgModuleRef_, [{
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
      var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
      var flags = 0
      /* None */
      ;

      if (injectFlags & InjectFlags.SkipSelf) {
        flags |= 1
        /* SkipSelf */
        ;
      } else if (injectFlags & InjectFlags.Self) {
        flags |= 4
        /* Self */
        ;
      }

      return resolveNgModuleDep(this, {
        token: token,
        tokenKey: tokenKey(token),
        flags: flags
      }, notFoundValue);
    }
  }, {
    key: "instance",
    get: function get() {
      return this.get(this._moduleType);
    }
  }, {
    key: "componentFactoryResolver",
    get: function get() {
      return this.get(ComponentFactoryResolver);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._destroyed) {
        throw new Error("The ng module ".concat(stringify(this.instance.constructor), " has already been destroyed."));
      }

      this._destroyed = true;
      callNgModuleLifecycle(this, 131072
      /* OnDestroy */
      );

      this._destroyListeners.forEach(function (listener) {
        return listener();
      });
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      this._destroyListeners.push(callback);
    }
  }]);

  return NgModuleRef_;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var Renderer2TokenKey = tokenKey(Renderer2);
var ElementRefTokenKey = tokenKey(ElementRef);
var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
var TemplateRefTokenKey = tokenKey(TemplateRef);
var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
var InjectorRefTokenKey$1 = tokenKey(Injector);
var INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);

function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
  var bindings = [];

  if (props) {
    for (var prop in props) {
      var _props$prop = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(props[prop], 2),
          bindingIndex = _props$prop[0],
          nonMinifiedName = _props$prop[1];

      bindings[bindingIndex] = {
        flags: 8
        /* TypeProperty */
        ,
        name: prop,
        nonMinifiedName: nonMinifiedName,
        ns: null,
        securityContext: null,
        suffix: null
      };
    }
  }

  var outputDefs = [];

  if (outputs) {
    for (var propName in outputs) {
      outputDefs.push({
        type: 1
        /* DirectiveOutput */
        ,
        propName: propName,
        target: null,
        eventName: outputs[propName]
      });
    }
  }

  flags |= 16384
  /* TypeDirective */
  ;
  return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}

function pipeDef(flags, ctor, deps) {
  flags |= 16
  /* TypePipe */
  ;
  return _def(-1, flags, null, 0, ctor, ctor, deps);
}

function providerDef(flags, matchedQueries, token, value, deps) {
  return _def(-1, flags, matchedQueries, 0, token, value, deps);
}

function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
  var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),
      matchedQueries = _splitMatchedQueriesD.matchedQueries,
      references = _splitMatchedQueriesD.references,
      matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;

  if (!outputs) {
    outputs = [];
  }

  if (!bindings) {
    bindings = [];
  } // Need to resolve forwardRefs as e.g. for `useValue` we
  // lowered the expression and then stopped evaluating it,
  // i.e. also didn't unwrap it.


  value = resolveForwardRef(value);
  var depDefs = splitDepsDsl(deps, stringify(token));
  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    checkIndex: checkIndex,
    flags: flags,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: matchedQueries,
    matchedQueryIds: matchedQueryIds,
    references: references,
    ngContentIndex: -1,
    childCount: childCount,
    bindings: bindings,
    bindingFlags: calcBindingFlags(bindings),
    outputs: outputs,
    element: null,
    provider: {
      token: token,
      value: value,
      deps: depDefs
    },
    text: null,
    query: null,
    ngContent: null
  };
}

function createProviderInstance(view, def) {
  return _createProviderInstance$1(view, def);
}

function createPipeInstance(view, def) {
  // deps are looked up from component.
  var compView = view;

  while (compView.parent && !isComponentView(compView)) {
    compView = compView.parent;
  } // pipes can see the private services of the component


  var allowPrivateServices = true; // pipes are always eager and classes!

  return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
}

function createDirectiveInstance(view, def) {
  // components can see other private services, other directives can't.
  var allowPrivateServices = (def.flags & 32768
  /* Component */
  ) > 0; // directives are always eager and classes!

  var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);

  if (def.outputs.length) {
    for (var i = 0; i < def.outputs.length; i++) {
      var output = def.outputs[i];
      var outputObservable = instance[output.propName];

      if (isObservable(outputObservable)) {
        var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
        view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
      } else {
        throw new Error("@Output ".concat(output.propName, " not initialized in '").concat(instance.constructor.name, "'."));
      }
    }
  }

  return instance;
}

function eventHandlerClosure(view, index, eventName) {
  return function (event) {
    return dispatchEvent(view, index, eventName, event);
  };
}

function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var providerData = asProviderData(view, def.nodeIndex);
  var directive = providerData.instance;
  var changed = false;
  var changes = undefined;
  var bindLen = def.bindings.length;

  if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
    changed = true;
    changes = updateProp(view, providerData, def, 0, v0, changes);
  }

  if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
    changed = true;
    changes = updateProp(view, providerData, def, 1, v1, changes);
  }

  if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
    changed = true;
    changes = updateProp(view, providerData, def, 2, v2, changes);
  }

  if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
    changed = true;
    changes = updateProp(view, providerData, def, 3, v3, changes);
  }

  if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
    changed = true;
    changes = updateProp(view, providerData, def, 4, v4, changes);
  }

  if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
    changed = true;
    changes = updateProp(view, providerData, def, 5, v5, changes);
  }

  if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
    changed = true;
    changes = updateProp(view, providerData, def, 6, v6, changes);
  }

  if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
    changed = true;
    changes = updateProp(view, providerData, def, 7, v7, changes);
  }

  if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
    changed = true;
    changes = updateProp(view, providerData, def, 8, v8, changes);
  }

  if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
    changed = true;
    changes = updateProp(view, providerData, def, 9, v9, changes);
  }

  if (changes) {
    directive.ngOnChanges(changes);
  }

  if (def.flags & 65536
  /* OnInit */
  && shouldCallLifecycleInitHook(view, 256
  /* InitState_CallingOnInit */
  , def.nodeIndex)) {
    directive.ngOnInit();
  }

  if (def.flags & 262144
  /* DoCheck */
  ) {
    directive.ngDoCheck();
  }

  return changed;
}

function checkAndUpdateDirectiveDynamic(view, def, values) {
  var providerData = asProviderData(view, def.nodeIndex);
  var directive = providerData.instance;
  var changed = false;
  var changes = undefined;

  for (var i = 0; i < values.length; i++) {
    if (checkBinding(view, def, i, values[i])) {
      changed = true;
      changes = updateProp(view, providerData, def, i, values[i], changes);
    }
  }

  if (changes) {
    directive.ngOnChanges(changes);
  }

  if (def.flags & 65536
  /* OnInit */
  && shouldCallLifecycleInitHook(view, 256
  /* InitState_CallingOnInit */
  , def.nodeIndex)) {
    directive.ngOnInit();
  }

  if (def.flags & 262144
  /* DoCheck */
  ) {
    directive.ngDoCheck();
  }

  return changed;
}

function _createProviderInstance$1(view, def) {
  // private services can see other private services
  var allowPrivateServices = (def.flags & 8192
  /* PrivateProvider */
  ) > 0;
  var providerDef = def.provider;

  switch (def.flags & 201347067
  /* Types */
  ) {
    case 512
    /* TypeClassProvider */
    :
      return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

    case 1024
    /* TypeFactoryProvider */
    :
      return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

    case 2048
    /* TypeUseExistingProvider */
    :
      return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);

    case 256
    /* TypeValueProvider */
    :
      return providerDef.value;
  }
}

function createClass(view, elDef, allowPrivateServices, ctor, deps) {
  var len = deps.length;

  switch (len) {
    case 0:
      return new ctor();

    case 1:
      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));

    case 2:
      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

    case 3:
      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

    default:
      var depValues = [];

      for (var i = 0; i < len; i++) {
        depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
      }

      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_8__.default)(ctor, depValues);
  }
}

function callFactory(view, elDef, allowPrivateServices, factory, deps) {
  var len = deps.length;

  switch (len) {
    case 0:
      return factory();

    case 1:
      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));

    case 2:
      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

    case 3:
      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

    default:
      var depValues = [];

      for (var i = 0; i < len; i++) {
        depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
      }

      return factory.apply(void 0, depValues);
  }
} // This default value is when checking the hierarchy for a token.
//
// It means both:
// - the token is not provided by the current injector,
// - only the element injectors should be checked (ie do not check module injectors
//
//          mod1
//         /
//       el1   mod2
//         \  /
//         el2
//
// When requesting el2.injector.get(token), we should check in the following order and return the
// first found value:
// - el2.injector.get(token, default)
// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
// - mod2.injector.get(token, default)


var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};

function resolveDep(view, elDef, allowPrivateServices, depDef) {
  var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Injector.THROW_IF_NOT_FOUND;

  if (depDef.flags & 8
  /* Value */
  ) {
    return depDef.token;
  }

  var startView = view;

  if (depDef.flags & 2
  /* Optional */
  ) {
    notFoundValue = null;
  }

  var tokenKey = depDef.tokenKey;

  if (tokenKey === ChangeDetectorRefTokenKey) {
    // directives on the same element as a component should be able to control the change detector
    // of that component as well.
    allowPrivateServices = !!(elDef && elDef.element.componentView);
  }

  if (elDef && depDef.flags & 1
  /* SkipSelf */
  ) {
    allowPrivateServices = false;
    elDef = elDef.parent;
  }

  var searchView = view;

  while (searchView) {
    if (elDef) {
      switch (tokenKey) {
        case Renderer2TokenKey:
          {
            var compView = findCompView(searchView, elDef, allowPrivateServices);
            return compView.renderer;
          }

        case ElementRefTokenKey:
          return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);

        case ViewContainerRefTokenKey:
          return asElementData(searchView, elDef.nodeIndex).viewContainer;

        case TemplateRefTokenKey:
          {
            if (elDef.element.template) {
              return asElementData(searchView, elDef.nodeIndex).template;
            }

            break;
          }

        case ChangeDetectorRefTokenKey:
          {
            var cdView = findCompView(searchView, elDef, allowPrivateServices);
            return createChangeDetectorRef(cdView);
          }

        case InjectorRefTokenKey$1:
        case INJECTORRefTokenKey$1:
          return createInjector$1(searchView, elDef);

        default:
          var _providerDef2 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];

          if (_providerDef2) {
            var providerData = asProviderData(searchView, _providerDef2.nodeIndex);

            if (!providerData) {
              providerData = {
                instance: _createProviderInstance$1(searchView, _providerDef2)
              };
              searchView.nodes[_providerDef2.nodeIndex] = providerData;
            }

            return providerData.instance;
          }

      }
    }

    allowPrivateServices = isComponentView(searchView);
    elDef = viewParentEl(searchView);
    searchView = searchView.parent;

    if (depDef.flags & 4
    /* Self */
    ) {
      searchView = null;
    }
  }

  var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);

  if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
    // Return the value from the root element injector when
    // - it provides it
    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
    // - the module injector should not be checked
    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
    return value;
  }

  return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
}

function findCompView(view, elDef, allowPrivateServices) {
  var compView;

  if (allowPrivateServices) {
    compView = asElementData(view, elDef.nodeIndex).componentView;
  } else {
    compView = view;

    while (compView.parent && !isComponentView(compView)) {
      compView = compView.parent;
    }
  }

  return compView;
}

function updateProp(view, providerData, def, bindingIdx, value, changes) {
  if (def.flags & 32768
  /* Component */
  ) {
    var compView = asElementData(view, def.parent.nodeIndex).componentView;

    if (compView.def.flags & 2
    /* OnPush */
    ) {
      compView.state |= 8
      /* ChecksEnabled */
      ;
    }
  }

  var binding = def.bindings[bindingIdx];
  var propName = binding.name; // Note: This is still safe with Closure Compiler as
  // the user passed in the property name as an object has to `providerDef`,
  // so Closure Compiler will have renamed the property correctly already.

  providerData.instance[propName] = value;

  if (def.flags & 524288
  /* OnChanges */
  ) {
    changes = changes || {};
    var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
    var _binding = def.bindings[bindingIdx];
    changes[_binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 2
    /* FirstCheck */
    ) !== 0);
  }

  view.oldValues[def.bindingIndex + bindingIdx] = value;
  return changes;
} // This function calls the ngAfterContentCheck, ngAfterContentInit,
// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
// called during a pre-order traversal of the view tree (that is calling the
// parent hooks before the child hooks) these events are sent in using a
// post-order traversal of the tree (children before parents). This changes the
// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
// expected nodeIndex which a ngOnInit should be called. When sending
// ngAfterContentInit and ngAfterViewInit it is the expected count of
// ngAfterContentInit or ngAfterViewInit methods that have been called. This
// ensure that despite being called recursively or after picking up after an
// exception, the ngAfterContentInit or ngAfterViewInit will be called on the
// correct nodes. Consider for example, the following (where E is an element
// and D is a directive)
//  Tree:       pre-order index  post-order index
//    E1        0                6
//      E2      1                1
//       D3     2                0
//      E4      3                5
//       E5     4                4
//        E6    5                2
//        E7    6                3
// As can be seen, the post-order index has an unclear relationship to the
// pre-order index (postOrderIndex === preOrderIndex - parentCount +
// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
// are stable (will be the same for the same view regardless of exceptions or
// recursion) we just need to count them which will roughly correspond to the
// post-order index (it skips elements and directives that do not have
// lifecycle hooks).
//
// For example, if an exception is raised in the E6.onAfterViewInit() the
// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
// not have their ngAfterViewInit() called but, starting with E7, the rest of
// the view will begin getting ngAfterViewInit() called until a check and
// pass is complete.
//
// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
// When the recursion returns the initIndex will be 7 so E1 is skipped as it
// has already been called in the recursively called checkAnUpdateView().


function callLifecycleHooksChildrenFirst(view, lifecycles) {
  if (!(view.def.nodeFlags & lifecycles)) {
    return;
  }

  var nodes = view.def.nodes;
  var initIndex = 0;

  for (var i = 0; i < nodes.length; i++) {
    var nodeDef = nodes[i];
    var parent = nodeDef.parent;

    if (!parent && nodeDef.flags & lifecycles) {
      // matching root node (e.g. a pipe)
      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
    }

    if ((nodeDef.childFlags & lifecycles) === 0) {
      // no child matches one of the lifecycles
      i += nodeDef.childCount;
    }

    while (parent && parent.flags & 1
    /* TypeElement */
    && i === parent.nodeIndex + parent.childCount) {
      // last child of an element
      if (parent.directChildFlags & lifecycles) {
        initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);
      }

      parent = parent.parent;
    }
  }
}

function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
  for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
    var nodeDef = view.def.nodes[i];

    if (nodeDef.flags & lifecycles) {
      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
    } // only visit direct children


    i += nodeDef.childCount;
  }

  return initIndex;
}

function callProviderLifecycles(view, index, lifecycles, initIndex) {
  var providerData = asProviderData(view, index);

  if (!providerData) {
    return;
  }

  var provider = providerData.instance;

  if (!provider) {
    return;
  }

  Services.setCurrentNode(view, index);

  if (lifecycles & 1048576
  /* AfterContentInit */
  && shouldCallLifecycleInitHook(view, 512
  /* InitState_CallingAfterContentInit */
  , initIndex)) {
    provider.ngAfterContentInit();
  }

  if (lifecycles & 2097152
  /* AfterContentChecked */
  ) {
    provider.ngAfterContentChecked();
  }

  if (lifecycles & 4194304
  /* AfterViewInit */
  && shouldCallLifecycleInitHook(view, 768
  /* InitState_CallingAfterViewInit */
  , initIndex)) {
    provider.ngAfterViewInit();
  }

  if (lifecycles & 8388608
  /* AfterViewChecked */
  ) {
    provider.ngAfterViewChecked();
  }

  if (lifecycles & 131072
  /* OnDestroy */
  ) {
    provider.ngOnDestroy();
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ComponentFactoryResolver$1 = /*#__PURE__*/function (_ComponentFactoryReso) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentFactoryResolver$1, _ComponentFactoryReso);

  var _super14 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentFactoryResolver$1);

  /**
   * @param ngModule The NgModuleRef to which all resolved factories are bound.
   */
  function ComponentFactoryResolver$1(ngModule) {
    var _this15;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactoryResolver$1);

    _this15 = _super14.call(this);
    _this15.ngModule = ngModule;
    return _this15;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentFactoryResolver$1, [{
    key: "resolveComponentFactory",
    value: function resolveComponentFactory(component) {
      ngDevMode && assertComponentType(component);
      var componentDef = getComponentDef(component);
      return new ComponentFactory$1(componentDef, this.ngModule);
    }
  }]);

  return ComponentFactoryResolver$1;
}(ComponentFactoryResolver);

function toRefArray(map) {
  var array = [];

  for (var nonMinified in map) {
    if (map.hasOwnProperty(nonMinified)) {
      var minified = map[nonMinified];
      array.push({
        propName: minified,
        templateName: nonMinified
      });
    }
  }

  return array;
}

function getNamespace$1(elementName) {
  var name = elementName.toLowerCase();
  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;
}
/**
 * A change detection scheduler token for {@link RootContext}. This token is the default value used
 * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.
 */


var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {
  providedIn: 'root',
  factory: function factory() {
    return defaultScheduler;
  }
});

function createChainedInjector(rootViewInjector, moduleInjector) {
  return {
    get: function get(token, notFoundValue, flags) {
      var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);

      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
      }

      return moduleInjector.get(token, notFoundValue, flags);
    }
  };
}
/**
 * Render3 implementation of {@link viewEngine_ComponentFactory}.
 */


var ComponentFactory$1 = /*#__PURE__*/function (_ComponentFactory3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentFactory$1, _ComponentFactory3);

  var _super15 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentFactory$1);

  /**
   * @param componentDef The component definition.
   * @param ngModule The NgModuleRef to which the factory is bound.
   */
  function ComponentFactory$1(componentDef, ngModule) {
    var _this16;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentFactory$1);

    _this16 = _super15.call(this);
    _this16.componentDef = componentDef;
    _this16.ngModule = ngModule;
    _this16.componentType = componentDef.type;
    _this16.selector = stringifyCSSSelectorList(componentDef.selectors);
    _this16.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
    _this16.isBoundToModule = !!ngModule;
    return _this16;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentFactory$1, [{
    key: "inputs",
    get: function get() {
      return toRefArray(this.componentDef.inputs);
    }
  }, {
    key: "outputs",
    get: function get() {
      return toRefArray(this.componentDef.outputs);
    }
  }, {
    key: "create",
    value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
      ngModule = ngModule || this.ngModule;
      var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
      var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
      var sanitizer = rootViewInjector.get(Sanitizer, null);
      var hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created
      // dynamically. Default to 'div' if this component did not specify any tag name in its selector.

      var elementName = this.componentDef.selectors[0][0] || 'div';
      var hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace$1(elementName));
      var rootFlags = this.componentDef.onPush ? 64
      /* Dirty */
      | 512
      /* IsRoot */
      : 16
      /* CheckAlways */
      | 512
      /* IsRoot */
      ;
      var rootContext = createRootContext(); // Create the root view. Uses empty TView and ContentTemplate.

      var rootTView = createTView(0
      /* Root */
      , null, null, 1, 0, null, null, null, null, null);
      var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector); // rootView is the parent when bootstrapping
      // TODO(misko): it looks like we are entering view here but we don't really need to as
      // `renderView` does that. However as the code is written it is needed because
      // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
      // issues would allow us to drop this.

      enterView(rootLView);
      var component;
      var tElementNode;

      try {
        var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);

        if (hostRNode) {
          if (rootSelectorOrNode) {
            setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
          } else {
            // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
            // is not defined), also apply attributes and classes extracted from component selector.
            // Extract attributes and classes from the first selector only to match VE behavior.
            var _extractAttrsAndClass = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]),
                attrs = _extractAttrsAndClass.attrs,
                classes = _extractAttrsAndClass.classes;

            if (attrs) {
              setUpAttributes(hostRenderer, hostRNode, attrs);
            }

            if (classes && classes.length > 0) {
              writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
            }
          }
        }

        tElementNode = getTNode(rootTView, HEADER_OFFSET);

        if (projectableNodes !== undefined) {
          var projection = tElementNode.projection = [];

          for (var i = 0; i < this.ngContentSelectors.length; i++) {
            var nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
            // case). Here we do normalize passed data structure to be an array of arrays to avoid
            // complex checks down the line.
            // We also normalize the length of the passed in projectable nodes (to match the number of
            // <ng-container> slots defined by a component).

            projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
          }
        } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
        // executed here?
        // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref


        component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
        renderView(rootTView, rootLView, null);
      } finally {
        leaveView();
      }

      return new ComponentRef$1(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
    }
  }]);

  return ComponentFactory$1;
}(ComponentFactory);

var componentFactoryResolver = new ComponentFactoryResolver$1();
/**
 * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
 * ComponentFactoryResolver
 * already exists, retrieves the existing ComponentFactoryResolver.
 *
 * @returns The ComponentFactoryResolver instance to use
 */

function injectComponentFactoryResolver() {
  return componentFactoryResolver;
}
/**
 * Represents an instance of a Component created via a {@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
 * method.
 *
 */


var ComponentRef$1 = /*#__PURE__*/function (_ComponentRef2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ComponentRef$1, _ComponentRef2);

  var _super16 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ComponentRef$1);

  function ComponentRef$1(componentType, instance, location, _rootLView, _tNode) {
    var _this17;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ComponentRef$1);

    _this17 = _super16.call(this);
    _this17.location = location;
    _this17._rootLView = _rootLView;
    _this17._tNode = _tNode;
    _this17.instance = instance;
    _this17.hostView = _this17.changeDetectorRef = new RootViewRef(_rootLView);
    _this17.componentType = componentType;
    return _this17;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ComponentRef$1, [{
    key: "injector",
    get: function get() {
      return new NodeInjector(this._tNode, this._rootLView);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.hostView.destroy();
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      this.hostView.onDestroy(callback);
    }
  }]);

  return ComponentRef$1;
}(ComponentRef);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds decorator, constructor, and property metadata to a given type via static metadata fields
 * on the type.
 *
 * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
 *
 * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments
 * being tree-shaken away during production builds.
 */


function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(function () {
    var clazz = type;

    if (decorators !== null) {
      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {
        var _clazz$decorators;

        (_clazz$decorators = clazz.decorators).push.apply(_clazz$decorators, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(decorators));
      } else {
        clazz.decorators = decorators;
      }
    }

    if (ctorParameters !== null) {
      // Rather than merging, clobber the existing parameters. If other projects exist which
      // use tsickle-style annotations and reflect over them in the same way, this could
      // cause issues, but that is vanishingly unlikely.
      clazz.ctorParameters = ctorParameters;
    }

    if (propDecorators !== null) {
      // The property decorator objects are merged as it is possible different fields have
      // different decorator types. Decorators on individual fields are not merged, as it's
      // also incredibly unlikely that a field will be decorated both with an Angular
      // decorator and a non-Angular decorator that's also been downleveled.
      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {
        clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Map of module-id to the corresponding NgModule.
 * - In pre Ivy we track NgModuleFactory,
 * - In post Ivy we track the NgModuleType
 */


var modules = new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * @publicApi
 */

function registerModuleFactory(id, factory) {
  var existing = modules.get(id);
  assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
  modules.set(id, factory);
}

function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming) {
    throw new Error("Duplicate module registered for ".concat(id, " - ").concat(stringify(type), " vs ").concat(stringify(type.name)));
  }
}

function registerNgModuleType(ngModuleType) {
  var visited = new Set();
  recurse(ngModuleType);

  function recurse(ngModuleType) {
    // The imports array of an NgModule must refer to other NgModules,
    // so an error is thrown if no module definition is available.
    var def = getNgModuleDef(ngModuleType,
    /* throwNotFound */
    true);
    var id = def.id;

    if (id !== null) {
      var existing = modules.get(id);
      assertSameOrNotExisting(id, existing, ngModuleType);
      modules.set(id, ngModuleType);
    }

    var imports = maybeUnwrapFn(def.imports);

    var _iterator4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(imports),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var i = _step4.value;

        if (!visited.has(i)) {
          visited.add(i);
          recurse(i);
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }
}

function clearModulesForTest() {
  modules.clear();
}

function getRegisteredNgModuleType(id) {
  return modules.get(id) || autoRegisterModuleById[id];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NgModuleRef$1 = /*#__PURE__*/function (_NgModuleRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(NgModuleRef$1, _NgModuleRef);

  var _super17 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(NgModuleRef$1);

  function NgModuleRef$1(ngModuleType, _parent) {
    var _this18;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleRef$1);

    _this18 = _super17.call(this);
    _this18._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore

    _this18._bootstrapComponents = [];
    _this18.injector = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this18);
    _this18.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:
    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
    // circular dependency which will result in a runtime error, because the injector doesn't
    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
    // and providing it, rather than letting the injector resolve it.

    _this18.componentFactoryResolver = new ComponentFactoryResolver$1((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this18));
    var ngModuleDef = getNgModuleDef(ngModuleType);
    ngDevMode && assertDefined(ngModuleDef, "NgModule '".concat(stringify(ngModuleType), "' is not a subtype of 'NgModuleType'."));
    var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
    ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
    _this18._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
    _this18._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
      provide: NgModuleRef,
      useValue: (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this18)
    }, {
      provide: ComponentFactoryResolver,
      useValue: _this18.componentFactoryResolver
    }], stringify(ngModuleType)); // We need to resolve the injector types separately from the injector creation, because
    // the module might be trying to use this ref in its contructor for DI which will cause a
    // circular error that will eventually error out, because the injector isn't created yet.

    _this18._r3Injector._resolveInjectorDefTypes();

    _this18.instance = _this18.get(ngModuleType);
    return _this18;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NgModuleRef$1, [{
    key: "get",
    value: function get(token) {
      var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
      var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;

      if (token === Injector || token === NgModuleRef || token === INJECTOR$1) {
        return this;
      }

      return this._r3Injector.get(token, notFoundValue, injectFlags);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
      var injector = this._r3Injector;
      !injector.destroyed && injector.destroy();
      this.destroyCbs.forEach(function (fn) {
        return fn();
      });
      this.destroyCbs = null;
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
      this.destroyCbs.push(callback);
    }
  }]);

  return NgModuleRef$1;
}(NgModuleRef);

var NgModuleFactory$1 = /*#__PURE__*/function (_NgModuleFactory) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(NgModuleFactory$1, _NgModuleFactory);

  var _super18 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(NgModuleFactory$1);

  function NgModuleFactory$1(moduleType) {
    var _this19;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleFactory$1);

    _this19 = _super18.call(this);
    _this19.moduleType = moduleType;
    var ngModuleDef = getNgModuleDef(moduleType);

    if (ngModuleDef !== null) {
      // Register the NgModule with Angular's module registry. The location (and hence timing) of
      // this call is critical to ensure this works correctly (modules get registered when expected)
      // without bloating bundles (modules are registered when otherwise not referenced).
      //
      // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
      // several practical consequences:
      //
      // - If an .ngfactory file is not imported from, the module won't be registered (and can be
      //   tree shaken).
      // - If an .ngfactory file is imported from, the module will be registered even if an instance
      //   is not actually created (via `create` below).
      // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
      //   imports,
      //
      // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
      // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
      // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
      // the side effect of registration is added here, in the constructor of NgModuleFactory,
      // ensuring no matter how a factory is created, the module is registered correctly.
      //
      // An alternative would be to include the registration side effect inline following the actual
      // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
      // will be registered and retained even if they're otherwise never referenced.
      registerNgModuleType(moduleType);
    }

    return _this19;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NgModuleFactory$1, [{
    key: "create",
    value: function create(parentInjector) {
      return new NgModuleRef$1(this.moduleType, parentInjector);
    }
  }]);

  return NgModuleFactory$1;
}(NgModuleFactory);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Bindings for pure functions are stored after regular bindings.
 *
 * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
 * ------------------------------------------------------------------------------------------
 * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
 * ------------------------------------------------------------------------------------------
 *                    ^                      ^
 *      TView.bindingStartIndex      TView.expandoStartIndex
 *
 * Pure function instructions are given an offset from the binding root. Adding the offset to the
 * binding root gives the first index where the bindings are stored. In component views, the binding
 * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
 * any directive instances + any hostVars in directives evaluated before it.
 *
 * See VIEW_DATA.md for more information about host binding resolution.
 */

/**
 * If the value hasn't been saved, calls the pure function to store and return the
 * value. If it has been saved, returns the saved value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns a value
 * @param thisArg Optional calling context of pureFn
 * @returns value
 *
 * @codeGenApi
 */


function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {
  var bindingIndex = getBindingRoot() + slotOffset;
  var lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns an updated value
 * @param exp Updated expression value
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  var bindingIndex = getBindingRoot() + slotOffset;
  var lView = getLView();
  var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  var bindingIndex = getBindingRoot() + slotOffset;
  var lView = getLView();
  var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param exp7
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  var bindingIndex = getBindingRoot() + slotOffset;
  var lView = getLView();
  var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param exp7
 * @param exp8
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  var bindingIndex = getBindingRoot() + slotOffset;
  var lView = getLView();
  var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param exps An array of binding values
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
/**
 * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
 * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
 * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
 * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
 * it to `undefined`.
 */


function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  var lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns an updated value
 * @param exp Updated expression value
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  var bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  var bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  var bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 */


function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  var bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param exps An array of binding values
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  var bindingIndex = bindingRoot + slotOffset;
  var different = false;

  for (var i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }

  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create a pipe.
 *
 * @param index Pipe index where the pipe will be stored.
 * @param pipeName The name of the pipe
 * @returns T the instance of the pipe.
 *
 * @codeGenApi
 */


function ɵɵpipe(index, pipeName) {
  var tView = getTView();
  var pipeDef;
  var adjustedIndex = index + HEADER_OFFSET;

  if (tView.firstCreatePass) {
    pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;

    if (pipeDef.onDestroy) {
      (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }

  var pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  var previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);

  try {
    // DI for pipes is supposed to behave like directives when placed on a component
    // host node, which means that we have to disable access to `viewProviders`.
    var previousIncludeViewProviders = setIncludeViewProviders(false);
    var pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    // we have to restore the injector implementation in finally, just in case the creation of the
    // pipe throws an error.
    setInjectImplementation(previousInjectImplementation);
  }
}
/**
 * Searches the pipe registry for a pipe with the given name. If one is found,
 * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
 *
 * @param name Name of pipe to resolve
 * @param registry Full list of available pipes
 * @returns Matching PipeDef
 */


function getPipeDef$1(name, registry) {
  if (registry) {
    for (var i = registry.length - 1; i >= 0; i--) {
      var _pipeDef = registry[i];

      if (name === _pipeDef.name) {
        return _pipeDef;
      }
    }
  }

  throw new RuntimeError("302"
  /* PIPE_NOT_FOUND */
  , "The pipe '".concat(name, "' could not be found!"));
}
/**
 * Invokes a pipe with 1 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind1(index, slotOffset, v1) {
  var adjustedIndex = index + HEADER_OFFSET;
  var lView = getLView();
  var pipeInstance = load(lView, adjustedIndex);
  return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1));
}
/**
 * Invokes a pipe with 2 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind2(index, slotOffset, v1, v2) {
  var adjustedIndex = index + HEADER_OFFSET;
  var lView = getLView();
  var pipeInstance = load(lView, adjustedIndex);
  return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2));
}
/**
 * Invokes a pipe with 3 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 * @param v3 4rd argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
  var adjustedIndex = index + HEADER_OFFSET;
  var lView = getLView();
  var pipeInstance = load(lView, adjustedIndex);
  return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3));
}
/**
 * Invokes a pipe with 4 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 * @param v3 3rd argument to {@link PipeTransform#transform}.
 * @param v4 4th argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
  var adjustedIndex = index + HEADER_OFFSET;
  var lView = getLView();
  var pipeInstance = load(lView, adjustedIndex);
  return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4));
}
/**
 * Invokes a pipe with variable number of arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
 *
 * @codeGenApi
 */


function ɵɵpipeBindV(index, slotOffset, values) {
  var adjustedIndex = index + HEADER_OFFSET;
  var lView = getLView();
  var pipeInstance = load(lView, adjustedIndex);
  return unwrapValue$1(lView, isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values));
}

function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
/**
 * Unwrap the output of a pipe transformation.
 * In order to trick change detection into considering that the new value is always different from
 * the old one, the old value is overwritten by NO_CHANGE.
 *
 * @param newValue the pipe transformation output.
 */


function unwrapValue$1(lView, newValue) {
  if (WrappedValue.isWrapped(newValue)) {
    newValue = WrappedValue.unwrap(newValue); // The NO_CHANGE value needs to be written at the index where the impacted binding value is
    // stored

    var bindingToInvalidateIdx = getBindingIndex();
    lView[bindingToInvalidateIdx] = NO_CHANGE;
  }

  return newValue;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var EventEmitter_ = /*#__PURE__*/function (_Subject) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(EventEmitter_, _Subject);

  var _super19 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(EventEmitter_);

  function EventEmitter_() {
    var _this20;

    var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, EventEmitter_);

    _this20 = _super19.call(this);
    _this20.__isAsync = isAsync;
    return _this20;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(EventEmitter_, [{
    key: "emit",
    value: function emit(value) {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(EventEmitter_.prototype), "next", this).call(this, value);
    }
  }, {
    key: "subscribe",
    value: function subscribe(observerOrNext, error, complete) {
      var _a, _b, _c;

      var nextFn = observerOrNext;

      var errorFn = error || function () {
        return null;
      };

      var completeFn = complete;

      if (observerOrNext && typeof observerOrNext === 'object') {
        var observer = observerOrNext;
        nextFn = (_a = observer.next) === null || _a === void 0 ? void 0 : _a.bind(observer);
        errorFn = (_b = observer.error) === null || _b === void 0 ? void 0 : _b.bind(observer);
        completeFn = (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.bind(observer);
      }

      if (this.__isAsync) {
        errorFn = _wrapInTimeout(errorFn);

        if (nextFn) {
          nextFn = _wrapInTimeout(nextFn);
        }

        if (completeFn) {
          completeFn = _wrapInTimeout(completeFn);
        }
      }

      var sink = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(EventEmitter_.prototype), "subscribe", this).call(this, {
        next: nextFn,
        error: errorFn,
        complete: completeFn
      });

      if (observerOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_14__.Subscription) {
        observerOrNext.add(sink);
      }

      return sink;
    }
  }]);

  return EventEmitter_;
}(rxjs__WEBPACK_IMPORTED_MODULE_15__.Subject);

function _wrapInTimeout(fn) {
  return function (value) {
    setTimeout(fn, undefined, value);
  };
}
/**
 * @publicApi
 */


var EventEmitter = EventEmitter_;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function symbolIterator() {
  return this._results[getSymbolIterator()]();
}
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
 * provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * @usageNotes
 * ### Example
 * ```typescript
 * @Component({...})
 * class Container {
 *   @ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 *
 * @publicApi
 */


var QueryList = /*#__PURE__*/function () {
  /**
   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
   *     the same result)
   */
  function QueryList() {
    var _emitDistinctChangesOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, QueryList);

    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
    this.dirty = true;
    this._results = [];
    this._changesDetected = false;
    this._changes = null;
    this.length = 0;
    this.first = undefined;
    this.last = undefined; // This function should be declared on the prototype, but doing so there will cause the class
    // declaration to have side-effects and become not tree-shakable. For this reason we do it in
    // the constructor.
    // [getSymbolIterator()](): Iterator<T> { ... }

    var symbol = getSymbolIterator();
    var proto = QueryList.prototype;
    if (!proto[symbol]) proto[symbol] = symbolIterator;
  }
  /**
   * Returns `Observable` of `QueryList` notifying the subscriber of changes.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(QueryList, [{
    key: "changes",
    get: function get() {
      return this._changes || (this._changes = new EventEmitter());
    }
    /**
     * Returns the QueryList entry at `index`.
     */

  }, {
    key: "get",
    value: function get(index) {
      return this._results[index];
    }
    /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     */

  }, {
    key: "map",
    value: function map(fn) {
      return this._results.map(fn);
    }
    /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     */

  }, {
    key: "filter",
    value: function filter(fn) {
      return this._results.filter(fn);
    }
    /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     */

  }, {
    key: "find",
    value: function find(fn) {
      return this._results.find(fn);
    }
    /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     */

  }, {
    key: "reduce",
    value: function reduce(fn, init) {
      return this._results.reduce(fn, init);
    }
    /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     */

  }, {
    key: "forEach",
    value: function forEach(fn) {
      this._results.forEach(fn);
    }
    /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     */

  }, {
    key: "some",
    value: function some(fn) {
      return this._results.some(fn);
    }
    /**
     * Returns a copy of the internal results list as an Array.
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return this._results.slice();
    }
  }, {
    key: "toString",
    value: function toString() {
      return this._results.toString();
    }
    /**
     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
     * on change detection, it will not notify of changes to the queries, unless a new change
     * occurs.
     *
     * @param resultsTree The query results to store
     * @param identityAccessor Optional function for extracting stable object identity from a value
     *    in the array. This function is executed for each element of the query result list while
     *    comparing current query list with the new one (provided as a first argument of the `reset`
     *    function) to detect if the lists are different. If the function is not provided, elements
     *    are compared as is (without any pre-processing).
     */

  }, {
    key: "reset",
    value: function reset(resultsTree, identityAccessor) {
      // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of
      // QueryList (but not for QueryList itself.)
      var self = this;
      self.dirty = false;
      var newResultFlat = flatten(resultsTree);

      if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {
        self._results = newResultFlat;
        self.length = newResultFlat.length;
        self.last = newResultFlat[this.length - 1];
        self.first = newResultFlat[0];
      }
    }
    /**
     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
     */

  }, {
    key: "notifyOnChanges",
    value: function notifyOnChanges() {
      if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);
    }
    /** internal */

  }, {
    key: "setDirty",
    value: function setDirty() {
      this.dirty = true;
    }
    /** internal */

  }, {
    key: "destroy",
    value: function destroy() {
      this.changes.complete();
      this.changes.unsubscribe();
    }
  }]);

  return QueryList;
}();

Symbol.iterator;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

var unusedValueExportToPlacateAjd$7 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

var unusedValueExportToPlacateAjd$8 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;

var LQuery_ = /*#__PURE__*/function () {
  function LQuery_(queryList) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, LQuery_);

    this.queryList = queryList;
    this.matches = null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(LQuery_, [{
    key: "clone",
    value: function clone() {
      return new LQuery_(this.queryList);
    }
  }, {
    key: "setDirty",
    value: function setDirty() {
      this.queryList.setDirty();
    }
  }]);

  return LQuery_;
}();

var LQueries_ = /*#__PURE__*/function () {
  function LQueries_() {
    var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, LQueries_);

    this.queries = queries;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(LQueries_, [{
    key: "createEmbeddedView",
    value: function createEmbeddedView(tView) {
      var tQueries = tView.queries;

      if (tQueries !== null) {
        var noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
        var viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the
        // TQueries collection and up until a first content query declared in the embedded view. Only
        // propagated LQueries are created at this point (LQuery corresponding to declared content
        // queries will be instantiated from the content query instructions for each directive).

        for (var i = 0; i < noOfInheritedQueries; i++) {
          var tQuery = tQueries.getByIndex(i);
          var parentLQuery = this.queries[tQuery.indexInDeclarationView];
          viewLQueries.push(parentLQuery.clone());
        }

        return new LQueries_(viewLQueries);
      }

      return null;
    }
  }, {
    key: "insertView",
    value: function insertView(tView) {
      this.dirtyQueriesWithMatches(tView);
    }
  }, {
    key: "detachView",
    value: function detachView(tView) {
      this.dirtyQueriesWithMatches(tView);
    }
  }, {
    key: "dirtyQueriesWithMatches",
    value: function dirtyQueriesWithMatches(tView) {
      for (var i = 0; i < this.queries.length; i++) {
        if (getTQuery(tView, i).matches !== null) {
          this.queries[i].setDirty();
        }
      }
    }
  }]);

  return LQueries_;
}();

var TQueryMetadata_ = function TQueryMetadata_(predicate, flags) {
  var read = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TQueryMetadata_);

  this.predicate = predicate;
  this.flags = flags;
  this.read = read;
};

var TQueries_ = /*#__PURE__*/function () {
  function TQueries_() {
    var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TQueries_);

    this.queries = queries;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TQueries_, [{
    key: "elementStart",
    value: function elementStart(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

      for (var i = 0; i < this.queries.length; i++) {
        this.queries[i].elementStart(tView, tNode);
      }
    }
  }, {
    key: "elementEnd",
    value: function elementEnd(tNode) {
      for (var i = 0; i < this.queries.length; i++) {
        this.queries[i].elementEnd(tNode);
      }
    }
  }, {
    key: "embeddedTView",
    value: function embeddedTView(tNode) {
      var queriesForTemplateRef = null;

      for (var i = 0; i < this.length; i++) {
        var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
        var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);

        if (tqueryClone) {
          tqueryClone.indexInDeclarationView = i;

          if (queriesForTemplateRef !== null) {
            queriesForTemplateRef.push(tqueryClone);
          } else {
            queriesForTemplateRef = [tqueryClone];
          }
        }
      }

      return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
    }
  }, {
    key: "template",
    value: function template(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

      for (var i = 0; i < this.queries.length; i++) {
        this.queries[i].template(tView, tNode);
      }
    }
  }, {
    key: "getByIndex",
    value: function getByIndex(index) {
      ngDevMode && assertIndexInRange(this.queries, index);
      return this.queries[index];
    }
  }, {
    key: "length",
    get: function get() {
      return this.queries.length;
    }
  }, {
    key: "track",
    value: function track(tquery) {
      this.queries.push(tquery);
    }
  }]);

  return TQueries_;
}();

var TQuery_ = /*#__PURE__*/function () {
  function TQuery_(metadata) {
    var nodeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TQuery_);

    this.metadata = metadata;
    this.matches = null;
    this.indexInDeclarationView = -1;
    this.crossesNgTemplate = false;
    /**
     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
     * elements in a template.
     */

    this._appliesToNextNode = true;
    this._declarationNodeIndex = nodeIndex;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TQuery_, [{
    key: "elementStart",
    value: function elementStart(tView, tNode) {
      if (this.isApplyingToNode(tNode)) {
        this.matchTNode(tView, tNode);
      }
    }
  }, {
    key: "elementEnd",
    value: function elementEnd(tNode) {
      if (this._declarationNodeIndex === tNode.index) {
        this._appliesToNextNode = false;
      }
    }
  }, {
    key: "template",
    value: function template(tView, tNode) {
      this.elementStart(tView, tNode);
    }
  }, {
    key: "embeddedTView",
    value: function embeddedTView(tNode, childQueryIndex) {
      if (this.isApplyingToNode(tNode)) {
        this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from
        // embedded views created based on this `<ng-template>`).

        this.addMatch(-tNode.index, childQueryIndex);
        return new TQuery_(this.metadata);
      }

      return null;
    }
  }, {
    key: "isApplyingToNode",
    value: function isApplyingToNode(tNode) {
      if (this._appliesToNextNode && (this.metadata.flags & 1
      /* descendants */
      ) !== 1
      /* descendants */
      ) {
        var declarationNodeIdx = this._declarationNodeIndex;
        var parent = tNode.parent; // Determine if a given TNode is a "direct" child of a node on which a content query was
        // declared (only direct children of query's host node can match with the descendants: false
        // option). There are 3 main use-case / conditions to consider here:
        // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
        // host node;
        // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
        // here <i #target> parent node is null;
        // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
        // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
        // up past the query's host node!).

        while (parent !== null && parent.type & 8
        /* ElementContainer */
        && parent.index !== declarationNodeIdx) {
          parent = parent.parent;
        }

        return declarationNodeIdx === (parent !== null ? parent.index : -1);
      }

      return this._appliesToNextNode;
    }
  }, {
    key: "matchTNode",
    value: function matchTNode(tView, tNode) {
      var predicate = this.metadata.predicate;

      if (Array.isArray(predicate)) {
        for (var i = 0; i < predicate.length; i++) {
          var name = predicate[i];
          this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.

          this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
        }
      } else {
        if (predicate === TemplateRef) {
          if (tNode.type & 4
          /* Container */
          ) {
            this.matchTNodeWithReadOption(tView, tNode, -1);
          }
        } else {
          this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
        }
      }
    }
  }, {
    key: "matchTNodeWithReadOption",
    value: function matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
      if (nodeMatchIdx !== null) {
        var read = this.metadata.read;

        if (read !== null) {
          if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4
          /* Container */
          ) {
            this.addMatch(tNode.index, -2);
          } else {
            var directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);

            if (directiveOrProviderIdx !== null) {
              this.addMatch(tNode.index, directiveOrProviderIdx);
            }
          }
        } else {
          this.addMatch(tNode.index, nodeMatchIdx);
        }
      }
    }
  }, {
    key: "addMatch",
    value: function addMatch(tNodeIdx, matchIdx) {
      if (this.matches === null) {
        this.matches = [tNodeIdx, matchIdx];
      } else {
        this.matches.push(tNodeIdx, matchIdx);
      }
    }
  }]);

  return TQuery_;
}();
/**
 * Iterates over local names for a given node and returns directive index
 * (or -1 if a local name points to an element).
 *
 * @param tNode static data of a node to check
 * @param selector selector to match
 * @returns directive index, -1 or null if a selector didn't match any of the local names
 */


function getIdxOfMatchingSelector(tNode, selector) {
  var localNames = tNode.localNames;

  if (localNames !== null) {
    for (var i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }

  return null;
}

function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3
  /* AnyRNode */
  | 8
  /* ElementContainer */
  )) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4
  /* Container */
  ) {
    return createTemplateRef(tNode, currentView);
  }

  return null;
}

function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    // if read token and / or strategy is not specified, detect it using appropriate tNode type
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    // read a special token from a node injector
    return createSpecialToken(lView, tNode, read);
  } else {
    // read a token
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}

function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError("Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ".concat(stringify(read), "."));
  }
}
/**
 * A helper function that creates query results for a given view. This function is meant to do the
 * processing once and only once for a given view instance (a set of results for a given view
 * doesn't change).
 */


function materializeViewResults(tView, lView, tQuery, queryIndex) {
  var lQuery = lView[QUERIES].queries[queryIndex];

  if (lQuery.matches === null) {
    var tViewData = tView.data;
    var tQueryMatches = tQuery.matches;
    var result = [];

    for (var i = 0; i < tQueryMatches.length; i += 2) {
      var matchedNodeIdx = tQueryMatches[i];

      if (matchedNodeIdx < 0) {
        // we at the <ng-template> marker which might have results in views created based on this
        // <ng-template> - those results will be in separate views though, so here we just leave
        // null as a placeholder
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        var tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }

    lQuery.matches = result;
  }

  return lQuery.matches;
}
/**
 * A helper function that collects (already materialized) query results from a tree of views,
 * starting with a provided LView.
 */


function collectQueryResults(tView, lView, queryIndex, result) {
  var tQuery = tView.queries.getByIndex(queryIndex);
  var tQueryMatches = tQuery.matches;

  if (tQueryMatches !== null) {
    var lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);

    for (var i = 0; i < tQueryMatches.length; i += 2) {
      var tNodeIdx = tQueryMatches[i];

      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        var childQueryIndex = tQueryMatches[i + 1];
        var declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container

        for (var _i8 = CONTAINER_HEADER_OFFSET; _i8 < declarationLContainer.length; _i8++) {
          var embeddedLView = declarationLContainer[_i8];

          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        } // collect matches for views created from this declaration container and inserted into
        // different containers


        if (declarationLContainer[MOVED_VIEWS] !== null) {
          var embeddedLViews = declarationLContainer[MOVED_VIEWS];

          for (var _i9 = 0; _i9 < embeddedLViews.length; _i9++) {
            var _embeddedLView = embeddedLViews[_i9];
            collectQueryResults(_embeddedLView[TVIEW], _embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }

  return result;
}
/**
 * Refreshes a query by combining matches from all active views and removing matches from deleted
 * views.
 *
 * @returns `true` if a query got dirty during change detection or if this is a static query
 * resolving in creation mode, `false` otherwise.
 *
 * @codeGenApi
 */


function ɵɵqueryRefresh(queryList) {
  var lView = getLView();
  var tView = getTView();
  var queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  var tQuery = getTQuery(tView, queryIndex);

  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2
  /* isStatic */
  ) === 2
  /* isStatic */
  )) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      var result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }

    return true;
  }

  return false;
}
/**
 * Creates new QueryList, stores the reference in LView and returns QueryList.
 *
 * @param predicate The type for which the query will search
 * @param flags Flags associated with the query
 * @param read What to save in the query
 *
 * @codeGenApi
 */


function ɵɵviewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, 'Expecting flags');
  var tView = getTView();

  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);

    if ((flags & 2
    /* isStatic */
    ) === 2
    /* isStatic */
    ) {
      tView.staticViewQueries = true;
    }
  }

  createLQuery(tView, getLView(), flags);
}
/**
 * Registers a QueryList, associated with a content query, for later refresh (part of a view
 * refresh).
 *
 * @param directiveIndex Current directive index
 * @param predicate The type for which the query will search
 * @param flags Flags associated with the query
 * @param read What to save in the query
 * @returns QueryList<T>
 *
 * @codeGenApi
 */


function ɵɵcontentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, 'Expecting flags');
  var tView = getTView();

  if (tView.firstCreatePass) {
    var tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);

    if ((flags & 2
    /* isStatic */
    ) === 2
    /* isStatic */
    ) {
      tView.staticContentQueries = true;
    }
  }

  createLQuery(tView, getLView(), flags);
}
/**
 * Loads a QueryList corresponding to the current view or content query.
 *
 * @codeGenApi
 */


function ɵɵloadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}

function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}

function createLQuery(tView, lView, flags) {
  var queryList = new QueryList((flags & 4
  /* emitDistinctChangesOnly */
  ) === 4
  /* emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();
  lView[QUERIES].queries.push(new LQuery_(queryList));
}

function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null) tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}

function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  var lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;

  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}

function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
  return tView.queries.getByIndex(index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
 * `<ng-template>` element.
 *
 * @codeGenApi
 */


function ɵɵtemplateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$c = function ɵ0$c() {
  return {
    'ɵɵattribute': ɵɵattribute,
    'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,
    'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,
    'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,
    'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,
    'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,
    'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,
    'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,
    'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,
    'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,
    'ɵɵdefineComponent': ɵɵdefineComponent,
    'ɵɵdefineDirective': ɵɵdefineDirective,
    'ɵɵdefineInjectable': ɵɵdefineInjectable,
    'ɵɵdefineInjector': ɵɵdefineInjector,
    'ɵɵdefineNgModule': ɵɵdefineNgModule,
    'ɵɵdefinePipe': ɵɵdefinePipe,
    'ɵɵdirectiveInject': ɵɵdirectiveInject,
    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,
    'ɵɵinject': ɵɵinject,
    'ɵɵinjectAttribute': ɵɵinjectAttribute,
    'ɵɵinvalidFactory': ɵɵinvalidFactory,
    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,
    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,
    'ɵɵProvidersFeature': ɵɵProvidersFeature,
    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,
    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,
    'ɵɵnextContext': ɵɵnextContext,
    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,
    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,
    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,
    'ɵɵenableBindings': ɵɵenableBindings,
    'ɵɵdisableBindings': ɵɵdisableBindings,
    'ɵɵelementStart': ɵɵelementStart,
    'ɵɵelementEnd': ɵɵelementEnd,
    'ɵɵelement': ɵɵelement,
    'ɵɵelementContainerStart': ɵɵelementContainerStart,
    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,
    'ɵɵelementContainer': ɵɵelementContainer,
    'ɵɵpureFunction0': ɵɵpureFunction0,
    'ɵɵpureFunction1': ɵɵpureFunction1,
    'ɵɵpureFunction2': ɵɵpureFunction2,
    'ɵɵpureFunction3': ɵɵpureFunction3,
    'ɵɵpureFunction4': ɵɵpureFunction4,
    'ɵɵpureFunction5': ɵɵpureFunction5,
    'ɵɵpureFunction6': ɵɵpureFunction6,
    'ɵɵpureFunction7': ɵɵpureFunction7,
    'ɵɵpureFunction8': ɵɵpureFunction8,
    'ɵɵpureFunctionV': ɵɵpureFunctionV,
    'ɵɵgetCurrentView': ɵɵgetCurrentView,
    'ɵɵrestoreView': ɵɵrestoreView,
    'ɵɵlistener': ɵɵlistener,
    'ɵɵprojection': ɵɵprojection,
    'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,
    'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,
    'ɵɵpipeBind1': ɵɵpipeBind1,
    'ɵɵpipeBind2': ɵɵpipeBind2,
    'ɵɵpipeBind3': ɵɵpipeBind3,
    'ɵɵpipeBind4': ɵɵpipeBind4,
    'ɵɵpipeBindV': ɵɵpipeBindV,
    'ɵɵprojectionDef': ɵɵprojectionDef,
    'ɵɵhostProperty': ɵɵhostProperty,
    'ɵɵproperty': ɵɵproperty,
    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,
    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,
    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,
    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,
    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,
    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,
    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,
    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,
    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,
    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,
    'ɵɵpipe': ɵɵpipe,
    'ɵɵqueryRefresh': ɵɵqueryRefresh,
    'ɵɵviewQuery': ɵɵviewQuery,
    'ɵɵloadQuery': ɵɵloadQuery,
    'ɵɵcontentQuery': ɵɵcontentQuery,
    'ɵɵreference': ɵɵreference,
    'ɵɵclassMap': ɵɵclassMap,
    'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,
    'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,
    'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,
    'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,
    'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,
    'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,
    'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,
    'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,
    'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,
    'ɵɵstyleMap': ɵɵstyleMap,
    'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,
    'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,
    'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,
    'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,
    'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,
    'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,
    'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,
    'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,
    'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,
    'ɵɵstyleProp': ɵɵstyleProp,
    'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,
    'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,
    'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,
    'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,
    'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,
    'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,
    'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,
    'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,
    'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,
    'ɵɵclassProp': ɵɵclassProp,
    'ɵɵadvance': ɵɵadvance,
    'ɵɵtemplate': ɵɵtemplate,
    'ɵɵtext': ɵɵtext,
    'ɵɵtextInterpolate': ɵɵtextInterpolate,
    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,
    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,
    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,
    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,
    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,
    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,
    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,
    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,
    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,
    'ɵɵi18n': ɵɵi18n,
    'ɵɵi18nAttributes': ɵɵi18nAttributes,
    'ɵɵi18nExp': ɵɵi18nExp,
    'ɵɵi18nStart': ɵɵi18nStart,
    'ɵɵi18nEnd': ɵɵi18nEnd,
    'ɵɵi18nApply': ɵɵi18nApply,
    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,
    'ɵɵresolveWindow': ɵɵresolveWindow,
    'ɵɵresolveDocument': ɵɵresolveDocument,
    'ɵɵresolveBody': ɵɵresolveBody,
    'ɵɵsetComponentScope': ɵɵsetComponentScope,
    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,
    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,
    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,
    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,
    'ɵɵsanitizeScript': ɵɵsanitizeScript,
    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,
    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,
    'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,
    'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,
    'forwardRef': forwardRef,
    'resolveForwardRef': resolveForwardRef
  };
};
/**
 * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of @angular/core.
 */


var angularCoreEnv = ɵ0$c();
var jitOptions = null;

function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
      return;
    }

    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
      return;
    }
  }

  jitOptions = options;
}

function getJitOptions() {
  return jitOptions;
}

function resetJitOptions() {
  jitOptions = null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var moduleQueue = [];
/**
 * Enqueues moduleDef to be checked later to see if scope can be set on its
 * component declarations.
 */

function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({
    moduleType: moduleType,
    ngModule: ngModule
  });
}

var flushingModuleQueue = false;
/**
 * Loops over queued module definitions, if a given module definition has all of its
 * declarations resolved, it dequeues that module definition and sets the scope on
 * its declarations.
 */

function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;

    try {
      for (var i = moduleQueue.length - 1; i >= 0; i--) {
        var _moduleQueue$i = moduleQueue[i],
            moduleType = _moduleQueue$i.moduleType,
            ngModule = _moduleQueue$i.ngModule;

        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          // dequeue
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
/**
 * Returns truthy if a declaration has resolved. If the declaration happens to be
 * an array of declarations, it will recurse to check each declaration in that array
 * (which may also be arrays).
 */


function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }

  return !!resolveForwardRef(declaration);
}
/**
 * Compiles a module in JIT mode.
 *
 * This function automatically gets called when a class has a `@NgModule` decorator.
 */


function compileNgModule(moduleType) {
  var ngModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  compileNgModuleDefs(moduleType, ngModule); // Because we don't know if all declarations have resolved yet at the moment the
  // NgModule decorator is executing, we're enqueueing the setting of module scope
  // on its declarations to be run at a later time when all declarations for the module,
  // including forward refs, have resolved.

  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
/**
 * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.
 *
 * It's possible to compile a module via this API which will allow duplicate declarations in its
 * root.
 */


function compileNgModuleDefs(moduleType, ngModule) {
  var allowDuplicateDeclarationsInRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  ngDevMode && assertDefined(moduleType, 'Required value moduleType');
  ngDevMode && assertDefined(ngModule, 'Required value ngModule');
  var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  var ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: function get() {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          // We need to assert this immediately, because allowing it to continue will cause it to
          // go into an infinite loop before we've reached the point where we throw all the errors.
          throw new Error("'".concat(stringifyForError(moduleType), "' module can't import itself"));
        }

        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275mod.js"), {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
        // should verify that there are no unknown elements in a template. In AOT mode, that check
        // happens at compile time and `schemas` information is not present on Component and Module
        // defs after compilation (so the check doesn't happen the second time at runtime).

        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }

      return ngModuleDef;
    }
  });
  var ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: function get() {
      if (ngFactoryDef === null) {
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275fac.js"), {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  var ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: function get() {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        var meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]
        };
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275inj.js"), meta);
      }

      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType)) return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  var ngModuleDef;

  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);

    if (!ngModuleDef) {
      throw new Error("Unexpected value '".concat(moduleType.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
    }
  } else {
    ngModuleDef = getNgModuleDef(moduleType, true);
  }

  var errors = [];
  var declarations = maybeUnwrapFn(ngModuleDef.declarations);
  var imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
    verifySemanticsOfNgModuleImport(mod, moduleType);
    verifySemanticsOfNgModuleDef(mod, false, moduleType);
  });
  var exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  var combinedDeclarations = [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(declarations.map(resolveForwardRef)), (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)));
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach(function (decl) {
    return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot);
  });
  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
  var ngModule = getAnnotation(moduleType, 'NgModule');

  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
    ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
  } // Throw Error if any errors were detected.


  if (errors.length) {
    throw new Error(errors.join('\n'));
  } ////////////////////////////////////////////////////////////////////////////////////////////////


  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);

    if (!def) {
      errors.push("Unexpected value '".concat(stringifyForError(type), "' declared by the module '").concat(stringifyForError(moduleType), "'. Please add a @Pipe/@Directive/@Component annotation."));
    }
  }

  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    var def = getDirectiveDef(type);

    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push("Directive ".concat(stringifyForError(type), " has no selector, please add it!"));
    }
  }

  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef(type) && 'pipe';

    if (kind) {
      // only checked if we are declared as Component, Directive, or Pipe
      // Modules don't need to be declared or imported.
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        // We are exporting something which we don't explicitly declare or import.
        errors.push("Can't export ".concat(kind, " ").concat(stringifyForError(type), " from ").concat(stringifyForError(moduleType), " as it was neither declared nor imported!"));
      }
    }
  }

  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    var existingModule = ownerNgModule.get(type);

    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        var _modules = [existingModule, moduleType].map(stringifyForError).sort();

        errors.push("Type ".concat(stringifyForError(type), " is part of the declarations of 2 modules: ").concat(_modules[0], " and ").concat(_modules[1], "! ") + "Please consider moving ".concat(stringifyForError(type), " to a higher module that imports ").concat(_modules[0], " and ").concat(_modules[1], ". ") + "You can also create a new NgModule that exports and includes ".concat(stringifyForError(type), " then import that NgModule in ").concat(_modules[0], " and ").concat(_modules[1], "."));
      }
    } else {
      // Mark type as having owner.
      ownerNgModule.set(type, moduleType);
    }
  }

  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    var existingModule = ownerNgModule.get(type);

    if (!existingModule) {
      errors.push("Component ".concat(stringifyForError(type), " is not part of any NgModule or the module has not been imported into your module."));
    }
  }

  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);

    if (!getComponentDef(type)) {
      errors.push("".concat(stringifyForError(type), " cannot be used as an entry component."));
    }
  }

  function verifyComponentEntryComponentsIsPartOfNgModule(type) {
    type = resolveForwardRef(type);

    if (getComponentDef(type)) {
      // We know we are component
      var component = getAnnotation(type, 'Component');

      if (component && component.entryComponents) {
        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
      }
    }
  }

  function verifySemanticsOfNgModuleImport(type, importingModule) {
    type = resolveForwardRef(type);

    if (getComponentDef(type) || getDirectiveDef(type)) {
      throw new Error("Unexpected directive '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
    }

    if (getPipeDef(type)) {
      throw new Error("Unexpected pipe '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
    }
  }
}

function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}

function getAnnotation(type, name) {
  var annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;

  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }

  function readAnnotation(decorator) {
    if (!annotation) {
      var proto = Object.getPrototypeOf(decorator);

      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        var _proto = Object.getPrototypeOf(decorator.type);

        if (_proto.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
/**
 * Keep track of compiled components. This is needed because in tests we often want to compile the
 * same component with more than one NgModule. This would cause an error unless we reset which
 * NgModule the component belongs to. We keep the list of compiled components here so that the
 * TestBed can reset it later.
 */


var ownerNgModule = new WeakMap();
var verifiedNgModule = new WeakMap();

function resetCompiledComponents() {
  ownerNgModule = new WeakMap();
  verifiedNgModule = new WeakMap();
  moduleQueue.length = 0;
}
/**
 * Computes the combined declarations of explicit declarations, as well as declarations inherited by
 * traversing the exports of imported modules.
 * @param type
 */


function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  var ngModuleDef = getNgModuleDef(type, true);
  return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {
    var ngModuleDef = getNgModuleDef(type);

    if (ngModuleDef) {
      verifySemanticsOfNgModuleDef(type, false);
      return computeCombinedExports(type);
    } else {
      return type;
    }
  })));
}
/**
 * Some declared components may be compiled asynchronously, and thus may not have their
 * ɵcmp set yet. If this is the case, then a reference to the module is written into
 * the `ngSelectorScope` property of the declared type.
 */


function setScopeOnDeclaredComponents(moduleType, ngModule) {
  var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  var transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach(function (declaration) {
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      // A `ɵcmp` field exists - go ahead and patch the component directly.
      var component = declaration;
      var componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      // Set `ngSelectorScope` for future reference when the component compilation finishes.
      declaration.ngSelectorScope = moduleType;
    }
  });
}
/**
 * Patch the definition of a component with directives and pipes from the compilation scope of
 * a given module.
 */


function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = function () {
    return Array.from(transitiveScopes.compilation.directives).map(function (dir) {
      return dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir);
    }).filter(function (def) {
      return !!def;
    });
  };

  componentDef.pipeDefs = function () {
    return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) {
      return getPipeDef(pipe);
    });
  };

  componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
  // may face a problem where previously compiled defs available to a given Component/Directive
  // are cached in TView and may become stale (in case any of these defs gets recompiled). In
  // order to avoid this problem, we force fresh TView to be created.

  componentDef.tView = null;
}
/**
 * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
 *
 * This operation is memoized and the result is cached on the module's definition. This function can
 * be called on modules with components that have not fully compiled yet, but the result should not
 * be used until they have.
 *
 * @param moduleType module that transitive scope should be calculated for.
 */


function transitiveScopesFor(moduleType) {
  if (!isNgModule(moduleType)) {
    throw new Error("".concat(moduleType.name, " does not have a module def (\u0275mod property)"));
  }

  var def = getNgModuleDef(moduleType);

  if (def.transitiveCompileScopes !== null) {
    return def.transitiveCompileScopes;
  }

  var scopes = {
    schemas: def.schemas || null,
    compilation: {
      directives: new Set(),
      pipes: new Set()
    },
    exported: {
      directives: new Set(),
      pipes: new Set()
    }
  };
  maybeUnwrapFn(def.imports).forEach(function (imported) {
    var importedType = imported;

    if (!isNgModule(importedType)) {
      throw new Error("Importing ".concat(importedType.name, " which does not have a \u0275mod property"));
    } // When this module imports another, the imported module's exported directives and pipes are
    // added to the compilation scope of this module.


    var importedScope = transitiveScopesFor(importedType);
    importedScope.exported.directives.forEach(function (entry) {
      return scopes.compilation.directives.add(entry);
    });
    importedScope.exported.pipes.forEach(function (entry) {
      return scopes.compilation.pipes.add(entry);
    });
  });
  maybeUnwrapFn(def.declarations).forEach(function (declared) {
    var declaredWithDefs = declared;

    if (getPipeDef(declaredWithDefs)) {
      scopes.compilation.pipes.add(declared);
    } else {
      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
      // had its template compiled yet. In either case, it gets added to the compilation's
      // directives.
      scopes.compilation.directives.add(declared);
    }
  });
  maybeUnwrapFn(def.exports).forEach(function (exported) {
    var exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a
    // ɵcmp as it might be compiled asynchronously).

    if (isNgModule(exportedType)) {
      // When this module exports another, the exported module's exported directives and pipes are
      // added to both the compilation and exported scopes of this module.
      var exportedScope = transitiveScopesFor(exportedType);
      exportedScope.exported.directives.forEach(function (entry) {
        scopes.compilation.directives.add(entry);
        scopes.exported.directives.add(entry);
      });
      exportedScope.exported.pipes.forEach(function (entry) {
        scopes.compilation.pipes.add(entry);
        scopes.exported.pipes.add(entry);
      });
    } else if (getPipeDef(exportedType)) {
      scopes.exported.pipes.add(exportedType);
    } else {
      scopes.exported.directives.add(exportedType);
    }
  });
  def.transitiveCompileScopes = scopes;
  return scopes;
}

function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }

  return value;
}

function isModuleWithProviders(value) {
  return value.ngModule !== undefined;
}

function isNgModule(value) {
  return !!getNgModuleDef(value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
 * matters in the following scenario:
 *
 * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
 * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
 * potentially triggering compilation of 'B'. If this nested compilation were to trigger
 * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
 * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
 * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
 * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
 * all compilations have finished.
 */


var compilationDepth = 0;
/**
 * Compile an Angular component according to its decorator metadata, and patch the resulting
 * component def (ɵcmp) onto the component type.
 *
 * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
 * other resources, for example). In the event that compilation is not immediate, `compileComponent`
 * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
 * until the global queue has been resolved with a call to `resolveComponentResources`.
 */

function compileComponent(type, metadata) {
  // Initialize ngDevMode. This must be the first statement in compileComponent.
  // See the `initNgDevMode` docstring for more information.
  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
  var ngComponentDef = null; // Metadata may have resources which need to be resolved.

  maybeQueueResolutionOfComponentResources(type, metadata); // Note that we're using the same function as `Directive`, because that's only subset of metadata
  // that we need to create the ngFactoryDef. We're avoiding using the component metadata
  // because we'd have to resolve the asynchronous templates.

  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: function get() {
      if (ngComponentDef === null) {
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'component',
          type: type
        });

        if (componentNeedsResolution(metadata)) {
          var error = ["Component '".concat(type.name, "' is not resolved:")];

          if (metadata.templateUrl) {
            error.push(" - templateUrl: ".concat(metadata.templateUrl));
          }

          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(" - styleUrls: ".concat(JSON.stringify(metadata.styleUrls)));
          }

          error.push("Did you run and wait for 'resolveComponentResources()'?");
          throw new Error(error.join('\n'));
        } // This const was called `jitOptions` previously but had to be renamed to `options` because
        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.


        var options = getJitOptions();
        var preserveWhitespaces = metadata.preserveWhitespaces;

        if (preserveWhitespaces === undefined) {
          if (options !== null && options.preserveWhitespaces !== undefined) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }

        var encapsulation = metadata.encapsulation;

        if (encapsulation === undefined) {
          if (options !== null && options.defaultEncapsulation !== undefined) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation.Emulated;
          }
        }

        var templateUrl = metadata.templateUrl || "ng:///".concat(type.name, "/template.html");
        var meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), {
          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
          template: metadata.template || '',
          preserveWhitespaces: preserveWhitespaces,
          styles: metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          directives: [],
          changeDetection: metadata.changeDetection,
          pipes: new Map(),
          encapsulation: encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null
        });
        compilationDepth++;

        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }

          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
        } finally {
          // Ensure that the compilation depth is decremented even when the compilation failed.
          compilationDepth--;
        }

        if (compilationDepth === 0) {
          // When NgModule decorator executed, we enqueued the module definition such that
          // it would only dequeue and add itself as module scope to all of its declarations,
          // but only if  if all of its declarations had resolved. This call runs the check
          // to see if any modules that are in the queue can be dequeued and add scope to
          // their declarations.
          flushModuleScopingQueueAsMuchAsPossible();
        } // If component compilation is async, then the @NgModule annotation which declares the
        // component may execute and set an ngSelectorScope property on the component type. This
        // allows the component to patch itself with directiveDefs from the module after it
        // finishes compiling.


        if (hasSelectorScope(type)) {
          var scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
      }

      return ngComponentDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function hasSelectorScope(component) {
  return component.ngSelectorScope !== undefined;
}
/**
 * Compile an Angular directive according to its decorator metadata, and patch the resulting
 * directive def onto the component type.
 *
 * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
 * will resolve when compilation completes and the directive becomes usable.
 */


function compileDirective(type, directive) {
  var ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: function get() {
      if (ngDirectiveDef === null) {
        // `directive` can be null in the case of abstract directives as a base class
        // that use `@Directive()` with no selector. In that case, pass empty object to the
        // `directiveMetadata` function instead of null.
        var meta = getDirectiveMetadata$1(type, directive || {});
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'directive',
          type: type
        });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }

      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function getDirectiveMetadata$1(type, metadata) {
  var name = type && type.name;
  var sourceMapUrl = "ng:///".concat(name, "/\u0275dir.js");
  var compiler = getCompilerFacade({
    usage: 0
    /* Decorator */
    ,
    kind: 'directive',
    type: type
  });
  var facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);

  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }

  return {
    metadata: facade,
    sourceMapUrl: sourceMapUrl
  };
}

function addDirectiveFactoryDef(type, metadata) {
  var ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: function get() {
      if (ngFactoryDef === null) {
        var meta = getDirectiveMetadata$1(type, metadata);
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'directive',
          type: type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
/**
 * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
 * `Component`).
 */


function directiveMetadata(type, metadata) {
  // Reflect inputs and outputs.
  var reflect = getReflect();
  var propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type: type,
    selector: metadata.selector !== undefined ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata: propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: {
      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')
    },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
  };
}
/**
 * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
 */


function addDirectiveDefToUndecoratedParents(type) {
  var objPrototype = Object.prototype;
  var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

  while (parent && parent !== objPrototype) {
    // Since inheritance works if the class was annotated already, we only need to add
    // the def if there are no annotations and the def hasn't been created already.
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }

    parent = Object.getPrototypeOf(parent);
  }
}

function convertToR3QueryPredicate(selector) {
  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
}

function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName: propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly
  };
}

function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  var queriesMeta = [];

  var _loop2 = function _loop2(field) {
    if (propMetadata.hasOwnProperty(field)) {
      var annotations = propMetadata[field];
      annotations.forEach(function (ann) {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error("Can't construct a query for the property \"".concat(field, "\" of ") + "\"".concat(stringifyForError(type), "\" since the query selector wasn't defined."));
          }

          if (annotations.some(isInputAnnotation)) {
            throw new Error("Cannot combine @Input decorators with query decorators");
          }

          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  };

  for (var field in propMetadata) {
    _loop2(field);
  }

  return queriesMeta;
}

function extractExportAs(exportAs) {
  return exportAs === undefined ? null : splitByComma(exportAs);
}

function isContentQuery(value) {
  var name = value.ngMetadataName;
  return name === 'ContentChild' || name === 'ContentChildren';
}

function isViewQuery(value) {
  var name = value.ngMetadataName;
  return name === 'ViewChild' || name === 'ViewChildren';
}

function isInputAnnotation(value) {
  return value.ngMetadataName === 'Input';
}

function splitByComma(value) {
  return value.split(',').map(function (piece) {
    return piece.trim();
  });
}

var LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];

function shouldAddAbstractDirective(type) {
  var reflect = getReflect();

  if (LIFECYCLE_HOOKS.some(function (hookName) {
    return reflect.hasLifecycleHook(type, hookName);
  })) {
    return true;
  }

  var propMetadata = reflect.propMetadata(type);

  for (var field in propMetadata) {
    var annotations = propMetadata[field];

    for (var i = 0; i < annotations.length; i++) {
      var current = annotations[i];
      var metadataName = current.ngMetadataName;

      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {
        return true;
      }
    }
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function compilePipe(type, meta) {
  var ngPipeDef = null;
  var ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: function get() {
      if (ngFactoryDef === null) {
        var metadata = getPipeMetadata(type, meta);
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'pipe',
          type: metadata.type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275fac.js"), {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: function get() {
      if (ngPipeDef === null) {
        var metadata = getPipeMetadata(type, meta);
        var compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'pipe',
          type: metadata.type
        });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275pipe.js"), metadata);
      }

      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function getPipeMetadata(type, meta) {
  return {
    type: type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== undefined ? meta.pure : true
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0$d = function ɵ0$d() {
  var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return dir;
},
    ɵ1$2 = function ɵ1$2(type, meta) {
  return SWITCH_COMPILE_DIRECTIVE(type, meta);
};
/**
 * Type of the Directive metadata.
 *
 * @publicApi
 */


var Directive = makeDecorator('Directive', ɵ0$d, undefined, undefined, ɵ1$2);

var ɵ2$1 = function ɵ2$1() {
  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({
    changeDetection: ChangeDetectionStrategy.Default
  }, c);
},
    ɵ3$1 = function ɵ3$1(type, meta) {
  return SWITCH_COMPILE_COMPONENT(type, meta);
};
/**
 * Component decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


var Component = makeDecorator('Component', ɵ2$1, Directive, undefined, ɵ3$1);

var ɵ4 = function ɵ4(p) {
  return Object.assign({
    pure: true
  }, p);
},
    ɵ5 = function ɵ5(type, meta) {
  return SWITCH_COMPILE_PIPE(type, meta);
};
/**
 * @Annotation
 * @publicApi
 */


var Pipe = makeDecorator('Pipe', ɵ4, undefined, undefined, ɵ5);

var ɵ6 = function ɵ6(bindingPropertyName) {
  return {
    bindingPropertyName: bindingPropertyName
  };
};
/**
 * @Annotation
 * @publicApi
 */


var Input = makePropDecorator('Input', ɵ6);

var ɵ7 = function ɵ7(bindingPropertyName) {
  return {
    bindingPropertyName: bindingPropertyName
  };
};
/**
 * @Annotation
 * @publicApi
 */


var Output = makePropDecorator('Output', ɵ7);

var ɵ8 = function ɵ8(hostPropertyName) {
  return {
    hostPropertyName: hostPropertyName
  };
};
/**
 * @Annotation
 * @publicApi
 */


var HostBinding = makePropDecorator('HostBinding', ɵ8);

var ɵ9 = function ɵ9(eventName, args) {
  return {
    eventName: eventName,
    args: args
  };
};
/**
 * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
 * Angular invokes the supplied handler method when the host element emits the specified event,
 * and updates the bound element with the result.
 *
 * If the handler method returns false, applies `preventDefault` on the bound element.
 *
 * @usageNotes
 *
 * The following example declares a directive
 * that attaches a click listener to a button and counts clicks.
 *
 * ```ts
 * @Directive({selector: 'button[counting]'})
 * class CountClicks {
 *   numberOfClicks = 0;
 *
 *   @HostListener('click', ['$event.target'])
 *   onClick(btn) {
 *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
 *  }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: '<button counting>Increment</button>',
 * })
 * class App {}
 *
 * ```
 *
 * The following example registers another DOM event handler that listens for key-press events.
 * ``` ts
 * import { HostListener, Component } from "@angular/core";
 *
 * @Component({
 *   selector: 'app',
 *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
 * increment the counter.
 *   <button (click)="resetCounter()">Reset Counter</button>`
 * })
 * class AppComponent {
 *   counter = 0;
 *   @HostListener('window:keydown', ['$event'])
 *   handleKeyDown(event: KeyboardEvent) {
 *     this.counter++;
 *   }
 *   resetCounter() {
 *     this.counter = 0;
 *   }
 * }
 * ```
 *
 * @Annotation
 * @publicApi
 */


var HostListener = makePropDecorator('HostListener', ɵ9);
var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;
var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;
var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;
var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;
var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;
var SWITCH_COMPILE_PIPE__PRE_R3__ = noop;
var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;
var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;
var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var ɵ0$e = function ɵ0$e(ngModule) {
  return ngModule;
},
    ɵ1$3 =
/**
 * Decorator that marks the following class as an NgModule, and supplies
 * configuration metadata for it.
 *
 * * The `declarations` and `entryComponents` options configure the compiler
 * with information about what belongs to the NgModule.
 * * The `providers` options configures the NgModule's injector to provide
 * dependencies the NgModule members.
 * * The `imports` and `exports` options bring in members from other modules, and make
 * this module's members available to others.
 */
function ɵ1$3(type, meta) {
  return SWITCH_COMPILE_NGMODULE(type, meta);
};
/**
 * @Annotation
 * @publicApi
 */


var NgModule = makeDecorator('NgModule', ɵ0$e, undefined, undefined, ɵ1$3);

function preR3NgModuleCompile(moduleType, metadata) {
  var imports = metadata && metadata.imports || [];

  if (metadata && metadata.exports) {
    imports = [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(imports), [metadata.exports]);
  }

  var moduleInjectorType = moduleType;
  moduleInjectorType.ɵfac = convertInjectableProviderToFactory(moduleType, {
    useClass: moduleType
  });
  moduleInjectorType.ɵinj = ɵɵdefineInjector({
    providers: metadata && metadata.providers,
    imports: imports
  });
}

var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;
var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
 * one or more initialization functions.
 *
 * The provided functions are injected at application startup and executed during
 * app initialization. If any of these functions returns a Promise or an Observable, initialization
 * does not complete until the Promise is resolved or the Observable is completed.
 *
 * You can, for example, create a factory function that loads language data
 * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
 * The function is executed during the application bootstrap process,
 * and the needed data is available on startup.
 *
 * @see `ApplicationInitStatus`
 *
 * @usageNotes
 *
 * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token
 * and a function returning a promise.
 *
 * ```
 *  function initializeApp(): Promise<any> {
 *    return new Promise((resolve, reject) => {
 *      // Do some asynchronous stuff
 *      resolve();
 *    });
 *  }
 *
 *  @NgModule({
 *   imports: [BrowserModule],
 *   declarations: [AppComponent],
 *   bootstrap: [AppComponent],
 *   providers: [{
 *     provide: APP_INITIALIZER,
 *     useFactory: () => initializeApp,
 *     multi: true
 *    }]
 *   })
 *  export class AppModule {}
 * ```
 *
 * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function
 * returning an observable, see an example below. Note: the `HttpClient` in this example is used for
 * demo purposes to illustrate how the factory function can work with other providers available
 * through DI.
 *
 * ```
 *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {
 *   return () => httpClient.get("https://someUrl.com/api/user")
 *     .pipe(
 *        tap(user => { ... })
 *     );
 *  }
 *
 *  @NgModule({
 *    imports: [BrowserModule, HttpClientModule],
 *    declarations: [AppComponent],
 *    bootstrap: [AppComponent],
 *    providers: [{
 *      provide: APP_INITIALIZER,
 *      useFactory: initializeAppFactory,
 *      deps: [HttpClient],
 *      multi: true
 *    }]
 *  })
 *  export class AppModule {}
 * ```
 *
 * @publicApi
 */

var APP_INITIALIZER = new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {@link APP_INITIALIZER} functions.
 *
 * @publicApi
 */

var ApplicationInitStatus = /*#__PURE__*/function () {
  function ApplicationInitStatus(appInits) {
    var _this21 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ApplicationInitStatus);

    this.appInits = appInits;
    this.resolve = noop;
    this.reject = noop;
    this.initialized = false;
    this.done = false;
    this.donePromise = new Promise(function (res, rej) {
      _this21.resolve = res;
      _this21.reject = rej;
    });
  }
  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ApplicationInitStatus, [{
    key: "runInitializers",
    value: function runInitializers() {
      var _this22 = this;

      if (this.initialized) {
        return;
      }

      var asyncInitPromises = [];

      var complete = function complete() {
        _this22.done = true;

        _this22.resolve();
      };

      if (this.appInits) {
        var _loop3 = function _loop3(i) {
          var initResult = _this22.appInits[i]();

          if (isPromise(initResult)) {
            asyncInitPromises.push(initResult);
          } else if (isObservable(initResult)) {
            var observableAsPromise = new Promise(function (resolve, reject) {
              initResult.subscribe({
                complete: resolve,
                error: reject
              });
            });
            asyncInitPromises.push(observableAsPromise);
          }
        };

        for (var i = 0; i < this.appInits.length; i++) {
          _loop3(i);
        }
      }

      Promise.all(asyncInitPromises).then(function () {
        complete();
      }).catch(function (e) {
        _this22.reject(e);
      });

      if (asyncInitPromises.length === 0) {
        complete();
      }

      this.initialized = true;
    }
  }]);

  return ApplicationInitStatus;
}();

ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {
  return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));
};

ApplicationInitStatus.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: ApplicationInitStatus,
  factory: ApplicationInitStatus.ɵfac
});

ApplicationInitStatus.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: Inject,
      args: [APP_INITIALIZER]
    }, {
      type: Optional
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
    type: Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: Inject,
        args: [APP_INITIALIZER]
      }, {
        type: Optional
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
 *
 * BY default, the value is randomly generated and assigned to the application by Angular.
 * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
 * the root {@link Injector} that uses this token.
 *
 * @publicApi
 */


var APP_ID = new InjectionToken('AppId');

function _appIdRandomProviderFactory() {
  return "".concat(_randomChar()).concat(_randomChar()).concat(_randomChar());
}
/**
 * Providers that generate a random `APP_ID_TOKEN`.
 * @publicApi
 */


var APP_ID_RANDOM_PROVIDER = {
  provide: APP_ID,
  useFactory: _appIdRandomProviderFactory,
  deps: []
};

function _randomChar() {
  return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that is executed when a platform is initialized.
 * @publicApi
 */


var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform ID.
 * @publicApi
 */

var PLATFORM_ID = new InjectionToken('Platform ID');
/**
 * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
 * be called for every component that is bootstrapped.
 *
 * Each callback must take a `ComponentRef` instance and return nothing.
 *
 * `(componentRef: ComponentRef) => void`
 *
 * @publicApi
 */

var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
/**
 * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
 * the application
 * @publicApi
 */

var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var Console = /*#__PURE__*/function () {
  function Console() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Console);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Console, [{
    key: "log",
    value: function log(message) {
      // tslint:disable-next-line:no-console
      console.log(message);
    } // Note: for reporting errors use `DOM.logError()` as it is platform specific

  }, {
    key: "warn",
    value: function warn(message) {
      // tslint:disable-next-line:no-console
      console.warn(message);
    }
  }]);

  return Console;
}();

Console.ɵfac = function Console_Factory(t) {
  return new (t || Console)();
};

Console.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: Console,
  factory: Console.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
    type: Injectable
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provide this token to set the locale of your application.
 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
 * DecimalPipe and PercentPipe) and by ICU expressions.
 *
 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { LOCALE_ID } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
 * });
 * ```
 *
 * @publicApi
 */


var LOCALE_ID$1 = new InjectionToken('LocaleId');
/**
 * Provide this token to set the default currency code your application uses for
 * CurrencyPipe when there is no currency code passed into it. This is only used by
 * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
 *
 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
 *
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v10 the default currency code will be taken from the current locale.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
 * });
 * ```
 *
 * @publicApi
 */

var DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode');
/**
 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
 * `xlf` or `xlf2`) when you want to translate your application in another language.
 *
 * See the [i18n guide](guide/i18n#merge) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * // content of your translation file
 * const translations = '....';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
 * });
 * ```
 *
 * @publicApi
 */

var TRANSLATIONS = new InjectionToken('Translations');
/**
 * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
 * `xlf` or `xlf2`.
 *
 * See the [i18n guide](guide/i18n#merge) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS_FORMAT } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
 * });
 * ```
 *
 * @publicApi
 */

var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
/**
 * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
 * that the compiler should use in case of missing translations:
 * - Error: throw if you have missing translations.
 * - Warning (default): show a warning in the console and/or shell.
 * - Ignore: do nothing.
 *
 * See the [i18n guide](guide/i18n#missing-translation) for more information.
 *
 * @usageNotes
 * ### Example
 * ```typescript
 * import { MissingTranslationStrategy } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   missingTranslation: MissingTranslationStrategy.Error
 * });
 * ```
 *
 * @publicApi
 */

var MissingTranslationStrategy;

(function (MissingTranslationStrategy) {
  MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
  MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
  MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SWITCH_IVY_ENABLED__POST_R3__ = true;
var SWITCH_IVY_ENABLED__PRE_R3__ = false;
var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Combination of NgModuleFactory and ComponentFactories.
 *
 * @publicApi
 */

var ModuleWithComponentFactories = function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ModuleWithComponentFactories);

  this.ngModuleFactory = ngModuleFactory;
  this.componentFactories = componentFactories;
};

function _throwError() {
  throw new Error("Runtime compiler is not loaded");
}

var Compiler_compileModuleSync__PRE_R3__ = _throwError;

var Compiler_compileModuleSync__POST_R3__ = function Compiler_compileModuleSync__POST_R3__(moduleType) {
  return new NgModuleFactory$1(moduleType);
};

var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;
var Compiler_compileModuleAsync__PRE_R3__ = _throwError;

var Compiler_compileModuleAsync__POST_R3__ = function Compiler_compileModuleAsync__POST_R3__(moduleType) {
  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));
};

var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;
var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;

var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType) {
  var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);
  var moduleDef = getNgModuleDef(moduleType);
  var componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce(function (factories, declaration) {
    var componentDef = getComponentDef(declaration);
    componentDef && factories.push(new ComponentFactory$1(componentDef));
    return factories;
  }, []);
  return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
};

var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;
var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;

var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function Compiler_compileModuleAndAllComponentsAsync__POST_R3__(moduleType) {
  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));
};

var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
/**
 * Low-level service for running the angular compiler during runtime
 * to create {@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 *
 * @publicApi
 */

var Compiler = /*#__PURE__*/function () {
  function Compiler() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Compiler);

    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     */
    this.compileModuleSync = Compiler_compileModuleSync;
    /**
     * Compiles the given NgModule and all of its components
     */

    this.compileModuleAsync = Compiler_compileModuleAsync;
    /**
     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
     */

    this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
    /**
     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
     */

    this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
  }
  /**
   * Clears all caches.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Compiler, [{
    key: "clearCache",
    value: function clearCache() {}
    /**
     * Clears the cache for the given component/ngModule.
     */

  }, {
    key: "clearCacheFor",
    value: function clearCacheFor(type) {}
    /**
     * Returns the id for a given NgModule, if one is defined and known to the compiler.
     */

  }, {
    key: "getModuleId",
    value: function getModuleId(moduleType) {
      return undefined;
    }
  }]);

  return Compiler;
}();

Compiler.ɵfac = function Compiler_Factory(t) {
  return new (t || Compiler)();
};

Compiler.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: Compiler,
  factory: Compiler.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
    type: Injectable
  }], function () {
    return [];
  }, null);
})();
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * @publicApi
 */


var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */

var CompilerFactory = function CompilerFactory() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, CompilerFactory);
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var promise = function () {
  return Promise.resolve(0);
}();

function scheduleMicroTask(fn) {
  if (typeof Zone === 'undefined') {
    // use promise to schedule microTask instead of use Zone
    promise.then(function () {
      fn && fn.apply(null, null);
    });
  } else {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getNativeRequestAnimationFrame() {
  var nativeRequestAnimationFrame = _global['requestAnimationFrame'];
  var nativeCancelAnimationFrame = _global['cancelAnimationFrame'];

  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
    // use unpatched version of requestAnimationFrame(native delegate) if possible
    // to avoid another Change detection
    var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];

    if (unpatchedRequestAnimationFrame) {
      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
    }

    var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];

    if (unpatchedCancelAnimationFrame) {
      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
    }
  }

  return {
    nativeRequestAnimationFrame: nativeRequestAnimationFrame,
    nativeCancelAnimationFrame: nativeCancelAnimationFrame
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '@angular/core';
 * import {NgIf} from '@angular/common';
 *
 * @Component({
 *   selector: 'ng-zone-demo',
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *         // reenter the Angular zone and display done
 *         this._ngZone.run(() => { console.log('Outside Done!'); });
 *       });
 *     });
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var NgZone = /*#__PURE__*/function () {
  function NgZone(_ref3) {
    var _ref3$enableLongStack = _ref3.enableLongStackTrace,
        enableLongStackTrace = _ref3$enableLongStack === void 0 ? false : _ref3$enableLongStack,
        _ref3$shouldCoalesceE = _ref3.shouldCoalesceEventChangeDetection,
        shouldCoalesceEventChangeDetection = _ref3$shouldCoalesceE === void 0 ? false : _ref3$shouldCoalesceE,
        _ref3$shouldCoalesceR = _ref3.shouldCoalesceRunChangeDetection,
        shouldCoalesceRunChangeDetection = _ref3$shouldCoalesceR === void 0 ? false : _ref3$shouldCoalesceR;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgZone);

    this.hasPendingMacrotasks = false;
    this.hasPendingMicrotasks = false;
    /**
     * Whether there are no outstanding microtasks or macrotasks.
     */

    this.isStable = true;
    /**
     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
     */

    this.onUnstable = new EventEmitter(false);
    /**
     * Notifies when there is no more microtasks enqueued in the current VM Turn.
     * This is a hint for Angular to do change detection, which may enqueue more microtasks.
     * For this reason this event can fire multiple times per VM Turn.
     */

    this.onMicrotaskEmpty = new EventEmitter(false);
    /**
     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
     * implies we are about to relinquish VM turn.
     * This event gets called just once.
     */

    this.onStable = new EventEmitter(false);
    /**
     * Notifies that an error has been delivered.
     */

    this.onError = new EventEmitter(false);

    if (typeof Zone == 'undefined') {
      throw new Error("In this configuration Angular requires Zone.js");
    }

    Zone.assertZonePatched();
    var self = this;
    self._nesting = 0;
    self._outer = self._inner = Zone.current;

    if (Zone['TaskTrackingZoneSpec']) {
      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());
    }

    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
    } // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be
    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.


    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
    self.lastRequestAnimationFrameId = -1;
    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
    forkInnerZoneWithAngularBehavior(self);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NgZone, [{
    key: "run",
    value:
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     */
    function run(fn, applyThis, applyArgs) {
      return this._inner.run(fn, applyThis, applyArgs);
    }
    /**
     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
     * returned by the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     */

  }, {
    key: "runTask",
    value: function runTask(fn, applyThis, applyArgs, name) {
      var zone = this._inner;
      var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);

      try {
        return zone.runTask(task, applyThis, applyArgs);
      } finally {
        zone.cancelTask(task);
      }
    }
    /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     */

  }, {
    key: "runGuarded",
    value: function runGuarded(fn, applyThis, applyArgs) {
      return this._inner.runGuarded(fn, applyThis, applyArgs);
    }
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
     */

  }, {
    key: "runOutsideAngular",
    value: function runOutsideAngular(fn) {
      return this._outer.run(fn);
    }
  }], [{
    key: "isInAngularZone",
    value: function isInAngularZone() {
      return Zone.current.get('isAngularZone') === true;
    }
  }, {
    key: "assertInAngularZone",
    value: function assertInAngularZone() {
      if (!NgZone.isInAngularZone()) {
        throw new Error('Expected to be in Angular Zone, but it is not!');
      }
    }
  }, {
    key: "assertNotInAngularZone",
    value: function assertNotInAngularZone() {
      if (NgZone.isInAngularZone()) {
        throw new Error('Expected to not be in Angular Zone, but it is!');
      }
    }
  }]);

  return NgZone;
}();

var EMPTY_PAYLOAD = {};

function checkStable(zone) {
  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent
  // re-entry. The case is:
  //
  // @Component({...})
  // export class AppComponent {
  // constructor(private ngZone: NgZone) {
  //   this.ngZone.onStable.subscribe(() => {
  //     this.ngZone.run(() => console.log('stable'););
  //   });
  // }
  //
  // The onStable subscriber run another function inside ngZone
  // which causes `checkStable()` re-entry.
  // But this fix causes some issues in g3, so this fix will be
  // launched in another PR.
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;

      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(function () {
            return zone.onStable.emit(null);
          });
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}

function delayChangeDetectionForEvents(zone) {
  /**
   * We also need to check _nesting here
   * Consider the following case with shouldCoalesceRunChangeDetection = true
   *
   * ngZone.run(() => {});
   * ngZone.run(() => {});
   *
   * We want the two `ngZone.run()` only trigger one change detection
   * when shouldCoalesceRunChangeDetection is true.
   * And because in this case, change detection run in async way(requestAnimationFrame),
   * so we also need to check the _nesting here to prevent multiple
   * change detections.
   */
  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
    return;
  }

  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, function () {
    // This is a work around for https://github.com/angular/angular/issues/36839.
    // The core issue is that when event coalescing is enabled it is possible for microtasks
    // to get flushed too early (As is the case with `Promise.then`) between the
    // coalescing eventTasks.
    //
    // To workaround this we schedule a "fake" eventTask before we process the
    // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
    //  will prevent the microtasks queue from getting drained in between the coalescing
    // eventTask execution.
    if (!zone.fakeTopEventTask) {
      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', function () {
        zone.lastRequestAnimationFrameId = -1;
        updateMicroTaskStatus(zone);
        zone.isCheckStableRunning = true;
        checkStable(zone);
        zone.isCheckStableRunning = false;
      }, undefined, function () {}, function () {});
    }

    zone.fakeTopEventTask.invoke();
  });
  updateMicroTaskStatus(zone);
}

function forkInnerZoneWithAngularBehavior(zone) {
  var delayChangeDetectionForEventsDelegate = function delayChangeDetectionForEventsDelegate() {
    delayChangeDetectionForEvents(zone);
  };

  zone._inner = zone._inner.fork({
    name: 'angular',
    properties: {
      'isAngularZone': true
    },
    onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }

        onLeave(zone);
      }
    },
    onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }

        onLeave(zone);
      }
    },
    onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
      delegate.hasTask(target, hasTaskState);

      if (current === target) {
        // We are only interested in hasTask events which originate from our zone
        // (A child hasTask event is not interesting to us)
        if (hasTaskState.change == 'microTask') {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == 'macroTask') {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: function onHandleError(delegate, current, target, error) {
      delegate.handleError(target, error);
      zone.runOutsideAngular(function () {
        return zone.onError.emit(error);
      });
      return false;
    }
  });
}

function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}

function onEnter(zone) {
  zone._nesting++;

  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}

function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
/**
 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
 * to framework to perform rendering.
 */


var NoopNgZone = /*#__PURE__*/function () {
  function NoopNgZone() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NoopNgZone);

    this.hasPendingMicrotasks = false;
    this.hasPendingMacrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter();
    this.onMicrotaskEmpty = new EventEmitter();
    this.onStable = new EventEmitter();
    this.onError = new EventEmitter();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NoopNgZone, [{
    key: "run",
    value: function run(fn, applyThis, applyArgs) {
      return fn.apply(applyThis, applyArgs);
    }
  }, {
    key: "runGuarded",
    value: function runGuarded(fn, applyThis, applyArgs) {
      return fn.apply(applyThis, applyArgs);
    }
  }, {
    key: "runOutsideAngular",
    value: function runOutsideAngular(fn) {
      return fn();
    }
  }, {
    key: "runTask",
    value: function runTask(fn, applyThis, applyArgs, name) {
      return fn.apply(applyThis, applyArgs);
    }
  }]);

  return NoopNgZone;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser. Each bootstrapped Angular application on the page will have
 * an instance of Testability.
 * @publicApi
 */


var Testability = /*#__PURE__*/function () {
  function Testability(_ngZone) {
    var _this23 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, Testability);

    this._ngZone = _ngZone;
    this._pendingCount = 0;
    this._isZoneStable = true;
    /**
     * Whether any work was done since the last 'whenStable' callback. This is
     * useful to detect if this could have potentially destabilized another
     * component while it is stabilizing.
     * @internal
     */

    this._didWork = false;
    this._callbacks = [];
    this.taskTrackingZone = null;

    this._watchAngularEvents();

    _ngZone.run(function () {
      _this23.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
    });
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(Testability, [{
    key: "_watchAngularEvents",
    value: function _watchAngularEvents() {
      var _this24 = this;

      this._ngZone.onUnstable.subscribe({
        next: function next() {
          _this24._didWork = true;
          _this24._isZoneStable = false;
        }
      });

      this._ngZone.runOutsideAngular(function () {
        _this24._ngZone.onStable.subscribe({
          next: function next() {
            NgZone.assertNotInAngularZone();
            scheduleMicroTask(function () {
              _this24._isZoneStable = true;

              _this24._runCallbacksIfReady();
            });
          }
        });
      });
    }
    /**
     * Increases the number of pending request
     * @deprecated pending requests are now tracked with zones.
     */

  }, {
    key: "increasePendingRequestCount",
    value: function increasePendingRequestCount() {
      this._pendingCount += 1;
      this._didWork = true;
      return this._pendingCount;
    }
    /**
     * Decreases the number of pending request
     * @deprecated pending requests are now tracked with zones
     */

  }, {
    key: "decreasePendingRequestCount",
    value: function decreasePendingRequestCount() {
      this._pendingCount -= 1;

      if (this._pendingCount < 0) {
        throw new Error('pending async requests below zero');
      }

      this._runCallbacksIfReady();

      return this._pendingCount;
    }
    /**
     * Whether an associated application is stable
     */

  }, {
    key: "isStable",
    value: function isStable() {
      return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
    }
  }, {
    key: "_runCallbacksIfReady",
    value: function _runCallbacksIfReady() {
      var _this25 = this;

      if (this.isStable()) {
        // Schedules the call backs in a new frame so that it is always async.
        scheduleMicroTask(function () {
          while (_this25._callbacks.length !== 0) {
            var cb = _this25._callbacks.pop();

            clearTimeout(cb.timeoutId);
            cb.doneCb(_this25._didWork);
          }

          _this25._didWork = false;
        });
      } else {
        // Still not stable, send updates.
        var pending = this.getPendingTasks();
        this._callbacks = this._callbacks.filter(function (cb) {
          if (cb.updateCb && cb.updateCb(pending)) {
            clearTimeout(cb.timeoutId);
            return false;
          }

          return true;
        });
        this._didWork = true;
      }
    }
  }, {
    key: "getPendingTasks",
    value: function getPendingTasks() {
      if (!this.taskTrackingZone) {
        return [];
      } // Copy the tasks data so that we don't leak tasks.


      return this.taskTrackingZone.macroTasks.map(function (t) {
        return {
          source: t.source,
          // From TaskTrackingZone:
          // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
          creationLocation: t.creationLocation,
          data: t.data
        };
      });
    }
  }, {
    key: "addCallback",
    value: function addCallback(cb, timeout, updateCb) {
      var _this26 = this;

      var timeoutId = -1;

      if (timeout && timeout > 0) {
        timeoutId = setTimeout(function () {
          _this26._callbacks = _this26._callbacks.filter(function (cb) {
            return cb.timeoutId !== timeoutId;
          });
          cb(_this26._didWork, _this26.getPendingTasks());
        }, timeout);
      }

      this._callbacks.push({
        doneCb: cb,
        timeoutId: timeoutId,
        updateCb: updateCb
      });
    }
    /**
     * Wait for the application to be stable with a timeout. If the timeout is reached before that
     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
     *
     * @param doneCb The callback to invoke when Angular is stable or the timeout expires
     *    whichever comes first.
     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
     *    specified, whenStable() will wait forever.
     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
     *    and no further updates will be issued.
     */

  }, {
    key: "whenStable",
    value: function whenStable(doneCb, timeout, updateCb) {
      if (updateCb && !this.taskTrackingZone) {
        throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
      } // These arguments are 'Function' above to keep the public API simple.


      this.addCallback(doneCb, timeout, updateCb);

      this._runCallbacksIfReady();
    }
    /**
     * Get the number of pending requests
     * @deprecated pending requests are now tracked with zones
     */

  }, {
    key: "getPendingRequestCount",
    value: function getPendingRequestCount() {
      return this._pendingCount;
    }
    /**
     * Find providers by name
     * @param using The root element to search from
     * @param provider The name of binding variable
     * @param exactMatch Whether using exactMatch
     */

  }, {
    key: "findProviders",
    value: function findProviders(using, provider, exactMatch) {
      // TODO(juliemr): implement.
      return [];
    }
  }]);

  return Testability;
}();

Testability.ɵfac = function Testability_Factory(t) {
  return new (t || Testability)(ɵɵinject(NgZone));
};

Testability.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: Testability,
  factory: Testability.ɵfac
});

Testability.ctorParameters = function () {
  return [{
    type: NgZone
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
    type: Injectable
  }], function () {
    return [{
      type: NgZone
    }];
  }, null);
})();
/**
 * A global registry of {@link Testability} instances for specific elements.
 * @publicApi
 */


var TestabilityRegistry = /*#__PURE__*/function () {
  function TestabilityRegistry() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, TestabilityRegistry);

    /** @internal */
    this._applications = new Map();

    _testabilityGetter.addToWindow(this);
  }
  /**
   * Registers an application with a testability hook so that it can be tracked
   * @param token token of application, root element
   * @param testability Testability hook
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(TestabilityRegistry, [{
    key: "registerApplication",
    value: function registerApplication(token, testability) {
      this._applications.set(token, testability);
    }
    /**
     * Unregisters an application.
     * @param token token of application, root element
     */

  }, {
    key: "unregisterApplication",
    value: function unregisterApplication(token) {
      this._applications.delete(token);
    }
    /**
     * Unregisters all applications
     */

  }, {
    key: "unregisterAllApplications",
    value: function unregisterAllApplications() {
      this._applications.clear();
    }
    /**
     * Get a testability hook associated with the application
     * @param elem root element
     */

  }, {
    key: "getTestability",
    value: function getTestability(elem) {
      return this._applications.get(elem) || null;
    }
    /**
     * Get all registered testabilities
     */

  }, {
    key: "getAllTestabilities",
    value: function getAllTestabilities() {
      return Array.from(this._applications.values());
    }
    /**
     * Get all registered applications(root elements)
     */

  }, {
    key: "getAllRootElements",
    value: function getAllRootElements() {
      return Array.from(this._applications.keys());
    }
    /**
     * Find testability of a node in the Tree
     * @param elem node
     * @param findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     */

  }, {
    key: "findTestabilityInTree",
    value: function findTestabilityInTree(elem) {
      var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }
  }]);

  return TestabilityRegistry;
}();

TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {
  return new (t || TestabilityRegistry)();
};

TestabilityRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: TestabilityRegistry,
  factory: TestabilityRegistry.ɵfac
});

TestabilityRegistry.ctorParameters = function () {
  return [];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
    type: Injectable
  }], function () {
    return [];
  }, null);
})();

var _NoopGetTestability = /*#__PURE__*/function () {
  function _NoopGetTestability() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, _NoopGetTestability);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(_NoopGetTestability, [{
    key: "addToWindow",
    value: function addToWindow(registry) {}
  }, {
    key: "findTestabilityInTree",
    value: function findTestabilityInTree(registry, elem, findInAncestors) {
      return null;
    }
  }]);

  return _NoopGetTestability;
}();
/**
 * Set the {@link GetTestability} implementation used by the Angular testing framework.
 * @publicApi
 */


function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}

var _testabilityGetter = new _NoopGetTestability();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
 *
 * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
 * please see [BAZEL.md](./docs/BAZEL.md).
 */


var _devMode = true;
var _runModeLocked = false;
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * @publicApi
 */

function isDevMode() {
  _runModeLocked = true;
  return _devMode;
}
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * @publicApi
 */


function enableProdMode() {
  if (_runModeLocked) {
    throw new Error('Cannot enable prod mode after platform setup.');
  } // The below check is there so when ngDevMode is set via terser
  // `global['ngDevMode'] = false;` is also dropped.


  if (typeof ngDevMode === undefined || !!ngDevMode) {
    _global['ngDevMode'] = false;
  }

  _devMode = false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _platform;

var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;

function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
  var compilerFactory = injector.get(CompilerFactory);
  var compiler = compilerFactory.createCompiler([options]);
  return compiler.compileModuleAsync(moduleType);
}

function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  var moduleFactory = new NgModuleFactory$1(moduleType); // All of the logic below is irrelevant for AOT-compiled code.

  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
    return Promise.resolve(moduleFactory);
  }

  var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options); // Configure the compiler to use the provided options. This call may fail when multiple modules
  // are bootstrapped with incompatible options, as a component can only be compiled according to
  // a single set of options.

  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map(function (opts) {
      return opts.defaultEncapsulation;
    })),
    preserveWhitespaces: _lastDefined(compilerOptions.map(function (opts) {
      return opts.preserveWhitespaces;
    }))
  });

  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }

  var compilerProviders = _mergeArrays(compilerOptions.map(function (o) {
    return o.providers;
  })); // In case there are no compiler providers, we just return the module factory as
  // there won't be any resource loader. This can happen with Ivy, because AOT compiled
  // modules can be still passed through "bootstrapModule". In that case we shouldn't
  // unnecessarily require the JIT compiler.


  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }

  var compiler = getCompilerFacade({
    usage: 0
    /* Decorator */
    ,
    kind: 'NgModule',
    type: moduleType
  });
  var compilerInjector = Injector.create({
    providers: compilerProviders
  });
  var resourceLoader = compilerInjector.get(compiler.ResourceLoader); // The resource loader can also return a string while the "resolveComponentResources"
  // always expects a promise. Therefore we need to wrap the returned value in a promise.

  return resolveComponentResources(function (url) {
    return Promise.resolve(resourceLoader.get(url));
  }).then(function () {
    return moduleFactory;
  });
} // the `window.ng` global utilities are only available in non-VE versions of
// Angular. The function switch below will make sure that the code is not
// included into Angular when PRE mode is active.


function publishDefaultGlobalUtils__PRE_R3__() {}

function publishDefaultGlobalUtils__POST_R3__() {
  ngDevMode && publishDefaultGlobalUtils();
}

var publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;
var isBoundToModule = isBoundToModule__POST_R3__;

function isBoundToModule__PRE_R3__(cf) {
  return cf instanceof ComponentFactoryBoundToModule;
}

function isBoundToModule__POST_R3__(cf) {
  return cf.isBoundToModule;
}

var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * @publicApi
 */

var NgProbeToken = function NgProbeToken(name, token) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgProbeToken);

  this.name = name;
  this.token = token;
};
/**
 * Creates a platform.
 * Platforms must be created on launch using this function.
 *
 * @publicApi
 */


function createPlatform(injector) {
  if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
  }

  publishDefaultGlobalUtils$1();
  _platform = injector.get(PlatformRef);
  var inits = injector.get(PLATFORM_INITIALIZER, null);
  if (inits) inits.forEach(function (init) {
    return init();
  });
  return _platform;
}
/**
 * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
 * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
 * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
 * to build up configurations that might be required by different libraries or parts of the
 * application.
 * @param name Identifies the new platform factory.
 * @param providers A set of dependency providers for platforms created with the new factory.
 *
 * @publicApi
 */


function createPlatformFactory(parentPlatformFactory, name) {
  var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var desc = "Platform: ".concat(name);
  var marker = new InjectionToken(desc);
  return function () {
    var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var platform = getPlatform();

    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      if (parentPlatformFactory) {
        parentPlatformFactory(providers.concat(extraProviders).concat({
          provide: marker,
          useValue: true
        }));
      } else {
        var injectedProviders = providers.concat(extraProviders).concat({
          provide: marker,
          useValue: true
        }, {
          provide: INJECTOR_SCOPE,
          useValue: 'platform'
        });
        createPlatform(Injector.create({
          providers: injectedProviders,
          name: desc
        }));
      }
    }

    return assertPlatform(marker);
  };
}
/**
 * Checks that there is currently a platform that contains the given token as a provider.
 *
 * @publicApi
 */


function assertPlatform(requiredToken) {
  var platform = getPlatform();

  if (!platform) {
    throw new Error('No platform exists!');
  }

  if (!platform.injector.get(requiredToken, null)) {
    throw new Error('A platform with a different configuration has been created. Please destroy it first.');
  }

  return platform;
}
/**
 * Destroys the current Angular platform and all Angular applications on the page.
 * Destroys all modules and listeners registered with the platform.
 *
 * @publicApi
 */


function destroyPlatform() {
  if (_platform && !_platform.destroyed) {
    _platform.destroy();
  }
}
/**
 * Returns the current platform.
 *
 * @publicApi
 */


function getPlatform() {
  return _platform && !_platform.destroyed ? _platform : null;
}
/**
 * The Angular platform is the entry point for Angular on a web page.
 * Each page has exactly one platform. Services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 * A page's platform is initialized implicitly when a platform is created using a platform
 * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.
 *
 * @publicApi
 */


var PlatformRef = /*#__PURE__*/function () {
  /** @internal */
  function PlatformRef(_injector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, PlatformRef);

    this._injector = _injector;
    this._modules = [];
    this._destroyListeners = [];
    this._destroyed = false;
  }
  /**
   * Creates an instance of an `@NgModule` for the given platform for offline compilation.
   *
   * @usageNotes
   *
   * The following example creates the NgModule for a browser platform.
   *
   * ```typescript
   * my_module.ts:
   *
   * @NgModule({
   *   imports: [BrowserModule]
   * })
   * class MyModule {}
   *
   * main.ts:
   * import {MyModuleNgFactory} from './my_module.ngfactory';
   * import {platformBrowser} from '@angular/platform-browser';
   *
   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
   * ```
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(PlatformRef, [{
    key: "bootstrapModuleFactory",
    value: function bootstrapModuleFactory(moduleFactory, options) {
      var _this27 = this;

      // Note: We need to create the NgZone _before_ we instantiate the module,
      // as instantiating the module creates some providers eagerly.
      // So we create a mini parent injector that just contains the new NgZone and
      // pass that as parent to the NgModuleFactory.
      var ngZoneOption = options ? options.ngZone : undefined;
      var ngZoneEventCoalescing = options && options.ngZoneEventCoalescing || false;
      var ngZoneRunCoalescing = options && options.ngZoneRunCoalescing || false;
      var ngZone = getNgZone(ngZoneOption, {
        ngZoneEventCoalescing: ngZoneEventCoalescing,
        ngZoneRunCoalescing: ngZoneRunCoalescing
      });
      var providers = [{
        provide: NgZone,
        useValue: ngZone
      }]; // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are
      // created within the Angular zone
      // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be
      // created outside of the Angular zone.

      return ngZone.run(function () {
        var ngZoneInjector = Injector.create({
          providers: providers,
          parent: _this27.injector,
          name: moduleFactory.moduleType.name
        });
        var moduleRef = moduleFactory.create(ngZoneInjector);
        var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);

        if (!exceptionHandler) {
          throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
        }

        ngZone.runOutsideAngular(function () {
          var subscription = ngZone.onError.subscribe({
            next: function next(error) {
              exceptionHandler.handleError(error);
            }
          });
          moduleRef.onDestroy(function () {
            remove(_this27._modules, moduleRef);
            subscription.unsubscribe();
          });
        });
        return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
          var initStatus = moduleRef.injector.get(ApplicationInitStatus);
          initStatus.runInitializers();
          return initStatus.donePromise.then(function () {
            if (ivyEnabled) {
              // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
              var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
              setLocaleId(localeId || DEFAULT_LOCALE_ID);
            }

            _this27._moduleDoBootstrap(moduleRef);

            return moduleRef;
          });
        });
      });
    }
    /**
     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
     *
     * @usageNotes
     * ### Simple Example
     *
     * ```typescript
     * @NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     *
     */

  }, {
    key: "bootstrapModule",
    value: function bootstrapModule(moduleType) {
      var _this28 = this;

      var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var options = optionsReducer({}, compilerOptions);
      return compileNgModuleFactory(this.injector, options, moduleType).then(function (moduleFactory) {
        return _this28.bootstrapModuleFactory(moduleFactory, options);
      });
    }
  }, {
    key: "_moduleDoBootstrap",
    value: function _moduleDoBootstrap(moduleRef) {
      var appRef = moduleRef.injector.get(ApplicationRef);

      if (moduleRef._bootstrapComponents.length > 0) {
        moduleRef._bootstrapComponents.forEach(function (f) {
          return appRef.bootstrap(f);
        });
      } else if (moduleRef.instance.ngDoBootstrap) {
        moduleRef.instance.ngDoBootstrap(appRef);
      } else {
        throw new Error("The module ".concat(stringify(moduleRef.instance.constructor), " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
      }

      this._modules.push(moduleRef);
    }
    /**
     * Registers a listener to be called when the platform is destroyed.
     */

  }, {
    key: "onDestroy",
    value: function onDestroy(callback) {
      this._destroyListeners.push(callback);
    }
    /**
     * Retrieves the platform {@link Injector}, which is the parent injector for
     * every Angular application on the page and provides singleton providers.
     */

  }, {
    key: "injector",
    get: function get() {
      return this._injector;
    }
    /**
     * Destroys the current Angular platform and all Angular applications on the page.
     * Destroys all modules and listeners registered with the platform.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      if (this._destroyed) {
        throw new Error('The platform has already been destroyed!');
      }

      this._modules.slice().forEach(function (module) {
        return module.destroy();
      });

      this._destroyListeners.forEach(function (listener) {
        return listener();
      });

      this._destroyed = true;
    }
  }, {
    key: "destroyed",
    get: function get() {
      return this._destroyed;
    }
  }]);

  return PlatformRef;
}();

PlatformRef.ɵfac = function PlatformRef_Factory(t) {
  return new (t || PlatformRef)(ɵɵinject(Injector));
};

PlatformRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: PlatformRef,
  factory: PlatformRef.ɵfac
});

PlatformRef.ctorParameters = function () {
  return [{
    type: Injector
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
    type: Injectable
  }], function () {
    return [{
      type: Injector
    }];
  }, null);
})();

function getNgZone(ngZoneOption, extra) {
  var ngZone;

  if (ngZoneOption === 'noop') {
    ngZone = new NoopNgZone();
  } else {
    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
      enableLongStackTrace: isDevMode(),
      shouldCoalesceEventChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneEventCoalescing),
      shouldCoalesceRunChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneRunCoalescing)
    });
  }

  return ngZone;
}

function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
  try {
    var result = callback();

    if (isPromise(result)) {
      return result.catch(function (e) {
        ngZone.runOutsideAngular(function () {
          return errorHandler.handleError(e);
        }); // rethrow as the exception handler might not do it

        throw e;
      });
    }

    return result;
  } catch (e) {
    ngZone.runOutsideAngular(function () {
      return errorHandler.handleError(e);
    }); // rethrow as the exception handler might not do it

    throw e;
  }
}

function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    dst = objs.reduce(optionsReducer, dst);
  } else {
    dst = Object.assign(Object.assign({}, dst), objs);
  }

  return dst;
}
/**
 * A reference to an Angular application running on a page.
 *
 * @usageNotes
 *
 * {@a is-stable-examples}
 * ### isStable examples and caveats
 *
 * Note two important points about `isStable`, demonstrated in the examples below:
 * - the application will never be stable if you start any kind
 * of recurrent asynchronous task when the application starts
 * (for example for a polling process, started with a `setInterval`, a `setTimeout`
 * or using RxJS operators like `interval`);
 * - the `isStable` Observable runs outside of the Angular zone.
 *
 * Let's imagine that you start a recurrent task
 * (here incrementing a counter, using RxJS `interval`),
 * and at the same time subscribe to `isStable`.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *      filter(stable => stable)
 *   ).subscribe(() => console.log('App is stable now');
 *   interval(1000).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, `isStable` will never emit `true`,
 * and the trace "App is stable now" will never get logged.
 *
 * If you want to execute something when the app is stable,
 * you have to wait for the application to be stable
 * before starting your polling process.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     tap(stable => console.log('App is stable now')),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, the trace "App is stable now" will be logged
 * and then the counter starts incrementing every second.
 *
 * Note also that this Observable runs outside of the Angular zone,
 * which means that the code in the subscription
 * to this Observable will not trigger the change detection.
 *
 * Let's imagine that instead of logging the counter value,
 * you update a field of your component
 * and display it in its template.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => this.value = counter);
 * }
 * ```
 * As the `isStable` Observable runs outside the zone,
 * the `value` field will be updated properly,
 * but the template will not be refreshed!
 *
 * You'll have to manually trigger the change detection to update the template.
 *
 * ```
 * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => {
 *     this.value = counter;
 *     cd.detectChanges();
 *   });
 * }
 * ```
 *
 * Or make the subscription callback run inside the zone.
 *
 * ```
 * constructor(appRef: ApplicationRef, zone: NgZone) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => zone.run(() => this.value = counter));
 * }
 * ```
 *
 * @publicApi
 */


var ApplicationRef = /*#__PURE__*/function () {
  /** @internal */
  function ApplicationRef(_zone, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
    var _this29 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ApplicationRef);

    this._zone = _zone;
    this._injector = _injector;
    this._exceptionHandler = _exceptionHandler;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._initStatus = _initStatus;
    /** @internal */

    this._bootstrapListeners = [];
    this._views = [];
    this._runningTick = false;
    this._stable = true;
    /**
     * Get a list of component types registered to this application.
     * This list is populated even before the component is created.
     */

    this.componentTypes = [];
    /**
     * Get a list of components registered to this application.
     */

    this.components = [];
    this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
      next: function next() {
        _this29._zone.run(function () {
          _this29.tick();
        });
      }
    });
    var isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Observable(function (observer) {
      _this29._stable = _this29._zone.isStable && !_this29._zone.hasPendingMacrotasks && !_this29._zone.hasPendingMicrotasks;

      _this29._zone.runOutsideAngular(function () {
        observer.next(_this29._stable);
        observer.complete();
      });
    });
    var isStable = new rxjs__WEBPACK_IMPORTED_MODULE_16__.Observable(function (observer) {
      // Create the subscription to onStable outside the Angular Zone so that
      // the callback is run outside the Angular Zone.
      var stableSub;

      _this29._zone.runOutsideAngular(function () {
        stableSub = _this29._zone.onStable.subscribe(function () {
          NgZone.assertNotInAngularZone(); // Check whether there are no pending macro/micro tasks in the next tick
          // to allow for NgZone to update the state.

          scheduleMicroTask(function () {
            if (!_this29._stable && !_this29._zone.hasPendingMacrotasks && !_this29._zone.hasPendingMicrotasks) {
              _this29._stable = true;
              observer.next(true);
            }
          });
        });
      });

      var unstableSub = _this29._zone.onUnstable.subscribe(function () {
        NgZone.assertInAngularZone();

        if (_this29._stable) {
          _this29._stable = false;

          _this29._zone.runOutsideAngular(function () {
            observer.next(false);
          });
        }
      });

      return function () {
        stableSub.unsubscribe();
        unstableSub.unsubscribe();
      };
    });
    this.isStable = (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)(isCurrentlyStable, isStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.share)()));
  }
  /**
   * Bootstrap a component onto the element identified by its selector or, optionally, to a
   * specified element.
   *
   * @usageNotes
   * ### Bootstrap process
   *
   * When bootstrapping a component, Angular mounts it onto a target DOM element
   * and kicks off automatic change detection. The target DOM element can be
   * provided using the `rootSelectorOrNode` argument.
   *
   * If the target DOM element is not provided, Angular tries to find one on a page
   * using the `selector` of the component that is being bootstrapped
   * (first matched element is used).
   *
   * ### Example
   *
   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
   * but it requires us to know the component while writing the application code.
   *
   * Imagine a situation where we have to wait for an API call to decide about the component to
   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
   * dynamically bootstrap a component.
   *
   * {@example core/ts/platform/platform.ts region='componentSelector'}
   *
   * Optionally, a component can be mounted onto a DOM element that does not match the
   * selector of the bootstrapped component.
   *
   * In the following example, we are providing a CSS selector to match the target element.
   *
   * {@example core/ts/platform/platform.ts region='cssSelector'}
   *
   * While in this example, we are providing reference to a DOM node.
   *
   * {@example core/ts/platform/platform.ts region='domNode'}
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(ApplicationRef, [{
    key: "bootstrap",
    value: function bootstrap(componentOrFactory, rootSelectorOrNode) {
      var _this30 = this;

      if (!this._initStatus.done) {
        throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
      }

      var componentFactory;

      if (componentOrFactory instanceof ComponentFactory) {
        componentFactory = componentOrFactory;
      } else {
        componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
      }

      this.componentTypes.push(componentFactory.componentType); // Create a factory associated with the current module if it's not bound to some other

      var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);
      var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
      var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
      var nativeElement = compRef.location.nativeElement;
      var testability = compRef.injector.get(Testability, null);
      var testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);

      if (testability && testabilityRegistry) {
        testabilityRegistry.registerApplication(nativeElement, testability);
      }

      compRef.onDestroy(function () {
        _this30.detachView(compRef.hostView);

        remove(_this30.components, compRef);

        if (testabilityRegistry) {
          testabilityRegistry.unregisterApplication(nativeElement);
        }
      });

      this._loadComponent(compRef); // Note that we have still left the `isDevMode()` condition in order to avoid
      // creating a breaking change for projects that still use the View Engine.


      if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {
        var _console = this._injector.get(Console);

        _console.log("Angular is running in development mode. Call enableProdMode() to enable production mode.");
      }

      return compRef;
    }
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     */

  }, {
    key: "tick",
    value: function tick() {
      var _this31 = this;

      if (this._runningTick) {
        throw new Error('ApplicationRef.tick is called recursively');
      }

      try {
        this._runningTick = true;

        var _iterator5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(this._views),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _view2 = _step5.value;

            _view2.detectChanges();
          } // Note that we have still left the `isDevMode()` condition in order to avoid
          // creating a breaking change for projects that still use the View Engine.

        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {
          var _iterator6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(this._views),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var view = _step6.value;
              view.checkNoChanges();
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      } catch (e) {
        // Attention: Don't rethrow as it could cancel subscriptions to Observables!
        this._zone.runOutsideAngular(function () {
          return _this31._exceptionHandler.handleError(e);
        });
      } finally {
        this._runningTick = false;
      }
    }
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     */

  }, {
    key: "attachView",
    value: function attachView(viewRef) {
      var view = viewRef;

      this._views.push(view);

      view.attachToAppRef(this);
    }
    /**
     * Detaches a view from dirty checking again.
     */

  }, {
    key: "detachView",
    value: function detachView(viewRef) {
      var view = viewRef;
      remove(this._views, view);
      view.detachFromAppRef();
    }
  }, {
    key: "_loadComponent",
    value: function _loadComponent(componentRef) {
      this.attachView(componentRef.hostView);
      this.tick();
      this.components.push(componentRef); // Get the listeners lazily to prevent DI cycles.

      var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);

      listeners.forEach(function (listener) {
        return listener(componentRef);
      });
    }
    /** @internal */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._views.slice().forEach(function (view) {
        return view.destroy();
      });

      this._onMicrotaskEmptySubscription.unsubscribe();
    }
    /**
     * Returns the number of attached views.
     */

  }, {
    key: "viewCount",
    get: function get() {
      return this._views.length;
    }
  }]);

  return ApplicationRef;
}();

ApplicationRef.ɵfac = function ApplicationRef_Factory(t) {
  return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus));
};

ApplicationRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: ApplicationRef,
  factory: ApplicationRef.ɵfac
});

ApplicationRef.ctorParameters = function () {
  return [{
    type: NgZone
  }, {
    type: Injector
  }, {
    type: ErrorHandler
  }, {
    type: ComponentFactoryResolver
  }, {
    type: ApplicationInitStatus
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
    type: Injectable
  }], function () {
    return [{
      type: NgZone
    }, {
      type: Injector
    }, {
      type: ErrorHandler
    }, {
      type: ComponentFactoryResolver
    }, {
      type: ApplicationInitStatus
    }];
  }, null);
})();

function remove(list, el) {
  var index = list.indexOf(el);

  if (index > -1) {
    list.splice(index, 1);
  }
}

function _lastDefined(args) {
  for (var i = args.length - 1; i >= 0; i--) {
    if (args[i] !== undefined) {
      return args[i];
    }
  }

  return undefined;
}

function _mergeArrays(parts) {
  var result = [];
  parts.forEach(function (part) {
    return part && result.push.apply(result, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(part));
  });
  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Used to load ng module factories.
 *
 * @publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is
 * part of its implementation. See `LoadChildren` for more details.
 */


var NgModuleFactoryLoader = function NgModuleFactoryLoader() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleFactoryLoader);
};

function getModuleFactory__PRE_R3__(id) {
  var factory = getRegisteredNgModuleType(id);
  if (!factory) throw noModuleError(id);
  return factory;
}

function getModuleFactory__POST_R3__(id) {
  var type = getRegisteredNgModuleType(id);
  if (!type) throw noModuleError(id);
  return new NgModuleFactory$1(type);
}
/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * @publicApi
 */


var getModuleFactory = getModuleFactory__POST_R3__;

function noModuleError(id) {
  return new Error("No module with ID ".concat(id, " loaded"));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _SEPARATOR = '#';
var FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * @publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
 * is part of its implementation. See `LoadChildren` for more details.
 */

var SystemJsNgModuleLoaderConfig = function SystemJsNgModuleLoaderConfig() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SystemJsNgModuleLoaderConfig);
};

var DEFAULT_CONFIG = {
  factoryPathPrefix: '',
  factoryPathSuffix: '.ngfactory'
};
/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * @publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is
 * part of its implementation. See `LoadChildren` for more details.
 */

var SystemJsNgModuleLoader = /*#__PURE__*/function () {
  function SystemJsNgModuleLoader(_compiler, config) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, SystemJsNgModuleLoader);

    this._compiler = _compiler;
    this._config = config || DEFAULT_CONFIG;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(SystemJsNgModuleLoader, [{
    key: "load",
    value: function load(path) {
      var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;
      return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    }
  }, {
    key: "loadAndCompile",
    value: function loadAndCompile(path) {
      var _this32 = this;

      var _path$split = path.split(_SEPARATOR),
          _path$split2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_path$split, 2),
          module = _path$split2[0],
          exportName = _path$split2[1];

      if (exportName === undefined) {
        exportName = 'default';
      }

      return __webpack_require__(98255)(module).then(function (module) {
        return module[exportName];
      }).then(function (type) {
        return checkNotEmpty(type, module, exportName);
      }).then(function (type) {
        return _this32._compiler.compileModuleAsync(type);
      });
    }
  }, {
    key: "loadFactory",
    value: function loadFactory(path) {
      var _path$split3 = path.split(_SEPARATOR),
          _path$split4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_path$split3, 2),
          module = _path$split4[0],
          exportName = _path$split4[1];

      var factoryClassSuffix = FACTORY_CLASS_SUFFIX;

      if (exportName === undefined) {
        exportName = 'default';
        factoryClassSuffix = '';
      }

      return __webpack_require__(98255)(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
        return module[exportName + factoryClassSuffix];
      }).then(function (factory) {
        return checkNotEmpty(factory, module, exportName);
      });
    }
  }]);

  return SystemJsNgModuleLoader;
}();

SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) {
  return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8));
};

SystemJsNgModuleLoader.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
  token: SystemJsNgModuleLoader,
  factory: SystemJsNgModuleLoader.ɵfac
});

SystemJsNgModuleLoader.ctorParameters = function () {
  return [{
    type: Compiler
  }, {
    type: SystemJsNgModuleLoaderConfig,
    decorators: [{
      type: Optional
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SystemJsNgModuleLoader, [{
    type: Injectable
  }], function () {
    return [{
      type: Compiler
    }, {
      type: SystemJsNgModuleLoaderConfig,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();

function checkNotEmpty(value, modulePath, exportName) {
  if (!value) {
    throw new Error("Cannot find '".concat(exportName, "' in '").concat(modulePath, "'"));
  }

  return value;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents an Angular [view](guide/glossary#view "Definition").
 *
 * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
 *
 * @publicApi
 */


var ViewRef$1 = /*#__PURE__*/function (_ChangeDetectorRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(ViewRef$1, _ChangeDetectorRef);

  var _super20 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(ViewRef$1);

  function ViewRef$1() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ViewRef$1);

    return _super20.apply(this, arguments);
  }

  return ViewRef$1;
}(ChangeDetectorRef);
/**
 * Represents an Angular [view](guide/glossary#view) in a view container.
 * An [embedded view](guide/glossary#view-tree) can be referenced from a component
 * other than the hosting component whose template defines it, or it can be defined
 * independently by a `TemplateRef`.
 *
 * Properties of elements in a view can change, but the structure (number and order) of elements in
 * a view cannot. Change the structure of elements by inserting, moving, or
 * removing nested views in a view container.
 *
 * @see `ViewContainerRef`
 *
 * @usageNotes
 *
 * The following template breaks down into two separate `TemplateRef` instances,
 * an outer one and an inner one.
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * This is the outer `TemplateRef`:
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * This is the inner `TemplateRef`:
 *
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * The outer and inner `TemplateRef` instances are assembled into views as follows:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * @publicApi
 */


var EmbeddedViewRef = /*#__PURE__*/function (_ViewRef$) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(EmbeddedViewRef, _ViewRef$);

  var _super21 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(EmbeddedViewRef);

  function EmbeddedViewRef() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, EmbeddedViewRef);

    return _super21.apply(this, arguments);
  }

  return EmbeddedViewRef;
}(ViewRef$1);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var DebugEventListener = function DebugEventListener(name, callback) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugEventListener);

  this.name = name;
  this.callback = callback;
};

var DebugNode__PRE_R3__ = /*#__PURE__*/function () {
  function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugNode__PRE_R3__);

    this.listeners = [];
    this.parent = null;
    this._debugContext = _debugContext;
    this.nativeNode = nativeNode;

    if (parent && parent instanceof DebugElement__PRE_R3__) {
      parent.addChild(this);
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugNode__PRE_R3__, [{
    key: "injector",
    get: function get() {
      return this._debugContext.injector;
    }
  }, {
    key: "componentInstance",
    get: function get() {
      return this._debugContext.component;
    }
  }, {
    key: "context",
    get: function get() {
      return this._debugContext.context;
    }
  }, {
    key: "references",
    get: function get() {
      return this._debugContext.references;
    }
  }, {
    key: "providerTokens",
    get: function get() {
      return this._debugContext.providerTokens;
    }
  }]);

  return DebugNode__PRE_R3__;
}();

var DebugElement__PRE_R3__ = /*#__PURE__*/function (_DebugNode__PRE_R3__) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(DebugElement__PRE_R3__, _DebugNode__PRE_R3__);

  var _super22 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(DebugElement__PRE_R3__);

  function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {
    var _this33;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugElement__PRE_R3__);

    _this33 = _super22.call(this, nativeNode, parent, _debugContext);
    _this33.properties = {};
    _this33.attributes = {};
    _this33.classes = {};
    _this33.styles = {};
    _this33.childNodes = [];
    _this33.nativeElement = nativeNode;
    return _this33;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugElement__PRE_R3__, [{
    key: "addChild",
    value: function addChild(child) {
      if (child) {
        this.childNodes.push(child);
        child.parent = this;
      }
    }
  }, {
    key: "removeChild",
    value: function removeChild(child) {
      var childIndex = this.childNodes.indexOf(child);

      if (childIndex !== -1) {
        child.parent = null;
        this.childNodes.splice(childIndex, 1);
      }
    }
  }, {
    key: "insertChildrenAfter",
    value: function insertChildrenAfter(child, newChildren) {
      var _this34 = this;

      var siblingIndex = this.childNodes.indexOf(child);

      if (siblingIndex !== -1) {
        var _this$childNodes;

        (_this$childNodes = this.childNodes).splice.apply(_this$childNodes, [siblingIndex + 1, 0].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(newChildren)));

        newChildren.forEach(function (c) {
          if (c.parent) {
            c.parent.removeChild(c);
          }

          child.parent = _this34;
        });
      }
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(refChild, newChild) {
      var refIndex = this.childNodes.indexOf(refChild);

      if (refIndex === -1) {
        this.addChild(newChild);
      } else {
        if (newChild.parent) {
          newChild.parent.removeChild(newChild);
        }

        newChild.parent = this;
        this.childNodes.splice(refIndex, 0, newChild);
      }
    }
  }, {
    key: "query",
    value: function query(predicate) {
      var results = this.queryAll(predicate);
      return results[0] || null;
    }
  }, {
    key: "queryAll",
    value: function queryAll(predicate) {
      var matches = [];

      _queryElementChildren(this, predicate, matches);

      return matches;
    }
  }, {
    key: "queryAllNodes",
    value: function queryAllNodes(predicate) {
      var matches = [];

      _queryNodeChildren(this, predicate, matches);

      return matches;
    }
  }, {
    key: "children",
    get: function get() {
      return this.childNodes //
      .filter(function (node) {
        return node instanceof DebugElement__PRE_R3__;
      });
    }
  }, {
    key: "triggerEventHandler",
    value: function triggerEventHandler(eventName, eventObj) {
      this.listeners.forEach(function (listener) {
        if (listener.name == eventName) {
          listener.callback(eventObj);
        }
      });
    }
  }]);

  return DebugElement__PRE_R3__;
}(DebugNode__PRE_R3__);
/**
 * @publicApi
 */


function asNativeElements(debugEls) {
  return debugEls.map(function (el) {
    return el.nativeElement;
  });
}

function _queryElementChildren(element, predicate, matches) {
  element.childNodes.forEach(function (node) {
    if (node instanceof DebugElement__PRE_R3__) {
      if (predicate(node)) {
        matches.push(node);
      }

      _queryElementChildren(node, predicate, matches);
    }
  });
}

function _queryNodeChildren(parentNode, predicate, matches) {
  if (parentNode instanceof DebugElement__PRE_R3__) {
    parentNode.childNodes.forEach(function (node) {
      if (predicate(node)) {
        matches.push(node);
      }

      if (node instanceof DebugElement__PRE_R3__) {
        _queryNodeChildren(node, predicate, matches);
      }
    });
  }
}

var DebugNode__POST_R3__ = /*#__PURE__*/function () {
  function DebugNode__POST_R3__(nativeNode) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugNode__POST_R3__);

    this.nativeNode = nativeNode;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugNode__POST_R3__, [{
    key: "parent",
    get: function get() {
      var parent = this.nativeNode.parentNode;
      return parent ? new DebugElement__POST_R3__(parent) : null;
    }
  }, {
    key: "injector",
    get: function get() {
      return getInjector(this.nativeNode);
    }
  }, {
    key: "componentInstance",
    get: function get() {
      var nativeElement = this.nativeNode;
      return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));
    }
  }, {
    key: "context",
    get: function get() {
      return getComponent(this.nativeNode) || getContext(this.nativeNode);
    }
  }, {
    key: "listeners",
    get: function get() {
      return getListeners(this.nativeNode).filter(function (listener) {
        return listener.type === 'dom';
      });
    }
  }, {
    key: "references",
    get: function get() {
      return getLocalRefs(this.nativeNode);
    }
  }, {
    key: "providerTokens",
    get: function get() {
      return getInjectionTokens(this.nativeNode);
    }
  }]);

  return DebugNode__POST_R3__;
}();

var DebugElement__POST_R3__ = /*#__PURE__*/function (_DebugNode__POST_R3__) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(DebugElement__POST_R3__, _DebugNode__POST_R3__);

  var _super23 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(DebugElement__POST_R3__);

  function DebugElement__POST_R3__(nativeNode) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugElement__POST_R3__);

    ngDevMode && assertDomNode(nativeNode);
    return _super23.call(this, nativeNode);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugElement__POST_R3__, [{
    key: "nativeElement",
    get: function get() {
      return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
    }
  }, {
    key: "name",
    get: function get() {
      var context = getLContext(this.nativeNode);

      if (context !== null) {
        var lView = context.lView;
        var tData = lView[TVIEW].data;
        var tNode = tData[context.nodeIndex];
        return tNode.value;
      } else {
        return this.nativeNode.nodeName;
      }
    }
    /**
     *  Gets a map of property names to property values for an element.
     *
     *  This map includes:
     *  - Regular property bindings (e.g. `[id]="id"`)
     *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
     *  - Interpolated property bindings (e.g. `id="{{ value }}")
     *
     *  It does not include:
     *  - input property bindings (e.g. `[myCustomInput]="value"`)
     *  - attribute bindings (e.g. `[attr.role]="menu"`)
     */

  }, {
    key: "properties",
    get: function get() {
      var context = getLContext(this.nativeNode);

      if (context === null) {
        return {};
      }

      var lView = context.lView;
      var tData = lView[TVIEW].data;
      var tNode = tData[context.nodeIndex];
      var properties = {}; // Collect properties from the DOM.

      copyDomProperties(this.nativeElement, properties); // Collect properties from the bindings. This is needed for animation renderer which has
      // synthetic properties which don't get reflected into the DOM.

      collectPropertyBindings(properties, tNode, lView, tData);
      return properties;
    }
  }, {
    key: "attributes",
    get: function get() {
      var attributes = {};
      var element = this.nativeElement;

      if (!element) {
        return attributes;
      }

      var context = getLContext(element);

      if (context === null) {
        return {};
      }

      var lView = context.lView;
      var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
      var lowercaseTNodeAttrs = []; // For debug nodes we take the element's attribute directly from the DOM since it allows us
      // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
      // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
      // however since we have the attributes already on the TNode, we can preserve the case by going
      // through them once, adding them to the `attributes` map and putting their lower-cased name
      // into an array. Afterwards when we're going through the native DOM attributes, we can check
      // whether we haven't run into an attribute already through the TNode.

      if (tNodeAttrs) {
        var i = 0;

        while (i < tNodeAttrs.length) {
          var attrName = tNodeAttrs[i]; // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
          // else will be handled below when we read the final attributes off the DOM.

          if (typeof attrName !== 'string') break;
          var attrValue = tNodeAttrs[i + 1];
          attributes[attrName] = attrValue;
          lowercaseTNodeAttrs.push(attrName.toLowerCase());
          i += 2;
        }
      }

      var eAttrs = element.attributes;

      for (var _i10 = 0; _i10 < eAttrs.length; _i10++) {
        var attr = eAttrs[_i10];
        var lowercaseName = attr.name.toLowerCase(); // Make sure that we don't assign the same attribute both in its
        // case-sensitive form and the lower-cased one from the browser.

        if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
          // Save the lowercase name to align the behavior between browsers.
          // IE preserves the case, while all other browser convert it to lower case.
          attributes[lowercaseName] = attr.value;
        }
      }

      return attributes;
    }
  }, {
    key: "styles",
    get: function get() {
      if (this.nativeElement && this.nativeElement.style) {
        return this.nativeElement.style;
      }

      return {};
    }
  }, {
    key: "classes",
    get: function get() {
      var result = {};
      var element = this.nativeElement; // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.

      var className = element.className;
      var classes = className && typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
      classes.forEach(function (value) {
        return result[value] = true;
      });
      return result;
    }
  }, {
    key: "childNodes",
    get: function get() {
      var childNodes = this.nativeNode.childNodes;
      var children = [];

      for (var i = 0; i < childNodes.length; i++) {
        var element = childNodes[i];
        children.push(getDebugNode__POST_R3__(element));
      }

      return children;
    }
  }, {
    key: "children",
    get: function get() {
      var nativeElement = this.nativeElement;
      if (!nativeElement) return [];
      var childNodes = nativeElement.children;
      var children = [];

      for (var i = 0; i < childNodes.length; i++) {
        var element = childNodes[i];
        children.push(getDebugNode__POST_R3__(element));
      }

      return children;
    }
  }, {
    key: "query",
    value: function query(predicate) {
      var results = this.queryAll(predicate);
      return results[0] || null;
    }
  }, {
    key: "queryAll",
    value: function queryAll(predicate) {
      var matches = [];

      _queryAllR3(this, predicate, matches, true);

      return matches;
    }
  }, {
    key: "queryAllNodes",
    value: function queryAllNodes(predicate) {
      var matches = [];

      _queryAllR3(this, predicate, matches, false);

      return matches;
    }
  }, {
    key: "triggerEventHandler",
    value: function triggerEventHandler(eventName, eventObj) {
      var node = this.nativeNode;
      var invokedListeners = [];
      this.listeners.forEach(function (listener) {
        if (listener.name === eventName) {
          var callback = listener.callback;
          callback.call(node, eventObj);
          invokedListeners.push(callback);
        }
      }); // We need to check whether `eventListeners` exists, because it's something
      // that Zone.js only adds to `EventTarget` in browser environments.

      if (typeof node.eventListeners === 'function') {
        // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
        // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
        // listener.
        node.eventListeners(eventName).forEach(function (listener) {
          // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
          // use `toString` on the listener and see if it contains the token. We use this approach to
          // ensure that it still worked with compiled code since it cannot remove or rename string
          // literals. We also considered using a special function name (i.e. if(listener.name ===
          // special)) but that was more cumbersome and we were also concerned the compiled code could
          // strip the name, turning the condition in to ("" === "") and always returning true.
          if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
            var unwrappedListener = listener('__ngUnwrap__');
            return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
          }
        });
      }
    }
  }]);

  return DebugElement__POST_R3__;
}(DebugNode__POST_R3__);

function copyDomProperties(element, properties) {
  if (element) {
    // Skip own properties (as those are patched)
    var obj = Object.getPrototypeOf(element);
    var NodePrototype = Node.prototype;

    while (obj !== null && obj !== NodePrototype) {
      var descriptors = Object.getOwnPropertyDescriptors(obj);

      for (var key in descriptors) {
        if (!key.startsWith('__') && !key.startsWith('on')) {
          // don't include properties starting with `__` and `on`.
          // `__` are patched values which should not be included.
          // `on` are listeners which also should not be included.
          var value = element[key];

          if (isPrimitiveValue(value)) {
            properties[key] = value;
          }
        }
      }

      obj = Object.getPrototypeOf(obj);
    }
  }
}

function isPrimitiveValue(value) {
  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;
}

function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
  var context = getLContext(parentElement.nativeNode);

  if (context !== null) {
    var parentTNode = context.lView[TVIEW].data[context.nodeIndex];

    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
  } else {
    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
    // APIs.
    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
  }
}
/**
 * Recursively match the current TNode against the predicate, and goes on with the next ones.
 *
 * @param tNode the current TNode
 * @param lView the LView of this TNode
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  var nativeNode = getNativeByTNodeOrNull(tNode, lView); // For each type of TNode, specific logic is executed.

  if (tNode.type & (3
  /* AnyRNode */
  | 8
  /* ElementContainer */
  )) {
    // Case 1: the TNode is an element
    // The native node has to be checked.
    _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);

    if (isComponentHost(tNode)) {
      // If the element is the host of a component, then all nodes in its view have to be processed.
      // Note: the component's content (tNode.child) will be processed from the insertion points.
      var componentView = getComponentLViewByIndex(tNode.index, lView);

      if (componentView && componentView[TVIEW].firstChild) {
        _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
      }
    } else {
      if (tNode.child) {
        // Otherwise, its children have to be processed.
        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
      } // We also have to query the DOM directly in order to catch elements inserted through
      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
      // times. ViewEngine could do it more efficiently, because all the insertions go through
      // Renderer2, however that's not the case in Ivy. This approach is being used because:
      // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
      // 2. We would have to make `Renderer3` "know" about debug nodes.
      // 3. It allows us to capture nodes that were inserted directly via the DOM.


      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
    } // In all cases, if a dynamic container exists for this node, each view inside it has to be
    // processed.


    var nodeOrContainer = lView[tNode.index];

    if (isLContainer(nodeOrContainer)) {
      _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.type & 4
  /* Container */
  ) {
    // Case 2: the TNode is a container
    // The native node has to be checked.
    var lContainer = lView[tNode.index];

    _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode); // Each view inside the container has to be processed.


    _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
  } else if (tNode.type & 16
  /* Projection */
  ) {
    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
    // The nodes projected at this location all need to be processed.
    var _componentView = lView[DECLARATION_COMPONENT_VIEW];
    var componentHost = _componentView[T_HOST];
    var head = componentHost.projection[tNode.projection];

    if (Array.isArray(head)) {
      var _iterator7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_6__.default)(head),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _nativeNode2 = _step7.value;

          _addQueryMatchR3(_nativeNode2, predicate, matches, elementsOnly, rootNativeNode);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    } else if (head) {
      var nextLView = _componentView[PARENT];
      var nextTNode = nextLView[TVIEW].data[head.index];

      _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.child) {
    // Case 4: the TNode is a view.
    _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
  } // We don't want to go to the next sibling of the root node.


  if (rootNativeNode !== nativeNode) {
    // To determine the next node to be processed, we need to use the next or the projectionNext
    // link, depending on whether the current node has been projected.
    var _nextTNode = tNode.flags & 4
    /* isProjected */
    ? tNode.projectionNext : tNode.next;

    if (_nextTNode) {
      _queryNodeChildrenR3(_nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
/**
 * Process all TNodes in a given container.
 *
 * @param lContainer the container to be processed
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
  for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    var childView = lContainer[i];
    var firstChild = childView[TVIEW].firstChild;

    if (firstChild) {
      _queryNodeChildrenR3(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
/**
 * Match the current native node against the predicate.
 *
 * @param nativeNode the current native node
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
  if (rootNativeNode !== nativeNode) {
    var debugNode = getDebugNode$1(nativeNode);

    if (!debugNode) {
      return;
    } // Type of the "predicate and "matches" array are set based on the value of
    // the "elementsOnly" parameter. TypeScript is not able to properly infer these
    // types with generics, so we manually cast the parameters accordingly.


    if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    }
  }
}
/**
 * Match all the descendants of a DOM node against a predicate.
 *
 * @param nativeNode the current native node
 * @param predicate the predicate to match
 * @param matches the list where matches are stored
 * @param elementsOnly whether only elements should be searched
 */


function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
  var nodes = parentNode.childNodes;
  var length = nodes.length;

  for (var i = 0; i < length; i++) {
    var node = nodes[i];
    var debugNode = getDebugNode$1(node);

    if (debugNode) {
      if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      }

      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
    }
  }
}
/**
 * Iterates through the property bindings for a given node and generates
 * a map of property names to values. This map only contains property bindings
 * defined in templates, not in host bindings.
 */


function collectPropertyBindings(properties, tNode, lView, tData) {
  var bindingIndexes = tNode.propertyBindings;

  if (bindingIndexes !== null) {
    for (var i = 0; i < bindingIndexes.length; i++) {
      var bindingIndex = bindingIndexes[i];
      var propMetadata = tData[bindingIndex];
      var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
      var propertyName = metadataParts[0];

      if (metadataParts.length > 1) {
        var value = metadataParts[1];

        for (var j = 1; j < metadataParts.length - 1; j++) {
          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
        }

        properties[propertyName] = value;
      } else {
        properties[propertyName] = lView[bindingIndex];
      }
    }
  }
} // Need to keep the nodes in a global Map so that multiple angular apps are supported.


var _nativeNodeToDebugNode = new Map();

function getDebugNode__PRE_R3__(nativeNode) {
  return _nativeNodeToDebugNode.get(nativeNode) || null;
}

var NG_DEBUG_PROPERTY = '__ng_debug__';

function getDebugNode__POST_R3__(nativeNode) {
  if (nativeNode instanceof Node) {
    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement__POST_R3__(nativeNode) : new DebugNode__POST_R3__(nativeNode);
    }

    return nativeNode[NG_DEBUG_PROPERTY];
  }

  return null;
}
/**
 * @publicApi
 */


var getDebugNode$1 = getDebugNode__POST_R3__;

function getDebugNodeR2__PRE_R3__(nativeNode) {
  return getDebugNode__PRE_R3__(nativeNode);
}

function getDebugNodeR2__POST_R3__(_nativeNode) {
  return null;
}

var getDebugNodeR2 = getDebugNodeR2__POST_R3__;

function getAllDebugNodes() {
  return Array.from(_nativeNodeToDebugNode.values());
}

function indexDebugNode(node) {
  _nativeNodeToDebugNode.set(node.nativeNode, node);
}

function removeDebugNodeFromIndex(node) {
  _nativeNodeToDebugNode.delete(node.nativeNode);
}
/**
 * @publicApi
 */


var DebugNode = DebugNode__POST_R3__;
/**
 * @publicApi
 */

var DebugElement = DebugElement__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var _CORE_PLATFORM_PROVIDERS = [// Set a default platform name for platforms that don't set it explicitly.
{
  provide: PLATFORM_ID,
  useValue: 'unknown'
}, {
  provide: PlatformRef,
  deps: [Injector]
}, {
  provide: TestabilityRegistry,
  deps: []
}, {
  provide: Console,
  deps: []
}];
/**
 * This platform has to be included in any other platform
 *
 * @publicApi
 */

var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function _iterableDiffersFactory() {
  return defaultIterableDiffers;
}

function _keyValueDiffersFactory() {
  return defaultKeyValueDiffers;
}

function _localeFactory(locale) {
  locale = locale || getGlobalLocale();

  if (ivyEnabled) {
    setLocaleId(locale);
  }

  return locale;
}
/**
 * Work out the locale from the potential global properties.
 *
 * * Closure Compiler: use `goog.getLocale()`.
 * * Ivy enabled: use `$localize.locale`
 */


function getGlobalLocale() {
  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.getLocale() !== 'en') {
    // * The default `goog.getLocale()` value is `en`, while Angular used `en-US`.
    // * In order to preserve backwards compatibility, we use Angular default value over
    //   Closure Compiler's one.
    return goog.getLocale();
  } else {
    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
    // COMPILE-TIME INLINER.
    //
    // * During compile time inlining of translations the expression will be replaced
    //   with a string literal that is the current locale. Other forms of this expression are not
    //   guaranteed to be replaced.
    //
    // * During runtime translation evaluation, the developer is required to set `$localize.locale`
    //   if required, or just to provide their own `LOCALE_ID` provider.
    return ivyEnabled && typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;
  }
}

var ɵ0$f = USD_CURRENCY_CODE;
/**
 * A built-in [dependency injection token](guide/glossary#di-token)
 * that is used to configure the root injector for bootstrapping.
 */

var APPLICATION_MODULE_PROVIDERS = [{
  provide: ApplicationRef,
  useClass: ApplicationRef,
  deps: [NgZone, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]
}, {
  provide: SCHEDULER,
  deps: [NgZone],
  useFactory: zoneSchedulerFactory
}, {
  provide: ApplicationInitStatus,
  useClass: ApplicationInitStatus,
  deps: [[new Optional(), APP_INITIALIZER]]
}, {
  provide: Compiler,
  useClass: Compiler,
  deps: []
}, APP_ID_RANDOM_PROVIDER, {
  provide: IterableDiffers,
  useFactory: _iterableDiffersFactory,
  deps: []
}, {
  provide: KeyValueDiffers,
  useFactory: _keyValueDiffersFactory,
  deps: []
}, {
  provide: LOCALE_ID$1,
  useFactory: _localeFactory,
  deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]
}, {
  provide: DEFAULT_CURRENCY_CODE,
  useValue: ɵ0$f
}];
/**
 * Schedule work at next available slot.
 *
 * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
 * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
 * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
 *
 * @param ngZone NgZone to use for scheduling.
 */

function zoneSchedulerFactory(ngZone) {
  var queue = [];
  ngZone.onStable.subscribe(function () {
    while (queue.length) {
      queue.pop()();
    }
  });
  return function (fn) {
    queue.push(fn);
  };
}
/**
 * Configures the root injector for an app with
 * providers of `@angular/core` dependencies that `ApplicationRef` needs
 * to bootstrap components.
 *
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * @publicApi
 */


var ApplicationModule = // Inject ApplicationRef to make it eager...
function ApplicationModule(appRef) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, ApplicationModule);
};

ApplicationModule.ɵfac = function ApplicationModule_Factory(t) {
  return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));
};

ApplicationModule.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({
  type: ApplicationModule
});
ApplicationModule.ɵinj = /*@__PURE__*/ɵɵdefineInjector({
  providers: APPLICATION_MODULE_PROVIDERS
});

ApplicationModule.ctorParameters = function () {
  return [{
    type: ApplicationRef
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
    type: NgModule,
    args: [{
      providers: APPLICATION_MODULE_PROVIDERS
    }]
  }], function () {
    return [{
      type: ApplicationRef
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
  flags |= 1
  /* TypeElement */
  ;

  var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),
      matchedQueries = _splitMatchedQueriesD2.matchedQueries,
      references = _splitMatchedQueriesD2.references,
      matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;

  var template = templateFactory ? resolveDefinition(templateFactory) : null;
  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    flags: flags,
    checkIndex: -1,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: matchedQueries,
    matchedQueryIds: matchedQueryIds,
    references: references,
    ngContentIndex: ngContentIndex,
    childCount: childCount,
    bindings: [],
    bindingFlags: 0,
    outputs: [],
    element: {
      ns: null,
      name: null,
      attrs: null,
      template: template,
      componentProvider: null,
      componentView: null,
      componentRendererType: null,
      publicProviders: null,
      allProviders: null,
      handleEvent: handleEvent || NOOP
    },
    provider: null,
    text: null,
    query: null,
    ngContent: null
  };
}

function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {
  var fixedAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
  var bindings = arguments.length > 7 ? arguments[7] : undefined;
  var outputs = arguments.length > 8 ? arguments[8] : undefined;
  var handleEvent = arguments.length > 9 ? arguments[9] : undefined;
  var componentView = arguments.length > 10 ? arguments[10] : undefined;
  var componentRendererType = arguments.length > 11 ? arguments[11] : undefined;

  if (!handleEvent) {
    handleEvent = NOOP;
  }

  var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),
      matchedQueries = _splitMatchedQueriesD3.matchedQueries,
      references = _splitMatchedQueriesD3.references,
      matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;

  var ns = null;
  var name = null;

  if (namespaceAndName) {
    var _splitNamespace = splitNamespace(namespaceAndName);

    var _splitNamespace2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_splitNamespace, 2);

    ns = _splitNamespace2[0];
    name = _splitNamespace2[1];
  }

  bindings = bindings || [];
  var bindingDefs = [];

  for (var i = 0; i < bindings.length; i++) {
    var _bindings$i = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(bindings[i], 3),
        bindingFlags = _bindings$i[0],
        _namespaceAndName = _bindings$i[1],
        suffixOrSecurityContext = _bindings$i[2];

    var _splitNamespace3 = splitNamespace(_namespaceAndName),
        _splitNamespace4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_splitNamespace3, 2),
        _ns = _splitNamespace4[0],
        _name = _splitNamespace4[1];

    var securityContext = undefined;
    var suffix = undefined;

    switch (bindingFlags & 15
    /* Types */
    ) {
      case 4
      /* TypeElementStyle */
      :
        suffix = suffixOrSecurityContext;
        break;

      case 1
      /* TypeElementAttribute */
      :
      case 8
      /* TypeProperty */
      :
        securityContext = suffixOrSecurityContext;
        break;
    }

    bindingDefs[i] = {
      flags: bindingFlags,
      ns: _ns,
      name: _name,
      nonMinifiedName: _name,
      securityContext: securityContext,
      suffix: suffix
    };
  }

  outputs = outputs || [];
  var outputDefs = [];

  for (var _i11 = 0; _i11 < outputs.length; _i11++) {
    var _outputs$_i = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(outputs[_i11], 2),
        target = _outputs$_i[0],
        eventName = _outputs$_i[1];

    outputDefs[_i11] = {
      type: 0
      /* ElementOutput */
      ,
      target: target,
      eventName: eventName,
      propName: null
    };
  }

  fixedAttrs = fixedAttrs || [];
  var attrs = fixedAttrs.map(function (_ref4) {
    var _ref5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_ref4, 2),
        namespaceAndName = _ref5[0],
        value = _ref5[1];

    var _splitNamespace5 = splitNamespace(namespaceAndName),
        _splitNamespace6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(_splitNamespace5, 2),
        ns = _splitNamespace6[0],
        name = _splitNamespace6[1];

    return [ns, name, value];
  });
  componentRendererType = resolveRendererType2(componentRendererType);

  if (componentView) {
    flags |= 33554432
    /* ComponentView */
    ;
  }

  flags |= 1
  /* TypeElement */
  ;
  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    checkIndex: checkIndex,
    flags: flags,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: matchedQueries,
    matchedQueryIds: matchedQueryIds,
    references: references,
    ngContentIndex: ngContentIndex,
    childCount: childCount,
    bindings: bindingDefs,
    bindingFlags: calcBindingFlags(bindingDefs),
    outputs: outputDefs,
    element: {
      ns: ns,
      name: name,
      attrs: attrs,
      template: null,
      // will bet set by the view definition
      componentProvider: null,
      componentView: componentView || null,
      componentRendererType: componentRendererType,
      publicProviders: null,
      allProviders: null,
      handleEvent: handleEvent || NOOP
    },
    provider: null,
    text: null,
    query: null,
    ngContent: null
  };
}

function createElement(view, renderHost, def) {
  var elDef = def.element;
  var rootSelectorOrNode = view.root.selectorOrNode;
  var renderer = view.renderer;
  var el;

  if (view.parent || !rootSelectorOrNode) {
    if (elDef.name) {
      el = renderer.createElement(elDef.name, elDef.ns);
    } else {
      el = renderer.createComment('');
    }

    var parentEl = getParentRenderElement(view, renderHost, def);

    if (parentEl) {
      renderer.appendChild(parentEl, el);
    }
  } else {
    // when using native Shadow DOM, do not clear the root element contents to allow slot projection
    var preserveContent = !!elDef.componentRendererType && elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom;
    el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
  }

  if (elDef.attrs) {
    for (var i = 0; i < elDef.attrs.length; i++) {
      var _elDef$attrs$i = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__.default)(elDef.attrs[i], 3),
          ns = _elDef$attrs$i[0],
          name = _elDef$attrs$i[1],
          value = _elDef$attrs$i[2];

      renderer.setAttribute(el, name, value, ns);
    }
  }

  return el;
}

function listenToElementOutputs(view, compView, def, el) {
  for (var i = 0; i < def.outputs.length; i++) {
    var output = def.outputs[i];
    var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
    var listenTarget = output.target;
    var listenerView = view;

    if (output.target === 'component') {
      listenTarget = null;
      listenerView = compView;
    }

    var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
    view.disposables[def.outputIndex + i] = disposable;
  }
}

function renderEventHandlerClosure(view, index, eventName) {
  return function (event) {
    return dispatchEvent(view, index, eventName, event);
  };
}

function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var bindLen = def.bindings.length;
  var changed = false;
  if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
  if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
  if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
  if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
  if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
  if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
  if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
  if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
  if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
  if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
  return changed;
}

function checkAndUpdateElementDynamic(view, def, values) {
  var changed = false;

  for (var i = 0; i < values.length; i++) {
    if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
  }

  return changed;
}

function checkAndUpdateElementValue(view, def, bindingIdx, value) {
  if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
    return false;
  }

  var binding = def.bindings[bindingIdx];
  var elData = asElementData(view, def.nodeIndex);
  var renderNode = elData.renderElement;
  var name = binding.name;

  switch (binding.flags & 15
  /* Types */
  ) {
    case 1
    /* TypeElementAttribute */
    :
      setElementAttribute$1(view, binding, renderNode, binding.ns, name, value);
      break;

    case 2
    /* TypeElementClass */
    :
      setElementClass(view, renderNode, name, value);
      break;

    case 4
    /* TypeElementStyle */
    :
      setElementStyle(view, binding, renderNode, name, value);
      break;

    case 8
    /* TypeProperty */
    :
      var bindView = def.flags & 33554432
      /* ComponentView */
      && binding.flags & 32
      /* SyntheticHostProperty */
      ? elData.componentView : view;
      setElementProperty(bindView, binding, renderNode, name, value);
      break;
  }

  return true;
}

function setElementAttribute$1(view, binding, renderNode, ns, name, value) {
  var securityContext = binding.securityContext;
  var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
  renderValue = renderValue != null ? renderValue.toString() : null;
  var renderer = view.renderer;

  if (value != null) {
    renderer.setAttribute(renderNode, name, renderValue, ns);
  } else {
    renderer.removeAttribute(renderNode, name, ns);
  }
}

function setElementClass(view, renderNode, name, value) {
  var renderer = view.renderer;

  if (value) {
    renderer.addClass(renderNode, name);
  } else {
    renderer.removeClass(renderNode, name);
  }
}

function setElementStyle(view, binding, renderNode, name, value) {
  var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);

  if (renderValue != null) {
    renderValue = renderValue.toString();
    var unit = binding.suffix;

    if (unit != null) {
      renderValue = renderValue + unit;
    }
  } else {
    renderValue = null;
  }

  var renderer = view.renderer;

  if (renderValue != null) {
    renderer.setStyle(renderNode, name, renderValue);
  } else {
    renderer.removeStyle(renderNode, name);
  }
}

function setElementProperty(view, binding, renderNode, name, value) {
  var securityContext = binding.securityContext;
  var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
  view.renderer.setProperty(renderNode, name, renderValue);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function queryDef(flags, id, bindings) {
  var bindingDefs = [];

  for (var propName in bindings) {
    var bindingType = bindings[propName];
    bindingDefs.push({
      propName: propName,
      bindingType: bindingType
    });
  }

  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    // TODO(vicb): check
    checkIndex: -1,
    flags: flags,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    ngContentIndex: -1,
    matchedQueries: {},
    matchedQueryIds: 0,
    references: {},
    childCount: 0,
    bindings: [],
    bindingFlags: 0,
    outputs: [],
    element: null,
    provider: null,
    text: null,
    query: {
      id: id,
      filterId: filterQueryId(id),
      bindings: bindingDefs
    },
    ngContent: null
  };
}

function createQuery(emitDistinctChangesOnly) {
  return new QueryList(emitDistinctChangesOnly);
}

function dirtyParentQueries(view) {
  var queryIds = view.def.nodeMatchedQueries;

  while (view.parent && isEmbeddedView(view)) {
    var tplDef = view.parentNodeDef;
    view = view.parent; // content queries

    var end = tplDef.nodeIndex + tplDef.childCount;

    for (var i = 0; i <= end; i++) {
      var nodeDef = view.def.nodes[i];

      if (nodeDef.flags & 67108864
      /* TypeContentQuery */
      && nodeDef.flags & 536870912
      /* DynamicQuery */
      && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
        asQueryList(view, i).setDirty();
      }

      if (nodeDef.flags & 1
      /* TypeElement */
      && i + nodeDef.childCount < tplDef.nodeIndex || !(nodeDef.childFlags & 67108864
      /* TypeContentQuery */
      ) || !(nodeDef.childFlags & 536870912
      /* DynamicQuery */
      )) {
        // skip elements that don't contain the template element or no query.
        i += nodeDef.childCount;
      }
    }
  } // view queries


  if (view.def.nodeFlags & 134217728
  /* TypeViewQuery */
  ) {
    for (var _i12 = 0; _i12 < view.def.nodes.length; _i12++) {
      var _nodeDef = view.def.nodes[_i12];

      if (_nodeDef.flags & 134217728
      /* TypeViewQuery */
      && _nodeDef.flags & 536870912
      /* DynamicQuery */
      ) {
        asQueryList(view, _i12).setDirty();
      } // only visit the root nodes


      _i12 += _nodeDef.childCount;
    }
  }
}

function checkAndUpdateQuery(view, nodeDef) {
  var queryList = asQueryList(view, nodeDef.nodeIndex);

  if (!queryList.dirty) {
    return;
  }

  var directiveInstance;
  var newValues = undefined;

  if (nodeDef.flags & 67108864
  /* TypeContentQuery */
  ) {
    var _elementDef = nodeDef.parent.parent;
    newValues = calcQueryValues(view, _elementDef.nodeIndex, _elementDef.nodeIndex + _elementDef.childCount, nodeDef.query, []);
    directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
  } else if (nodeDef.flags & 134217728
  /* TypeViewQuery */
  ) {
    newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
    directiveInstance = view.component;
  }

  queryList.reset(newValues, unwrapElementRef);
  var bindings = nodeDef.query.bindings;
  var notify = false;

  for (var i = 0; i < bindings.length; i++) {
    var binding = bindings[i];
    var boundValue = void 0;

    switch (binding.bindingType) {
      case 0
      /* First */
      :
        boundValue = queryList.first;
        break;

      case 1
      /* All */
      :
        boundValue = queryList;
        notify = true;
        break;
    }

    directiveInstance[binding.propName] = boundValue;
  }

  if (notify) {
    queryList.notifyOnChanges();
  }
}

function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
  for (var i = startIndex; i <= endIndex; i++) {
    var nodeDef = view.def.nodes[i];
    var valueType = nodeDef.matchedQueries[queryDef.id];

    if (valueType != null) {
      values.push(getQueryValue(view, nodeDef, valueType));
    }

    if (nodeDef.flags & 1
    /* TypeElement */
    && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
      var elementData = asElementData(view, i); // check embedded views that were attached at the place of their template,
      // but process child nodes first if some match the query (see issue #16568)

      if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
        calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
        i += nodeDef.childCount;
      }

      if (nodeDef.flags & 16777216
      /* EmbeddedViews */
      ) {
        var embeddedViews = elementData.viewContainer._embeddedViews;

        for (var k = 0; k < embeddedViews.length; k++) {
          var embeddedView = embeddedViews[k];
          var dvc = declaredViewContainer(embeddedView);

          if (dvc && dvc === elementData) {
            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
          }
        }
      }

      var projectedViews = elementData.template._projectedViews;

      if (projectedViews) {
        for (var _k = 0; _k < projectedViews.length; _k++) {
          var projectedView = projectedViews[_k];
          calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
        }
      }
    }

    if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
      // if no child matches the query, skip the children.
      i += nodeDef.childCount;
    }
  }

  return values;
}

function getQueryValue(view, nodeDef, queryValueType) {
  if (queryValueType != null) {
    // a match
    switch (queryValueType) {
      case 1
      /* RenderElement */
      :
        return asElementData(view, nodeDef.nodeIndex).renderElement;

      case 0
      /* ElementRef */
      :
        return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);

      case 2
      /* TemplateRef */
      :
        return asElementData(view, nodeDef.nodeIndex).template;

      case 3
      /* ViewContainerRef */
      :
        return asElementData(view, nodeDef.nodeIndex).viewContainer;

      case 4
      /* Provider */
      :
        return asProviderData(view, nodeDef.nodeIndex).instance;
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function ngContentDef(ngContentIndex, index) {
  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    checkIndex: -1,
    flags: 8
    /* TypeNgContent */
    ,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: {},
    matchedQueryIds: 0,
    references: {},
    ngContentIndex: ngContentIndex,
    childCount: 0,
    bindings: [],
    bindingFlags: 0,
    outputs: [],
    element: null,
    provider: null,
    text: null,
    query: null,
    ngContent: {
      index: index
    }
  };
}

function appendNgContent(view, renderHost, def) {
  var parentEl = getParentRenderElement(view, renderHost, def);

  if (!parentEl) {
    // Nothing to do if there is no parent element.
    return;
  }

  var ngContentIndex = def.ngContent.index;
  visitProjectedRenderNodes(view, ngContentIndex, 1
  /* AppendChild */
  , parentEl, null, undefined);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function purePipeDef(checkIndex, argCount) {
  // argCount + 1 to include the pipe as first arg
  return _pureExpressionDef(128
  /* TypePurePipe */
  , checkIndex, newArray(argCount + 1));
}

function pureArrayDef(checkIndex, argCount) {
  return _pureExpressionDef(32
  /* TypePureArray */
  , checkIndex, newArray(argCount));
}

function pureObjectDef(checkIndex, propToIndex) {
  var keys = Object.keys(propToIndex);
  var nbKeys = keys.length;
  var propertyNames = [];

  for (var i = 0; i < nbKeys; i++) {
    var key = keys[i];
    var index = propToIndex[key];
    propertyNames.push(key);
  }

  return _pureExpressionDef(64
  /* TypePureObject */
  , checkIndex, propertyNames);
}

function _pureExpressionDef(flags, checkIndex, propertyNames) {
  var bindings = [];

  for (var i = 0; i < propertyNames.length; i++) {
    var prop = propertyNames[i];
    bindings.push({
      flags: 8
      /* TypeProperty */
      ,
      name: prop,
      ns: null,
      nonMinifiedName: prop,
      securityContext: null,
      suffix: null
    });
  }

  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    checkIndex: checkIndex,
    flags: flags,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: {},
    matchedQueryIds: 0,
    references: {},
    ngContentIndex: -1,
    childCount: 0,
    bindings: bindings,
    bindingFlags: calcBindingFlags(bindings),
    outputs: [],
    element: null,
    provider: null,
    text: null,
    query: null,
    ngContent: null
  };
}

function createPureExpression(view, def) {
  return {
    value: undefined
  };
}

function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var bindings = def.bindings;
  var changed = false;
  var bindLen = bindings.length;
  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

  if (changed) {
    var data = asPureExpressionData(view, def.nodeIndex);
    var value;

    switch (def.flags & 201347067
    /* Types */
    ) {
      case 32
      /* TypePureArray */
      :
        value = [];
        if (bindLen > 0) value.push(v0);
        if (bindLen > 1) value.push(v1);
        if (bindLen > 2) value.push(v2);
        if (bindLen > 3) value.push(v3);
        if (bindLen > 4) value.push(v4);
        if (bindLen > 5) value.push(v5);
        if (bindLen > 6) value.push(v6);
        if (bindLen > 7) value.push(v7);
        if (bindLen > 8) value.push(v8);
        if (bindLen > 9) value.push(v9);
        break;

      case 64
      /* TypePureObject */
      :
        value = {};
        if (bindLen > 0) value[bindings[0].name] = v0;
        if (bindLen > 1) value[bindings[1].name] = v1;
        if (bindLen > 2) value[bindings[2].name] = v2;
        if (bindLen > 3) value[bindings[3].name] = v3;
        if (bindLen > 4) value[bindings[4].name] = v4;
        if (bindLen > 5) value[bindings[5].name] = v5;
        if (bindLen > 6) value[bindings[6].name] = v6;
        if (bindLen > 7) value[bindings[7].name] = v7;
        if (bindLen > 8) value[bindings[8].name] = v8;
        if (bindLen > 9) value[bindings[9].name] = v9;
        break;

      case 128
      /* TypePurePipe */
      :
        var pipe = v0;

        switch (bindLen) {
          case 1:
            value = pipe.transform(v0);
            break;

          case 2:
            value = pipe.transform(v1);
            break;

          case 3:
            value = pipe.transform(v1, v2);
            break;

          case 4:
            value = pipe.transform(v1, v2, v3);
            break;

          case 5:
            value = pipe.transform(v1, v2, v3, v4);
            break;

          case 6:
            value = pipe.transform(v1, v2, v3, v4, v5);
            break;

          case 7:
            value = pipe.transform(v1, v2, v3, v4, v5, v6);
            break;

          case 8:
            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
            break;

          case 9:
            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
            break;

          case 10:
            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        }

        break;
    }

    data.value = value;
  }

  return changed;
}

function checkAndUpdatePureExpressionDynamic(view, def, values) {
  var bindings = def.bindings;
  var changed = false;

  for (var i = 0; i < values.length; i++) {
    // Note: We need to loop over all values, so that
    // the old values are updates as well!
    if (checkAndUpdateBinding(view, def, i, values[i])) {
      changed = true;
    }
  }

  if (changed) {
    var data = asPureExpressionData(view, def.nodeIndex);
    var value;

    switch (def.flags & 201347067
    /* Types */
    ) {
      case 32
      /* TypePureArray */
      :
        value = values;
        break;

      case 64
      /* TypePureObject */
      :
        value = {};

        for (var _i13 = 0; _i13 < values.length; _i13++) {
          value[bindings[_i13].name] = values[_i13];
        }

        break;

      case 128
      /* TypePurePipe */
      :
        var pipe = values[0];
        var params = values.slice(1);
        value = pipe.transform.apply(pipe, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(params));
        break;
    }

    data.value = value;
  }

  return changed;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function textDef(checkIndex, ngContentIndex, staticText) {
  var bindings = [];

  for (var i = 1; i < staticText.length; i++) {
    bindings[i - 1] = {
      flags: 8
      /* TypeProperty */
      ,
      name: null,
      ns: null,
      nonMinifiedName: null,
      securityContext: null,
      suffix: staticText[i]
    };
  }

  return {
    // will bet set by the view definition
    nodeIndex: -1,
    parent: null,
    renderParent: null,
    bindingIndex: -1,
    outputIndex: -1,
    // regular values
    checkIndex: checkIndex,
    flags: 2
    /* TypeText */
    ,
    childFlags: 0,
    directChildFlags: 0,
    childMatchedQueries: 0,
    matchedQueries: {},
    matchedQueryIds: 0,
    references: {},
    ngContentIndex: ngContentIndex,
    childCount: 0,
    bindings: bindings,
    bindingFlags: 8
    /* TypeProperty */
    ,
    outputs: [],
    element: null,
    provider: null,
    text: {
      prefix: staticText[0]
    },
    query: null,
    ngContent: null
  };
}

function createText(view, renderHost, def) {
  var renderNode;
  var renderer = view.renderer;
  renderNode = renderer.createText(def.text.prefix);
  var parentEl = getParentRenderElement(view, renderHost, def);

  if (parentEl) {
    renderer.appendChild(parentEl, renderNode);
  }

  return {
    renderText: renderNode
  };
}

function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var changed = false;
  var bindings = def.bindings;
  var bindLen = bindings.length;
  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

  if (changed) {
    var value = def.text.prefix;
    if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
    if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
    if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
    if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
    if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
    if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
    if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
    if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
    if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
    if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
    var _renderNode = asTextData(view, def.nodeIndex).renderText;
    view.renderer.setValue(_renderNode, value);
  }

  return changed;
}

function checkAndUpdateTextDynamic(view, def, values) {
  var bindings = def.bindings;
  var changed = false;

  for (var i = 0; i < values.length; i++) {
    // Note: We need to loop over all values, so that
    // the old values are updates as well!
    if (checkAndUpdateBinding(view, def, i, values[i])) {
      changed = true;
    }
  }

  if (changed) {
    var value = '';

    for (var _i14 = 0; _i14 < values.length; _i14++) {
      value = value + _addInterpolationPart(values[_i14], bindings[_i14]);
    }

    value = def.text.prefix + value;
    var _renderNode2 = asTextData(view, def.nodeIndex).renderText;
    view.renderer.setValue(_renderNode2, value);
  }

  return changed;
}

function _addInterpolationPart(value, binding) {
  var valueStr = value != null ? value.toString() : '';
  return valueStr + binding.suffix;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function viewDef(flags, nodes, updateDirectives, updateRenderer) {
  // clone nodes and set auto calculated values
  var viewBindingCount = 0;
  var viewDisposableCount = 0;
  var viewNodeFlags = 0;
  var viewRootNodeFlags = 0;
  var viewMatchedQueries = 0;
  var currentParent = null;
  var currentRenderParent = null;
  var currentElementHasPublicProviders = false;
  var currentElementHasPrivateProviders = false;
  var lastRenderRootNode = null;

  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    node.nodeIndex = i;
    node.parent = currentParent;
    node.bindingIndex = viewBindingCount;
    node.outputIndex = viewDisposableCount;
    node.renderParent = currentRenderParent;
    viewNodeFlags |= node.flags;
    viewMatchedQueries |= node.matchedQueryIds;

    if (node.element) {
      var elDef = node.element;
      elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
      elDef.allProviders = elDef.publicProviders; // Note: We assume that all providers of an element are before any child element!

      currentElementHasPublicProviders = false;
      currentElementHasPrivateProviders = false;

      if (node.element.template) {
        viewMatchedQueries |= node.element.template.nodeMatchedQueries;
      }
    }

    validateNode(currentParent, node, nodes.length);
    viewBindingCount += node.bindings.length;
    viewDisposableCount += node.outputs.length;

    if (!currentRenderParent && node.flags & 3
    /* CatRenderNode */
    ) {
      lastRenderRootNode = node;
    }

    if (node.flags & 20224
    /* CatProvider */
    ) {
      if (!currentElementHasPublicProviders) {
        currentElementHasPublicProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

        currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
        currentParent.element.allProviders = currentParent.element.publicProviders;
      }

      var isPrivateService = (node.flags & 8192
      /* PrivateProvider */
      ) !== 0;
      var isComponent = (node.flags & 32768
      /* Component */
      ) !== 0;

      if (!isPrivateService || isComponent) {
        currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
      } else {
        if (!currentElementHasPrivateProviders) {
          currentElementHasPrivateProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

          currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
        }

        currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
      }

      if (isComponent) {
        currentParent.element.componentProvider = node;
      }
    }

    if (currentParent) {
      currentParent.childFlags |= node.flags;
      currentParent.directChildFlags |= node.flags;
      currentParent.childMatchedQueries |= node.matchedQueryIds;

      if (node.element && node.element.template) {
        currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
      }
    } else {
      viewRootNodeFlags |= node.flags;
    }

    if (node.childCount > 0) {
      currentParent = node;

      if (!isNgContainer(node)) {
        currentRenderParent = node;
      }
    } else {
      // When the current node has no children, check if it is the last children of its parent.
      // When it is, propagate the flags up.
      // The loop is required because an element could be the last transitive children of several
      // elements. We loop to either the root or the highest opened element (= with remaining
      // children)
      while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
        var newParent = currentParent.parent;

        if (newParent) {
          newParent.childFlags |= currentParent.childFlags;
          newParent.childMatchedQueries |= currentParent.childMatchedQueries;
        }

        currentParent = newParent; // We also need to update the render parent & account for ng-container

        if (currentParent && isNgContainer(currentParent)) {
          currentRenderParent = currentParent.renderParent;
        } else {
          currentRenderParent = currentParent;
        }
      }
    }
  }

  var handleEvent = function handleEvent(view, nodeIndex, eventName, event) {
    return nodes[nodeIndex].element.handleEvent(view, eventName, event);
  };

  return {
    // Will be filled later...
    factory: null,
    nodeFlags: viewNodeFlags,
    rootNodeFlags: viewRootNodeFlags,
    nodeMatchedQueries: viewMatchedQueries,
    flags: flags,
    nodes: nodes,
    updateDirectives: updateDirectives || NOOP,
    updateRenderer: updateRenderer || NOOP,
    handleEvent: handleEvent,
    bindingCount: viewBindingCount,
    outputCount: viewDisposableCount,
    lastRenderRootNode: lastRenderRootNode
  };
}

function isNgContainer(node) {
  return (node.flags & 1
  /* TypeElement */
  ) !== 0 && node.element.name === null;
}

function validateNode(parent, node, nodeCount) {
  var template = node.element && node.element.template;

  if (template) {
    if (!template.lastRenderRootNode) {
      throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
    }

    if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 16777216
    /* EmbeddedViews */
    ) {
      throw new Error("Illegal State: Last root node of a template can't have embedded views, at index ".concat(node.nodeIndex, "!"));
    }
  }

  if (node.flags & 20224
  /* CatProvider */
  ) {
    var parentFlags = parent ? parent.flags : 0;

    if ((parentFlags & 1
    /* TypeElement */
    ) === 0) {
      throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ".concat(node.nodeIndex, "!"));
    }
  }

  if (node.query) {
    if (node.flags & 67108864
    /* TypeContentQuery */
    && (!parent || (parent.flags & 16384
    /* TypeDirective */
    ) === 0)) {
      throw new Error("Illegal State: Content Query nodes need to be children of directives, at index ".concat(node.nodeIndex, "!"));
    }

    if (node.flags & 134217728
    /* TypeViewQuery */
    && parent) {
      throw new Error("Illegal State: View Query nodes have to be top level nodes, at index ".concat(node.nodeIndex, "!"));
    }
  }

  if (node.childCount) {
    var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;

    if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
      throw new Error("Illegal State: childCount of node leads outside of parent, at index ".concat(node.nodeIndex, "!"));
    }
  }
}

function createEmbeddedView(parent, anchorDef, viewDef, context) {
  // embedded views are seen as siblings to the anchor, so we need
  // to get the parent of the anchor and use it as parentIndex.
  var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
  initView(view, parent.component, context);
  createViewNodes(view);
  return view;
}

function createRootView(root, def, context) {
  var view = createView(root, root.renderer, null, null, def);
  initView(view, context, context);
  createViewNodes(view);
  return view;
}

function createComponentView(parentView, nodeDef, viewDef, hostElement) {
  var rendererType = nodeDef.element.componentRendererType;
  var compRenderer;

  if (!rendererType) {
    compRenderer = parentView.root.renderer;
  } else {
    compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
  }

  return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
}

function createView(root, renderer, parent, parentNodeDef, def) {
  var nodes = new Array(def.nodes.length);
  var disposables = def.outputCount ? new Array(def.outputCount) : null;
  var view = {
    def: def,
    parent: parent,
    viewContainerParent: null,
    parentNodeDef: parentNodeDef,
    context: null,
    component: null,
    nodes: nodes,
    state: 13
    /* CatInit */
    ,
    root: root,
    renderer: renderer,
    oldValues: new Array(def.bindingCount),
    disposables: disposables,
    initIndex: -1
  };
  return view;
}

function initView(view, component, context) {
  view.component = component;
  view.context = context;
}

function createViewNodes(view) {
  var renderHost;

  if (isComponentView(view)) {
    var hostDef = view.parentNodeDef;
    renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
  }

  var def = view.def;
  var nodes = view.nodes;

  for (var i = 0; i < def.nodes.length; i++) {
    var nodeDef = def.nodes[i];
    Services.setCurrentNode(view, i);
    var nodeData = void 0;

    switch (nodeDef.flags & 201347067
    /* Types */
    ) {
      case 1
      /* TypeElement */
      :
        var el = createElement(view, renderHost, nodeDef);
        var componentView = undefined;

        if (nodeDef.flags & 33554432
        /* ComponentView */
        ) {
          var compViewDef = resolveDefinition(nodeDef.element.componentView);
          componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
        }

        listenToElementOutputs(view, componentView, nodeDef, el);
        nodeData = {
          renderElement: el,
          componentView: componentView,
          viewContainer: null,
          template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
        };

        if (nodeDef.flags & 16777216
        /* EmbeddedViews */
        ) {
          nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
        }

        break;

      case 2
      /* TypeText */
      :
        nodeData = createText(view, renderHost, nodeDef);
        break;

      case 512
      /* TypeClassProvider */
      :
      case 1024
      /* TypeFactoryProvider */
      :
      case 2048
      /* TypeUseExistingProvider */
      :
      case 256
      /* TypeValueProvider */
      :
        {
          nodeData = nodes[i];

          if (!nodeData && !(nodeDef.flags & 4096
          /* LazyProvider */
          )) {
            var instance = createProviderInstance(view, nodeDef);
            nodeData = {
              instance: instance
            };
          }

          break;
        }

      case 16
      /* TypePipe */
      :
        {
          var _instance = createPipeInstance(view, nodeDef);

          nodeData = {
            instance: _instance
          };
          break;
        }

      case 16384
      /* TypeDirective */
      :
        {
          nodeData = nodes[i];

          if (!nodeData) {
            var _instance2 = createDirectiveInstance(view, nodeDef);

            nodeData = {
              instance: _instance2
            };
          }

          if (nodeDef.flags & 32768
          /* Component */
          ) {
            var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
            initView(compView, nodeData.instance, nodeData.instance);
          }

          break;
        }

      case 32
      /* TypePureArray */
      :
      case 64
      /* TypePureObject */
      :
      case 128
      /* TypePurePipe */
      :
        nodeData = createPureExpression(view, nodeDef);
        break;

      case 67108864
      /* TypeContentQuery */
      :
      case 134217728
      /* TypeViewQuery */
      :
        nodeData = createQuery((nodeDef.flags & -2147483648
        /* EmitDistinctChangesOnly */
        ) === -2147483648
        /* EmitDistinctChangesOnly */
        );
        break;

      case 8
      /* TypeNgContent */
      :
        appendNgContent(view, renderHost, nodeDef); // no runtime data needed for NgContent...

        nodeData = undefined;
        break;
    }

    nodes[i] = nodeData;
  } // Create the ViewData.nodes of component views after we created everything else,
  // so that e.g. ng-content works


  execComponentViewsAction(view, ViewAction.CreateViewNodes); // fill static content and view queries

  execQueriesAction(view, 67108864
  /* TypeContentQuery */
  | 134217728
  /* TypeViewQuery */
  , 268435456
  /* StaticQuery */
  , 0
  /* CheckAndUpdate */
  );
}

function checkNoChangesView(view) {
  markProjectedViewsForCheck(view);
  Services.updateDirectives(view, 1
  /* CheckNoChanges */
  );
  execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
  Services.updateRenderer(view, 1
  /* CheckNoChanges */
  );
  execComponentViewsAction(view, ViewAction.CheckNoChanges); // Note: We don't check queries for changes as we didn't do this in v2.x.
  // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.

  view.state &= ~(64
  /* CheckProjectedViews */
  | 32
  /* CheckProjectedView */
  );
}

function checkAndUpdateView(view) {
  if (view.state & 1
  /* BeforeFirstCheck */
  ) {
    view.state &= ~1
    /* BeforeFirstCheck */
    ;
    view.state |= 2
    /* FirstCheck */
    ;
  } else {
    view.state &= ~2
    /* FirstCheck */
    ;
  }

  shiftInitState(view, 0
  /* InitState_BeforeInit */
  , 256
  /* InitState_CallingOnInit */
  );
  markProjectedViewsForCheck(view);
  Services.updateDirectives(view, 0
  /* CheckAndUpdate */
  );
  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
  execQueriesAction(view, 67108864
  /* TypeContentQuery */
  , 536870912
  /* DynamicQuery */
  , 0
  /* CheckAndUpdate */
  );
  var callInit = shiftInitState(view, 256
  /* InitState_CallingOnInit */
  , 512
  /* InitState_CallingAfterContentInit */
  );
  callLifecycleHooksChildrenFirst(view, 2097152
  /* AfterContentChecked */
  | (callInit ? 1048576
  /* AfterContentInit */
  : 0));
  Services.updateRenderer(view, 0
  /* CheckAndUpdate */
  );
  execComponentViewsAction(view, ViewAction.CheckAndUpdate);
  execQueriesAction(view, 134217728
  /* TypeViewQuery */
  , 536870912
  /* DynamicQuery */
  , 0
  /* CheckAndUpdate */
  );
  callInit = shiftInitState(view, 512
  /* InitState_CallingAfterContentInit */
  , 768
  /* InitState_CallingAfterViewInit */
  );
  callLifecycleHooksChildrenFirst(view, 8388608
  /* AfterViewChecked */
  | (callInit ? 4194304
  /* AfterViewInit */
  : 0));

  if (view.def.flags & 2
  /* OnPush */
  ) {
    view.state &= ~8
    /* ChecksEnabled */
    ;
  }

  view.state &= ~(64
  /* CheckProjectedViews */
  | 32
  /* CheckProjectedView */
  );
  shiftInitState(view, 768
  /* InitState_CallingAfterViewInit */
  , 1024
  /* InitState_AfterInit */
  );
}

function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  if (argStyle === 0
  /* Inline */
  ) {
    return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  } else {
    return checkAndUpdateNodeDynamic(view, nodeDef, v0);
  }
}

function markProjectedViewsForCheck(view) {
  var def = view.def;

  if (!(def.nodeFlags & 4
  /* ProjectedTemplate */
  )) {
    return;
  }

  for (var i = 0; i < def.nodes.length; i++) {
    var nodeDef = def.nodes[i];

    if (nodeDef.flags & 4
    /* ProjectedTemplate */
    ) {
      var projectedViews = asElementData(view, i).template._projectedViews;

      if (projectedViews) {
        for (var _i15 = 0; _i15 < projectedViews.length; _i15++) {
          var projectedView = projectedViews[_i15];
          projectedView.state |= 32
          /* CheckProjectedView */
          ;
          markParentViewsForCheckProjectedViews(projectedView, view);
        }
      }
    } else if ((nodeDef.childFlags & 4
    /* ProjectedTemplate */
    ) === 0) {
      // a parent with leafs
      // no child is a component,
      // then skip the children
      i += nodeDef.childCount;
    }
  }
}

function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  switch (nodeDef.flags & 201347067
  /* Types */
  ) {
    case 1
    /* TypeElement */
    :
      return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

    case 2
    /* TypeText */
    :
      return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

    case 16384
    /* TypeDirective */
    :
      return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

    case 32
    /* TypePureArray */
    :
    case 64
    /* TypePureObject */
    :
    case 128
    /* TypePurePipe */
    :
      return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

    default:
      throw 'unreachable';
  }
}

function checkAndUpdateNodeDynamic(view, nodeDef, values) {
  switch (nodeDef.flags & 201347067
  /* Types */
  ) {
    case 1
    /* TypeElement */
    :
      return checkAndUpdateElementDynamic(view, nodeDef, values);

    case 2
    /* TypeText */
    :
      return checkAndUpdateTextDynamic(view, nodeDef, values);

    case 16384
    /* TypeDirective */
    :
      return checkAndUpdateDirectiveDynamic(view, nodeDef, values);

    case 32
    /* TypePureArray */
    :
    case 64
    /* TypePureObject */
    :
    case 128
    /* TypePurePipe */
    :
      return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);

    default:
      throw 'unreachable';
  }
}

function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  if (argStyle === 0
  /* Inline */
  ) {
    checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  } else {
    checkNoChangesNodeDynamic(view, nodeDef, v0);
  } // Returning false is ok here as we would have thrown in case of a change.


  return false;
}

function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var bindLen = nodeDef.bindings.length;
  if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
  if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
  if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
  if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
  if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
  if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
  if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
  if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
  if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
  if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
}

function checkNoChangesNodeDynamic(view, nodeDef, values) {
  for (var i = 0; i < values.length; i++) {
    checkBindingNoChanges(view, nodeDef, i, values[i]);
  }
}
/**
 * Workaround https://github.com/angular/tsickle/issues/497
 * @suppress {misplacedTypeAnnotation}
 */


function checkNoChangesQuery(view, nodeDef) {
  var queryList = asQueryList(view, nodeDef.nodeIndex);

  if (queryList.dirty) {
    throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query ".concat(nodeDef.query.id, " not dirty"), "Query ".concat(nodeDef.query.id, " dirty"), (view.state & 1
    /* BeforeFirstCheck */
    ) !== 0);
  }
}

function destroyView(view) {
  if (view.state & 128
  /* Destroyed */
  ) {
    return;
  }

  execEmbeddedViewsAction(view, ViewAction.Destroy);
  execComponentViewsAction(view, ViewAction.Destroy);
  callLifecycleHooksChildrenFirst(view, 131072
  /* OnDestroy */
  );

  if (view.disposables) {
    for (var i = 0; i < view.disposables.length; i++) {
      view.disposables[i]();
    }
  }

  detachProjectedView(view);

  if (view.renderer.destroyNode) {
    destroyViewNodes(view);
  }

  if (isComponentView(view)) {
    view.renderer.destroy();
  }

  view.state |= 128
  /* Destroyed */
  ;
}

function destroyViewNodes(view) {
  var len = view.def.nodes.length;

  for (var i = 0; i < len; i++) {
    var def = view.def.nodes[i];

    if (def.flags & 1
    /* TypeElement */
    ) {
      view.renderer.destroyNode(asElementData(view, i).renderElement);
    } else if (def.flags & 2
    /* TypeText */
    ) {
      view.renderer.destroyNode(asTextData(view, i).renderText);
    } else if (def.flags & 67108864
    /* TypeContentQuery */
    || def.flags & 134217728
    /* TypeViewQuery */
    ) {
      asQueryList(view, i).destroy();
    }
  }
}

var ViewAction;

(function (ViewAction) {
  ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
  ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
  ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
  ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
  ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
  ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
})(ViewAction || (ViewAction = {}));

function execComponentViewsAction(view, action) {
  var def = view.def;

  if (!(def.nodeFlags & 33554432
  /* ComponentView */
  )) {
    return;
  }

  for (var i = 0; i < def.nodes.length; i++) {
    var nodeDef = def.nodes[i];

    if (nodeDef.flags & 33554432
    /* ComponentView */
    ) {
      // a leaf
      callViewAction(asElementData(view, i).componentView, action);
    } else if ((nodeDef.childFlags & 33554432
    /* ComponentView */
    ) === 0) {
      // a parent with leafs
      // no child is a component,
      // then skip the children
      i += nodeDef.childCount;
    }
  }
}

function execEmbeddedViewsAction(view, action) {
  var def = view.def;

  if (!(def.nodeFlags & 16777216
  /* EmbeddedViews */
  )) {
    return;
  }

  for (var i = 0; i < def.nodes.length; i++) {
    var nodeDef = def.nodes[i];

    if (nodeDef.flags & 16777216
    /* EmbeddedViews */
    ) {
      // a leaf
      var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;

      for (var k = 0; k < embeddedViews.length; k++) {
        callViewAction(embeddedViews[k], action);
      }
    } else if ((nodeDef.childFlags & 16777216
    /* EmbeddedViews */
    ) === 0) {
      // a parent with leafs
      // no child is a component,
      // then skip the children
      i += nodeDef.childCount;
    }
  }
}

function callViewAction(view, action) {
  var viewState = view.state;

  switch (action) {
    case ViewAction.CheckNoChanges:
      if ((viewState & 128
      /* Destroyed */
      ) === 0) {
        if ((viewState & 12
        /* CatDetectChanges */
        ) === 12
        /* CatDetectChanges */
        ) {
          checkNoChangesView(view);
        } else if (viewState & 64
        /* CheckProjectedViews */
        ) {
          execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
        }
      }

      break;

    case ViewAction.CheckNoChangesProjectedViews:
      if ((viewState & 128
      /* Destroyed */
      ) === 0) {
        if (viewState & 32
        /* CheckProjectedView */
        ) {
          checkNoChangesView(view);
        } else if (viewState & 64
        /* CheckProjectedViews */
        ) {
          execProjectedViewsAction(view, action);
        }
      }

      break;

    case ViewAction.CheckAndUpdate:
      if ((viewState & 128
      /* Destroyed */
      ) === 0) {
        if ((viewState & 12
        /* CatDetectChanges */
        ) === 12
        /* CatDetectChanges */
        ) {
          checkAndUpdateView(view);
        } else if (viewState & 64
        /* CheckProjectedViews */
        ) {
          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
        }
      }

      break;

    case ViewAction.CheckAndUpdateProjectedViews:
      if ((viewState & 128
      /* Destroyed */
      ) === 0) {
        if (viewState & 32
        /* CheckProjectedView */
        ) {
          checkAndUpdateView(view);
        } else if (viewState & 64
        /* CheckProjectedViews */
        ) {
          execProjectedViewsAction(view, action);
        }
      }

      break;

    case ViewAction.Destroy:
      // Note: destroyView recurses over all views,
      // so we don't need to special case projected views here.
      destroyView(view);
      break;

    case ViewAction.CreateViewNodes:
      createViewNodes(view);
      break;
  }
}

function execProjectedViewsAction(view, action) {
  execEmbeddedViewsAction(view, action);
  execComponentViewsAction(view, action);
}

function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
  if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
    return;
  }

  var nodeCount = view.def.nodes.length;

  for (var i = 0; i < nodeCount; i++) {
    var nodeDef = view.def.nodes[i];

    if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
      Services.setCurrentNode(view, nodeDef.nodeIndex);

      switch (checkType) {
        case 0
        /* CheckAndUpdate */
        :
          checkAndUpdateQuery(view, nodeDef);
          break;

        case 1
        /* CheckNoChanges */
        :
          checkNoChangesQuery(view, nodeDef);
          break;
      }
    }

    if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
      // no child has a matching query
      // then skip the children
      i += nodeDef.childCount;
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var initialized = false;

function initServicesIfNeeded() {
  if (initialized) {
    return;
  }

  initialized = true;
  var services = isDevMode() ? createDebugServices() : createProdServices();
  Services.setCurrentNode = services.setCurrentNode;
  Services.createRootView = services.createRootView;
  Services.createEmbeddedView = services.createEmbeddedView;
  Services.createComponentView = services.createComponentView;
  Services.createNgModuleRef = services.createNgModuleRef;
  Services.overrideProvider = services.overrideProvider;
  Services.overrideComponentView = services.overrideComponentView;
  Services.clearOverrides = services.clearOverrides;
  Services.checkAndUpdateView = services.checkAndUpdateView;
  Services.checkNoChangesView = services.checkNoChangesView;
  Services.destroyView = services.destroyView;
  Services.resolveDep = resolveDep;
  Services.createDebugContext = services.createDebugContext;
  Services.handleEvent = services.handleEvent;
  Services.updateDirectives = services.updateDirectives;
  Services.updateRenderer = services.updateRenderer;
  Services.dirtyParentQueries = dirtyParentQueries;
}

function createProdServices() {
  return {
    setCurrentNode: function setCurrentNode() {},
    createRootView: createProdRootView,
    createEmbeddedView: createEmbeddedView,
    createComponentView: createComponentView,
    createNgModuleRef: createNgModuleRef,
    overrideProvider: NOOP,
    overrideComponentView: NOOP,
    clearOverrides: NOOP,
    checkAndUpdateView: checkAndUpdateView,
    checkNoChangesView: checkNoChangesView,
    destroyView: destroyView,
    createDebugContext: function createDebugContext(view, nodeIndex) {
      return new DebugContext_(view, nodeIndex);
    },
    handleEvent: function handleEvent(view, nodeIndex, eventName, event) {
      return view.def.handleEvent(view, nodeIndex, eventName, event);
    },
    updateDirectives: function updateDirectives(view, checkType) {
      return view.def.updateDirectives(checkType === 0
      /* CheckAndUpdate */
      ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
    },
    updateRenderer: function updateRenderer(view, checkType) {
      return view.def.updateRenderer(checkType === 0
      /* CheckAndUpdate */
      ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
    }
  };
}

function createDebugServices() {
  return {
    setCurrentNode: debugSetCurrentNode,
    createRootView: debugCreateRootView,
    createEmbeddedView: debugCreateEmbeddedView,
    createComponentView: debugCreateComponentView,
    createNgModuleRef: debugCreateNgModuleRef,
    overrideProvider: debugOverrideProvider,
    overrideComponentView: debugOverrideComponentView,
    clearOverrides: debugClearOverrides,
    checkAndUpdateView: debugCheckAndUpdateView,
    checkNoChangesView: debugCheckNoChangesView,
    destroyView: debugDestroyView,
    createDebugContext: function createDebugContext(view, nodeIndex) {
      return new DebugContext_(view, nodeIndex);
    },
    handleEvent: debugHandleEvent,
    updateDirectives: debugUpdateDirectives,
    updateRenderer: debugUpdateRenderer
  };
}

function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
  var rendererFactory = ngModule.injector.get(RendererFactory2);
  return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}

function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
  var rendererFactory = ngModule.injector.get(RendererFactory2);
  var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
  var defWithOverride = applyProviderOverridesToView(def);
  return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
}

function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
  var sanitizer = ngModule.injector.get(Sanitizer);
  var errorHandler = ngModule.injector.get(ErrorHandler);
  var renderer = rendererFactory.createRenderer(null, null);
  return {
    ngModule: ngModule,
    injector: elInjector,
    projectableNodes: projectableNodes,
    selectorOrNode: rootSelectorOrNode,
    sanitizer: sanitizer,
    rendererFactory: rendererFactory,
    renderer: renderer,
    errorHandler: errorHandler
  };
}

function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
  var defWithOverride = applyProviderOverridesToView(viewDef);
  return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
}

function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
  var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);

  if (overrideComponentView) {
    viewDef = overrideComponentView;
  } else {
    viewDef = applyProviderOverridesToView(viewDef);
  }

  return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
}

function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
  var defWithOverride = applyProviderOverridesToNgModule(def);
  return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
}

var providerOverrides = new Map();
var providerOverridesWithScope = new Map();
var viewDefOverrides = new Map();

function debugOverrideProvider(override) {
  providerOverrides.set(override.token, override);
  var injectableDef;

  if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) && typeof injectableDef.providedIn === 'function') {
    providerOverridesWithScope.set(override.token, override);
  }
}

function debugOverrideComponentView(comp, compFactory) {
  var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
  var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
  viewDefOverrides.set(comp, compViewDef);
}

function debugClearOverrides() {
  providerOverrides.clear();
  providerOverridesWithScope.clear();
  viewDefOverrides.clear();
} // Notes about the algorithm:
// 1) Locate the providers of an element and check if one of them was overwritten
// 2) Change the providers of that element
//
// We only create new data structures if we need to, to keep perf impact
// reasonable.


function applyProviderOverridesToView(def) {
  if (providerOverrides.size === 0) {
    return def;
  }

  var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);

  if (elementIndicesWithOverwrittenProviders.length === 0) {
    return def;
  } // clone the whole view definition,
  // as it maintains references between the nodes that are hard to update.


  def = def.factory(function () {
    return NOOP;
  });

  for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
    applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
  }

  return def;

  function findElementIndicesWithOverwrittenProviders(def) {
    var elIndicesWithOverwrittenProviders = [];
    var lastElementDef = null;

    for (var _i16 = 0; _i16 < def.nodes.length; _i16++) {
      var nodeDef = def.nodes[_i16];

      if (nodeDef.flags & 1
      /* TypeElement */
      ) {
        lastElementDef = nodeDef;
      }

      if (lastElementDef && nodeDef.flags & 3840
      /* CatProviderNoDirective */
      && providerOverrides.has(nodeDef.provider.token)) {
        elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
        lastElementDef = null;
      }
    }

    return elIndicesWithOverwrittenProviders;
  }

  function applyProviderOverridesToElement(viewDef, elIndex) {
    for (var _i17 = elIndex + 1; _i17 < viewDef.nodes.length; _i17++) {
      var nodeDef = viewDef.nodes[_i17];

      if (nodeDef.flags & 1
      /* TypeElement */
      ) {
        // stop at the next element
        return;
      }

      if (nodeDef.flags & 3840
      /* CatProviderNoDirective */
      ) {
        var provider = nodeDef.provider;
        var override = providerOverrides.get(provider.token);

        if (override) {
          nodeDef.flags = nodeDef.flags & ~3840
          /* CatProviderNoDirective */
          | override.flags;
          provider.deps = splitDepsDsl(override.deps);
          provider.value = override.value;
        }
      }
    }
  }
} // Notes about the algorithm:
// We only create new data structures if we need to, to keep perf impact
// reasonable.


function applyProviderOverridesToNgModule(def) {
  var _calcHasOverrides = calcHasOverrides(def),
      hasOverrides = _calcHasOverrides.hasOverrides,
      hasDeprecatedOverrides = _calcHasOverrides.hasDeprecatedOverrides;

  if (!hasOverrides) {
    return def;
  } // clone the whole view definition,
  // as it maintains references between the nodes that are hard to update.


  def = def.factory(function () {
    return NOOP;
  });
  applyProviderOverrides(def);
  return def;

  function calcHasOverrides(def) {
    var hasOverrides = false;
    var hasDeprecatedOverrides = false;

    if (providerOverrides.size === 0) {
      return {
        hasOverrides: hasOverrides,
        hasDeprecatedOverrides: hasDeprecatedOverrides
      };
    }

    def.providers.forEach(function (node) {
      var override = providerOverrides.get(node.token);

      if (node.flags & 3840
      /* CatProviderNoDirective */
      && override) {
        hasOverrides = true;
        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
      }
    });
    def.modules.forEach(function (module) {
      providerOverridesWithScope.forEach(function (override, token) {
        if (resolveForwardRef(getInjectableDef(token).providedIn) === module) {
          hasOverrides = true;
          hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
        }
      });
    });
    return {
      hasOverrides: hasOverrides,
      hasDeprecatedOverrides: hasDeprecatedOverrides
    };
  }

  function applyProviderOverrides(def) {
    for (var i = 0; i < def.providers.length; i++) {
      var provider = def.providers[i];

      if (hasDeprecatedOverrides) {
        // We had a bug where me made
        // all providers lazy. Keep this logic behind a flag
        // for migrating existing users.
        provider.flags |= 4096
        /* LazyProvider */
        ;
      }

      var override = providerOverrides.get(provider.token);

      if (override) {
        provider.flags = provider.flags & ~3840
        /* CatProviderNoDirective */
        | override.flags;
        provider.deps = splitDepsDsl(override.deps);
        provider.value = override.value;
      }
    }

    if (providerOverridesWithScope.size > 0) {
      var moduleSet = new Set(def.modules);
      providerOverridesWithScope.forEach(function (override, token) {
        if (moduleSet.has(resolveForwardRef(getInjectableDef(token).providedIn))) {
          var _provider = {
            token: token,
            flags: override.flags | (hasDeprecatedOverrides ? 4096
            /* LazyProvider */
            : 0
            /* None */
            ),
            deps: splitDepsDsl(override.deps),
            value: override.value,
            index: def.providers.length
          };
          def.providers.push(_provider);
          def.providersByKey[tokenKey(token)] = _provider;
        }
      });
    }
  }
}

function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var nodeDef = view.def.nodes[checkIndex];
  checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  return nodeDef.flags & 224
  /* CatPureExpression */
  ? asPureExpressionData(view, checkIndex).value : undefined;
}

function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
  var nodeDef = view.def.nodes[checkIndex];
  checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  return nodeDef.flags & 224
  /* CatPureExpression */
  ? asPureExpressionData(view, checkIndex).value : undefined;
}

function debugCheckAndUpdateView(view) {
  return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
}

function debugCheckNoChangesView(view) {
  return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
}

function debugDestroyView(view) {
  return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
}

var DebugAction;

(function (DebugAction) {
  DebugAction[DebugAction["create"] = 0] = "create";
  DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
  DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
  DebugAction[DebugAction["destroy"] = 3] = "destroy";
  DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
})(DebugAction || (DebugAction = {}));

var _currentAction;

var _currentView;

var _currentNodeIndex;

function debugSetCurrentNode(view, nodeIndex) {
  _currentView = view;
  _currentNodeIndex = nodeIndex;
}

function debugHandleEvent(view, nodeIndex, eventName, event) {
  debugSetCurrentNode(view, nodeIndex);
  return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
}

function debugUpdateDirectives(view, checkType) {
  if (view.state & 128
  /* Destroyed */
  ) {
    throw viewDestroyedError(DebugAction[_currentAction]);
  }

  debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
  return view.def.updateDirectives(debugCheckDirectivesFn, view);

  function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
    var nodeDef = view.def.nodes[nodeIndex];

    for (var _len11 = arguments.length, values = new Array(_len11 > 3 ? _len11 - 3 : 0), _key11 = 3; _key11 < _len11; _key11++) {
      values[_key11 - 3] = arguments[_key11];
    }

    if (checkType === 0
    /* CheckAndUpdate */
    ) {
      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
    } else {
      debugCheckNoChangesNode(view, nodeDef, argStyle, values);
    }

    if (nodeDef.flags & 16384
    /* TypeDirective */
    ) {
      debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
    }

    return nodeDef.flags & 224
    /* CatPureExpression */
    ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
  }
}

function debugUpdateRenderer(view, checkType) {
  if (view.state & 128
  /* Destroyed */
  ) {
    throw viewDestroyedError(DebugAction[_currentAction]);
  }

  debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
  return view.def.updateRenderer(debugCheckRenderNodeFn, view);

  function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
    var nodeDef = view.def.nodes[nodeIndex];

    for (var _len12 = arguments.length, values = new Array(_len12 > 3 ? _len12 - 3 : 0), _key12 = 3; _key12 < _len12; _key12++) {
      values[_key12 - 3] = arguments[_key12];
    }

    if (checkType === 0
    /* CheckAndUpdate */
    ) {
      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
    } else {
      debugCheckNoChangesNode(view, nodeDef, argStyle, values);
    }

    if (nodeDef.flags & 3
    /* CatRenderNode */
    ) {
      debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
    }

    return nodeDef.flags & 224
    /* CatPureExpression */
    ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
  }
}

function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
  var changed = checkAndUpdateNode.apply(void 0, [view, nodeDef, argStyle].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(givenValues)));

  if (changed) {
    var values = argStyle === 1
    /* Dynamic */
    ? givenValues[0] : givenValues;

    if (nodeDef.flags & 16384
    /* TypeDirective */
    ) {
      var bindingValues = {};

      for (var i = 0; i < nodeDef.bindings.length; i++) {
        var binding = nodeDef.bindings[i];
        var value = values[i];

        if (binding.flags & 8
        /* TypeProperty */
        ) {
          bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
        }
      }

      var elDef = nodeDef.parent;
      var el = asElementData(view, elDef.nodeIndex).renderElement;

      if (!elDef.element.name) {
        // a comment.
        view.renderer.setValue(el, escapeCommentText("bindings=".concat(JSON.stringify(bindingValues, null, 2))));
      } else {
        // a regular element.
        for (var attr in bindingValues) {
          var _value3 = bindingValues[attr];

          if (_value3 != null) {
            view.renderer.setAttribute(el, attr, _value3);
          } else {
            view.renderer.removeAttribute(el, attr);
          }
        }
      }
    }
  }
}

function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
  checkNoChangesNode.apply(void 0, [view, nodeDef, argStyle].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__.default)(values)));
}

function nextDirectiveWithBinding(view, nodeIndex) {
  for (var i = nodeIndex; i < view.def.nodes.length; i++) {
    var nodeDef = view.def.nodes[i];

    if (nodeDef.flags & 16384
    /* TypeDirective */
    && nodeDef.bindings && nodeDef.bindings.length) {
      return i;
    }
  }

  return null;
}

function nextRenderNodeWithBinding(view, nodeIndex) {
  for (var i = nodeIndex; i < view.def.nodes.length; i++) {
    var nodeDef = view.def.nodes[i];

    if (nodeDef.flags & 3
    /* CatRenderNode */
    && nodeDef.bindings && nodeDef.bindings.length) {
      return i;
    }
  }

  return null;
}

var DebugContext_ = /*#__PURE__*/function () {
  function DebugContext_(view, nodeIndex) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugContext_);

    this.view = view;
    this.nodeIndex = nodeIndex;

    if (nodeIndex == null) {
      this.nodeIndex = nodeIndex = 0;
    }

    this.nodeDef = view.def.nodes[nodeIndex];
    var elDef = this.nodeDef;
    var elView = view;

    while (elDef && (elDef.flags & 1
    /* TypeElement */
    ) === 0) {
      elDef = elDef.parent;
    }

    if (!elDef) {
      while (!elDef && elView) {
        elDef = viewParentEl(elView);
        elView = elView.parent;
      }
    }

    this.elDef = elDef;
    this.elView = elView;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugContext_, [{
    key: "elOrCompView",
    get: function get() {
      // Has to be done lazily as we use the DebugContext also during creation of elements...
      return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
    }
  }, {
    key: "injector",
    get: function get() {
      return createInjector$1(this.elView, this.elDef);
    }
  }, {
    key: "component",
    get: function get() {
      return this.elOrCompView.component;
    }
  }, {
    key: "context",
    get: function get() {
      return this.elOrCompView.context;
    }
  }, {
    key: "providerTokens",
    get: function get() {
      var tokens = [];

      if (this.elDef) {
        for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
          var childDef = this.elView.def.nodes[i];

          if (childDef.flags & 20224
          /* CatProvider */
          ) {
            tokens.push(childDef.provider.token);
          }

          i += childDef.childCount;
        }
      }

      return tokens;
    }
  }, {
    key: "references",
    get: function get() {
      var references = {};

      if (this.elDef) {
        collectReferences(this.elView, this.elDef, references);

        for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
          var childDef = this.elView.def.nodes[i];

          if (childDef.flags & 20224
          /* CatProvider */
          ) {
            collectReferences(this.elView, childDef, references);
          }

          i += childDef.childCount;
        }
      }

      return references;
    }
  }, {
    key: "componentRenderElement",
    get: function get() {
      var elData = findHostElement(this.elOrCompView);
      return elData ? elData.renderElement : undefined;
    }
  }, {
    key: "renderNode",
    get: function get() {
      return this.nodeDef.flags & 2
      /* TypeText */
      ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
    }
  }, {
    key: "logError",
    value: function logError(console) {
      for (var _len13 = arguments.length, values = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
        values[_key13 - 1] = arguments[_key13];
      }

      var logViewDef;
      var logNodeIndex;

      if (this.nodeDef.flags & 2
      /* TypeText */
      ) {
        logViewDef = this.view.def;
        logNodeIndex = this.nodeDef.nodeIndex;
      } else {
        logViewDef = this.elView.def;
        logNodeIndex = this.elDef.nodeIndex;
      } // Note: we only generate a log function for text and element nodes
      // to make the generated code as small as possible.


      var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
      var currRenderNodeIndex = -1;

      var nodeLogger = function nodeLogger() {
        currRenderNodeIndex++;

        if (currRenderNodeIndex === renderNodeIndex) {
          var _console$error;

          return (_console$error = console.error).bind.apply(_console$error, [console].concat(values));
        } else {
          return NOOP;
        }
      };

      logViewDef.factory(nodeLogger);

      if (currRenderNodeIndex < renderNodeIndex) {
        console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
        console.error.apply(console, values);
      }
    }
  }]);

  return DebugContext_;
}();

function getRenderNodeIndex(viewDef, nodeIndex) {
  var renderNodeIndex = -1;

  for (var i = 0; i <= nodeIndex; i++) {
    var nodeDef = viewDef.nodes[i];

    if (nodeDef.flags & 3
    /* CatRenderNode */
    ) {
      renderNodeIndex++;
    }
  }

  return renderNodeIndex;
}

function findHostElement(view) {
  while (view && !isComponentView(view)) {
    view = view.parent;
  }

  if (view.parent) {
    return asElementData(view.parent, viewParentEl(view).nodeIndex);
  }

  return null;
}

function collectReferences(view, nodeDef, references) {
  for (var refName in nodeDef.references) {
    references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
  }
}

function callWithDebugContext(action, fn, self, args) {
  var oldAction = _currentAction;
  var oldView = _currentView;
  var oldNodeIndex = _currentNodeIndex;

  try {
    _currentAction = action;
    var result = fn.apply(self, args);
    _currentView = oldView;
    _currentNodeIndex = oldNodeIndex;
    _currentAction = oldAction;
    return result;
  } catch (e) {
    if (isViewDebugError(e) || !_currentView) {
      throw e;
    }

    throw viewWrappedDebugError(e, getCurrentDebugContext());
  }
}

function getCurrentDebugContext() {
  return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
}

var DebugRendererFactory2 = /*#__PURE__*/function () {
  function DebugRendererFactory2(delegate) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugRendererFactory2);

    this.delegate = delegate;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugRendererFactory2, [{
    key: "createRenderer",
    value: function createRenderer(element, renderData) {
      return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
    }
  }, {
    key: "begin",
    value: function begin() {
      if (this.delegate.begin) {
        this.delegate.begin();
      }
    }
  }, {
    key: "end",
    value: function end() {
      if (this.delegate.end) {
        this.delegate.end();
      }
    }
  }, {
    key: "whenRenderingDone",
    value: function whenRenderingDone() {
      if (this.delegate.whenRenderingDone) {
        return this.delegate.whenRenderingDone();
      }

      return Promise.resolve(null);
    }
  }]);

  return DebugRendererFactory2;
}();

var DebugRenderer2 = /*#__PURE__*/function () {
  function DebugRenderer2(delegate) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, DebugRenderer2);

    this.delegate = delegate;
    /**
     * Factory function used to create a `DebugContext` when a node is created.
     *
     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
     *
     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
     * or a Render context.
     */

    this.debugContextFactory = getCurrentDebugContext;
    this.data = this.delegate.data;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(DebugRenderer2, [{
    key: "createDebugContext",
    value: function createDebugContext(nativeElement) {
      return this.debugContextFactory(nativeElement);
    }
  }, {
    key: "destroyNode",
    value: function destroyNode(node) {
      var debugNode = getDebugNode$1(node);

      if (debugNode) {
        removeDebugNodeFromIndex(debugNode);

        if (debugNode instanceof DebugNode__PRE_R3__) {
          debugNode.listeners.length = 0;
        }
      }

      if (this.delegate.destroyNode) {
        this.delegate.destroyNode(node);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.delegate.destroy();
    }
  }, {
    key: "createElement",
    value: function createElement(name, namespace) {
      var el = this.delegate.createElement(name, namespace);
      var debugCtx = this.createDebugContext(el);

      if (debugCtx) {
        var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
        debugEl.name = name;
        indexDebugNode(debugEl);
      }

      return el;
    }
  }, {
    key: "createComment",
    value: function createComment(value) {
      var comment = this.delegate.createComment(escapeCommentText(value));
      var debugCtx = this.createDebugContext(comment);

      if (debugCtx) {
        indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
      }

      return comment;
    }
  }, {
    key: "createText",
    value: function createText(value) {
      var text = this.delegate.createText(value);
      var debugCtx = this.createDebugContext(text);

      if (debugCtx) {
        indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
      }

      return text;
    }
  }, {
    key: "appendChild",
    value: function appendChild(parent, newChild) {
      var debugEl = getDebugNode$1(parent);
      var debugChildEl = getDebugNode$1(newChild);

      if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.addChild(debugChildEl);
      }

      this.delegate.appendChild(parent, newChild);
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(parent, newChild, refChild, isMove) {
      var debugEl = getDebugNode$1(parent);
      var debugChildEl = getDebugNode$1(newChild);
      var debugRefEl = getDebugNode$1(refChild);

      if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.insertBefore(debugRefEl, debugChildEl);
      }

      this.delegate.insertBefore(parent, newChild, refChild, isMove);
    }
  }, {
    key: "removeChild",
    value: function removeChild(parent, oldChild) {
      var debugEl = getDebugNode$1(parent);
      var debugChildEl = getDebugNode$1(oldChild);

      if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.removeChild(debugChildEl);
      }

      this.delegate.removeChild(parent, oldChild);
    }
  }, {
    key: "selectRootElement",
    value: function selectRootElement(selectorOrNode, preserveContent) {
      var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
      var debugCtx = getCurrentDebugContext();

      if (debugCtx) {
        indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
      }

      return el;
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(el, name, value, namespace) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        var fullName = namespace ? namespace + ':' + name : name;
        debugEl.attributes[fullName] = value;
      }

      this.delegate.setAttribute(el, name, value, namespace);
    }
  }, {
    key: "removeAttribute",
    value: function removeAttribute(el, name, namespace) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        var fullName = namespace ? namespace + ':' + name : name;
        debugEl.attributes[fullName] = null;
      }

      this.delegate.removeAttribute(el, name, namespace);
    }
  }, {
    key: "addClass",
    value: function addClass(el, name) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.classes[name] = true;
      }

      this.delegate.addClass(el, name);
    }
  }, {
    key: "removeClass",
    value: function removeClass(el, name) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.classes[name] = false;
      }

      this.delegate.removeClass(el, name);
    }
  }, {
    key: "setStyle",
    value: function setStyle(el, style, value, flags) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.styles[style] = value;
      }

      this.delegate.setStyle(el, style, value, flags);
    }
  }, {
    key: "removeStyle",
    value: function removeStyle(el, style, flags) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.styles[style] = null;
      }

      this.delegate.removeStyle(el, style, flags);
    }
  }, {
    key: "setProperty",
    value: function setProperty(el, name, value) {
      var debugEl = getDebugNode$1(el);

      if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
        debugEl.properties[name] = value;
      }

      this.delegate.setProperty(el, name, value);
    }
  }, {
    key: "listen",
    value: function listen(target, eventName, callback) {
      if (typeof target !== 'string') {
        var debugEl = getDebugNode$1(target);

        if (debugEl) {
          debugEl.listeners.push(new DebugEventListener(eventName, callback));
        }
      }

      return this.delegate.listen(target, eventName, callback);
    }
  }, {
    key: "parentNode",
    value: function parentNode(node) {
      return this.delegate.parentNode(node);
    }
  }, {
    key: "nextSibling",
    value: function nextSibling(node) {
      return this.delegate.nextSibling(node);
    }
  }, {
    key: "setValue",
    value: function setValue(node, value) {
      return this.delegate.setValue(node, value);
    }
  }]);

  return DebugRenderer2;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function overrideProvider(override) {
  initServicesIfNeeded();
  return Services.overrideProvider(override);
}

function overrideComponentView(comp, componentFactory) {
  initServicesIfNeeded();
  return Services.overrideComponentView(comp, componentFactory);
}

function clearOverrides() {
  initServicesIfNeeded();
  return Services.clearOverrides();
} // Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!


function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
  return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
}

function cloneNgModuleDefinition(def) {
  var providers = Array.from(def.providers);
  var modules = Array.from(def.modules);
  var providersByKey = {};

  for (var key in def.providersByKey) {
    providersByKey[key] = def.providersByKey[key];
  }

  return {
    factory: def.factory,
    scope: def.scope,
    providers: providers,
    modules: modules,
    providersByKey: providersByKey
  };
}

var NgModuleFactory_ = /*#__PURE__*/function (_NgModuleFactory2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_11__.default)(NgModuleFactory_, _NgModuleFactory2);

  var _super24 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_12__.default)(NgModuleFactory_);

  function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
    var _this35;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_10__.default)(this, NgModuleFactory_);

    // Attention: this ctor is called as top level function.
    // Putting any logic in here will destroy closure tree shaking!
    _this35 = _super24.call(this);
    _this35.moduleType = moduleType;
    _this35._bootstrapComponents = _bootstrapComponents;
    _this35._ngModuleDefFactory = _ngModuleDefFactory;
    return _this35;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__.default)(NgModuleFactory_, [{
    key: "create",
    value: function create(parentInjector) {
      initServicesIfNeeded(); // Clone the NgModuleDefinition so that any tree shakeable provider definition
      // added to this instance of the NgModuleRef doesn't affect the cached copy.
      // See https://github.com/angular/angular/issues/25018.

      var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
      return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
    }
  }]);

  return NgModuleFactory_;
}(NgModuleFactory);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compiles a partial directive declaration object into a full directive definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareDirective(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'directive',
    type: decl.type
  });
  return compiler.compileDirectiveDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275fac.js"), decl);
}
/**
 * Evaluates the class metadata declaration.
 *
 * @codeGenApi
 */


function ɵɵngDeclareClassMetadata(decl) {
  var _a, _b;

  setClassMetadata(decl.type, decl.decorators, (_a = decl.ctorParameters) !== null && _a !== void 0 ? _a : null, (_b = decl.propDecorators) !== null && _b !== void 0 ? _b : null);
}
/**
 * Compiles a partial component declaration object into a full component definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareComponent(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'component',
    type: decl.type
  });
  return compiler.compileComponentDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275cmp.js"), decl);
}
/**
 * Compiles a partial pipe declaration object into a full pipe definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareFactory(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: getFactoryKind(decl.target),
    type: decl.type
  });
  return compiler.compileFactoryDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275fac.js"), decl);
}

function getFactoryKind(target) {
  switch (target) {
    case FactoryTarget.Directive:
      return 'directive';

    case FactoryTarget.Component:
      return 'component';

    case FactoryTarget.Injectable:
      return 'injectable';

    case FactoryTarget.Pipe:
      return 'pipe';

    case FactoryTarget.NgModule:
      return 'NgModule';
  }
}
/**
 * Compiles a partial injectable declaration object into a full injectable definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareInjectable(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'injectable',
    type: decl.type
  });
  return compiler.compileInjectableDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275prov.js"), decl);
}
/**
 * Compiles a partial injector declaration object into a full injector definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareInjector(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'NgModule',
    type: decl.type
  });
  return compiler.compileInjectorDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275inj.js"), decl);
}
/**
 * Compiles a partial NgModule declaration object into a full NgModule definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareNgModule(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'NgModule',
    type: decl.type
  });
  return compiler.compileNgModuleDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275mod.js"), decl);
}
/**
 * Compiles a partial pipe declaration object into a full pipe definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclarePipe(decl) {
  var compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'pipe',
    type: decl.type
  });
  return compiler.compilePipeDeclaration(angularCoreEnv, "ng:///".concat(decl.type.name, "/\u0275pipe.js"), decl);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// clang-format on

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


if (typeof ngDevMode !== 'undefined' && ngDevMode) {
  // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
  // installed `@angular/localize` in their app.
  // tslint:disable-next-line: no-toplevel-property-access
  _global.$localize = _global.$localize || function () {
    throw new Error('It looks like your application or one of its dependencies is using i18n.\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\n' + '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 59298:
/*!*******************************************************!*\
  !*** ./node_modules/@angular/forms/fesm2015/forms.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbstractControl": function() { return /* binding */ AbstractControl; },
/* harmony export */   "AbstractControlDirective": function() { return /* binding */ AbstractControlDirective; },
/* harmony export */   "AbstractFormGroupDirective": function() { return /* binding */ AbstractFormGroupDirective; },
/* harmony export */   "COMPOSITION_BUFFER_MODE": function() { return /* binding */ COMPOSITION_BUFFER_MODE; },
/* harmony export */   "CheckboxControlValueAccessor": function() { return /* binding */ CheckboxControlValueAccessor; },
/* harmony export */   "CheckboxRequiredValidator": function() { return /* binding */ CheckboxRequiredValidator; },
/* harmony export */   "ControlContainer": function() { return /* binding */ ControlContainer; },
/* harmony export */   "DefaultValueAccessor": function() { return /* binding */ DefaultValueAccessor; },
/* harmony export */   "EmailValidator": function() { return /* binding */ EmailValidator; },
/* harmony export */   "FormArray": function() { return /* binding */ FormArray; },
/* harmony export */   "FormArrayName": function() { return /* binding */ FormArrayName; },
/* harmony export */   "FormBuilder": function() { return /* binding */ FormBuilder; },
/* harmony export */   "FormControl": function() { return /* binding */ FormControl; },
/* harmony export */   "FormControlDirective": function() { return /* binding */ FormControlDirective; },
/* harmony export */   "FormControlName": function() { return /* binding */ FormControlName; },
/* harmony export */   "FormGroup": function() { return /* binding */ FormGroup; },
/* harmony export */   "FormGroupDirective": function() { return /* binding */ FormGroupDirective; },
/* harmony export */   "FormGroupName": function() { return /* binding */ FormGroupName; },
/* harmony export */   "FormsModule": function() { return /* binding */ FormsModule; },
/* harmony export */   "MaxLengthValidator": function() { return /* binding */ MaxLengthValidator; },
/* harmony export */   "MaxValidator": function() { return /* binding */ MaxValidator; },
/* harmony export */   "MinLengthValidator": function() { return /* binding */ MinLengthValidator; },
/* harmony export */   "MinValidator": function() { return /* binding */ MinValidator; },
/* harmony export */   "NG_ASYNC_VALIDATORS": function() { return /* binding */ NG_ASYNC_VALIDATORS; },
/* harmony export */   "NG_VALIDATORS": function() { return /* binding */ NG_VALIDATORS; },
/* harmony export */   "NG_VALUE_ACCESSOR": function() { return /* binding */ NG_VALUE_ACCESSOR; },
/* harmony export */   "NgControl": function() { return /* binding */ NgControl; },
/* harmony export */   "NgControlStatus": function() { return /* binding */ NgControlStatus; },
/* harmony export */   "NgControlStatusGroup": function() { return /* binding */ NgControlStatusGroup; },
/* harmony export */   "NgForm": function() { return /* binding */ NgForm; },
/* harmony export */   "NgModel": function() { return /* binding */ NgModel; },
/* harmony export */   "NgModelGroup": function() { return /* binding */ NgModelGroup; },
/* harmony export */   "NgSelectOption": function() { return /* binding */ NgSelectOption; },
/* harmony export */   "NumberValueAccessor": function() { return /* binding */ NumberValueAccessor; },
/* harmony export */   "PatternValidator": function() { return /* binding */ PatternValidator; },
/* harmony export */   "RadioControlValueAccessor": function() { return /* binding */ RadioControlValueAccessor; },
/* harmony export */   "RangeValueAccessor": function() { return /* binding */ RangeValueAccessor; },
/* harmony export */   "ReactiveFormsModule": function() { return /* binding */ ReactiveFormsModule; },
/* harmony export */   "RequiredValidator": function() { return /* binding */ RequiredValidator; },
/* harmony export */   "SelectControlValueAccessor": function() { return /* binding */ SelectControlValueAccessor; },
/* harmony export */   "SelectMultipleControlValueAccessor": function() { return /* binding */ SelectMultipleControlValueAccessor; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "Validators": function() { return /* binding */ Validators; },
/* harmony export */   "ɵInternalFormsSharedModule": function() { return /* binding */ ɵInternalFormsSharedModule; },
/* harmony export */   "ɵNgNoValidate": function() { return /* binding */ ɵNgNoValidate; },
/* harmony export */   "ɵNgSelectMultipleOption": function() { return /* binding */ ɵNgSelectMultipleOption; },
/* harmony export */   "ɵangular_packages_forms_forms_a": function() { return /* binding */ SHARED_FORM_DIRECTIVES; },
/* harmony export */   "ɵangular_packages_forms_forms_b": function() { return /* binding */ TEMPLATE_DRIVEN_DIRECTIVES; },
/* harmony export */   "ɵangular_packages_forms_forms_ba": function() { return /* binding */ SELECT_MULTIPLE_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bb": function() { return /* binding */ ɵNgSelectMultipleOption; },
/* harmony export */   "ɵangular_packages_forms_forms_bc": function() { return /* binding */ ɵNgNoValidate; },
/* harmony export */   "ɵangular_packages_forms_forms_bd": function() { return /* binding */ MAX_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_be": function() { return /* binding */ MIN_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bf": function() { return /* binding */ REQUIRED_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bg": function() { return /* binding */ CHECKBOX_REQUIRED_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bh": function() { return /* binding */ EMAIL_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bi": function() { return /* binding */ MIN_LENGTH_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bj": function() { return /* binding */ MAX_LENGTH_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bk": function() { return /* binding */ PATTERN_VALIDATOR; },
/* harmony export */   "ɵangular_packages_forms_forms_bl": function() { return /* binding */ minValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bm": function() { return /* binding */ maxValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bn": function() { return /* binding */ requiredValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bo": function() { return /* binding */ requiredTrueValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bp": function() { return /* binding */ emailValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bq": function() { return /* binding */ minLengthValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_br": function() { return /* binding */ maxLengthValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bs": function() { return /* binding */ patternValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_bt": function() { return /* binding */ _nullValidator; },
/* harmony export */   "ɵangular_packages_forms_forms_c": function() { return /* binding */ REACTIVE_DRIVEN_DIRECTIVES; },
/* harmony export */   "ɵangular_packages_forms_forms_d": function() { return /* binding */ ɵInternalFormsSharedModule; },
/* harmony export */   "ɵangular_packages_forms_forms_e": function() { return /* binding */ CHECKBOX_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_f": function() { return /* binding */ BaseControlValueAccessor; },
/* harmony export */   "ɵangular_packages_forms_forms_g": function() { return /* binding */ BuiltInControlValueAccessor; },
/* harmony export */   "ɵangular_packages_forms_forms_h": function() { return /* binding */ DEFAULT_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_i": function() { return /* binding */ AbstractControlStatus; },
/* harmony export */   "ɵangular_packages_forms_forms_j": function() { return /* binding */ ngControlStatusHost; },
/* harmony export */   "ɵangular_packages_forms_forms_k": function() { return /* binding */ ngGroupStatusHost; },
/* harmony export */   "ɵangular_packages_forms_forms_l": function() { return /* binding */ formDirectiveProvider; },
/* harmony export */   "ɵangular_packages_forms_forms_m": function() { return /* binding */ formControlBinding; },
/* harmony export */   "ɵangular_packages_forms_forms_n": function() { return /* binding */ modelGroupProvider; },
/* harmony export */   "ɵangular_packages_forms_forms_o": function() { return /* binding */ NUMBER_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_p": function() { return /* binding */ RADIO_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_q": function() { return /* binding */ RadioControlRegistryModule; },
/* harmony export */   "ɵangular_packages_forms_forms_r": function() { return /* binding */ RadioControlRegistry; },
/* harmony export */   "ɵangular_packages_forms_forms_s": function() { return /* binding */ RANGE_VALUE_ACCESSOR; },
/* harmony export */   "ɵangular_packages_forms_forms_t": function() { return /* binding */ NG_MODEL_WITH_FORM_CONTROL_WARNING; },
/* harmony export */   "ɵangular_packages_forms_forms_u": function() { return /* binding */ formControlBinding$1; },
/* harmony export */   "ɵangular_packages_forms_forms_v": function() { return /* binding */ controlNameBinding; },
/* harmony export */   "ɵangular_packages_forms_forms_w": function() { return /* binding */ formDirectiveProvider$1; },
/* harmony export */   "ɵangular_packages_forms_forms_x": function() { return /* binding */ formGroupNameProvider; },
/* harmony export */   "ɵangular_packages_forms_forms_y": function() { return /* binding */ formArrayNameProvider; },
/* harmony export */   "ɵangular_packages_forms_forms_z": function() { return /* binding */ SELECT_VALUE_ACCESSOR; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 34361);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 42720);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 33927);








/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Base class for all ControlValueAccessor classes defined in Forms package.
 * Contains common logic and utility functions.
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */



var BaseControlValueAccessor = /*#__PURE__*/function () {
  function BaseControlValueAccessor(_renderer, _elementRef) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BaseControlValueAccessor);

    this._renderer = _renderer;
    this._elementRef = _elementRef;
    /**
     * The registered callback function called when a change or input event occurs on the input
     * element.
     * @nodoc
     */

    this.onChange = function (_) {};
    /**
     * The registered callback function called when a blur event occurs on the input element.
     * @nodoc
     */


    this.onTouched = function () {};
  }
  /**
   * Helper method that sets a property on a target element using the current Renderer
   * implementation.
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(BaseControlValueAccessor, [{
    key: "setProperty",
    value: function setProperty(key, value) {
      this._renderer.setProperty(this._elementRef.nativeElement, key, value);
    }
    /**
     * Registers a function called when the control is touched.
     * @nodoc
     */

  }, {
    key: "registerOnTouched",
    value: function registerOnTouched(fn) {
      this.onTouched = fn;
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this.onChange = fn;
    }
    /**
     * Sets the "disabled" property on the range input element.
     * @nodoc
     */

  }, {
    key: "setDisabledState",
    value: function setDisabledState(isDisabled) {
      this.setProperty('disabled', isDisabled);
    }
  }]);

  return BaseControlValueAccessor;
}();

BaseControlValueAccessor.ɵfac = function BaseControlValueAccessor_Factory(t) {
  return new (t || BaseControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef));
};

BaseControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: BaseControlValueAccessor
});

BaseControlValueAccessor.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](BaseControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
    }];
  }, null);
})();
/**
 * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is
 * used in case no other CVAs can be found). We use this class to distinguish between default CVA,
 * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom
 * ones with higher priority (when both built-in and custom CVAs are present).
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */


var BuiltInControlValueAccessor = /*#__PURE__*/function (_BaseControlValueAcce) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(BuiltInControlValueAccessor, _BaseControlValueAcce);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(BuiltInControlValueAccessor);

  function BuiltInControlValueAccessor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, BuiltInControlValueAccessor);

    return _super.apply(this, arguments);
  }

  return BuiltInControlValueAccessor;
}(BaseControlValueAccessor);

BuiltInControlValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵBuiltInControlValueAccessor_BaseFactory;
  return function BuiltInControlValueAccessor_Factory(t) {
    return (ɵBuiltInControlValueAccessor_BaseFactory || (ɵBuiltInControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](BuiltInControlValueAccessor)))(t || BuiltInControlValueAccessor);
  };
}();

BuiltInControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: BuiltInControlValueAccessor,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](BuiltInControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive
  }], null, null);
})();
/**
 * Used to provide a `ControlValueAccessor` for form controls.
 *
 * See `DefaultValueAccessor` for how to implement one.
 *
 * @publicApi
 */


var NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('NgValueAccessor');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var CHECKBOX_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return CheckboxControlValueAccessor;
  }),
  multi: true
};
/**
 * @description
 * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
 * element.
 *
 * @usageNotes
 *
 * ### Using a checkbox with a reactive form.
 *
 * The following example shows how to use a checkbox with a reactive form.
 *
 * ```ts
 * const rememberLoginControl = new FormControl();
 * ```
 *
 * ```
 * <input type="checkbox" [formControl]="rememberLoginControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var CheckboxControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(CheckboxControlValueAccessor, _BuiltInControlValueA);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(CheckboxControlValueAccessor);

  function CheckboxControlValueAccessor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CheckboxControlValueAccessor);

    return _super2.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(CheckboxControlValueAccessor, [{
    key: "writeValue",
    value:
    /**
     * Sets the "checked" property on the input element.
     * @nodoc
     */
    function writeValue(value) {
      this.setProperty('checked', value);
    }
  }]);

  return CheckboxControlValueAccessor;
}(BuiltInControlValueAccessor);

CheckboxControlValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵCheckboxControlValueAccessor_BaseFactory;
  return function CheckboxControlValueAccessor_Factory(t) {
    return (ɵCheckboxControlValueAccessor_BaseFactory || (ɵCheckboxControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](CheckboxControlValueAccessor)))(t || CheckboxControlValueAccessor);
  };
}();

CheckboxControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: CheckboxControlValueAccessor,
  selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
  hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.checked);
      })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([CHECKBOX_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](CheckboxControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
      host: {
        '(change)': 'onChange($event.target.checked)',
        '(blur)': 'onTouched()'
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DEFAULT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return DefaultValueAccessor;
  }),
  multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */

function _isAndroid() {
  var userAgent = (0,_angular_common__WEBPACK_IMPORTED_MODULE_8__["ɵgetDOM"])() ? (0,_angular_common__WEBPACK_IMPORTED_MODULE_8__["ɵgetDOM"])().getUserAgent() : '';
  return /android (\d+)/.test(userAgent.toLowerCase());
}
/**
 * @description
 * Provide this token to control if form directives buffer IME input until
 * the "compositionend" event occurs.
 * @publicApi
 */


var COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('CompositionEventMode');
/**
 * The default `ControlValueAccessor` for writing a value and listening to changes on input
 * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * {@searchKeywords ngDefaultControl}
 *
 * @usageNotes
 *
 * ### Using the default value accessor
 *
 * The following example shows how to use an input element that activates the default value accessor
 * (in this case, a text field).
 *
 * ```ts
 * const firstNameControl = new FormControl();
 * ```
 *
 * ```
 * <input type="text" [formControl]="firstNameControl">
 * ```
 *
 * This value accessor is used by default for `<input type="text">` and `<textarea>` elements, but
 * you could also use it for custom components that have similar behavior and do not require special
 * processing. In order to attach the default value accessor to a custom element, add the
 * `ngDefaultControl` attribute as shown below.
 *
 * ```
 * <custom-input-component ngDefaultControl [(ngModel)]="value"></custom-input-component>
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var DefaultValueAccessor = /*#__PURE__*/function (_BaseControlValueAcce2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(DefaultValueAccessor, _BaseControlValueAcce2);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(DefaultValueAccessor);

  function DefaultValueAccessor(renderer, elementRef, _compositionMode) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, DefaultValueAccessor);

    _this = _super3.call(this, renderer, elementRef);
    _this._compositionMode = _compositionMode;
    /** Whether the user is creating a composition string (IME events). */

    _this._composing = false;

    if (_this._compositionMode == null) {
      _this._compositionMode = !_isAndroid();
    }

    return _this;
  }
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(DefaultValueAccessor, [{
    key: "writeValue",
    value: function writeValue(value) {
      var normalizedValue = value == null ? '' : value;
      this.setProperty('value', normalizedValue);
    }
    /** @internal */

  }, {
    key: "_handleInput",
    value: function _handleInput(value) {
      if (!this._compositionMode || this._compositionMode && !this._composing) {
        this.onChange(value);
      }
    }
    /** @internal */

  }, {
    key: "_compositionStart",
    value: function _compositionStart() {
      this._composing = true;
    }
    /** @internal */

  }, {
    key: "_compositionEnd",
    value: function _compositionEnd(value) {
      this._composing = false;
      this._compositionMode && this.onChange(value);
    }
  }]);

  return DefaultValueAccessor;
}(BaseControlValueAccessor);

DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) {
  return new (t || DefaultValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](COMPOSITION_BUFFER_MODE, 8));
};

DefaultValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: DefaultValueAccessor,
  selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
  hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
        return ctx._handleInput($event.target.value);
      })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
        return ctx._compositionStart();
      })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
        return ctx._compositionEnd($event.target.value);
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([DEFAULT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

DefaultValueAccessor.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
  }, {
    type: Boolean,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [COMPOSITION_BUFFER_MODE]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DefaultValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
      // TODO: vsavkin replace the above selector with the one below it once
      // https://github.com/angular/angular/issues/3011 is implemented
      // selector: '[ngModel],[formControl],[formControlName]',
      host: {
        '(input)': '$any(this)._handleInput($event.target.value)',
        '(blur)': 'onTouched()',
        '(compositionstart)': '$any(this)._compositionStart()',
        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
    }, {
      type: Boolean,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [COMPOSITION_BUFFER_MODE]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function isEmptyInputValue(value) {
  // we don't check for string here so it also works with arrays
  return value == null || value.length === 0;
}

function hasValidLength(value) {
  // non-strict comparison is intentional, to check for both `null` and `undefined` values
  return value != null && typeof value.length === 'number';
}
/**
 * @description
 * An `InjectionToken` for registering additional synchronous validators used with
 * `AbstractControl`s.
 *
 * @see `NG_ASYNC_VALIDATORS`
 *
 * @usageNotes
 *
 * ### Providing a custom validator
 *
 * The following example registers a custom validator directive. Adding the validator to the
 * existing collection of validators requires the `multi: true` option.
 *
 * ```typescript
 * @Directive({
 *   selector: '[customValidator]',
 *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
 * })
 * class CustomValidatorDirective implements Validator {
 *   validate(control: AbstractControl): ValidationErrors | null {
 *     return { 'custom': true };
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('NgValidators');
/**
 * @description
 * An `InjectionToken` for registering additional asynchronous validators used with
 * `AbstractControl`s.
 *
 * @see `NG_VALIDATORS`
 *
 * @publicApi
 */

var NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('NgAsyncValidators');
/**
 * A regular expression that matches valid e-mail addresses.
 *
 * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:
 * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
 *   punctuation symbols).
 * - `local-part` cannot begin or end with a period (`.`).
 * - `local-part` cannot be longer than 64 characters.
 * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
 *   `foo.com`.
 * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
 *   periods (`.`)).
 * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
 * - A `label` cannot be longer than 63 characters.
 * - The whole address cannot be longer than 254 characters.
 *
 * ## Implementation background
 *
 * This regexp was ported over from AngularJS (see there for git history):
 * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
 * It is based on the
 * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
 * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
 * lengths of different parts of the address). The main differences from the WHATWG version are:
 *   - Disallow `local-part` to begin or end with a period (`.`).
 *   - Disallow `local-part` length to exceed 64 characters.
 *   - Disallow total address length to exceed 254 characters.
 *
 * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
 */

var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
/**
 * @description
 * Provides a set of built-in validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or null. A null map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 *
 * @publicApi
 */

var Validators = /*#__PURE__*/function () {
  function Validators() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, Validators);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(Validators, null, [{
    key: "min",
    value:
    /**
     * @description
     * Validator that requires the control's value to be greater than or equal to the provided number.
     *
     * @usageNotes
     *
     * ### Validate against a minimum of 3
     *
     * ```typescript
     * const control = new FormControl(2, Validators.min(3));
     *
     * console.log(control.errors); // {min: {min: 3, actual: 2}}
     * ```
     *
     * @returns A validator function that returns an error map with the
     * `min` property if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */
    function min(_min) {
      return minValidator(_min);
    }
    /**
     * @description
     * Validator that requires the control's value to be less than or equal to the provided number.
     *
     * @usageNotes
     *
     * ### Validate against a maximum of 15
     *
     * ```typescript
     * const control = new FormControl(16, Validators.max(15));
     *
     * console.log(control.errors); // {max: {max: 15, actual: 16}}
     * ```
     *
     * @returns A validator function that returns an error map with the
     * `max` property if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "max",
    value: function max(_max) {
      return maxValidator(_max);
    }
    /**
     * @description
     * Validator that requires the control have a non-empty value.
     *
     * @usageNotes
     *
     * ### Validate that the field is non-empty
     *
     * ```typescript
     * const control = new FormControl('', Validators.required);
     *
     * console.log(control.errors); // {required: true}
     * ```
     *
     * @returns An error map with the `required` property
     * if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "required",
    value: function required(control) {
      return requiredValidator(control);
    }
    /**
     * @description
     * Validator that requires the control's value be true. This validator is commonly
     * used for required checkboxes.
     *
     * @usageNotes
     *
     * ### Validate that the field value is true
     *
     * ```typescript
     * const control = new FormControl('', Validators.requiredTrue);
     *
     * console.log(control.errors); // {required: true}
     * ```
     *
     * @returns An error map that contains the `required` property
     * set to `true` if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "requiredTrue",
    value: function requiredTrue(control) {
      return requiredTrueValidator(control);
    }
    /**
     * @description
     * Validator that requires the control's value pass an email validation test.
     *
     * Tests the value using a [regular
     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
     * pattern suitable for common usecases. The pattern is based on the definition of a valid email
     * address in the [WHATWG HTML
     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
     * lengths of different parts of the address).
     *
     * The differences from the WHATWG version include:
     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).
     * - Disallow `local-part` to be longer than 64 characters.
     * - Disallow the whole address to be longer than 254 characters.
     *
     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
     * validate the value against a different pattern.
     *
     * @usageNotes
     *
     * ### Validate that the field matches a valid email pattern
     *
     * ```typescript
     * const control = new FormControl('bad@', Validators.email);
     *
     * console.log(control.errors); // {email: true}
     * ```
     *
     * @returns An error map with the `email` property
     * if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "email",
    value: function email(control) {
      return emailValidator(control);
    }
    /**
     * @description
     * Validator that requires the length of the control's value to be greater than or equal
     * to the provided minimum length. This validator is also provided by default if you use the
     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used
     * only for types that have a numeric `length` property, such as strings or arrays. The
     * `minLength` validator logic is also not invoked for values when their `length` property is 0
     * (for example in case of an empty string or an empty array), to support optional controls. You
     * can use the standard `required` validator if empty values should not be considered valid.
     *
     * @usageNotes
     *
     * ### Validate that the field has a minimum of 3 characters
     *
     * ```typescript
     * const control = new FormControl('ng', Validators.minLength(3));
     *
     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
     * ```
     *
     * ```html
     * <input minlength="5">
     * ```
     *
     * @returns A validator function that returns an error map with the
     * `minlength` property if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "minLength",
    value: function minLength(_minLength) {
      return minLengthValidator(_minLength);
    }
    /**
     * @description
     * Validator that requires the length of the control's value to be less than or equal
     * to the provided maximum length. This validator is also provided by default if you use the
     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used
     * only for types that have a numeric `length` property, such as strings or arrays.
     *
     * @usageNotes
     *
     * ### Validate that the field has maximum of 5 characters
     *
     * ```typescript
     * const control = new FormControl('Angular', Validators.maxLength(5));
     *
     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
     * ```
     *
     * ```html
     * <input maxlength="5">
     * ```
     *
     * @returns A validator function that returns an error map with the
     * `maxlength` property if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "maxLength",
    value: function maxLength(_maxLength) {
      return maxLengthValidator(_maxLength);
    }
    /**
     * @description
     * Validator that requires the control's value to match a regex pattern. This validator is also
     * provided by default if you use the HTML5 `pattern` attribute.
     *
     * @usageNotes
     *
     * ### Validate that the field only contains letters or spaces
     *
     * ```typescript
     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
     *
     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
     * ```
     *
     * ```html
     * <input pattern="[a-zA-Z ]*">
     * ```
     *
     * ### Pattern matching with the global or sticky flag
     *
     * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`
     * can produce different results on the same input when validations are run consecutively. This is
     * due to how the behavior of `RegExp.prototype.test` is
     * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)
     * (`RegExp` preserves the index of the last match when the global or sticky flag is used).
     * Due to this behavior, it is recommended that when using
     * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky
     * flag enabled.
     *
     * ```typescript
     * // Not recommended (since the `g` flag is used)
     * const controlOne = new FormControl('1', Validators.pattern(/foo/g));
     *
     * // Good
     * const controlTwo = new FormControl('1', Validators.pattern(/foo/));
     * ```
     *
     * @param pattern A regular expression to be used as is to test the values, or a string.
     * If a string is passed, the `^` character is prepended and the `$` character is
     * appended to the provided string (if not already present), and the resulting regular
     * expression is used to test the values.
     *
     * @returns A validator function that returns an error map with the
     * `pattern` property if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "pattern",
    value: function pattern(_pattern) {
      return patternValidator(_pattern);
    }
    /**
     * @description
     * Validator that performs no operation.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "nullValidator",
    value: function nullValidator(control) {
      return _nullValidator(control);
    }
  }, {
    key: "compose",
    value: function compose(validators) {
      return _compose(validators);
    }
    /**
     * @description
     * Compose multiple async validators into a single function that returns the union
     * of the individual error objects for the provided control.
     *
     * @returns A validator function that returns an error map with the
     * merged error objects of the async validators if the validation check fails, otherwise `null`.
     *
     * @see `updateValueAndValidity()`
     *
     */

  }, {
    key: "composeAsync",
    value: function composeAsync(validators) {
      return _composeAsync(validators);
    }
  }]);

  return Validators;
}();
/**
 * Validator that requires the control's value to be greater than or equal to the provided number.
 * See `Validators.min` for additional information.
 */


function minValidator(min) {
  return function (control) {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
      return null; // don't validate empty values to allow optional controls
    }

    var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
    // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min

    return !isNaN(value) && value < min ? {
      'min': {
        'min': min,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to be less than or equal to the provided number.
 * See `Validators.max` for additional information.
 */


function maxValidator(max) {
  return function (control) {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
      return null; // don't validate empty values to allow optional controls
    }

    var value = parseFloat(control.value); // Controls with NaN values after parsing should be treated as not having a
    // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max

    return !isNaN(value) && value > max ? {
      'max': {
        'max': max,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control have a non-empty value.
 * See `Validators.required` for additional information.
 */


function requiredValidator(control) {
  return isEmptyInputValue(control.value) ? {
    'required': true
  } : null;
}
/**
 * Validator that requires the control's value be true. This validator is commonly
 * used for required checkboxes.
 * See `Validators.requiredTrue` for additional information.
 */


function requiredTrueValidator(control) {
  return control.value === true ? null : {
    'required': true
  };
}
/**
 * Validator that requires the control's value pass an email validation test.
 * See `Validators.email` for additional information.
 */


function emailValidator(control) {
  if (isEmptyInputValue(control.value)) {
    return null; // don't validate empty values to allow optional controls
  }

  return EMAIL_REGEXP.test(control.value) ? null : {
    'email': true
  };
}
/**
 * Validator that requires the length of the control's value to be greater than or equal
 * to the provided minimum length. See `Validators.minLength` for additional information.
 */


function minLengthValidator(minLength) {
  return function (control) {
    if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
      // don't validate empty values to allow optional controls
      // don't validate values without `length` property
      return null;
    }

    return control.value.length < minLength ? {
      'minlength': {
        'requiredLength': minLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the length of the control's value to be less than or equal
 * to the provided maximum length. See `Validators.maxLength` for additional information.
 */


function maxLengthValidator(maxLength) {
  return function (control) {
    return hasValidLength(control.value) && control.value.length > maxLength ? {
      'maxlength': {
        'requiredLength': maxLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to match a regex pattern.
 * See `Validators.pattern` for additional information.
 */


function patternValidator(pattern) {
  if (!pattern) return _nullValidator;
  var regex;
  var regexStr;

  if (typeof pattern === 'string') {
    regexStr = '';
    if (pattern.charAt(0) !== '^') regexStr += '^';
    regexStr += pattern;
    if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';
    regex = new RegExp(regexStr);
  } else {
    regexStr = pattern.toString();
    regex = pattern;
  }

  return function (control) {
    if (isEmptyInputValue(control.value)) {
      return null; // don't validate empty values to allow optional controls
    }

    var value = control.value;
    return regex.test(value) ? null : {
      'pattern': {
        'requiredPattern': regexStr,
        'actualValue': value
      }
    };
  };
}
/**
 * Function that has `ValidatorFn` shape, but performs no operation.
 */


function _nullValidator(control) {
  return null;
}

function isPresent(o) {
  return o != null;
}

function toObservable(r) {
  var obs = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵisPromise"])(r) ? (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(r) : r;

  if (!(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵisObservable"])(obs) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
    throw new Error("Expected validator to return Promise or Observable.");
  }

  return obs;
}

function mergeErrors(arrayOfErrors) {
  var res = {}; // Not using Array.reduce here due to a Chrome 80 bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  arrayOfErrors.forEach(function (errors) {
    res = errors != null ? Object.assign(Object.assign({}, res), errors) : res;
  });
  return Object.keys(res).length === 0 ? null : res;
}

function executeValidators(control, validators) {
  return validators.map(function (validator) {
    return validator(control);
  });
}

function isValidatorFn(validator) {
  return !validator.validate;
}
/**
 * Given the list of validators that may contain both functions as well as classes, return the list
 * of validator functions (convert validator classes into validator functions). This is needed to
 * have consistent structure in validators list before composing them.
 *
 * @param validators The set of validators that may contain validators both in plain function form
 *     as well as represented as a validator class.
 */


function normalizeValidators(validators) {
  return validators.map(function (validator) {
    return isValidatorFn(validator) ? validator : function (c) {
      return validator.validate(c);
    };
  });
}
/**
 * Merges synchronous validators into a single validator function.
 * See `Validators.compose` for additional information.
 */


function _compose(validators) {
  if (!validators) return null;
  var presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    return mergeErrors(executeValidators(control, presentValidators));
  };
}
/**
 * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),
 * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single
 * validator function.
 */


function composeValidators(validators) {
  return validators != null ? _compose(normalizeValidators(validators)) : null;
}
/**
 * Merges asynchronous validators into a single validator function.
 * See `Validators.composeAsync` for additional information.
 */


function _composeAsync(validators) {
  if (!validators) return null;
  var presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    var observables = executeValidators(control, presentValidators).map(toObservable);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.forkJoin)(observables).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.map)(mergeErrors));
  };
}
/**
 * Accepts a list of async validators of different possible shapes (`AsyncValidator` and
 * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges
 * them into a single validator function.
 */


function composeAsyncValidators(validators) {
  return validators != null ? _composeAsync(normalizeValidators(validators)) : null;
}
/**
 * Merges raw control validators with a given directive validator and returns the combined list of
 * validators as an array.
 */


function mergeValidators(controlValidators, dirValidator) {
  if (controlValidators === null) return [dirValidator];
  return Array.isArray(controlValidators) ? [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__.default)(controlValidators), [dirValidator]) : [controlValidators, dirValidator];
}
/**
 * Retrieves the list of raw synchronous validators attached to a given control.
 */


function getControlValidators(control) {
  return control._rawValidators;
}
/**
 * Retrieves the list of raw asynchronous validators attached to a given control.
 */


function getControlAsyncValidators(control) {
  return control._rawAsyncValidators;
}
/**
 * Accepts a singleton validator, an array, or null, and returns an array type with the provided
 * validators.
 *
 * @param validators A validator, validators, or null.
 * @returns A validators array.
 */


function makeValidatorsArray(validators) {
  if (!validators) return [];
  return Array.isArray(validators) ? validators : [validators];
}
/**
 * Determines whether a validator or validators array has a given validator.
 *
 * @param validators The validator or validators to compare against.
 * @param validator The validator to check.
 * @returns Whether the validator is present.
 */


function _hasValidator(validators, validator) {
  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
}
/**
 * Combines two arrays of validators into one. If duplicates are provided, only one will be added.
 *
 * @param validators The new validators.
 * @param currentValidators The base array of currrent validators.
 * @returns An array of validators.
 */


function _addValidators(validators, currentValidators) {
  var current = makeValidatorsArray(currentValidators);
  var validatorsToAdd = makeValidatorsArray(validators);
  validatorsToAdd.forEach(function (v) {
    // Note: if there are duplicate entries in the new validators array,
    // only the first one would be added to the current list of validarors.
    // Duplicate ones would be ignored since `hasValidator` would detect
    // the presence of a validator function and we update the current list in place.
    if (!_hasValidator(current, v)) {
      current.push(v);
    }
  });
  return current;
}

function _removeValidators(validators, currentValidators) {
  return makeValidatorsArray(currentValidators).filter(function (v) {
    return !_hasValidator(validators, v);
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * Base class for control directives.
 *
 * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
 *
 * @publicApi
 */


var AbstractControlDirective = /*#__PURE__*/function () {
  function AbstractControlDirective() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AbstractControlDirective);

    /**
     * Set of synchronous validators as they were provided while calling `setValidators` function.
     * @internal
     */
    this._rawValidators = [];
    /**
     * Set of asynchronous validators as they were provided while calling `setAsyncValidators`
     * function.
     * @internal
     */

    this._rawAsyncValidators = [];
    /*
     * The set of callbacks to be invoked when directive instance is being destroyed.
     */

    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Reports the value of the control if it is present, otherwise null.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(AbstractControlDirective, [{
    key: "value",
    get: function get() {
      return this.control ? this.control.value : null;
    }
    /**
     * @description
     * Reports whether the control is valid. A control is considered valid if no
     * validation errors exist with the current value.
     * If the control is not present, null is returned.
     */

  }, {
    key: "valid",
    get: function get() {
      return this.control ? this.control.valid : null;
    }
    /**
     * @description
     * Reports whether the control is invalid, meaning that an error exists in the input value.
     * If the control is not present, null is returned.
     */

  }, {
    key: "invalid",
    get: function get() {
      return this.control ? this.control.invalid : null;
    }
    /**
     * @description
     * Reports whether a control is pending, meaning that that async validation is occurring and
     * errors are not yet available for the input value. If the control is not present, null is
     * returned.
     */

  }, {
    key: "pending",
    get: function get() {
      return this.control ? this.control.pending : null;
    }
    /**
     * @description
     * Reports whether the control is disabled, meaning that the control is disabled
     * in the UI and is exempt from validation checks and excluded from aggregate
     * values of ancestor controls. If the control is not present, null is returned.
     */

  }, {
    key: "disabled",
    get: function get() {
      return this.control ? this.control.disabled : null;
    }
    /**
     * @description
     * Reports whether the control is enabled, meaning that the control is included in ancestor
     * calculations of validity or value. If the control is not present, null is returned.
     */

  }, {
    key: "enabled",
    get: function get() {
      return this.control ? this.control.enabled : null;
    }
    /**
     * @description
     * Reports the control's validation errors. If the control is not present, null is returned.
     */

  }, {
    key: "errors",
    get: function get() {
      return this.control ? this.control.errors : null;
    }
    /**
     * @description
     * Reports whether the control is pristine, meaning that the user has not yet changed
     * the value in the UI. If the control is not present, null is returned.
     */

  }, {
    key: "pristine",
    get: function get() {
      return this.control ? this.control.pristine : null;
    }
    /**
     * @description
     * Reports whether the control is dirty, meaning that the user has changed
     * the value in the UI. If the control is not present, null is returned.
     */

  }, {
    key: "dirty",
    get: function get() {
      return this.control ? this.control.dirty : null;
    }
    /**
     * @description
     * Reports whether the control is touched, meaning that the user has triggered
     * a `blur` event on it. If the control is not present, null is returned.
     */

  }, {
    key: "touched",
    get: function get() {
      return this.control ? this.control.touched : null;
    }
    /**
     * @description
     * Reports the validation status of the control. Possible values include:
     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
     * If the control is not present, null is returned.
     */

  }, {
    key: "status",
    get: function get() {
      return this.control ? this.control.status : null;
    }
    /**
     * @description
     * Reports whether the control is untouched, meaning that the user has not yet triggered
     * a `blur` event on it. If the control is not present, null is returned.
     */

  }, {
    key: "untouched",
    get: function get() {
      return this.control ? this.control.untouched : null;
    }
    /**
     * @description
     * Returns a multicasting observable that emits a validation status whenever it is
     * calculated for the control. If the control is not present, null is returned.
     */

  }, {
    key: "statusChanges",
    get: function get() {
      return this.control ? this.control.statusChanges : null;
    }
    /**
     * @description
     * Returns a multicasting observable of value changes for the control that emits every time the
     * value of the control changes in the UI or programmatically.
     * If the control is not present, null is returned.
     */

  }, {
    key: "valueChanges",
    get: function get() {
      return this.control ? this.control.valueChanges : null;
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */

  }, {
    key: "path",
    get: function get() {
      return null;
    }
    /**
     * Sets synchronous validators for this directive.
     * @internal
     */

  }, {
    key: "_setValidators",
    value: function _setValidators(validators) {
      this._rawValidators = validators || [];
      this._composedValidatorFn = composeValidators(this._rawValidators);
    }
    /**
     * Sets asynchronous validators for this directive.
     * @internal
     */

  }, {
    key: "_setAsyncValidators",
    value: function _setAsyncValidators(validators) {
      this._rawAsyncValidators = validators || [];
      this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
    }
    /**
     * @description
     * Synchronous validator function composed of all the synchronous validators registered with this
     * directive.
     */

  }, {
    key: "validator",
    get: function get() {
      return this._composedValidatorFn || null;
    }
    /**
     * @description
     * Asynchronous validator function composed of all the asynchronous validators registered with
     * this directive.
     */

  }, {
    key: "asyncValidator",
    get: function get() {
      return this._composedAsyncValidatorFn || null;
    }
    /**
     * Internal function to register callbacks that should be invoked
     * when directive instance is being destroyed.
     * @internal
     */

  }, {
    key: "_registerOnDestroy",
    value: function _registerOnDestroy(fn) {
      this._onDestroyCallbacks.push(fn);
    }
    /**
     * Internal function to invoke all registered "on destroy" callbacks.
     * Note: calling this function also clears the list of callbacks.
     * @internal
     */

  }, {
    key: "_invokeOnDestroyCallbacks",
    value: function _invokeOnDestroyCallbacks() {
      this._onDestroyCallbacks.forEach(function (fn) {
        return fn();
      });

      this._onDestroyCallbacks = [];
    }
    /**
     * @description
     * Resets the control with the provided value if the control is present.
     */

  }, {
    key: "reset",
    value: function reset() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      if (this.control) this.control.reset(value);
    }
    /**
     * @description
     * Reports whether the control with the given path has the error specified.
     *
     * @param errorCode The code of the error to check
     * @param path A list of control names that designates how to move from the current control
     * to the control that should be queried for errors.
     *
     * @usageNotes
     * For example, for the following `FormGroup`:
     *
     * ```
     * form = new FormGroup({
     *   address: new FormGroup({ street: new FormControl() })
     * });
     * ```
     *
     * The path to the 'street' control from the root form would be 'address' -> 'street'.
     *
     * It can be provided to this method in one of two formats:
     *
     * 1. An array of string control names, e.g. `['address', 'street']`
     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
     *
     * If no path is given, this method checks for the error on the current control.
     *
     * @returns whether the given error is present in the control at the given path.
     *
     * If the control is not present, false is returned.
     */

  }, {
    key: "hasError",
    value: function hasError(errorCode, path) {
      return this.control ? this.control.hasError(errorCode, path) : false;
    }
    /**
     * @description
     * Reports error data for the control with the given path.
     *
     * @param errorCode The code of the error to check
     * @param path A list of control names that designates how to move from the current control
     * to the control that should be queried for errors.
     *
     * @usageNotes
     * For example, for the following `FormGroup`:
     *
     * ```
     * form = new FormGroup({
     *   address: new FormGroup({ street: new FormControl() })
     * });
     * ```
     *
     * The path to the 'street' control from the root form would be 'address' -> 'street'.
     *
     * It can be provided to this method in one of two formats:
     *
     * 1. An array of string control names, e.g. `['address', 'street']`
     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
     *
     * @returns error data for that particular error. If the control or error is not present,
     * null is returned.
     */

  }, {
    key: "getError",
    value: function getError(errorCode, path) {
      return this.control ? this.control.getError(errorCode, path) : null;
    }
  }]);

  return AbstractControlDirective;
}();

AbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) {
  return new (t || AbstractControlDirective)();
};

AbstractControlDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: AbstractControlDirective
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * A base class for directives that contain multiple registered instances of `NgControl`.
 * Only used by the forms module.
 *
 * @publicApi
 */

var ControlContainer = /*#__PURE__*/function (_AbstractControlDirec) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(ControlContainer, _AbstractControlDirec);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(ControlContainer);

  function ControlContainer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ControlContainer);

    return _super4.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(ControlContainer, [{
    key: "formDirective",
    get:
    /**
     * @description
     * The top-level form directive for the control.
     */
    function get() {
      return null;
    }
    /**
     * @description
     * The path to this group.
     */

  }, {
    key: "path",
    get: function get() {
      return null;
    }
  }]);

  return ControlContainer;
}(AbstractControlDirective);

ControlContainer.ɵfac = /*@__PURE__*/function () {
  var ɵControlContainer_BaseFactory;
  return function ControlContainer_Factory(t) {
    return (ɵControlContainer_BaseFactory || (ɵControlContainer_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](ControlContainer)))(t || ControlContainer);
  };
}();

ControlContainer.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: ControlContainer,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * A base class that all `FormControl`-based directives extend. It binds a `FormControl`
 * object to a DOM element.
 *
 * @publicApi
 */

var NgControl = /*#__PURE__*/function (_AbstractControlDirec2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgControl, _AbstractControlDirec2);

  var _super5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgControl);

  function NgControl() {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgControl);

    _this2 = _super5.apply(this, arguments);
    /**
     * @description
     * The parent form for the control.
     *
     * @internal
     */

    _this2._parent = null;
    /**
     * @description
     * The name for the control
     */

    _this2.name = null;
    /**
     * @description
     * The value accessor for the control
     */

    _this2.valueAccessor = null;
    return _this2;
  }

  return NgControl;
}(AbstractControlDirective);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var AbstractControlStatus = /*#__PURE__*/function () {
  function AbstractControlStatus(cd) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AbstractControlStatus);

    this._cd = cd;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(AbstractControlStatus, [{
    key: "is",
    value: function is(status) {
      var _a, _b, _c; // Currently with ViewEngine (in AOT mode) it's not possible to use private methods in host
      // bindings.
      // TODO: once ViewEngine is removed, this function should be refactored:
      //  - make the `is` method `protected`, so it's not accessible publicly
      //  - move the `submitted` status logic to the `NgControlStatusGroup` class
      //    and make it `private` or `protected` too.


      if (status === 'submitted') {
        // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but
        // we avoid instanceof checks to prevent non-tree-shakable references to those types.
        return !!((_a = this._cd) === null || _a === void 0 ? void 0 : _a.submitted);
      }

      return !!((_c = (_b = this._cd) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c[status]);
    }
  }]);

  return AbstractControlStatus;
}();

var ngControlStatusHost = {
  '[class.ng-untouched]': 'is("untouched")',
  '[class.ng-touched]': 'is("touched")',
  '[class.ng-pristine]': 'is("pristine")',
  '[class.ng-dirty]': 'is("dirty")',
  '[class.ng-valid]': 'is("valid")',
  '[class.ng-invalid]': 'is("invalid")',
  '[class.ng-pending]': 'is("pending")'
};
var ngGroupStatusHost = {
  '[class.ng-untouched]': 'is("untouched")',
  '[class.ng-touched]': 'is("touched")',
  '[class.ng-pristine]': 'is("pristine")',
  '[class.ng-dirty]': 'is("dirty")',
  '[class.ng-valid]': 'is("valid")',
  '[class.ng-invalid]': 'is("invalid")',
  '[class.ng-pending]': 'is("pending")',
  '[class.ng-submitted]': 'is("submitted")'
};
/**
 * @description
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status.
 *
 * @usageNotes
 *
 * ### CSS classes applied
 *
 * The following classes are applied as the properties become true:
 *
 * * ng-valid
 * * ng-invalid
 * * ng-pending
 * * ng-pristine
 * * ng-dirty
 * * ng-untouched
 * * ng-touched
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var NgControlStatus = /*#__PURE__*/function (_AbstractControlStatu) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgControlStatus, _AbstractControlStatu);

  var _super6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgControlStatus);

  function NgControlStatus(cd) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgControlStatus);

    return _super6.call(this, cd);
  }

  return NgControlStatus;
}(AbstractControlStatus);

NgControlStatus.ɵfac = function NgControlStatus_Factory(t) {
  return new (t || NgControlStatus)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NgControl, 2));
};

NgControlStatus.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgControlStatus,
  selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
  hostVars: 14,
  hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵclassProp"]("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"));
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

NgControlStatus.ctorParameters = function () {
  return [{
    type: NgControl,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgControlStatus, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formControlName],[ngModel],[formControl]',
      host: ngControlStatusHost
    }]
  }], function () {
    return [{
      type: NgControl,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }]
    }];
  }, null);
})();
/**
 * @description
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional
 * class ng-submitted.
 *
 * @see `NgControlStatus`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var NgControlStatusGroup = /*#__PURE__*/function (_AbstractControlStatu2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgControlStatusGroup, _AbstractControlStatu2);

  var _super7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgControlStatusGroup);

  function NgControlStatusGroup(cd) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgControlStatusGroup);

    return _super7.call(this, cd);
  }

  return NgControlStatusGroup;
}(AbstractControlStatus);

NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) {
  return new (t || NgControlStatusGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 10));
};

NgControlStatusGroup.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgControlStatusGroup,
  selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
  hostVars: 16,
  hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵclassProp"]("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"))("ng-submitted", ctx.is("submitted"));
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

NgControlStatusGroup.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgControlStatusGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
      host: ngGroupStatusHost
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var FormErrorExamples = {
  formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
  formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
  formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
  ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
  ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var ReactiveErrors = /*#__PURE__*/function () {
  function ReactiveErrors() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ReactiveErrors);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(ReactiveErrors, null, [{
    key: "controlParentException",
    value: function controlParentException() {
      throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formControlName));
    }
  }, {
    key: "ngModelGroupException",
    value: function ngModelGroupException() {
      throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ".concat(FormErrorExamples.formGroupName, "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ").concat(FormErrorExamples.ngModelGroup));
    }
  }, {
    key: "missingFormException",
    value: function missingFormException() {
      throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ".concat(FormErrorExamples.formControlName));
    }
  }, {
    key: "groupParentException",
    value: function groupParentException() {
      throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ".concat(FormErrorExamples.formGroupName));
    }
  }, {
    key: "arrayParentException",
    value: function arrayParentException() {
      throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ".concat(FormErrorExamples.formArrayName));
    }
  }, {
    key: "disabledAttrWarning",
    value: function disabledAttrWarning() {
      console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n\n      Example:\n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    }
  }, {
    key: "ngModelWarning",
    value: function ngModelWarning(directiveName) {
      console.warn("\n    It looks like you're using ngModel on the same form field as ".concat(directiveName, ".\n    Support for using the ngModel input property and ngModelChange event with\n    reactive form directives has been deprecated in Angular v6 and will be removed\n    in a future version of Angular.\n\n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/").concat(directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName', "#use-with-ngmodel\n    "));
    }
  }]);

  return ReactiveErrors;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function controlPath(name, parent) {
  return [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__.default)(parent.path), [name]);
}
/**
 * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both
 * instances. This function is typically invoked when form directive is being initialized.
 *
 * @param control Form control instance that should be linked.
 * @param dir Directive that should be linked with a given control.
 */


function setUpControl(control, dir) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (!control) _throwError(dir, 'Cannot find control with');
    if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');
  }

  setUpValidators(control, dir);
  dir.valueAccessor.writeValue(control.value);
  setUpViewChangePipeline(control, dir);
  setUpModelChangePipeline(control, dir);
  setUpBlurPipeline(control, dir);
  setUpDisabledChangeHandler(control, dir);
}
/**
 * Reverts configuration performed by the `setUpControl` control function.
 * Effectively disconnects form control with a given form directive.
 * This function is typically invoked when corresponding form directive is being destroyed.
 *
 * @param control Form control which should be cleaned up.
 * @param dir Directive that should be disconnected from a given control.
 * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should
 *     contain asserts to verify that it's not called once directive is destroyed. We need this flag
 *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.
 */


function cleanUpControl(control, dir) {
  var validateControlPresenceOnChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var noop = function noop() {
    if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      _noControlError(dir);
    }
  }; // The `valueAccessor` field is typically defined on FromControl and FormControlName directive
  // instances and there is a logic in `selectValueAccessor` function that throws if it's not the
  // case. We still check the presence of `valueAccessor` before invoking its methods to make sure
  // that cleanup works correctly if app code or tests are setup to ignore the error thrown from
  // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.


  if (dir.valueAccessor) {
    dir.valueAccessor.registerOnChange(noop);
    dir.valueAccessor.registerOnTouched(noop);
  }

  cleanUpValidators(control, dir);

  if (control) {
    dir._invokeOnDestroyCallbacks();

    control._registerOnCollectionChange(function () {});
  }
}

function registerOnValidatorChange(validators, onChange) {
  validators.forEach(function (validator) {
    if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);
  });
}
/**
 * Sets up disabled change handler function on a given form control if ControlValueAccessor
 * associated with a given directive instance supports the `setDisabledState` call.
 *
 * @param control Form control where disabled change handler should be setup.
 * @param dir Corresponding directive instance associated with this control.
 */


function setUpDisabledChangeHandler(control, dir) {
  if (dir.valueAccessor.setDisabledState) {
    var onDisabledChange = function onDisabledChange(isDisabled) {
      dir.valueAccessor.setDisabledState(isDisabled);
    };

    control.registerOnDisabledChange(onDisabledChange); // Register a callback function to cleanup disabled change handler
    // from a control instance when a directive is destroyed.

    dir._registerOnDestroy(function () {
      control._unregisterOnDisabledChange(onDisabledChange);
    });
  }
}
/**
 * Sets up sync and async directive validators on provided form control.
 * This function merges validators from the directive into the validators of the control.
 *
 * @param control Form control where directive validators should be setup.
 * @param dir Directive instance that contains validators to be setup.
 */


function setUpValidators(control, dir) {
  var validators = getControlValidators(control);

  if (dir.validator !== null) {
    control.setValidators(mergeValidators(validators, dir.validator));
  } else if (typeof validators === 'function') {
    // If sync validators are represented by a single validator function, we force the
    // `Validators.compose` call to happen by executing the `setValidators` function with
    // an array that contains that function. We need this to avoid possible discrepancies in
    // validators behavior, so sync validators are always processed by the `Validators.compose`.
    // Note: we should consider moving this logic inside the `setValidators` function itself, so we
    // have consistent behavior on AbstractControl API level. The same applies to the async
    // validators logic below.
    control.setValidators([validators]);
  }

  var asyncValidators = getControlAsyncValidators(control);

  if (dir.asyncValidator !== null) {
    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
  } else if (typeof asyncValidators === 'function') {
    control.setAsyncValidators([asyncValidators]);
  } // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4


  var onValidatorChange = function onValidatorChange() {
    return control.updateValueAndValidity();
  };

  registerOnValidatorChange(dir._rawValidators, onValidatorChange);
  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
}
/**
 * Cleans up sync and async directive validators on provided form control.
 * This function reverts the setup performed by the `setUpValidators` function, i.e.
 * removes directive-specific validators from a given control instance.
 *
 * @param control Form control from where directive validators should be removed.
 * @param dir Directive instance that contains validators to be removed.
 * @returns true if a control was updated as a result of this action.
 */


function cleanUpValidators(control, dir) {
  var isControlUpdated = false;

  if (control !== null) {
    if (dir.validator !== null) {
      var validators = getControlValidators(control);

      if (Array.isArray(validators) && validators.length > 0) {
        // Filter out directive validator function.
        var updatedValidators = validators.filter(function (validator) {
          return validator !== dir.validator;
        });

        if (updatedValidators.length !== validators.length) {
          isControlUpdated = true;
          control.setValidators(updatedValidators);
        }
      }
    }

    if (dir.asyncValidator !== null) {
      var asyncValidators = getControlAsyncValidators(control);

      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
        // Filter out directive async validator function.
        var updatedAsyncValidators = asyncValidators.filter(function (asyncValidator) {
          return asyncValidator !== dir.asyncValidator;
        });

        if (updatedAsyncValidators.length !== asyncValidators.length) {
          isControlUpdated = true;
          control.setAsyncValidators(updatedAsyncValidators);
        }
      }
    }
  } // Clear onValidatorChange callbacks by providing a noop function.


  var noop = function noop() {};

  registerOnValidatorChange(dir._rawValidators, noop);
  registerOnValidatorChange(dir._rawAsyncValidators, noop);
  return isControlUpdated;
}

function setUpViewChangePipeline(control, dir) {
  dir.valueAccessor.registerOnChange(function (newValue) {
    control._pendingValue = newValue;
    control._pendingChange = true;
    control._pendingDirty = true;
    if (control.updateOn === 'change') updateControl(control, dir);
  });
}

function setUpBlurPipeline(control, dir) {
  dir.valueAccessor.registerOnTouched(function () {
    control._pendingTouched = true;
    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
    if (control.updateOn !== 'submit') control.markAsTouched();
  });
}

function updateControl(control, dir) {
  if (control._pendingDirty) control.markAsDirty();
  control.setValue(control._pendingValue, {
    emitModelToViewChange: false
  });
  dir.viewToModelUpdate(control._pendingValue);
  control._pendingChange = false;
}

function setUpModelChangePipeline(control, dir) {
  var onChange = function onChange(newValue, emitModelEvent) {
    // control -> view
    dir.valueAccessor.writeValue(newValue); // control -> ngModel

    if (emitModelEvent) dir.viewToModelUpdate(newValue);
  };

  control.registerOnChange(onChange); // Register a callback function to cleanup onChange handler
  // from a control instance when a directive is destroyed.

  dir._registerOnDestroy(function () {
    control._unregisterOnChange(onChange);
  });
}
/**
 * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators
 * present in the view.
 *
 * @param control FormGroup or FormArray instance that should be linked.
 * @param dir Directive that provides view validators.
 */


function setUpFormContainer(control, dir) {
  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Cannot find control with');
  setUpValidators(control, dir);
}
/**
 * Reverts the setup performed by the `setUpFormContainer` function.
 *
 * @param control FormGroup or FormArray instance that should be cleaned up.
 * @param dir Directive that provided view validators.
 * @returns true if a control was updated as a result of this action.
 */


function cleanUpFormContainer(control, dir) {
  return cleanUpValidators(control, dir);
}

function _noControlError(dir) {
  return _throwError(dir, 'There is no FormControl instance attached to form control element with');
}

function _throwError(dir, message) {
  var messageEnd;

  if (dir.path.length > 1) {
    messageEnd = "path: '".concat(dir.path.join(' -> '), "'");
  } else if (dir.path[0]) {
    messageEnd = "name: '".concat(dir.path, "'");
  } else {
    messageEnd = 'unspecified name attribute';
  }

  throw new Error("".concat(message, " ").concat(messageEnd));
}

function isPropertyUpdated(changes, viewModel) {
  if (!changes.hasOwnProperty('model')) return false;
  var change = changes['model'];
  if (change.isFirstChange()) return true;
  return !Object.is(viewModel, change.currentValue);
}

function isBuiltInAccessor(valueAccessor) {
  // Check if a given value accessor is an instance of a class that directly extends
  // `BuiltInControlValueAccessor` one.
  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
}

function syncPendingControls(form, directives) {
  form._syncPendingControls();

  directives.forEach(function (dir) {
    var control = dir.control;

    if (control.updateOn === 'submit' && control._pendingChange) {
      dir.viewToModelUpdate(control._pendingValue);
      control._pendingChange = false;
    }
  });
} // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented


function selectValueAccessor(dir, valueAccessors) {
  if (!valueAccessors) return null;
  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Value accessor was not provided as an array for form control with');
  var defaultAccessor = undefined;
  var builtinAccessor = undefined;
  var customAccessor = undefined;
  valueAccessors.forEach(function (v) {
    if (v.constructor === DefaultValueAccessor) {
      defaultAccessor = v;
    } else if (isBuiltInAccessor(v)) {
      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one built-in value accessor matches form control with');
      builtinAccessor = v;
    } else {
      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one custom value accessor matches form control with');
      customAccessor = v;
    }
  });
  if (customAccessor) return customAccessor;
  if (builtinAccessor) return builtinAccessor;
  if (defaultAccessor) return defaultAccessor;

  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    _throwError(dir, 'No valid value accessor for form control with');
  }

  return null;
}

function removeListItem(list, el) {
  var index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
} // TODO(kara): remove after deprecation period


function _ngModelWarning(name, type, instance, warningConfig) {
  if (warningConfig === 'never') return;

  if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
    ReactiveErrors.ngModelWarning(name);
    type._ngModelWarningSentOnce = true;
    instance._ngModelWarningSent = true;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Reports that a FormControl is valid, meaning that no errors exist in the input value.
 *
 * @see `status`
 */


var VALID = 'VALID';
/**
 * Reports that a FormControl is invalid, meaning that an error exists in the input value.
 *
 * @see `status`
 */

var INVALID = 'INVALID';
/**
 * Reports that a FormControl is pending, meaning that that async validation is occurring and
 * errors are not yet available for the input value.
 *
 * @see `markAsPending`
 * @see `status`
 */

var PENDING = 'PENDING';
/**
 * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor
 * calculations of validity or value.
 *
 * @see `markAsDisabled`
 * @see `status`
 */

var DISABLED = 'DISABLED';

function _find(control, path, delimiter) {
  if (path == null) return null;

  if (!Array.isArray(path)) {
    path = path.split(delimiter);
  }

  if (Array.isArray(path) && path.length === 0) return null; // Not using Array.reduce here due to a Chrome 80 bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  var controlToFind = control;
  path.forEach(function (name) {
    if (controlToFind instanceof FormGroup) {
      controlToFind = controlToFind.controls.hasOwnProperty(name) ? controlToFind.controls[name] : null;
    } else if (controlToFind instanceof FormArray) {
      controlToFind = controlToFind.at(name) || null;
    } else {
      controlToFind = null;
    }
  });
  return controlToFind;
}
/**
 * Gets validators from either an options object or given validators.
 */


function pickValidators(validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
}
/**
 * Creates validator function by combining provided validators.
 */


function coerceToValidator(validator) {
  return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
/**
 * Gets async validators from either an options object or given validators.
 */


function pickAsyncValidators(asyncValidator, validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
}
/**
 * Creates async validator function by combining provided async validators.
 */


function coerceToAsyncValidator(asyncValidator) {
  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}

function isOptionsObj(validatorOrOpts) {
  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
}
/**
 * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
 *
 * It provides some of the shared behavior that all controls and groups of controls have, like
 * running validators, calculating status, and resetting state. It also defines the properties
 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
 * instantiated directly.
 *
 * @see [Forms Guide](/guide/forms)
 * @see [Reactive Forms Guide](/guide/reactive-forms)
 * @see [Dynamic Forms Guide](/guide/dynamic-form)
 *
 * @publicApi
 */


var AbstractControl = /*#__PURE__*/function () {
  /**
   * Initialize the AbstractControl instance.
   *
   * @param validators The function or array of functions that is used to determine the validity of
   *     this control synchronously.
   * @param asyncValidators The function or array of functions that is used to determine validity of
   *     this control asynchronously.
   */
  function AbstractControl(validators, asyncValidators) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AbstractControl);

    /**
     * Indicates that a control has its own pending asynchronous validation in progress.
     *
     * @internal
     */
    this._hasOwnPendingAsyncValidator = false;
    /** @internal */

    this._onCollectionChange = function () {};

    this._parent = null;
    /**
     * A control is `pristine` if the user has not yet changed
     * the value in the UI.
     *
     * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
     * Programmatic changes to a control's value do not mark it dirty.
     */

    this.pristine = true;
    /**
     * True if the control is marked as `touched`.
     *
     * A control is marked `touched` once the user has triggered
     * a `blur` event on it.
     */

    this.touched = false;
    /** @internal */

    this._onDisabledChange = [];
    this._rawValidators = validators;
    this._rawAsyncValidators = asyncValidators;
    this._composedValidatorFn = coerceToValidator(this._rawValidators);
    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
  }
  /**
   * Returns the function that is used to determine the validity of this control synchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(AbstractControl, [{
    key: "validator",
    get: function get() {
      return this._composedValidatorFn;
    },
    set: function set(validatorFn) {
      this._rawValidators = this._composedValidatorFn = validatorFn;
    }
    /**
     * Returns the function that is used to determine the validity of this control asynchronously.
     * If multiple validators have been added, this will be a single composed function.
     * See `Validators.compose()` for additional information.
     */

  }, {
    key: "asyncValidator",
    get: function get() {
      return this._composedAsyncValidatorFn;
    },
    set: function set(asyncValidatorFn) {
      this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
    }
    /**
     * The parent control.
     */

  }, {
    key: "parent",
    get: function get() {
      return this._parent;
    }
    /**
     * A control is `valid` when its `status` is `VALID`.
     *
     * @see {@link AbstractControl.status}
     *
     * @returns True if the control has passed all of its validation tests,
     * false otherwise.
     */

  }, {
    key: "valid",
    get: function get() {
      return this.status === VALID;
    }
    /**
     * A control is `invalid` when its `status` is `INVALID`.
     *
     * @see {@link AbstractControl.status}
     *
     * @returns True if this control has failed one or more of its validation checks,
     * false otherwise.
     */

  }, {
    key: "invalid",
    get: function get() {
      return this.status === INVALID;
    }
    /**
     * A control is `pending` when its `status` is `PENDING`.
     *
     * @see {@link AbstractControl.status}
     *
     * @returns True if this control is in the process of conducting a validation check,
     * false otherwise.
     */

  }, {
    key: "pending",
    get: function get() {
      return this.status == PENDING;
    }
    /**
     * A control is `disabled` when its `status` is `DISABLED`.
     *
     * Disabled controls are exempt from validation checks and
     * are not included in the aggregate value of their ancestor
     * controls.
     *
     * @see {@link AbstractControl.status}
     *
     * @returns True if the control is disabled, false otherwise.
     */

  }, {
    key: "disabled",
    get: function get() {
      return this.status === DISABLED;
    }
    /**
     * A control is `enabled` as long as its `status` is not `DISABLED`.
     *
     * @returns True if the control has any status other than 'DISABLED',
     * false if the status is 'DISABLED'.
     *
     * @see {@link AbstractControl.status}
     *
     */

  }, {
    key: "enabled",
    get: function get() {
      return this.status !== DISABLED;
    }
    /**
     * A control is `dirty` if the user has changed the value
     * in the UI.
     *
     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
     * Programmatic changes to a control's value do not mark it dirty.
     */

  }, {
    key: "dirty",
    get: function get() {
      return !this.pristine;
    }
    /**
     * True if the control has not been marked as touched
     *
     * A control is `untouched` if the user has not yet triggered
     * a `blur` event on it.
     */

  }, {
    key: "untouched",
    get: function get() {
      return !this.touched;
    }
    /**
     * Reports the update strategy of the `AbstractControl` (meaning
     * the event on which the control updates itself).
     * Possible values: `'change'` | `'blur'` | `'submit'`
     * Default value: `'change'`
     */

  }, {
    key: "updateOn",
    get: function get() {
      return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';
    }
    /**
     * Sets the synchronous validators that are active on this control.  Calling
     * this overwrites any existing synchronous validators.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * If you want to add a new validator without affecting existing ones, consider
     * using `addValidators()` method instead.
     */

  }, {
    key: "setValidators",
    value: function setValidators(validators) {
      this._rawValidators = validators;
      this._composedValidatorFn = coerceToValidator(validators);
    }
    /**
     * Sets the asynchronous validators that are active on this control. Calling this
     * overwrites any existing asynchronous validators.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * If you want to add a new validator without affecting existing ones, consider
     * using `addAsyncValidators()` method instead.
     */

  }, {
    key: "setAsyncValidators",
    value: function setAsyncValidators(validators) {
      this._rawAsyncValidators = validators;
      this._composedAsyncValidatorFn = coerceToAsyncValidator(validators);
    }
    /**
     * Add a synchronous validator or validators to this control, without affecting other validators.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * Adding a validator that already exists will have no effect. If duplicate validator functions
     * are present in the `validators` array, only the first instance would be added to a form
     * control.
     *
     * @param validators The new validator function or functions to add to this control.
     */

  }, {
    key: "addValidators",
    value: function addValidators(validators) {
      this.setValidators(_addValidators(validators, this._rawValidators));
    }
    /**
     * Add an asynchronous validator or validators to this control, without affecting other
     * validators.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * Adding a validator that already exists will have no effect.
     *
     * @param validators The new asynchronous validator function or functions to add to this control.
     */

  }, {
    key: "addAsyncValidators",
    value: function addAsyncValidators(validators) {
      this.setAsyncValidators(_addValidators(validators, this._rawAsyncValidators));
    }
    /**
     * Remove a synchronous validator from this control, without affecting other validators.
     * Validators are compared by function reference; you must pass a reference to the exact same
     * validator function as the one that was originally set. If a provided validator is not found,
     * it is ignored.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * @param validators The validator or validators to remove.
     */

  }, {
    key: "removeValidators",
    value: function removeValidators(validators) {
      this.setValidators(_removeValidators(validators, this._rawValidators));
    }
    /**
     * Remove an asynchronous validator from this control, without affecting other validators.
     * Validators are compared by function reference; you must pass a reference to the exact same
     * validator function as the one that was originally set. If a provided validator is not found, it
     * is ignored.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     * @param validators The asynchronous validator or validators to remove.
     */

  }, {
    key: "removeAsyncValidators",
    value: function removeAsyncValidators(validators) {
      this.setAsyncValidators(_removeValidators(validators, this._rawAsyncValidators));
    }
    /**
     * Check whether a synchronous validator function is present on this control. The provided
     * validator must be a reference to the exact same function that was provided.
     *
     * @param validator The validator to check for presence. Compared by function reference.
     * @returns Whether the provided validator was found on this control.
     */

  }, {
    key: "hasValidator",
    value: function hasValidator(validator) {
      return _hasValidator(this._rawValidators, validator);
    }
    /**
     * Check whether an asynchronous validator function is present on this control. The provided
     * validator must be a reference to the exact same function that was provided.
     *
     * @param validator The asynchronous validator to check for presence. Compared by function
     *     reference.
     * @returns Whether the provided asynchronous validator was found on this control.
     */

  }, {
    key: "hasAsyncValidator",
    value: function hasAsyncValidator(validator) {
      return _hasValidator(this._rawAsyncValidators, validator);
    }
    /**
     * Empties out the synchronous validator list.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     */

  }, {
    key: "clearValidators",
    value: function clearValidators() {
      this.validator = null;
    }
    /**
     * Empties out the async validator list.
     *
     * When you add or remove a validator at run time, you must call
     * `updateValueAndValidity()` for the new validation to take effect.
     *
     */

  }, {
    key: "clearAsyncValidators",
    value: function clearAsyncValidators() {
      this.asyncValidator = null;
    }
    /**
     * Marks the control as `touched`. A control is touched by focus and
     * blur events that do not change the value.
     *
     * @see `markAsUntouched()`
     * @see `markAsDirty()`
     * @see `markAsPristine()`
     *
     * @param opts Configuration options that determine how the control propagates changes
     * and emits events after marking is applied.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     */

  }, {
    key: "markAsTouched",
    value: function markAsTouched() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.touched = true;

      if (this._parent && !opts.onlySelf) {
        this._parent.markAsTouched(opts);
      }
    }
    /**
     * Marks the control and all its descendant controls as `touched`.
     * @see `markAsTouched()`
     */

  }, {
    key: "markAllAsTouched",
    value: function markAllAsTouched() {
      this.markAsTouched({
        onlySelf: true
      });

      this._forEachChild(function (control) {
        return control.markAllAsTouched();
      });
    }
    /**
     * Marks the control as `untouched`.
     *
     * If the control has any children, also marks all children as `untouched`
     * and recalculates the `touched` status of all parent controls.
     *
     * @see `markAsTouched()`
     * @see `markAsDirty()`
     * @see `markAsPristine()`
     *
     * @param opts Configuration options that determine how the control propagates changes
     * and emits events after the marking is applied.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     */

  }, {
    key: "markAsUntouched",
    value: function markAsUntouched() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.touched = false;
      this._pendingTouched = false;

      this._forEachChild(function (control) {
        control.markAsUntouched({
          onlySelf: true
        });
      });

      if (this._parent && !opts.onlySelf) {
        this._parent._updateTouched(opts);
      }
    }
    /**
     * Marks the control as `dirty`. A control becomes dirty when
     * the control's value is changed through the UI; compare `markAsTouched`.
     *
     * @see `markAsTouched()`
     * @see `markAsUntouched()`
     * @see `markAsPristine()`
     *
     * @param opts Configuration options that determine how the control propagates changes
     * and emits events after marking is applied.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     */

  }, {
    key: "markAsDirty",
    value: function markAsDirty() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.pristine = false;

      if (this._parent && !opts.onlySelf) {
        this._parent.markAsDirty(opts);
      }
    }
    /**
     * Marks the control as `pristine`.
     *
     * If the control has any children, marks all children as `pristine`,
     * and recalculates the `pristine` status of all parent
     * controls.
     *
     * @see `markAsTouched()`
     * @see `markAsUntouched()`
     * @see `markAsDirty()`
     *
     * @param opts Configuration options that determine how the control emits events after
     * marking is applied.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     */

  }, {
    key: "markAsPristine",
    value: function markAsPristine() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.pristine = true;
      this._pendingDirty = false;

      this._forEachChild(function (control) {
        control.markAsPristine({
          onlySelf: true
        });
      });

      if (this._parent && !opts.onlySelf) {
        this._parent._updatePristine(opts);
      }
    }
    /**
     * Marks the control as `pending`.
     *
     * A control is pending while the control performs async validation.
     *
     * @see {@link AbstractControl.status}
     *
     * @param opts Configuration options that determine how the control propagates changes and
     * emits events after marking is applied.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
     * observable emits an event with the latest status the control is marked pending.
     * When false, no events are emitted.
     *
     */

  }, {
    key: "markAsPending",
    value: function markAsPending() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.status = PENDING;

      if (opts.emitEvent !== false) {
        this.statusChanges.emit(this.status);
      }

      if (this._parent && !opts.onlySelf) {
        this._parent.markAsPending(opts);
      }
    }
    /**
     * Disables the control. This means the control is exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children are also disabled.
     *
     * @see {@link AbstractControl.status}
     *
     * @param opts Configuration options that determine how the control propagates
     * changes and emits events after the control is disabled.
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is disabled.
     * When false, no events are emitted.
     */

  }, {
    key: "disable",
    value: function disable() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // If parent has been marked artificially dirty we don't want to re-calculate the
      // parent's dirtiness based on the children.
      var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

      this.status = DISABLED;
      this.errors = null;

      this._forEachChild(function (control) {
        control.disable(Object.assign(Object.assign({}, opts), {
          onlySelf: true
        }));
      });

      this._updateValue();

      if (opts.emitEvent !== false) {
        this.valueChanges.emit(this.value);
        this.statusChanges.emit(this.status);
      }

      this._updateAncestors(Object.assign(Object.assign({}, opts), {
        skipPristineCheck: skipPristineCheck
      }));

      this._onDisabledChange.forEach(function (changeFn) {
        return changeFn(true);
      });
    }
    /**
     * Enables the control. This means the control is included in validation checks and
     * the aggregate value of its parent. Its status recalculates based on its value and
     * its validators.
     *
     * By default, if the control has children, all children are enabled.
     *
     * @see {@link AbstractControl.status}
     *
     * @param opts Configure options that control how the control propagates changes and
     * emits events when marked as untouched
     * * `onlySelf`: When true, mark only this control. When false or not supplied,
     * marks all direct ancestors. Default is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is enabled.
     * When false, no events are emitted.
     */

  }, {
    key: "enable",
    value: function enable() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // If parent has been marked artificially dirty we don't want to re-calculate the
      // parent's dirtiness based on the children.
      var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);

      this.status = VALID;

      this._forEachChild(function (control) {
        control.enable(Object.assign(Object.assign({}, opts), {
          onlySelf: true
        }));
      });

      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: opts.emitEvent
      });

      this._updateAncestors(Object.assign(Object.assign({}, opts), {
        skipPristineCheck: skipPristineCheck
      }));

      this._onDisabledChange.forEach(function (changeFn) {
        return changeFn(false);
      });
    }
  }, {
    key: "_updateAncestors",
    value: function _updateAncestors(opts) {
      if (this._parent && !opts.onlySelf) {
        this._parent.updateValueAndValidity(opts);

        if (!opts.skipPristineCheck) {
          this._parent._updatePristine();
        }

        this._parent._updateTouched();
      }
    }
    /**
     * @param parent Sets the parent of the control
     */

  }, {
    key: "setParent",
    value: function setParent(parent) {
      this._parent = parent;
    }
    /**
     * Recalculates the value and validation status of the control.
     *
     * By default, it also updates the value and validity of its ancestors.
     *
     * @param opts Configuration options determine how the control propagates changes and emits events
     * after updates and validity checks are applied.
     * * `onlySelf`: When true, only update this control. When false or not supplied,
     * update all direct ancestors. Default is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is updated.
     * When false, no events are emitted.
     */

  }, {
    key: "updateValueAndValidity",
    value: function updateValueAndValidity() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setInitialStatus();

      this._updateValue();

      if (this.enabled) {
        this._cancelExistingSubscription();

        this.errors = this._runValidator();
        this.status = this._calculateStatus();

        if (this.status === VALID || this.status === PENDING) {
          this._runAsyncValidator(opts.emitEvent);
        }
      }

      if (opts.emitEvent !== false) {
        this.valueChanges.emit(this.value);
        this.statusChanges.emit(this.status);
      }

      if (this._parent && !opts.onlySelf) {
        this._parent.updateValueAndValidity(opts);
      }
    }
    /** @internal */

  }, {
    key: "_updateTreeValidity",
    value: function _updateTreeValidity() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        emitEvent: true
      };

      this._forEachChild(function (ctrl) {
        return ctrl._updateTreeValidity(opts);
      });

      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: opts.emitEvent
      });
    }
  }, {
    key: "_setInitialStatus",
    value: function _setInitialStatus() {
      this.status = this._allControlsDisabled() ? DISABLED : VALID;
    }
  }, {
    key: "_runValidator",
    value: function _runValidator() {
      return this.validator ? this.validator(this) : null;
    }
  }, {
    key: "_runAsyncValidator",
    value: function _runAsyncValidator(emitEvent) {
      var _this3 = this;

      if (this.asyncValidator) {
        this.status = PENDING;
        this._hasOwnPendingAsyncValidator = true;
        var obs = toObservable(this.asyncValidator(this));
        this._asyncValidationSubscription = obs.subscribe(function (errors) {
          _this3._hasOwnPendingAsyncValidator = false; // This will trigger the recalculation of the validation status, which depends on
          // the state of the asynchronous validation (whether it is in progress or not). So, it is
          // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.

          _this3.setErrors(errors, {
            emitEvent: emitEvent
          });
        });
      }
    }
  }, {
    key: "_cancelExistingSubscription",
    value: function _cancelExistingSubscription() {
      if (this._asyncValidationSubscription) {
        this._asyncValidationSubscription.unsubscribe();

        this._hasOwnPendingAsyncValidator = false;
      }
    }
    /**
     * Sets errors on a form control when running validations manually, rather than automatically.
     *
     * Calling `setErrors` also updates the validity of the parent control.
     *
     * @usageNotes
     *
     * ### Manually set the errors for a control
     *
     * ```
     * const login = new FormControl('someLogin');
     * login.setErrors({
     *   notUnique: true
     * });
     *
     * expect(login.valid).toEqual(false);
     * expect(login.errors).toEqual({ notUnique: true });
     *
     * login.setValue('someOtherLogin');
     *
     * expect(login.valid).toEqual(true);
     * ```
     */

  }, {
    key: "setErrors",
    value: function setErrors(errors) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.errors = errors;

      this._updateControlsErrors(opts.emitEvent !== false);
    }
    /**
     * Retrieves a child control given the control's name or path.
     *
     * @param path A dot-delimited string or array of string/number values that define the path to the
     * control.
     *
     * @usageNotes
     * ### Retrieve a nested control
     *
     * For example, to get a `name` control nested within a `person` sub-group:
     *
     * * `this.form.get('person.name');`
     *
     * -OR-
     *
     * * `this.form.get(['person', 'name']);`
     *
     * ### Retrieve a control in a FormArray
     *
     * When accessing an element inside a FormArray, you can use an element index.
     * For example, to get a `price` control from the first element in an `items` array you can use:
     *
     * * `this.form.get('items.0.price');`
     *
     * -OR-
     *
     * * `this.form.get(['items', 0, 'price']);`
     */

  }, {
    key: "get",
    value: function get(path) {
      return _find(this, path, '.');
    }
    /**
     * @description
     * Reports error data for the control with the given path.
     *
     * @param errorCode The code of the error to check
     * @param path A list of control names that designates how to move from the current control
     * to the control that should be queried for errors.
     *
     * @usageNotes
     * For example, for the following `FormGroup`:
     *
     * ```
     * form = new FormGroup({
     *   address: new FormGroup({ street: new FormControl() })
     * });
     * ```
     *
     * The path to the 'street' control from the root form would be 'address' -> 'street'.
     *
     * It can be provided to this method in one of two formats:
     *
     * 1. An array of string control names, e.g. `['address', 'street']`
     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
     *
     * @returns error data for that particular error. If the control or error is not present,
     * null is returned.
     */

  }, {
    key: "getError",
    value: function getError(errorCode, path) {
      var control = path ? this.get(path) : this;
      return control && control.errors ? control.errors[errorCode] : null;
    }
    /**
     * @description
     * Reports whether the control with the given path has the error specified.
     *
     * @param errorCode The code of the error to check
     * @param path A list of control names that designates how to move from the current control
     * to the control that should be queried for errors.
     *
     * @usageNotes
     * For example, for the following `FormGroup`:
     *
     * ```
     * form = new FormGroup({
     *   address: new FormGroup({ street: new FormControl() })
     * });
     * ```
     *
     * The path to the 'street' control from the root form would be 'address' -> 'street'.
     *
     * It can be provided to this method in one of two formats:
     *
     * 1. An array of string control names, e.g. `['address', 'street']`
     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
     *
     * If no path is given, this method checks for the error on the current control.
     *
     * @returns whether the given error is present in the control at the given path.
     *
     * If the control is not present, false is returned.
     */

  }, {
    key: "hasError",
    value: function hasError(errorCode, path) {
      return !!this.getError(errorCode, path);
    }
    /**
     * Retrieves the top-level ancestor of this control.
     */

  }, {
    key: "root",
    get: function get() {
      var x = this;

      while (x._parent) {
        x = x._parent;
      }

      return x;
    }
    /** @internal */

  }, {
    key: "_updateControlsErrors",
    value: function _updateControlsErrors(emitEvent) {
      this.status = this._calculateStatus();

      if (emitEvent) {
        this.statusChanges.emit(this.status);
      }

      if (this._parent) {
        this._parent._updateControlsErrors(emitEvent);
      }
    }
    /** @internal */

  }, {
    key: "_initObservables",
    value: function _initObservables() {
      this.valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
      this.statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    }
  }, {
    key: "_calculateStatus",
    value: function _calculateStatus() {
      if (this._allControlsDisabled()) return DISABLED;
      if (this.errors) return INVALID;
      if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;
      if (this._anyControlsHaveStatus(INVALID)) return INVALID;
      return VALID;
    }
    /** @internal */

  }, {
    key: "_anyControlsHaveStatus",
    value: function _anyControlsHaveStatus(status) {
      return this._anyControls(function (control) {
        return control.status === status;
      });
    }
    /** @internal */

  }, {
    key: "_anyControlsDirty",
    value: function _anyControlsDirty() {
      return this._anyControls(function (control) {
        return control.dirty;
      });
    }
    /** @internal */

  }, {
    key: "_anyControlsTouched",
    value: function _anyControlsTouched() {
      return this._anyControls(function (control) {
        return control.touched;
      });
    }
    /** @internal */

  }, {
    key: "_updatePristine",
    value: function _updatePristine() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.pristine = !this._anyControlsDirty();

      if (this._parent && !opts.onlySelf) {
        this._parent._updatePristine(opts);
      }
    }
    /** @internal */

  }, {
    key: "_updateTouched",
    value: function _updateTouched() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.touched = this._anyControlsTouched();

      if (this._parent && !opts.onlySelf) {
        this._parent._updateTouched(opts);
      }
    }
    /** @internal */

  }, {
    key: "_isBoxedValue",
    value: function _isBoxedValue(formState) {
      return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
    }
    /** @internal */

  }, {
    key: "_registerOnCollectionChange",
    value: function _registerOnCollectionChange(fn) {
      this._onCollectionChange = fn;
    }
    /** @internal */

  }, {
    key: "_setUpdateStrategy",
    value: function _setUpdateStrategy(opts) {
      if (isOptionsObj(opts) && opts.updateOn != null) {
        this._updateOn = opts.updateOn;
      }
    }
    /**
     * Check to see if parent has been marked artificially dirty.
     *
     * @internal
     */

  }, {
    key: "_parentMarkedDirty",
    value: function _parentMarkedDirty(onlySelf) {
      var parentDirty = this._parent && this._parent.dirty;
      return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
    }
  }]);

  return AbstractControl;
}();
/**
 * Tracks the value and validation status of an individual form control.
 *
 * This is one of the three fundamental building blocks of Angular forms, along with
 * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that
 * implements most of the base functionality for accessing the value, validation status,
 * user interactions and events. See [usage examples below](#usage-notes).
 *
 * @see `AbstractControl`
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see [Usage Notes](#usage-notes)
 *
 * @usageNotes
 *
 * ### Initializing Form Controls
 *
 * Instantiate a `FormControl`, with an initial value.
 *
 * ```ts
 * const control = new FormControl('some value');
 * console.log(control.value);     // 'some value'
 *```
 *
 * The following example initializes the control with a form state object. The `value`
 * and `disabled` keys are required in this case.
 *
 * ```ts
 * const control = new FormControl({ value: 'n/a', disabled: true });
 * console.log(control.value);     // 'n/a'
 * console.log(control.status);    // 'DISABLED'
 * ```
 *
 * The following example initializes the control with a synchronous validator.
 *
 * ```ts
 * const control = new FormControl('', Validators.required);
 * console.log(control.value);      // ''
 * console.log(control.status);     // 'INVALID'
 * ```
 *
 * The following example initializes the control using an options object.
 *
 * ```ts
 * const control = new FormControl('', {
 *    validators: Validators.required,
 *    asyncValidators: myAsyncValidator
 * });
 * ```
 *
 * ### Configure the control to update on a blur event
 *
 * Set the `updateOn` option to `'blur'` to update on the blur `event`.
 *
 * ```ts
 * const control = new FormControl('', { updateOn: 'blur' });
 * ```
 *
 * ### Configure the control to update on a submit event
 *
 * Set the `updateOn` option to `'submit'` to update on a submit `event`.
 *
 * ```ts
 * const control = new FormControl('', { updateOn: 'submit' });
 * ```
 *
 * ### Reset the control back to an initial value
 *
 * You reset to a specific form state by passing through a standalone
 * value or a form state object that contains both a value and a disabled state
 * (these are the only two properties that cannot be calculated).
 *
 * ```ts
 * const control = new FormControl('Nancy');
 *
 * console.log(control.value); // 'Nancy'
 *
 * control.reset('Drew');
 *
 * console.log(control.value); // 'Drew'
 * ```
 *
 * ### Reset the control back to an initial value and disabled
 *
 * ```
 * const control = new FormControl('Nancy');
 *
 * console.log(control.value); // 'Nancy'
 * console.log(control.status); // 'VALID'
 *
 * control.reset({ value: 'Drew', disabled: true });
 *
 * console.log(control.value); // 'Drew'
 * console.log(control.status); // 'DISABLED'
 * ```
 *
 * @publicApi
 */


var FormControl = /*#__PURE__*/function (_AbstractControl) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormControl, _AbstractControl);

  var _super8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormControl);

  /**
   * Creates a new `FormControl` instance.
   *
   * @param formState Initializes the control with an initial value,
   * or an object that defines the initial value and disabled state.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  function FormControl() {
    var _this4;

    var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var validatorOrOpts = arguments.length > 1 ? arguments[1] : undefined;
    var asyncValidator = arguments.length > 2 ? arguments[2] : undefined;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormControl);

    _this4 = _super8.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    /** @internal */

    _this4._onChange = [];

    _this4._applyFormState(formState);

    _this4._setUpdateStrategy(validatorOrOpts);

    _this4._initObservables();

    _this4.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
      // to `true` to allow that during the control creation process.
      emitEvent: !!_this4.asyncValidator
    });

    return _this4;
  }
  /**
   * Sets a new value for the form control.
   *
   * @param value The new value for the control.
   * @param options Configuration options that determine how the control propagates changes
   * and emits events when the value changes.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an
   * `onChange` event to
   * update the view.
   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an
   * `ngModelChange`
   * event to update the model.
   *
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormControl, [{
    key: "setValue",
    value: function setValue(value) {
      var _this5 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.value = this._pendingValue = value;

      if (this._onChange.length && options.emitModelToViewChange !== false) {
        this._onChange.forEach(function (changeFn) {
          return changeFn(_this5.value, options.emitViewToModelChange !== false);
        });
      }

      this.updateValueAndValidity(options);
    }
    /**
     * Patches the value of a control.
     *
     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.
     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and
     * `FormArrays`, where it does behave differently.
     *
     * @see `setValue` for options
     */

  }, {
    key: "patchValue",
    value: function patchValue(value) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setValue(value, options);
    }
    /**
     * Resets the form control, marking it `pristine` and `untouched`, and setting
     * the value to null.
     *
     * @param formState Resets the control with an initial value,
     * or an object that defines the initial value and disabled state.
     *
     * @param options Configuration options that determine how the control propagates changes
     * and emits events after the value changes.
     *
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
     * false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is reset.
     * When false, no events are emitted.
     *
     */

  }, {
    key: "reset",
    value: function reset() {
      var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._applyFormState(formState);

      this.markAsPristine(options);
      this.markAsUntouched(options);
      this.setValue(this.value, options);
      this._pendingChange = false;
    }
    /**
     * @internal
     */

  }, {
    key: "_updateValue",
    value: function _updateValue() {}
    /**
     * @internal
     */

  }, {
    key: "_anyControls",
    value: function _anyControls(condition) {
      return false;
    }
    /**
     * @internal
     */

  }, {
    key: "_allControlsDisabled",
    value: function _allControlsDisabled() {
      return this.disabled;
    }
    /**
     * Register a listener for change events.
     *
     * @param fn The method that is called when the value changes
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this._onChange.push(fn);
    }
    /**
     * Internal function to unregister a change events listener.
     * @internal
     */

  }, {
    key: "_unregisterOnChange",
    value: function _unregisterOnChange(fn) {
      removeListItem(this._onChange, fn);
    }
    /**
     * Register a listener for disabled events.
     *
     * @param fn The method that is called when the disabled status changes.
     */

  }, {
    key: "registerOnDisabledChange",
    value: function registerOnDisabledChange(fn) {
      this._onDisabledChange.push(fn);
    }
    /**
     * Internal function to unregister a disabled event listener.
     * @internal
     */

  }, {
    key: "_unregisterOnDisabledChange",
    value: function _unregisterOnDisabledChange(fn) {
      removeListItem(this._onDisabledChange, fn);
    }
    /**
     * @internal
     */

  }, {
    key: "_forEachChild",
    value: function _forEachChild(cb) {}
    /** @internal */

  }, {
    key: "_syncPendingControls",
    value: function _syncPendingControls() {
      if (this.updateOn === 'submit') {
        if (this._pendingDirty) this.markAsDirty();
        if (this._pendingTouched) this.markAsTouched();

        if (this._pendingChange) {
          this.setValue(this._pendingValue, {
            onlySelf: true,
            emitModelToViewChange: false
          });
          return true;
        }
      }

      return false;
    }
  }, {
    key: "_applyFormState",
    value: function _applyFormState(formState) {
      if (this._isBoxedValue(formState)) {
        this.value = this._pendingValue = formState.value;
        formState.disabled ? this.disable({
          onlySelf: true,
          emitEvent: false
        }) : this.enable({
          onlySelf: true,
          emitEvent: false
        });
      } else {
        this.value = this._pendingValue = formState;
      }
    }
  }]);

  return FormControl;
}(AbstractControl);
/**
 * Tracks the value and validity state of a group of `FormControl` instances.
 *
 * A `FormGroup` aggregates the values of each child `FormControl` into one object,
 * with each control name as the key.  It calculates its status by reducing the status values
 * of its children. For example, if one of the controls in a group is invalid, the entire
 * group becomes invalid.
 *
 * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
 * along with `FormControl` and `FormArray`.
 *
 * When instantiating a `FormGroup`, pass in a collection of child controls as the first
 * argument. The key for each child registers the name for the control.
 *
 * @usageNotes
 *
 * ### Create a form group with 2 controls
 *
 * ```
 * const form = new FormGroup({
 *   first: new FormControl('Nancy', Validators.minLength(2)),
 *   last: new FormControl('Drew'),
 * });
 *
 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
 * console.log(form.status);  // 'VALID'
 * ```
 *
 * ### Create a form group with a group-level validator
 *
 * You include group-level validators as the second arg, or group-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('', Validators.minLength(2)),
 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
 * }, passwordMatchValidator);
 *
 *
 * function passwordMatchValidator(g: FormGroup) {
 *    return g.get('password').value === g.get('passwordConfirm').value
 *       ? null : {'mismatch': true};
 * }
 * ```
 *
 * Like `FormControl` instances, you choose to pass in
 * validators and async validators as part of an options object.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('')
 *   passwordConfirm: new FormControl('')
 * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
 * ```
 *
 * ### Set the updateOn property for all controls in a form group
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * group level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const c = new FormGroup({
 *   one: new FormControl()
 * }, { updateOn: 'blur' });
 * ```
 *
 * @publicApi
 */


var FormGroup = /*#__PURE__*/function (_AbstractControl2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormGroup, _AbstractControl2);

  var _super9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormGroup);

  /**
   * Creates a new `FormGroup` instance.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  function FormGroup(controls, validatorOrOpts, asyncValidator) {
    var _this6;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormGroup);

    _this6 = _super9.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    _this6.controls = controls;

    _this6._initObservables();

    _this6._setUpdateStrategy(validatorOrOpts);

    _this6._setUpControls();

    _this6.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
      // so we set `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!_this6.asyncValidator
    });

    return _this6;
  }
  /**
   * Registers a control with the group's list of controls.
   *
   * This method does not update the value or validity of the control.
   * Use {@link FormGroup#addControl addControl} instead.
   *
   * @param name The control name to register in the collection
   * @param control Provides the control for the given name
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormGroup, [{
    key: "registerControl",
    value: function registerControl(name, control) {
      if (this.controls[name]) return this.controls[name];
      this.controls[name] = control;
      control.setParent(this);

      control._registerOnCollectionChange(this._onCollectionChange);

      return control;
    }
    /**
     * Add a control to this group.
     *
     * If a control with a given name already exists, it would *not* be replaced with a new one.
     * If you want to replace an existing control, use the {@link FormGroup#setControl setControl}
     * method instead. This method also updates the value and validity of the control.
     *
     * @param name The control name to add to the collection
     * @param control Provides the control for the given name
     * @param options Specifies whether this FormGroup instance should emit events after a new
     *     control is added.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * added. When false, no events are emitted.
     */

  }, {
    key: "addControl",
    value: function addControl(name, control) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.registerControl(name, control);
      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });

      this._onCollectionChange();
    }
    /**
     * Remove a control from this group.
     *
     * This method also updates the value and validity of the control.
     *
     * @param name The control name to remove from the collection
     * @param options Specifies whether this FormGroup instance should emit events after a
     *     control is removed.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * removed. When false, no events are emitted.
     */

  }, {
    key: "removeControl",
    value: function removeControl(name) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
      delete this.controls[name];
      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });

      this._onCollectionChange();
    }
    /**
     * Replace an existing control.
     *
     * If a control with a given name does not exist in this `FormGroup`, it will be added.
     *
     * @param name The control name to replace in the collection
     * @param control Provides the control for the given name
     * @param options Specifies whether this FormGroup instance should emit events after an
     *     existing control is replaced.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * replaced with a new one. When false, no events are emitted.
     */

  }, {
    key: "setControl",
    value: function setControl(name, control) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});
      delete this.controls[name];
      if (control) this.registerControl(name, control);
      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });

      this._onCollectionChange();
    }
    /**
     * Check whether there is an enabled control with the given name in the group.
     *
     * Reports false for disabled controls. If you'd like to check for existence in the group
     * only, use {@link AbstractControl#get get} instead.
     *
     * @param controlName The control name to check for existence in the collection
     *
     * @returns false for disabled controls, true otherwise.
     */

  }, {
    key: "contains",
    value: function contains(controlName) {
      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
    }
    /**
     * Sets the value of the `FormGroup`. It accepts an object that matches
     * the structure of the group, with control names as keys.
     *
     * @usageNotes
     * ### Set the complete value for the form group
     *
     * ```
     * const form = new FormGroup({
     *   first: new FormControl(),
     *   last: new FormControl()
     * });
     *
     * console.log(form.value);   // {first: null, last: null}
     *
     * form.setValue({first: 'Nancy', last: 'Drew'});
     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
     * ```
     *
     * @throws When strict checks fail, such as setting the value of a control
     * that doesn't exist or if you exclude a value of a control that does exist.
     *
     * @param value The new value for the control that matches the structure of the group.
     * @param options Configuration options that determine how the control propagates changes
     * and emits events after the value changes.
     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
     * updateValueAndValidity} method.
     *
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
     * false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control value is updated.
     * When false, no events are emitted.
     */

  }, {
    key: "setValue",
    value: function setValue(value) {
      var _this7 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._checkAllValuesPresent(value);

      Object.keys(value).forEach(function (name) {
        _this7._throwIfControlMissing(name);

        _this7.controls[name].setValue(value[name], {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      });
      this.updateValueAndValidity(options);
    }
    /**
     * Patches the value of the `FormGroup`. It accepts an object with control
     * names as keys, and does its best to match the values to the correct controls
     * in the group.
     *
     * It accepts both super-sets and sub-sets of the group without throwing an error.
     *
     * @usageNotes
     * ### Patch the value for a form group
     *
     * ```
     * const form = new FormGroup({
     *    first: new FormControl(),
     *    last: new FormControl()
     * });
     * console.log(form.value);   // {first: null, last: null}
     *
     * form.patchValue({first: 'Nancy'});
     * console.log(form.value);   // {first: 'Nancy', last: null}
     * ```
     *
     * @param value The object that matches the structure of the group.
     * @param options Configuration options that determine how the control propagates changes and
     * emits events after the value is patched.
     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
     * true.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control value
     * is updated. When false, no events are emitted. The configuration options are passed to
     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
     */

  }, {
    key: "patchValue",
    value: function patchValue(value) {
      var _this8 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
      // `patchValue` can be called recursively and inner data structures might have these values, so
      // we just ignore such cases when a field containing FormGroup instance receives `null` or
      // `undefined` as a value.
      if (value == null
      /* both `null` and `undefined` */
      ) return;
      Object.keys(value).forEach(function (name) {
        if (_this8.controls[name]) {
          _this8.controls[name].patchValue(value[name], {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        }
      });
      this.updateValueAndValidity(options);
    }
    /**
     * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
     * the value of all descendants to null.
     *
     * You reset to a specific form state by passing in a map of states
     * that matches the structure of your form, with control names as keys. The state
     * is a standalone value or a form state object with both a value and a disabled
     * status.
     *
     * @param value Resets the control with an initial value,
     * or an object that defines the initial value and disabled state.
     *
     * @param options Configuration options that determine how the control propagates changes
     * and emits events when the group is reset.
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
     * false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is reset.
     * When false, no events are emitted.
     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
     * updateValueAndValidity} method.
     *
     * @usageNotes
     *
     * ### Reset the form group values
     *
     * ```ts
     * const form = new FormGroup({
     *   first: new FormControl('first name'),
     *   last: new FormControl('last name')
     * });
     *
     * console.log(form.value);  // {first: 'first name', last: 'last name'}
     *
     * form.reset({ first: 'name', last: 'last name' });
     *
     * console.log(form.value);  // {first: 'name', last: 'last name'}
     * ```
     *
     * ### Reset the form group values and disabled status
     *
     * ```
     * const form = new FormGroup({
     *   first: new FormControl('first name'),
     *   last: new FormControl('last name')
     * });
     *
     * form.reset({
     *   first: {value: 'name', disabled: true},
     *   last: 'last'
     * });
     *
     * console.log(form.value);  // {last: 'last'}
     * console.log(form.get('first').status);  // 'DISABLED'
     * ```
     */

  }, {
    key: "reset",
    value: function reset() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._forEachChild(function (control, name) {
        control.reset(value[name], {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      });

      this._updatePristine(options);

      this._updateTouched(options);

      this.updateValueAndValidity(options);
    }
    /**
     * The aggregate value of the `FormGroup`, including any disabled controls.
     *
     * Retrieves all values regardless of disabled status.
     * The `value` property is the best way to get the value of the group, because
     * it excludes disabled controls in the `FormGroup`.
     */

  }, {
    key: "getRawValue",
    value: function getRawValue() {
      return this._reduceChildren({}, function (acc, control, name) {
        acc[name] = control instanceof FormControl ? control.value : control.getRawValue();
        return acc;
      });
    }
    /** @internal */

  }, {
    key: "_syncPendingControls",
    value: function _syncPendingControls() {
      var subtreeUpdated = this._reduceChildren(false, function (updated, child) {
        return child._syncPendingControls() ? true : updated;
      });

      if (subtreeUpdated) this.updateValueAndValidity({
        onlySelf: true
      });
      return subtreeUpdated;
    }
    /** @internal */

  }, {
    key: "_throwIfControlMissing",
    value: function _throwIfControlMissing(name) {
      if (!Object.keys(this.controls).length) {
        throw new Error("\n        There are no form controls registered with this group yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }

      if (!this.controls[name]) {
        throw new Error("Cannot find form control with name: ".concat(name, "."));
      }
    }
    /** @internal */

  }, {
    key: "_forEachChild",
    value: function _forEachChild(cb) {
      var _this9 = this;

      Object.keys(this.controls).forEach(function (key) {
        // The list of controls can change (for ex. controls might be removed) while the loop
        // is running (as a result of invoking Forms API in `valueChanges` subscription), so we
        // have to null check before invoking the callback.
        var control = _this9.controls[key];
        control && cb(control, key);
      });
    }
    /** @internal */

  }, {
    key: "_setUpControls",
    value: function _setUpControls() {
      var _this10 = this;

      this._forEachChild(function (control) {
        control.setParent(_this10);

        control._registerOnCollectionChange(_this10._onCollectionChange);
      });
    }
    /** @internal */

  }, {
    key: "_updateValue",
    value: function _updateValue() {
      this.value = this._reduceValue();
    }
    /** @internal */

  }, {
    key: "_anyControls",
    value: function _anyControls(condition) {
      for (var _i = 0, _Object$keys = Object.keys(this.controls); _i < _Object$keys.length; _i++) {
        var controlName = _Object$keys[_i];
        var control = this.controls[controlName];

        if (this.contains(controlName) && condition(control)) {
          return true;
        }
      }

      return false;
    }
    /** @internal */

  }, {
    key: "_reduceValue",
    value: function _reduceValue() {
      var _this11 = this;

      return this._reduceChildren({}, function (acc, control, name) {
        if (control.enabled || _this11.disabled) {
          acc[name] = control.value;
        }

        return acc;
      });
    }
    /** @internal */

  }, {
    key: "_reduceChildren",
    value: function _reduceChildren(initValue, fn) {
      var res = initValue;

      this._forEachChild(function (control, name) {
        res = fn(res, control, name);
      });

      return res;
    }
    /** @internal */

  }, {
    key: "_allControlsDisabled",
    value: function _allControlsDisabled() {
      for (var _i2 = 0, _Object$keys2 = Object.keys(this.controls); _i2 < _Object$keys2.length; _i2++) {
        var controlName = _Object$keys2[_i2];

        if (this.controls[controlName].enabled) {
          return false;
        }
      }

      return Object.keys(this.controls).length > 0 || this.disabled;
    }
    /** @internal */

  }, {
    key: "_checkAllValuesPresent",
    value: function _checkAllValuesPresent(value) {
      this._forEachChild(function (control, name) {
        if (value[name] === undefined) {
          throw new Error("Must supply a value for form control with name: '".concat(name, "'."));
        }
      });
    }
  }]);

  return FormGroup;
}(AbstractControl);
/**
 * Tracks the value and validity state of an array of `FormControl`,
 * `FormGroup` or `FormArray` instances.
 *
 * A `FormArray` aggregates the values of each child `FormControl` into an array.
 * It calculates its status by reducing the status values of its children. For example, if one of
 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
 *
 * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
 * along with `FormControl` and `FormGroup`.
 *
 * @usageNotes
 *
 * ### Create an array of form controls
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy', Validators.minLength(2)),
 *   new FormControl('Drew'),
 * ]);
 *
 * console.log(arr.value);   // ['Nancy', 'Drew']
 * console.log(arr.status);  // 'VALID'
 * ```
 *
 * ### Create a form array with array-level validators
 *
 * You include array-level validators and async validators. These come in handy
 * when you want to perform validation that considers the value of more than one child
 * control.
 *
 * The two types of validators are passed in separately as the second and third arg
 * respectively, or together as part of an options object.
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy'),
 *   new FormControl('Drew')
 * ], {validators: myValidator, asyncValidators: myAsyncValidator});
 * ```
 *
 * ### Set the updateOn property for all controls in a form array
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * array level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const arr = new FormArray([
 *    new FormControl()
 * ], {updateOn: 'blur'});
 * ```
 *
 * ### Adding or removing controls from a form array
 *
 * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `FormArray` directly, as that result in strange and unexpected behavior such
 * as broken change detection.
 *
 * @publicApi
 */


var FormArray = /*#__PURE__*/function (_AbstractControl3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormArray, _AbstractControl3);

  var _super10 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormArray);

  /**
   * Creates a new `FormArray` instance.
   *
   * @param controls An array of child controls. Each child control is given an index
   * where it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  function FormArray(controls, validatorOrOpts, asyncValidator) {
    var _this12;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormArray);

    _this12 = _super10.call(this, pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    _this12.controls = controls;

    _this12._initObservables();

    _this12._setUpdateStrategy(validatorOrOpts);

    _this12._setUpControls();

    _this12.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
      // to `true` to allow that during the control creation process.
      emitEvent: !!_this12.asyncValidator
    });

    return _this12;
  }
  /**
   * Get the `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to retrieve the control
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormArray, [{
    key: "at",
    value: function at(index) {
      return this.controls[index];
    }
    /**
     * Insert a new `AbstractControl` at the end of the array.
     *
     * @param control Form control to be inserted
     * @param options Specifies whether this FormArray instance should emit events after a new
     *     control is added.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * inserted. When false, no events are emitted.
     */

  }, {
    key: "push",
    value: function push(control) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.controls.push(control);

      this._registerControl(control);

      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });

      this._onCollectionChange();
    }
    /**
     * Insert a new `AbstractControl` at the given `index` in the array.
     *
     * @param index Index in the array to insert the control
     * @param control Form control to be inserted
     * @param options Specifies whether this FormArray instance should emit events after a new
     *     control is inserted.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * inserted. When false, no events are emitted.
     */

  }, {
    key: "insert",
    value: function insert(index, control) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.controls.splice(index, 0, control);

      this._registerControl(control);

      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });
    }
    /**
     * Remove the control at the given `index` in the array.
     *
     * @param index Index in the array to remove the control
     * @param options Specifies whether this FormArray instance should emit events after a
     *     control is removed.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * removed. When false, no events are emitted.
     */

  }, {
    key: "removeAt",
    value: function removeAt(index) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
      this.controls.splice(index, 1);
      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });
    }
    /**
     * Replace an existing control.
     *
     * @param index Index in the array to replace the control
     * @param control The `AbstractControl` control to replace the existing control
     * @param options Specifies whether this FormArray instance should emit events after an
     *     existing control is replaced with a new one.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control is
     * replaced with a new one. When false, no events are emitted.
     */

  }, {
    key: "setControl",
    value: function setControl(index, control) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});
      this.controls.splice(index, 1);

      if (control) {
        this.controls.splice(index, 0, control);

        this._registerControl(control);
      }

      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });

      this._onCollectionChange();
    }
    /**
     * Length of the control array.
     */

  }, {
    key: "length",
    get: function get() {
      return this.controls.length;
    }
    /**
     * Sets the value of the `FormArray`. It accepts an array that matches
     * the structure of the control.
     *
     * This method performs strict checks, and throws an error if you try
     * to set the value of a control that doesn't exist or if you exclude the
     * value of a control.
     *
     * @usageNotes
     * ### Set the values for the controls in the form array
     *
     * ```
     * const arr = new FormArray([
     *   new FormControl(),
     *   new FormControl()
     * ]);
     * console.log(arr.value);   // [null, null]
     *
     * arr.setValue(['Nancy', 'Drew']);
     * console.log(arr.value);   // ['Nancy', 'Drew']
     * ```
     *
     * @param value Array of values for the controls
     * @param options Configure options that determine how the control propagates changes and
     * emits events after the value changes
     *
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
     * is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control value is updated.
     * When false, no events are emitted.
     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
     * updateValueAndValidity} method.
     */

  }, {
    key: "setValue",
    value: function setValue(value) {
      var _this13 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._checkAllValuesPresent(value);

      value.forEach(function (newValue, index) {
        _this13._throwIfControlMissing(index);

        _this13.at(index).setValue(newValue, {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      });
      this.updateValueAndValidity(options);
    }
    /**
     * Patches the value of the `FormArray`. It accepts an array that matches the
     * structure of the control, and does its best to match the values to the correct
     * controls in the group.
     *
     * It accepts both super-sets and sub-sets of the array without throwing an error.
     *
     * @usageNotes
     * ### Patch the values for controls in a form array
     *
     * ```
     * const arr = new FormArray([
     *    new FormControl(),
     *    new FormControl()
     * ]);
     * console.log(arr.value);   // [null, null]
     *
     * arr.patchValue(['Nancy']);
     * console.log(arr.value);   // ['Nancy', null]
     * ```
     *
     * @param value Array of latest values for the controls
     * @param options Configure options that determine how the control propagates changes and
     * emits events after the value changes
     *
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
     * is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when the control value
     * is updated. When false, no events are emitted. The configuration options are passed to
     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
     */

  }, {
    key: "patchValue",
    value: function patchValue(value) {
      var _this14 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
      // `patchValue` can be called recursively and inner data structures might have these values, so
      // we just ignore such cases when a field containing FormArray instance receives `null` or
      // `undefined` as a value.
      if (value == null
      /* both `null` and `undefined` */
      ) return;
      value.forEach(function (newValue, index) {
        if (_this14.at(index)) {
          _this14.at(index).patchValue(newValue, {
            onlySelf: true,
            emitEvent: options.emitEvent
          });
        }
      });
      this.updateValueAndValidity(options);
    }
    /**
     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
     * value of all descendants to null or null maps.
     *
     * You reset to a specific form state by passing in an array of states
     * that matches the structure of the control. The state is a standalone value
     * or a form state object with both a value and a disabled status.
     *
     * @usageNotes
     * ### Reset the values in a form array
     *
     * ```ts
     * const arr = new FormArray([
     *    new FormControl(),
     *    new FormControl()
     * ]);
     * arr.reset(['name', 'last name']);
     *
     * console.log(arr.value);  // ['name', 'last name']
     * ```
     *
     * ### Reset the values in a form array and the disabled status for the first control
     *
     * ```
     * arr.reset([
     *   {value: 'name', disabled: true},
     *   'last'
     * ]);
     *
     * console.log(arr.value);  // ['last']
     * console.log(arr.at(0).status);  // 'DISABLED'
     * ```
     *
     * @param value Array of values for the controls
     * @param options Configure options that determine how the control propagates changes and
     * emits events after the value changes
     *
     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
     * is false.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges`
     * observables emit events with the latest status and value when the control is reset.
     * When false, no events are emitted.
     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
     * updateValueAndValidity} method.
     */

  }, {
    key: "reset",
    value: function reset() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._forEachChild(function (control, index) {
        control.reset(value[index], {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      });

      this._updatePristine(options);

      this._updateTouched(options);

      this.updateValueAndValidity(options);
    }
    /**
     * The aggregate value of the array, including any disabled controls.
     *
     * Reports all values regardless of disabled status.
     * For enabled controls only, the `value` property is the best way to get the value of the array.
     */

  }, {
    key: "getRawValue",
    value: function getRawValue() {
      return this.controls.map(function (control) {
        return control instanceof FormControl ? control.value : control.getRawValue();
      });
    }
    /**
     * Remove all controls in the `FormArray`.
     *
     * @param options Specifies whether this FormArray instance should emit events after all
     *     controls are removed.
     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
     * `valueChanges` observables emit events with the latest status and value when all controls
     * in this FormArray instance are removed. When false, no events are emitted.
     *
     * @usageNotes
     * ### Remove all elements from a FormArray
     *
     * ```ts
     * const arr = new FormArray([
     *    new FormControl(),
     *    new FormControl()
     * ]);
     * console.log(arr.length);  // 2
     *
     * arr.clear();
     * console.log(arr.length);  // 0
     * ```
     *
     * It's a simpler and more efficient alternative to removing all elements one by one:
     *
     * ```ts
     * const arr = new FormArray([
     *    new FormControl(),
     *    new FormControl()
     * ]);
     *
     * while (arr.length) {
     *    arr.removeAt(0);
     * }
     * ```
     */

  }, {
    key: "clear",
    value: function clear() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.controls.length < 1) return;

      this._forEachChild(function (control) {
        return control._registerOnCollectionChange(function () {});
      });

      this.controls.splice(0);
      this.updateValueAndValidity({
        emitEvent: options.emitEvent
      });
    }
    /** @internal */

  }, {
    key: "_syncPendingControls",
    value: function _syncPendingControls() {
      var subtreeUpdated = this.controls.reduce(function (updated, child) {
        return child._syncPendingControls() ? true : updated;
      }, false);
      if (subtreeUpdated) this.updateValueAndValidity({
        onlySelf: true
      });
      return subtreeUpdated;
    }
    /** @internal */

  }, {
    key: "_throwIfControlMissing",
    value: function _throwIfControlMissing(index) {
      if (!this.controls.length) {
        throw new Error("\n        There are no form controls registered with this array yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }

      if (!this.at(index)) {
        throw new Error("Cannot find form control at index ".concat(index));
      }
    }
    /** @internal */

  }, {
    key: "_forEachChild",
    value: function _forEachChild(cb) {
      this.controls.forEach(function (control, index) {
        cb(control, index);
      });
    }
    /** @internal */

  }, {
    key: "_updateValue",
    value: function _updateValue() {
      var _this15 = this;

      this.value = this.controls.filter(function (control) {
        return control.enabled || _this15.disabled;
      }).map(function (control) {
        return control.value;
      });
    }
    /** @internal */

  }, {
    key: "_anyControls",
    value: function _anyControls(condition) {
      return this.controls.some(function (control) {
        return control.enabled && condition(control);
      });
    }
    /** @internal */

  }, {
    key: "_setUpControls",
    value: function _setUpControls() {
      var _this16 = this;

      this._forEachChild(function (control) {
        return _this16._registerControl(control);
      });
    }
    /** @internal */

  }, {
    key: "_checkAllValuesPresent",
    value: function _checkAllValuesPresent(value) {
      this._forEachChild(function (control, i) {
        if (value[i] === undefined) {
          throw new Error("Must supply a value for form control at index: ".concat(i, "."));
        }
      });
    }
    /** @internal */

  }, {
    key: "_allControlsDisabled",
    value: function _allControlsDisabled() {
      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this.controls),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var control = _step.value;
          if (control.enabled) return false;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this.controls.length > 0 || this.disabled;
    }
  }, {
    key: "_registerControl",
    value: function _registerControl(control) {
      control.setParent(this);

      control._registerOnCollectionChange(this._onCollectionChange);
    }
  }]);

  return FormArray;
}(AbstractControl);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var formDirectiveProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return NgForm;
  })
};

var ɵ0 = function ɵ0() {
  return Promise.resolve(null);
};

var resolvedPromise = ɵ0();
/**
 * @description
 * Creates a top-level `FormGroup` instance and binds it to a form
 * to track aggregate form value and validation status.
 *
 * As soon as you import the `FormsModule`, this directive becomes active by default on
 * all `<form>` tags.  You don't need to add a special selector.
 *
 * You optionally export the directive into a local template variable using `ngForm` as the key
 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
 * `FormGroup` instance are duplicated on the directive itself, so a reference to it
 * gives you access to the aggregate value and validity status of the form, as well as
 * user interaction properties like `dirty` and `touched`.
 *
 * To register child controls with the form, use `NgModel` with a `name`
 * attribute. You may use `NgModelGroup` to create sub-groups within the form.
 *
 * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event emits the original form
 * submission event.
 *
 * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
 * To import the `FormsModule` but skip its usage in some forms,
 * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
 * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
 * unnecessary because the `<form>` tags are inert. In that case, you would
 * refrain from using the `formGroup` directive.
 *
 * @usageNotes
 *
 * ### Listening for form submission
 *
 * The following example shows how to capture the form values from the "ngSubmit" event.
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Setting the update options
 *
 * The following example shows you how to change the "updateOn" option from its default using
 * ngFormOptions.
 *
 * ```html
 * <form [ngFormOptions]="{updateOn: 'blur'}">
 *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
 * </form>
 * ```
 *
 * ### Native DOM validation UI
 *
 * In order to prevent the native DOM form validation UI from interfering with Angular's form
 * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
 * `FormModule` or `ReactiveFormModule` are imported into the application.
 * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
 * `ngNativeValidate` attribute to the `<form>` element:
 *
 * ```html
 * <form ngNativeValidate>
 *   ...
 * </form>
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */

var NgForm = /*#__PURE__*/function (_ControlContainer) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgForm, _ControlContainer);

  var _super11 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgForm);

  function NgForm(validators, asyncValidators) {
    var _this17;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgForm);

    _this17 = _super11.call(this);
    /**
     * @description
     * Returns whether the form submission has been triggered.
     */

    _this17.submitted = false;
    _this17._directives = [];
    /**
     * @description
     * Event emitter for the "ngSubmit" event
     */

    _this17.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    _this17.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
    return _this17;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NgForm, [{
    key: "ngAfterViewInit",
    value: function ngAfterViewInit() {
      this._setUpdateStrategy();
    }
    /**
     * @description
     * The directive instance.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this;
    }
    /**
     * @description
     * The internal `FormGroup` instance.
     */

  }, {
    key: "control",
    get: function get() {
      return this.form;
    }
    /**
     * @description
     * Returns an array representing the path to this group. Because this directive
     * always lives at the top level of a form, it is always an empty array.
     */

  }, {
    key: "path",
    get: function get() {
      return [];
    }
    /**
     * @description
     * Returns a map of the controls in this group.
     */

  }, {
    key: "controls",
    get: function get() {
      return this.form.controls;
    }
    /**
     * @description
     * Method that sets up the control directive in this group, re-calculates its value
     * and validity, and adds the instance to the internal list of directives.
     *
     * @param dir The `NgModel` directive instance.
     */

  }, {
    key: "addControl",
    value: function addControl(dir) {
      var _this18 = this;

      resolvedPromise.then(function () {
        var container = _this18._findContainer(dir.path);

        dir.control = container.registerControl(dir.name, dir.control);
        setUpControl(dir.control, dir);
        dir.control.updateValueAndValidity({
          emitEvent: false
        });

        _this18._directives.push(dir);
      });
    }
    /**
     * @description
     * Retrieves the `FormControl` instance from the provided `NgModel` directive.
     *
     * @param dir The `NgModel` directive instance.
     */

  }, {
    key: "getControl",
    value: function getControl(dir) {
      return this.form.get(dir.path);
    }
    /**
     * @description
     * Removes the `NgModel` instance from the internal list of directives
     *
     * @param dir The `NgModel` directive instance.
     */

  }, {
    key: "removeControl",
    value: function removeControl(dir) {
      var _this19 = this;

      resolvedPromise.then(function () {
        var container = _this19._findContainer(dir.path);

        if (container) {
          container.removeControl(dir.name);
        }

        removeListItem(_this19._directives, dir);
      });
    }
    /**
     * @description
     * Adds a new `NgModelGroup` directive instance to the form.
     *
     * @param dir The `NgModelGroup` directive instance.
     */

  }, {
    key: "addFormGroup",
    value: function addFormGroup(dir) {
      var _this20 = this;

      resolvedPromise.then(function () {
        var container = _this20._findContainer(dir.path);

        var group = new FormGroup({});
        setUpFormContainer(group, dir);
        container.registerControl(dir.name, group);
        group.updateValueAndValidity({
          emitEvent: false
        });
      });
    }
    /**
     * @description
     * Removes the `NgModelGroup` directive instance from the form.
     *
     * @param dir The `NgModelGroup` directive instance.
     */

  }, {
    key: "removeFormGroup",
    value: function removeFormGroup(dir) {
      var _this21 = this;

      resolvedPromise.then(function () {
        var container = _this21._findContainer(dir.path);

        if (container) {
          container.removeControl(dir.name);
        }
      });
    }
    /**
     * @description
     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
     *
     * @param dir The `NgModelGroup` directive instance.
     */

  }, {
    key: "getFormGroup",
    value: function getFormGroup(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Sets the new value for the provided `NgControl` directive.
     *
     * @param dir The `NgControl` directive instance.
     * @param value The new value for the directive's control.
     */

  }, {
    key: "updateModel",
    value: function updateModel(dir, value) {
      var _this22 = this;

      resolvedPromise.then(function () {
        var ctrl = _this22.form.get(dir.path);

        ctrl.setValue(value);
      });
    }
    /**
     * @description
     * Sets the value for this `FormGroup`.
     *
     * @param value The new value
     */

  }, {
    key: "setValue",
    value: function setValue(value) {
      this.control.setValue(value);
    }
    /**
     * @description
     * Method called when the "submit" event is triggered on the form.
     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
     *
     * @param $event The "submit" event object
     */

  }, {
    key: "onSubmit",
    value: function onSubmit($event) {
      this.submitted = true;
      syncPendingControls(this.form, this._directives);
      this.ngSubmit.emit($event);
      return false;
    }
    /**
     * @description
     * Method called when the "reset" event is triggered on the form.
     */

  }, {
    key: "onReset",
    value: function onReset() {
      this.resetForm();
    }
    /**
     * @description
     * Resets the form to an initial value and resets its submitted status.
     *
     * @param value The new value for the form.
     */

  }, {
    key: "resetForm",
    value: function resetForm() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      this.form.reset(value);
      this.submitted = false;
    }
  }, {
    key: "_setUpdateStrategy",
    value: function _setUpdateStrategy() {
      if (this.options && this.options.updateOn != null) {
        this.form._updateOn = this.options.updateOn;
      }
    }
    /** @internal */

  }, {
    key: "_findContainer",
    value: function _findContainer(path) {
      path.pop();
      return path.length ? this.form.get(path) : this.form;
    }
  }]);

  return NgForm;
}(ControlContainer);

NgForm.ɵfac = function NgForm_Factory(t) {
  return new (t || NgForm)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};

NgForm.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgForm,
  selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
  hostBindings: function NgForm_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("submit", function NgForm_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function NgForm_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    options: ["ngFormOptions", "options"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formDirectiveProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

NgForm.ctorParameters = function () {
  return [{
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
};

NgForm.propDecorators = {
  options: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngFormOptions']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgForm, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',
      providers: [formDirectiveProvider],
      host: {
        '(submit)': 'onSubmit($event)',
        '(reset)': 'onReset()'
      },
      outputs: ['ngSubmit'],
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngFormOptions']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
 *
 * @publicApi
 */


var AbstractFormGroupDirective = /*#__PURE__*/function (_ControlContainer2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(AbstractFormGroupDirective, _ControlContainer2);

  var _super12 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(AbstractFormGroupDirective);

  function AbstractFormGroupDirective() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AbstractFormGroupDirective);

    return _super12.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(AbstractFormGroupDirective, [{
    key: "ngOnInit",
    value:
    /** @nodoc */
    function ngOnInit() {
      this._checkParentType(); // Register the group with its parent group.


      this.formDirective.addFormGroup(this);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.formDirective) {
        // Remove the group from its parent group.
        this.formDirective.removeFormGroup(this);
      }
    }
    /**
     * @description
     * The `FormGroup` bound to this directive.
     */

  }, {
    key: "control",
    get: function get() {
      return this.formDirective.getFormGroup(this);
    }
    /**
     * @description
     * The path to this group from the top-level directive.
     */

  }, {
    key: "path",
    get: function get() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this._parent ? this._parent.formDirective : null;
    }
    /** @internal */

  }, {
    key: "_checkParentType",
    value: function _checkParentType() {}
  }]);

  return AbstractFormGroupDirective;
}(ControlContainer);

AbstractFormGroupDirective.ɵfac = /*@__PURE__*/function () {
  var ɵAbstractFormGroupDirective_BaseFactory;
  return function AbstractFormGroupDirective_Factory(t) {
    return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](AbstractFormGroupDirective)))(t || AbstractFormGroupDirective);
  };
}();

AbstractFormGroupDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: AbstractFormGroupDirective,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](AbstractFormGroupDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var TemplateDrivenErrors = /*#__PURE__*/function () {
  function TemplateDrivenErrors() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, TemplateDrivenErrors);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(TemplateDrivenErrors, null, [{
    key: "modelParentException",
    value: function modelParentException() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ".concat(FormErrorExamples.formControlName, "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ").concat(FormErrorExamples.ngModelWithFormGroup));
    }
  }, {
    key: "formGroupNameException",
    value: function formGroupNameException() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
    }
  }, {
    key: "missingNameException",
    value: function missingNameException() {
      throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    }
  }, {
    key: "modelGroupParentException",
    value: function modelGroupParentException() {
      throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ".concat(FormErrorExamples.formGroupName, "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ").concat(FormErrorExamples.ngModelGroup));
    }
  }]);

  return TemplateDrivenErrors;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var modelGroupProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return NgModelGroup;
  })
};
/**
 * @description
 * Creates and binds a `FormGroup` instance to a DOM element.
 *
 * This directive can only be used as a child of `NgForm` (within `<form>` tags).
 *
 * Use this directive to validate a sub-group of your form separately from the
 * rest of your form, or if some values in your domain model make more sense
 * to consume together in a nested object.
 *
 * Provide a name for the sub-group and it will become the key
 * for the sub-group in the form's full value. If you need direct access, export the directive into
 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
 *
 * @usageNotes
 *
 * ### Consuming controls in a grouping
 *
 * The following example shows you how to combine controls together in a sub-group
 * of the form.
 *
 * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
 *
 * @ngModule FormsModule
 * @publicApi
 */

var NgModelGroup = /*#__PURE__*/function (_AbstractFormGroupDir) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgModelGroup, _AbstractFormGroupDir);

  var _super13 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgModelGroup);

  function NgModelGroup(parent, validators, asyncValidators) {
    var _this23;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgModelGroup);

    _this23 = _super13.call(this);
    _this23._parent = parent;

    _this23._setValidators(validators);

    _this23._setAsyncValidators(asyncValidators);

    return _this23;
  }
  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NgModelGroup, [{
    key: "_checkParentType",
    value: function _checkParentType() {
      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        TemplateDrivenErrors.modelGroupParentException();
      }
    }
  }]);

  return NgModelGroup;
}(AbstractFormGroupDirective);

NgModelGroup.ɵfac = function NgModelGroup_Factory(t) {
  return new (t || NgModelGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 5), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};

NgModelGroup.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgModelGroup,
  selectors: [["", "ngModelGroup", ""]],
  inputs: {
    name: ["ngModelGroup", "name"]
  },
  exportAs: ["ngModelGroup"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([modelGroupProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

NgModelGroup.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
};

NgModelGroup.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngModelGroup']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgModelGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[ngModelGroup]',
      providers: [modelGroupProvider],
      exportAs: 'ngModelGroup'
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngModelGroup']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var formControlBinding = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return NgModel;
  })
};

var ɵ0$1 = function ɵ0$1() {
  return Promise.resolve(null);
};
/**
 * `ngModel` forces an additional change detection run when its inputs change:
 * E.g.:
 * ```
 * <div>{{myModel.valid}}</div>
 * <input [(ngModel)]="myValue" #myModel="ngModel">
 * ```
 * I.e. `ngModel` can export itself on the element and then be used in the template.
 * Normally, this would result in expressions before the `input` that use the exported directive
 * to have an old value as they have been
 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
 * detection run.
 *
 * Notes:
 * - this is just one extra run no matter how many `ngModel`s have been changed.
 * - this is a general problem when using `exportAs` for directives!
 */


var resolvedPromise$1 = ɵ0$1();
/**
 * @description
 * Creates a `FormControl` instance from a domain model and binds it
 * to a form control element.
 *
 * The `FormControl` instance tracks the value, user interaction, and
 * validation status of the control and keeps the view synced with the model. If used
 * within a parent form, the directive also registers itself with the form as a child
 * control.
 *
 * This directive is used by itself or as part of a larger form. Use the
 * `ngModel` selector to activate it.
 *
 * It accepts a domain model as an optional `Input`. If you have a one-way binding
 * to `ngModel` with `[]` syntax, changing the domain model's value in the component
 * class sets the value in the view. If you have a two-way binding with `[()]` syntax
 * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to
 * the domain model in your class.
 *
 * To inspect the properties of the associated `FormControl` (like the validity state),
 * export the directive into a local template variable using `ngModel` as the key (ex:
 * `#myVar="ngModel"`). You can then access the control using the directive's `control` property.
 * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control
 * for direct access. See a full list of properties directly available in
 * `AbstractControlDirective`.
 *
 * @see `RadioControlValueAccessor`
 * @see `SelectControlValueAccessor`
 *
 * @usageNotes
 *
 * ### Using ngModel on a standalone control
 *
 * The following examples show a simple standalone control using `ngModel`:
 *
 * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
 *
 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
 * so that the control can be registered with the parent form under that name.
 *
 * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
 * as the parent form syncs the value for you. You access its properties by exporting it into a
 * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
 * needed on form submission.
 *
 * If you do need to populate initial values into your form, using a one-way binding for
 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
 * than the domain model's value on submit.
 *
 * ### Using ngModel within a form
 *
 * The following example shows controls using `ngModel` within a form:
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Using a standalone ngModel within a group
 *
 * The following example shows you how to use a standalone ngModel control
 * within a form. This controls the display of the form, but doesn't contain form data.
 *
 * ```html
 * <form>
 *   <input name="login" ngModel placeholder="Login">
 *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
 * </form>
 * <!-- form value: {login: ''} -->
 * ```
 *
 * ### Setting the ngModel `name` attribute through options
 *
 * The following example shows you an alternate way to set the name attribute. Here,
 * an attribute identified as name is used within a custom form control component. To still be able
 * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.
 *
 * ```html
 * <form>
 *   <my-custom-form-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
 *   </my-custom-form-control>
 * </form>
 * <!-- form value: {user: ''} -->
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */

var NgModel = /*#__PURE__*/function (_NgControl) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NgModel, _NgControl);

  var _super14 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NgModel);

  function NgModel(parent, validators, asyncValidators, valueAccessors) {
    var _this24;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgModel);

    _this24 = _super14.call(this);
    _this24.control = new FormControl();
    /** @internal */

    _this24._registered = false;
    /**
     * @description
     * Event emitter for producing the `ngModelChange` event after
     * the view model updates.
     */

    _this24.update = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    _this24._parent = parent;

    _this24._setValidators(validators);

    _this24._setAsyncValidators(asyncValidators);

    _this24.valueAccessor = selectValueAccessor((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this24), valueAccessors);
    return _this24;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NgModel, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this._checkForErrors();

      if (!this._registered) this._setUpControl();

      if ('isDisabled' in changes) {
        this._updateDisabled(changes);
      }

      if (isPropertyUpdated(changes, this.viewModel)) {
        this._updateValue(this.model);

        this.viewModel = this.model;
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.formDirective && this.formDirective.removeControl(this);
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */

  }, {
    key: "path",
    get: function get() {
      return this._parent ? controlPath(this.name, this._parent) : [this.name];
    }
    /**
     * @description
     * The top-level directive for this control if present, otherwise null.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this._parent ? this._parent.formDirective : null;
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value emitted by `ngModelChange`.
     */

  }, {
    key: "viewToModelUpdate",
    value: function viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
  }, {
    key: "_setUpControl",
    value: function _setUpControl() {
      this._setUpdateStrategy();

      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
      this._registered = true;
    }
  }, {
    key: "_setUpdateStrategy",
    value: function _setUpdateStrategy() {
      if (this.options && this.options.updateOn != null) {
        this.control._updateOn = this.options.updateOn;
      }
    }
  }, {
    key: "_isStandalone",
    value: function _isStandalone() {
      return !this._parent || !!(this.options && this.options.standalone);
    }
  }, {
    key: "_setUpStandalone",
    value: function _setUpStandalone() {
      setUpControl(this.control, this);
      this.control.updateValueAndValidity({
        emitEvent: false
      });
    }
  }, {
    key: "_checkForErrors",
    value: function _checkForErrors() {
      if (!this._isStandalone()) {
        this._checkParentType();
      }

      this._checkName();
    }
  }, {
    key: "_checkParentType",
    value: function _checkParentType() {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
          TemplateDrivenErrors.formGroupNameException();
        } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
          TemplateDrivenErrors.modelParentException();
        }
      }
    }
  }, {
    key: "_checkName",
    value: function _checkName() {
      if (this.options && this.options.name) this.name = this.options.name;

      if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        TemplateDrivenErrors.missingNameException();
      }
    }
  }, {
    key: "_updateValue",
    value: function _updateValue(value) {
      var _this25 = this;

      resolvedPromise$1.then(function () {
        _this25.control.setValue(value, {
          emitViewToModelChange: false
        });
      });
    }
  }, {
    key: "_updateDisabled",
    value: function _updateDisabled(changes) {
      var _this26 = this;

      var disabledValue = changes['isDisabled'].currentValue;
      var isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';
      resolvedPromise$1.then(function () {
        if (isDisabled && !_this26.control.disabled) {
          _this26.control.disable();
        } else if (!isDisabled && _this26.control.disabled) {
          _this26.control.enable();
        }
      });
    }
  }]);

  return NgModel;
}(NgControl);

NgModel.ɵfac = function NgModel_Factory(t) {
  return new (t || NgModel)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 9), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10));
};

NgModel.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgModel,
  selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
  inputs: {
    name: "name",
    isDisabled: ["disabled", "isDisabled"],
    model: ["ngModel", "model"],
    options: ["ngModelOptions", "options"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngModel"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formControlBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});

NgModel.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
};

NgModel.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }],
  isDisabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['disabled']
  }],
  model: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngModel']
  }],
  options: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngModelOptions']
  }],
  update: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
    args: ['ngModelChange']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgModel, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[ngModel]:not([formControlName]):not([formControl])',
      providers: [formControlBinding],
      exportAs: 'ngModel'
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }];
  }, {
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
      args: ['ngModelChange']
    }],
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['disabled']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngModel']
    }],
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngModelOptions']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Adds `novalidate` attribute to all forms by default.
 *
 * `novalidate` is used to disable browser's native form validation.
 *
 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
 *
 * ```
 * <form ngNativeValidate></form>
 * ```
 *
 * @publicApi
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 */


var ɵNgNoValidate = function ɵNgNoValidate() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ɵNgNoValidate);
};

ɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) {
  return new (t || ɵNgNoValidate)();
};

ɵNgNoValidate.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: ɵNgNoValidate,
  selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
  hostAttrs: ["novalidate", ""]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](ɵNgNoValidate, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
      host: {
        'novalidate': ''
      }
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NUMBER_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return NumberValueAccessor;
  }),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a number value and listening to number input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a number input with a reactive form.
 *
 * The following example shows how to use a number input with a reactive form.
 *
 * ```ts
 * const totalCountControl = new FormControl();
 * ```
 *
 * ```
 * <input type="number" [formControl]="totalCountControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var NumberValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(NumberValueAccessor, _BuiltInControlValueA2);

  var _super15 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(NumberValueAccessor);

  function NumberValueAccessor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NumberValueAccessor);

    return _super15.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NumberValueAccessor, [{
    key: "writeValue",
    value:
    /**
     * Sets the "value" property on the input element.
     * @nodoc
     */
    function writeValue(value) {
      // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
      var normalizedValue = value == null ? '' : value;
      this.setProperty('value', normalizedValue);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this.onChange = function (value) {
        fn(value == '' ? null : parseFloat(value));
      };
    }
  }]);

  return NumberValueAccessor;
}(BuiltInControlValueAccessor);

NumberValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵNumberValueAccessor_BaseFactory;
  return function NumberValueAccessor_Factory(t) {
    return (ɵNumberValueAccessor_BaseFactory || (ɵNumberValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](NumberValueAccessor)))(t || NumberValueAccessor);
  };
}();

NumberValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NumberValueAccessor,
  selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
  hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("input", function NumberValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([NUMBER_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NumberValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
      host: {
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var RADIO_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return RadioControlValueAccessor;
  }),
  multi: true
};

function throwNameError() {
  throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
}
/**
 * Internal-only NgModule that works as a host for the `RadioControlRegistry` tree-shakable
 * provider. Note: the `InternalFormsSharedModule` can not be used here directly, since it's
 * declared *after* the `RadioControlRegistry` class and the `providedIn` doesn't support
 * `forwardRef` logic.
 */


var RadioControlRegistryModule = function RadioControlRegistryModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RadioControlRegistryModule);
};

RadioControlRegistryModule.ɵfac = function RadioControlRegistryModule_Factory(t) {
  return new (t || RadioControlRegistryModule)();
};

RadioControlRegistryModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: RadioControlRegistryModule
});
RadioControlRegistryModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](RadioControlRegistryModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule
  }], null, null);
})();
/**
 * @description
 * Class used by Angular to track radio buttons. For internal use only.
 */


var RadioControlRegistry = /*#__PURE__*/function () {
  function RadioControlRegistry() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RadioControlRegistry);

    this._accessors = [];
  }
  /**
   * @description
   * Adds a control to the internal registry. For internal use only.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RadioControlRegistry, [{
    key: "add",
    value: function add(control, accessor) {
      this._accessors.push([control, accessor]);
    }
    /**
     * @description
     * Removes a control from the internal registry. For internal use only.
     */

  }, {
    key: "remove",
    value: function remove(accessor) {
      for (var i = this._accessors.length - 1; i >= 0; --i) {
        if (this._accessors[i][1] === accessor) {
          this._accessors.splice(i, 1);

          return;
        }
      }
    }
    /**
     * @description
     * Selects a radio button. For internal use only.
     */

  }, {
    key: "select",
    value: function select(accessor) {
      var _this27 = this;

      this._accessors.forEach(function (c) {
        if (_this27._isSameGroup(c, accessor) && c[1] !== accessor) {
          c[1].fireUncheck(accessor.value);
        }
      });
    }
  }, {
    key: "_isSameGroup",
    value: function _isSameGroup(controlPair, accessor) {
      if (!controlPair[0].control) return false;
      return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
    }
  }]);

  return RadioControlRegistry;
}();

RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {
  return new (t || RadioControlRegistry)();
};

RadioControlRegistry.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: function RadioControlRegistry_Factory() {
    return new RadioControlRegistry();
  },
  token: RadioControlRegistry,
  providedIn: RadioControlRegistryModule
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](RadioControlRegistry, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: RadioControlRegistryModule
    }]
  }], function () {
    return [];
  }, null);
})();
/**
 * @description
 * The `ControlValueAccessor` for writing radio control values and listening to radio control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using radio buttons with reactive form directives
 *
 * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
 * a reactive form, radio buttons in the same group should have the same `formControlName`.
 * Providing a `name` attribute is optional.
 *
 * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var RadioControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(RadioControlValueAccessor, _BuiltInControlValueA3);

  var _super16 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(RadioControlValueAccessor);

  function RadioControlValueAccessor(renderer, elementRef, _registry, _injector) {
    var _this28;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RadioControlValueAccessor);

    _this28 = _super16.call(this, renderer, elementRef);
    _this28._registry = _registry;
    _this28._injector = _injector;
    /**
     * The registered callback function called when a change event occurs on the input element.
     * Note: we declare `onChange` here (also used as host listener) as a function with no arguments
     * to override the `onChange` function (which expects 1 argument) in the parent
     * `BaseControlValueAccessor` class.
     * @nodoc
     */

    _this28.onChange = function () {};

    return _this28;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RadioControlValueAccessor, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      this._control = this._injector.get(NgControl);

      this._checkName();

      this._registry.add(this._control, this);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._registry.remove(this);
    }
    /**
     * Sets the "checked" property value on the radio input element.
     * @nodoc
     */

  }, {
    key: "writeValue",
    value: function writeValue(value) {
      this._state = value === this.value;
      this.setProperty('checked', this._state);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      var _this29 = this;

      this._fn = fn;

      this.onChange = function () {
        fn(_this29.value);

        _this29._registry.select(_this29);
      };
    }
    /**
     * Sets the "value" on the radio input element and unchecks it.
     *
     * @param value
     */

  }, {
    key: "fireUncheck",
    value: function fireUncheck(value) {
      this.writeValue(value);
    }
  }, {
    key: "_checkName",
    value: function _checkName() {
      if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throwNameError();
      }

      if (!this.name && this.formControlName) this.name = this.formControlName;
    }
  }]);

  return RadioControlValueAccessor;
}(BuiltInControlValueAccessor);

RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) {
  return new (t || RadioControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](RadioControlRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injector));
};

RadioControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: RadioControlValueAccessor,
  selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
  hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("change", function RadioControlValueAccessor_change_HostBindingHandler() {
        return ctx.onChange();
      })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    name: "name",
    formControlName: "formControlName",
    value: "value"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([RADIO_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

RadioControlValueAccessor.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
  }, {
    type: RadioControlRegistry
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injector
  }];
};

RadioControlValueAccessor.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }],
  formControlName: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }],
  value: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](RadioControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
      host: {
        '(change)': 'onChange()',
        '(blur)': 'onTouched()'
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
    }, {
      type: RadioControlRegistry
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injector
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }],
    formControlName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var RANGE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return RangeValueAccessor;
  }),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a range value and listening to range input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a range input with a reactive form
 *
 * The following example shows how to use a range input with a reactive form.
 *
 * ```ts
 * const ageControl = new FormControl();
 * ```
 *
 * ```
 * <input type="range" [formControl]="ageControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var RangeValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA4) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(RangeValueAccessor, _BuiltInControlValueA4);

  var _super17 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(RangeValueAccessor);

  function RangeValueAccessor() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RangeValueAccessor);

    return _super17.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RangeValueAccessor, [{
    key: "writeValue",
    value:
    /**
     * Sets the "value" property on the input element.
     * @nodoc
     */
    function writeValue(value) {
      this.setProperty('value', parseFloat(value));
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this.onChange = function (value) {
        fn(value == '' ? null : parseFloat(value));
      };
    }
  }]);

  return RangeValueAccessor;
}(BuiltInControlValueAccessor);

RangeValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵRangeValueAccessor_BaseFactory;
  return function RangeValueAccessor_Factory(t) {
    return (ɵRangeValueAccessor_BaseFactory || (ɵRangeValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](RangeValueAccessor)))(t || RangeValueAccessor);
  };
}();

RangeValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: RangeValueAccessor,
  selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
  hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("change", function RangeValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([RANGE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](RangeValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [RANGE_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Token to provide to turn off the ngModel warning on formControl and formControlName.
 */


var NG_MODEL_WITH_FORM_CONTROL_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('NgModelWithFormControlWarning');
var formControlBinding$1 = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return FormControlDirective;
  })
};
/**
 * @description
 * Synchronizes a standalone `FormControl` instance to a form control element.
 *
 * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives was deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `FormControl`
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * The following example shows how to register a standalone control and set its value.
 *
 * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var FormControlDirective = /*#__PURE__*/function (_NgControl2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormControlDirective, _NgControl2);

  var _super18 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormControlDirective);

  function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
    var _this30;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormControlDirective);

    _this30 = _super18.call(this);
    _this30._ngModelWarningConfig = _ngModelWarningConfig;
    /** @deprecated as of v6 */

    _this30.update = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    /**
     * @description
     * Instance property used to track whether an ngModel warning has been sent out for this
     * particular `FormControlDirective` instance. Used to support warning config of "always".
     *
     * @internal
     */

    _this30._ngModelWarningSent = false;

    _this30._setValidators(validators);

    _this30._setAsyncValidators(asyncValidators);

    _this30.valueAccessor = selectValueAccessor((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this30), valueAccessors);
    return _this30;
  }
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormControlDirective, [{
    key: "isDisabled",
    set: function set(isDisabled) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        ReactiveErrors.disabledAttrWarning();
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if (this._isControlChanged(changes)) {
        var previousForm = changes['form'].previousValue;

        if (previousForm) {
          cleanUpControl(previousForm, this,
          /* validateControlPresenceOnChange */
          false);
        }

        setUpControl(this.form, this);

        if (this.control.disabled && this.valueAccessor.setDisabledState) {
          this.valueAccessor.setDisabledState(true);
        }

        this.form.updateValueAndValidity({
          emitEvent: false
        });
      }

      if (isPropertyUpdated(changes, this.viewModel)) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);
        }

        this.form.setValue(this.model);
        this.viewModel = this.model;
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.form) {
        cleanUpControl(this.form, this,
        /* validateControlPresenceOnChange */
        false);
      }
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */

  }, {
    key: "path",
    get: function get() {
      return [];
    }
    /**
     * @description
     * The `FormControl` bound to this directive.
     */

  }, {
    key: "control",
    get: function get() {
      return this.form;
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value for the view model.
     */

  }, {
    key: "viewToModelUpdate",
    value: function viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
  }, {
    key: "_isControlChanged",
    value: function _isControlChanged(changes) {
      return changes.hasOwnProperty('form');
    }
  }]);

  return FormControlDirective;
}(NgControl);

FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {
  return new (t || FormControlDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
};

FormControlDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: FormControlDirective,
  selectors: [["", "formControl", ""]],
  inputs: {
    isDisabled: ["disabled", "isDisabled"],
    form: ["formControl", "form"],
    model: ["ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formControlBinding$1]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
/**
 * @description
 * Static property used to track whether any ngModel warnings have been sent across
 * all instances of FormControlDirective. Used to support warning config of "once".
 *
 * @internal
 */

FormControlDirective._ngModelWarningSentOnce = false;

FormControlDirective.ctorParameters = function () {
  return [{
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
    }]
  }];
};

FormControlDirective.propDecorators = {
  form: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['formControl']
  }],
  isDisabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['disabled']
  }],
  model: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngModel']
  }],
  update: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
    args: ['ngModelChange']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormControlDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formControl]',
      providers: [formControlBinding$1],
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }]
    }];
  }, {
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
      args: ['ngModelChange']
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['disabled']
    }],
    form: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['formControl']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngModel']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var formDirectiveProvider$1 = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return FormGroupDirective;
  })
};
/**
 * @description
 *
 * Binds an existing `FormGroup` to a DOM element.
 *
 * This directive accepts an existing `FormGroup` instance. It will then use this
 * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
 * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
 * and `FormArrayName` directives.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `AbstractControl`
 *
 * @usageNotes
 * ### Register Form Group
 *
 * The following example registers a `FormGroup` with first name and last name controls,
 * and listens for the *ngSubmit* event when the button is clicked.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var FormGroupDirective = /*#__PURE__*/function (_ControlContainer3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormGroupDirective, _ControlContainer3);

  var _super19 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormGroupDirective);

  function FormGroupDirective(validators, asyncValidators) {
    var _this31;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormGroupDirective);

    _this31 = _super19.call(this);
    _this31.validators = validators;
    _this31.asyncValidators = asyncValidators;
    /**
     * @description
     * Reports whether the form submission has been triggered.
     */

    _this31.submitted = false;
    /**
     * Callback that should be invoked when controls in FormGroup or FormArray collection change
     * (added or removed). This callback triggers corresponding DOM updates.
     */

    _this31._onCollectionChange = function () {
      return _this31._updateDomValue();
    };
    /**
     * @description
     * Tracks the list of added `FormControlName` instances
     */


    _this31.directives = [];
    /**
     * @description
     * Tracks the `FormGroup` bound to this directive.
     */

    _this31.form = null;
    /**
     * @description
     * Emits an event when the form submission has been triggered.
     */

    _this31.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();

    _this31._setValidators(validators);

    _this31._setAsyncValidators(asyncValidators);

    return _this31;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormGroupDirective, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this._checkFormPresent();

      if (changes.hasOwnProperty('form')) {
        this._updateValidators();

        this._updateDomValue();

        this._updateRegistrations();

        this._oldForm = this.form;
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.form) {
        cleanUpValidators(this.form, this); // Currently the `onCollectionChange` callback is rewritten each time the
        // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should
        // happen *only* when the `onCollectionChange` callback was set by this directive instance.
        // Otherwise it might cause overriding a callback of some other directive instances. We should
        // consider updating this logic later to make it similar to how `onChange` callbacks are
        // handled, see https://github.com/angular/angular/issues/39732 for additional info.

        if (this.form._onCollectionChange === this._onCollectionChange) {
          this.form._registerOnCollectionChange(function () {});
        }
      }
    }
    /**
     * @description
     * Returns this directive's instance.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this;
    }
    /**
     * @description
     * Returns the `FormGroup` bound to this directive.
     */

  }, {
    key: "control",
    get: function get() {
      return this.form;
    }
    /**
     * @description
     * Returns an array representing the path to this group. Because this directive
     * always lives at the top level of a form, it always an empty array.
     */

  }, {
    key: "path",
    get: function get() {
      return [];
    }
    /**
     * @description
     * Method that sets up the control directive in this group, re-calculates its value
     * and validity, and adds the instance to the internal list of directives.
     *
     * @param dir The `FormControlName` directive instance.
     */

  }, {
    key: "addControl",
    value: function addControl(dir) {
      var ctrl = this.form.get(dir.path);
      setUpControl(ctrl, dir);
      ctrl.updateValueAndValidity({
        emitEvent: false
      });
      this.directives.push(dir);
      return ctrl;
    }
    /**
     * @description
     * Retrieves the `FormControl` instance from the provided `FormControlName` directive
     *
     * @param dir The `FormControlName` directive instance.
     */

  }, {
    key: "getControl",
    value: function getControl(dir) {
      return this.form.get(dir.path);
    }
    /**
     * @description
     * Removes the `FormControlName` instance from the internal list of directives
     *
     * @param dir The `FormControlName` directive instance.
     */

  }, {
    key: "removeControl",
    value: function removeControl(dir) {
      cleanUpControl(dir.control || null, dir,
      /* validateControlPresenceOnChange */
      false);
      removeListItem(this.directives, dir);
    }
    /**
     * Adds a new `FormGroupName` directive instance to the form.
     *
     * @param dir The `FormGroupName` directive instance.
     */

  }, {
    key: "addFormGroup",
    value: function addFormGroup(dir) {
      this._setUpFormContainer(dir);
    }
    /**
     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
     * view.
     *
     * @param dir The `FormGroupName` directive instance.
     */

  }, {
    key: "removeFormGroup",
    value: function removeFormGroup(dir) {
      this._cleanUpFormContainer(dir);
    }
    /**
     * @description
     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
     *
     * @param dir The `FormGroupName` directive instance.
     */

  }, {
    key: "getFormGroup",
    value: function getFormGroup(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
     *
     * @param dir The `FormArrayName` directive instance.
     */

  }, {
    key: "addFormArray",
    value: function addFormArray(dir) {
      this._setUpFormContainer(dir);
    }
    /**
     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
     * view.
     *
     * @param dir The `FormArrayName` directive instance.
     */

  }, {
    key: "removeFormArray",
    value: function removeFormArray(dir) {
      this._cleanUpFormContainer(dir);
    }
    /**
     * @description
     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
     *
     * @param dir The `FormArrayName` directive instance.
     */

  }, {
    key: "getFormArray",
    value: function getFormArray(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Sets the new value for the provided `FormControlName` directive.
     *
     * @param dir The `FormControlName` directive instance.
     * @param value The new value for the directive's control.
     */

  }, {
    key: "updateModel",
    value: function updateModel(dir, value) {
      var ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    }
    /**
     * @description
     * Method called with the "submit" event is triggered on the form.
     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
     *
     * @param $event The "submit" event object
     */

  }, {
    key: "onSubmit",
    value: function onSubmit($event) {
      this.submitted = true;
      syncPendingControls(this.form, this.directives);
      this.ngSubmit.emit($event);
      return false;
    }
    /**
     * @description
     * Method called when the "reset" event is triggered on the form.
     */

  }, {
    key: "onReset",
    value: function onReset() {
      this.resetForm();
    }
    /**
     * @description
     * Resets the form to an initial value and resets its submitted status.
     *
     * @param value The new value for the form.
     */

  }, {
    key: "resetForm",
    value: function resetForm() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      this.form.reset(value);
      this.submitted = false;
    }
    /** @internal */

  }, {
    key: "_updateDomValue",
    value: function _updateDomValue() {
      var _this32 = this;

      this.directives.forEach(function (dir) {
        var oldCtrl = dir.control;

        var newCtrl = _this32.form.get(dir.path);

        if (oldCtrl !== newCtrl) {
          // Note: the value of the `dir.control` may not be defined, for example when it's a first
          // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).
          cleanUpControl(oldCtrl || null, dir); // Check whether new control at the same location inside the corresponding `FormGroup` is an
          // instance of `FormControl` and perform control setup only if that's the case.
          // Note: we don't need to clear the list of directives (`this.directives`) here, it would be
          // taken care of in the `removeControl` method invoked when corresponding `formControlName`
          // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).

          if (newCtrl instanceof FormControl) {
            setUpControl(newCtrl, dir);
            dir.control = newCtrl;
          }
        }
      });

      this.form._updateTreeValidity({
        emitEvent: false
      });
    }
  }, {
    key: "_setUpFormContainer",
    value: function _setUpFormContainer(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir); // NOTE: this operation looks unnecessary in case no new validators were added in
      // `setUpFormContainer` call. Consider updating this code to match the logic in
      // `_cleanUpFormContainer` function.

      ctrl.updateValueAndValidity({
        emitEvent: false
      });
    }
  }, {
    key: "_cleanUpFormContainer",
    value: function _cleanUpFormContainer(dir) {
      if (this.form) {
        var ctrl = this.form.get(dir.path);

        if (ctrl) {
          var isControlUpdated = cleanUpFormContainer(ctrl, dir);

          if (isControlUpdated) {
            // Run validity check only in case a control was updated (i.e. view validators were
            // removed) as removing view validators might cause validity to change.
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
          }
        }
      }
    }
  }, {
    key: "_updateRegistrations",
    value: function _updateRegistrations() {
      this.form._registerOnCollectionChange(this._onCollectionChange);

      if (this._oldForm) {
        this._oldForm._registerOnCollectionChange(function () {});
      }
    }
  }, {
    key: "_updateValidators",
    value: function _updateValidators() {
      setUpValidators(this.form, this);

      if (this._oldForm) {
        cleanUpValidators(this._oldForm, this);
      }
    }
  }, {
    key: "_checkFormPresent",
    value: function _checkFormPresent() {
      if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        ReactiveErrors.missingFormException();
      }
    }
  }]);

  return FormGroupDirective;
}(ControlContainer);

FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {
  return new (t || FormGroupDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};

FormGroupDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: FormGroupDirective,
  selectors: [["", "formGroup", ""]],
  hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function FormGroupDirective_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    form: ["formGroup", "form"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formDirectiveProvider$1]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});

FormGroupDirective.ctorParameters = function () {
  return [{
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
};

FormGroupDirective.propDecorators = {
  form: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['formGroup']
  }],
  ngSubmit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormGroupDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formGroup]',
      providers: [formDirectiveProvider$1],
      host: {
        '(submit)': 'onSubmit($event)',
        '(reset)': 'onReset()'
      },
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    form: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['formGroup']
    }],
    ngSubmit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var formGroupNameProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return FormGroupName;
  })
};
/**
 * @description
 *
 * Syncs a nested `FormGroup` to a DOM element.
 *
 * This directive can only be used with a parent `FormGroupDirective`.
 *
 * It accepts the string name of the nested `FormGroup` to link, and
 * looks for a `FormGroup` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * Use nested form groups to validate a sub-group of a
 * form separately from the rest or to group the values of certain
 * controls into their own nested object.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @usageNotes
 *
 * ### Access the group by name
 *
 * The following example uses the {@link AbstractControl#get get} method to access the
 * associated `FormGroup`
 *
 * ```ts
 *   this.form.get('name');
 * ```
 *
 * ### Access individual controls in the group
 *
 * The following example uses the {@link AbstractControl#get get} method to access
 * individual controls within the group using dot syntax.
 *
 * ```ts
 *   this.form.get('name.first');
 * ```
 *
 * ### Register a nested `FormGroup`.
 *
 * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
 * and provides methods to retrieve the nested `FormGroup` and individual controls.
 *
 * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var FormGroupName = /*#__PURE__*/function (_AbstractFormGroupDir2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormGroupName, _AbstractFormGroupDir2);

  var _super20 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormGroupName);

  function FormGroupName(parent, validators, asyncValidators) {
    var _this33;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormGroupName);

    _this33 = _super20.call(this);
    _this33._parent = parent;

    _this33._setValidators(validators);

    _this33._setAsyncValidators(asyncValidators);

    return _this33;
  }
  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormGroupName, [{
    key: "_checkParentType",
    value: function _checkParentType() {
      if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        ReactiveErrors.groupParentException();
      }
    }
  }]);

  return FormGroupName;
}(AbstractFormGroupDirective);

FormGroupName.ɵfac = function FormGroupName_Factory(t) {
  return new (t || FormGroupName)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};

FormGroupName.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: FormGroupName,
  selectors: [["", "formGroupName", ""]],
  inputs: {
    name: ["formGroupName", "name"]
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formGroupNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

FormGroupName.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
};

FormGroupName.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['formGroupName']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormGroupName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formGroupName]',
      providers: [formGroupNameProvider]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['formGroupName']
    }]
  });
})();

var formArrayNameProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return FormArrayName;
  })
};
/**
 * @description
 *
 * Syncs a nested `FormArray` to a DOM element.
 *
 * This directive is designed to be used with a parent `FormGroupDirective` (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested `FormArray` you want to link, and
 * will look for a `FormArray` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var FormArrayName = /*#__PURE__*/function (_ControlContainer4) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormArrayName, _ControlContainer4);

  var _super21 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormArrayName);

  function FormArrayName(parent, validators, asyncValidators) {
    var _this34;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormArrayName);

    _this34 = _super21.call(this);
    _this34._parent = parent;

    _this34._setValidators(validators);

    _this34._setAsyncValidators(asyncValidators);

    return _this34;
  }
  /**
   * A lifecycle method called when the directive's inputs are initialized. For internal use only.
   * @throws If the directive does not have a valid parent.
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormArrayName, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      this._checkParentType();

      this.formDirective.addFormArray(this);
    }
    /**
     * A lifecycle method called before the directive's instance is destroyed. For internal use only.
     * @nodoc
     */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.formDirective) {
        this.formDirective.removeFormArray(this);
      }
    }
    /**
     * @description
     * The `FormArray` bound to this directive.
     */

  }, {
    key: "control",
    get: function get() {
      return this.formDirective.getFormArray(this);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this._parent ? this._parent.formDirective : null;
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */

  }, {
    key: "path",
    get: function get() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
  }, {
    key: "_checkParentType",
    value: function _checkParentType() {
      if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        ReactiveErrors.arrayParentException();
      }
    }
  }]);

  return FormArrayName;
}(ControlContainer);

FormArrayName.ɵfac = function FormArrayName_Factory(t) {
  return new (t || FormArrayName)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};

FormArrayName.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: FormArrayName,
  selectors: [["", "formArrayName", ""]],
  inputs: {
    name: ["formArrayName", "name"]
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([formArrayNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

FormArrayName.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
};

FormArrayName.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['formArrayName']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormArrayName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formArrayName]',
      providers: [formArrayNameProvider]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['formArrayName']
    }]
  });
})();

function _hasInvalidParent(parent) {
  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var controlNameBinding = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return FormControlName;
  })
};
/**
 * @description
 * Syncs a `FormControl` in an existing `FormGroup` to a form control
 * element by name.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `FormControl`
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * ### Register `FormControl` within a group
 *
 * The following example shows how to register multiple form controls within a form group
 * and set their value.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * To see `formControlName` examples with different form control types, see:
 *
 * * Radio buttons: `RadioControlValueAccessor`
 * * Selects: `SelectControlValueAccessor`
 *
 * ### Use with ngModel is deprecated
 *
 * Support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives has been deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 *
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var FormControlName = /*#__PURE__*/function (_NgControl3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(FormControlName, _NgControl3);

  var _super22 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(FormControlName);

  function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
    var _this35;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormControlName);

    _this35 = _super22.call(this);
    _this35._ngModelWarningConfig = _ngModelWarningConfig;
    _this35._added = false;
    /** @deprecated as of v6 */

    _this35.update = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    /**
     * @description
     * Instance property used to track whether an ngModel warning has been sent out for this
     * particular FormControlName instance. Used to support warning config of "always".
     *
     * @internal
     */

    _this35._ngModelWarningSent = false;
    _this35._parent = parent;

    _this35._setValidators(validators);

    _this35._setAsyncValidators(asyncValidators);

    _this35.valueAccessor = selectValueAccessor((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this35), valueAccessors);
    return _this35;
  }
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormControlName, [{
    key: "isDisabled",
    set: function set(isDisabled) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        ReactiveErrors.disabledAttrWarning();
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if (!this._added) this._setUpControl();

      if (isPropertyUpdated(changes, this.viewModel)) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);
        }

        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.formDirective) {
        this.formDirective.removeControl(this);
      }
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value for the view model.
     */

  }, {
    key: "viewToModelUpdate",
    value: function viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */

  }, {
    key: "path",
    get: function get() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */

  }, {
    key: "formDirective",
    get: function get() {
      return this._parent ? this._parent.formDirective : null;
    }
  }, {
    key: "_checkParentType",
    value: function _checkParentType() {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
          ReactiveErrors.ngModelGroupException();
        } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
          ReactiveErrors.controlParentException();
        }
      }
    }
  }, {
    key: "_setUpControl",
    value: function _setUpControl() {
      this._checkParentType();

      this.control = this.formDirective.addControl(this);

      if (this.control.disabled && this.valueAccessor.setDisabledState) {
        this.valueAccessor.setDisabledState(true);
      }

      this._added = true;
    }
  }]);

  return FormControlName;
}(NgControl);

FormControlName.ɵfac = function FormControlName_Factory(t) {
  return new (t || FormControlName)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
};

FormControlName.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: FormControlName,
  selectors: [["", "formControlName", ""]],
  inputs: {
    isDisabled: ["disabled", "isDisabled"],
    name: ["formControlName", "name"],
    model: ["ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([controlNameBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
/**
 * @description
 * Static property used to track whether any ngModel warnings have been sent across
 * all instances of FormControlName. Used to support warning config of "once".
 *
 * @internal
 */

FormControlName._ngModelWarningSentOnce = false;

FormControlName.ctorParameters = function () {
  return [{
    type: ControlContainer,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
    }]
  }];
};

FormControlName.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['formControlName']
  }],
  isDisabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['disabled']
  }],
  model: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngModel']
  }],
  update: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
    args: ['ngModelChange']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormControlName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[formControlName]',
      providers: [controlNameBinding]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }]
    }];
  }, {
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Output,
      args: ['ngModelChange']
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['disabled']
    }],
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['formControlName']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngModel']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SELECT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return SelectControlValueAccessor;
  }),
  multi: true
};

function _buildValueString(id, value) {
  if (id == null) return "".concat(value);
  if (value && typeof value === 'object') value = 'Object';
  return "".concat(id, ": ").concat(value).slice(0, 50);
}

function _extractId(valueString) {
  return valueString.split(':')[0];
}
/**
 * @description
 * The `ControlValueAccessor` for writing select control values and listening to select control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using select controls in a reactive form
 *
 * The following examples show how to use a select control in a reactive form.
 *
 * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
 *
 * ### Using select controls in a template-driven form
 *
 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
 * attribute to the main `<select>` tag.
 *
 * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
 *
 * ### Customizing option selection
 *
 * Angular uses object identity to select option. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects option by the return value of the function.
 *
 * ```ts
 * const selectedCountriesControl = new FormControl();
 * ```
 *
 * ```
 * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * **Note:** We listen to the 'change' event because 'input' events aren't fired
 * for selects in IE, see:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var SelectControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA5) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(SelectControlValueAccessor, _BuiltInControlValueA5);

  var _super23 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(SelectControlValueAccessor);

  function SelectControlValueAccessor() {
    var _this36;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SelectControlValueAccessor);

    _this36 = _super23.apply(this, arguments);
    /** @internal */

    _this36._optionMap = new Map();
    /** @internal */

    _this36._idCounter = 0;
    _this36._compareWith = Object.is;
    return _this36;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(SelectControlValueAccessor, [{
    key: "compareWith",
    set: function set(fn) {
      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
      }

      this._compareWith = fn;
    }
    /**
     * Sets the "value" property on the input element. The "selectedIndex"
     * property is also set if an ID is provided on the option element.
     * @nodoc
     */

  }, {
    key: "writeValue",
    value: function writeValue(value) {
      this.value = value;

      var id = this._getOptionId(value);

      if (id == null) {
        this.setProperty('selectedIndex', -1);
      }

      var valueString = _buildValueString(id, value);

      this.setProperty('value', valueString);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      var _this37 = this;

      this.onChange = function (valueString) {
        _this37.value = _this37._getOptionValue(valueString);
        fn(_this37.value);
      };
    }
    /** @internal */

  }, {
    key: "_registerOption",
    value: function _registerOption() {
      return (this._idCounter++).toString();
    }
    /** @internal */

  }, {
    key: "_getOptionId",
    value: function _getOptionId(value) {
      for (var _i3 = 0, _Array$from = Array.from(this._optionMap.keys()); _i3 < _Array$from.length; _i3++) {
        var id = _Array$from[_i3];
        if (this._compareWith(this._optionMap.get(id), value)) return id;
      }

      return null;
    }
    /** @internal */

  }, {
    key: "_getOptionValue",
    value: function _getOptionValue(valueString) {
      var id = _extractId(valueString);

      return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    }
  }]);

  return SelectControlValueAccessor;
}(BuiltInControlValueAccessor);

SelectControlValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵSelectControlValueAccessor_BaseFactory;
  return function SelectControlValueAccessor_Factory(t) {
    return (ɵSelectControlValueAccessor_BaseFactory || (ɵSelectControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](SelectControlValueAccessor)))(t || SelectControlValueAccessor);
  };
}();

SelectControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: SelectControlValueAccessor,
  selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
  hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([SELECT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});
SelectControlValueAccessor.propDecorators = {
  compareWith: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](SelectControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see `SelectControlValueAccessor`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var NgSelectOption = /*#__PURE__*/function () {
  function NgSelectOption(_element, _renderer, _select) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgSelectOption);

    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;
    if (this._select) this.id = this._select._registerOption();
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NgSelectOption, [{
    key: "ngValue",
    set: function set(value) {
      if (this._select == null) return;

      this._select._optionMap.set(this.id, value);

      this._setElementValue(_buildValueString(this.id, value));

      this._select.writeValue(this._select.value);
    }
    /**
     * @description
     * Tracks simple string values bound to the option element.
     * For objects, use the `ngValue` input binding.
     */

  }, {
    key: "value",
    set: function set(value) {
      this._setElementValue(value);

      if (this._select) this._select.writeValue(this._select.value);
    }
    /** @internal */

  }, {
    key: "_setElementValue",
    value: function _setElementValue(value) {
      this._renderer.setProperty(this._element.nativeElement, 'value', value);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._select) {
        this._select._optionMap.delete(this.id);

        this._select.writeValue(this._select.value);
      }
    }
  }]);

  return NgSelectOption;
}();

NgSelectOption.ɵfac = function NgSelectOption_Factory(t) {
  return new (t || NgSelectOption)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](SelectControlValueAccessor, 9));
};

NgSelectOption.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: NgSelectOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});

NgSelectOption.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
  }, {
    type: SelectControlValueAccessor,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }]
  }];
};

NgSelectOption.propDecorators = {
  ngValue: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngValue']
  }],
  value: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['value']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](NgSelectOption, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'option'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
    }, {
      type: SelectControlValueAccessor,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }]
    }];
  }, {
    ngValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngValue']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['value']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SELECT_MULTIPLE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return SelectMultipleControlValueAccessor;
  }),
  multi: true
};

function _buildValueString$1(id, value) {
  if (id == null) return "".concat(value);
  if (typeof value === 'string') value = "'".concat(value, "'");
  if (value && typeof value === 'object') value = 'Object';
  return "".concat(id, ": ").concat(value).slice(0, 50);
}

function _extractId$1(valueString) {
  return valueString.split(':')[0];
}
/** Mock interface for HTMLCollection */


var HTMLCollection = function HTMLCollection() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, HTMLCollection);
};
/**
 * @description
 * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select
 * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @see `SelectControlValueAccessor`
 *
 * @usageNotes
 *
 * ### Using a multi-select control
 *
 * The follow example shows you how to use a multi-select control with a reactive form.
 *
 * ```ts
 * const countryControl = new FormControl();
 * ```
 *
 * ```
 * <select multiple name="countries" [formControl]="countryControl">
 *   <option *ngFor="let country of countries" [ngValue]="country">
 *     {{ country.name }}
 *   </option>
 * </select>
 * ```
 *
 * ### Customizing option selection
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * See the `SelectControlValueAccessor` for usage.
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var SelectMultipleControlValueAccessor = /*#__PURE__*/function (_BuiltInControlValueA6) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(SelectMultipleControlValueAccessor, _BuiltInControlValueA6);

  var _super24 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(SelectMultipleControlValueAccessor);

  function SelectMultipleControlValueAccessor() {
    var _this38;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, SelectMultipleControlValueAccessor);

    _this38 = _super24.apply(this, arguments);
    /** @internal */

    _this38._optionMap = new Map();
    /** @internal */

    _this38._idCounter = 0;
    _this38._compareWith = Object.is;
    return _this38;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(SelectMultipleControlValueAccessor, [{
    key: "compareWith",
    set: function set(fn) {
      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw new Error("compareWith must be a function, but received ".concat(JSON.stringify(fn)));
      }

      this._compareWith = fn;
    }
    /**
     * Sets the "value" property on one or of more of the select's options.
     * @nodoc
     */

  }, {
    key: "writeValue",
    value: function writeValue(value) {
      var _this39 = this;

      this.value = value;
      var optionSelectedStateSetter;

      if (Array.isArray(value)) {
        // convert values to ids
        var ids = value.map(function (v) {
          return _this39._getOptionId(v);
        });

        optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {
          opt._setSelected(ids.indexOf(o.toString()) > -1);
        };
      } else {
        optionSelectedStateSetter = function optionSelectedStateSetter(opt, o) {
          opt._setSelected(false);
        };
      }

      this._optionMap.forEach(optionSelectedStateSetter);
    }
    /**
     * Registers a function called when the control value changes
     * and writes an array of the selected options.
     * @nodoc
     */

  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      var _this40 = this;

      this.onChange = function (_) {
        var selected = [];

        if (_.selectedOptions !== undefined) {
          var options = _.selectedOptions;

          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);

            var val = _this40._getOptionValue(opt.value);

            selected.push(val);
          }
        } // Degrade on IE
        else {
          var _options = _.options;

          for (var _i4 = 0; _i4 < _options.length; _i4++) {
            var _opt = _options.item(_i4);

            if (_opt.selected) {
              var _val = _this40._getOptionValue(_opt.value);

              selected.push(_val);
            }
          }
        }

        _this40.value = selected;
        fn(selected);
      };
    }
    /** @internal */

  }, {
    key: "_registerOption",
    value: function _registerOption(value) {
      var id = (this._idCounter++).toString();

      this._optionMap.set(id, value);

      return id;
    }
    /** @internal */

  }, {
    key: "_getOptionId",
    value: function _getOptionId(value) {
      for (var _i5 = 0, _Array$from2 = Array.from(this._optionMap.keys()); _i5 < _Array$from2.length; _i5++) {
        var id = _Array$from2[_i5];
        if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
      }

      return null;
    }
    /** @internal */

  }, {
    key: "_getOptionValue",
    value: function _getOptionValue(valueString) {
      var id = _extractId$1(valueString);

      return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
    }
  }]);

  return SelectMultipleControlValueAccessor;
}(BuiltInControlValueAccessor);

SelectMultipleControlValueAccessor.ɵfac = /*@__PURE__*/function () {
  var ɵSelectMultipleControlValueAccessor_BaseFactory;
  return function SelectMultipleControlValueAccessor_Factory(t) {
    return (ɵSelectMultipleControlValueAccessor_BaseFactory || (ɵSelectMultipleControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](SelectMultipleControlValueAccessor)))(t || SelectMultipleControlValueAccessor);
  };
}();

SelectMultipleControlValueAccessor.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: SelectMultipleControlValueAccessor,
  selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
  hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target);
      })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([SELECT_MULTIPLE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});
SelectMultipleControlValueAccessor.propDecorators = {
  compareWith: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](SelectMultipleControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
      host: {
        '(change)': 'onChange($event.target)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see `SelectMultipleControlValueAccessor`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */


var ɵNgSelectMultipleOption = /*#__PURE__*/function () {
  function ɵNgSelectMultipleOption(_element, _renderer, _select) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ɵNgSelectMultipleOption);

    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;

    if (this._select) {
      this.id = this._select._registerOption(this);
    }
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(ɵNgSelectMultipleOption, [{
    key: "ngValue",
    set: function set(value) {
      if (this._select == null) return;
      this._value = value;

      this._setElementValue(_buildValueString$1(this.id, value));

      this._select.writeValue(this._select.value);
    }
    /**
     * @description
     * Tracks simple string values bound to the option element.
     * For objects, use the `ngValue` input binding.
     */

  }, {
    key: "value",
    set: function set(value) {
      if (this._select) {
        this._value = value;

        this._setElementValue(_buildValueString$1(this.id, value));

        this._select.writeValue(this._select.value);
      } else {
        this._setElementValue(value);
      }
    }
    /** @internal */

  }, {
    key: "_setElementValue",
    value: function _setElementValue(value) {
      this._renderer.setProperty(this._element.nativeElement, 'value', value);
    }
    /** @internal */

  }, {
    key: "_setSelected",
    value: function _setSelected(selected) {
      this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._select) {
        this._select._optionMap.delete(this.id);

        this._select.writeValue(this._select.value);
      }
    }
  }]);

  return ɵNgSelectMultipleOption;
}();

ɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) {
  return new (t || ɵNgSelectMultipleOption)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](SelectMultipleControlValueAccessor, 9));
};

ɵNgSelectMultipleOption.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: ɵNgSelectMultipleOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});

ɵNgSelectMultipleOption.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
  }, {
    type: SelectMultipleControlValueAccessor,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
    }]
  }];
};

ɵNgSelectMultipleOption.propDecorators = {
  ngValue: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['ngValue']
  }],
  value: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
    args: ['value']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](ɵNgSelectMultipleOption, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'option'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Renderer2
    }, {
      type: SelectMultipleControlValueAccessor,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Host
      }]
    }];
  }, {
    ngValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['ngValue']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input,
      args: ['value']
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * Method that updates string to integer if not alread a number
 *
 * @param value The value to convert to integer
 * @returns value of parameter in number or integer.
 */


function toNumber(value) {
  return typeof value === 'number' ? value : parseInt(value, 10);
}
/**
 * A base class for Validator-based Directives. The class contains common logic shared across such
 * Directives.
 *
 * For internal use only, this class is not intended for use outside of the Forms package.
 */


var AbstractValidatorDirective = /*#__PURE__*/function () {
  function AbstractValidatorDirective() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, AbstractValidatorDirective);

    this._validator = _nullValidator;
  }
  /**
   * Helper function invoked from child classes to process changes (from `ngOnChanges` hook).
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(AbstractValidatorDirective, [{
    key: "handleChanges",
    value: function handleChanges(changes) {
      if (this.inputName in changes) {
        var input = this.normalizeInput(changes[this.inputName].currentValue);
        this._validator = this.createValidator(input);

        if (this._onChange) {
          this._onChange();
        }
      }
    }
    /** @nodoc */

  }, {
    key: "validate",
    value: function validate(control) {
      return this._validator(control);
    }
    /** @nodoc */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }]);

  return AbstractValidatorDirective;
}();

AbstractValidatorDirective.ɵfac = function AbstractValidatorDirective_Factory(t) {
  return new (t || AbstractValidatorDirective)();
};

AbstractValidatorDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: AbstractValidatorDirective
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](AbstractValidatorDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive
  }], function () {
    return [];
  }, null);
})();
/**
 * @description
 * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var MAX_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return MaxValidator;
  }),
  multi: true
};
/**
 * A directive which installs the {@link MaxValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `max` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a max validator
 *
 * The following example shows how to add a max validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel max="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var MaxValidator = /*#__PURE__*/function (_AbstractValidatorDir) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(MaxValidator, _AbstractValidatorDir);

  var _super25 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(MaxValidator);

  function MaxValidator() {
    var _this41;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaxValidator);

    _this41 = _super25.apply(this, arguments);
    /** @internal */

    _this41.inputName = 'max';
    /** @internal */

    _this41.normalizeInput = function (input) {
      return parseFloat(input);
    };
    /** @internal */


    _this41.createValidator = function (max) {
      return maxValidator(max);
    };

    return _this41;
  }
  /**
   * Declare `ngOnChanges` lifecycle hook at the main directive level (vs keeping it in base class)
   * to avoid differences in handling inheritance of lifecycle hooks between Ivy and ViewEngine in
   * AOT mode. This could be refactored once ViewEngine is removed.
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaxValidator, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this.handleChanges(changes);
    }
  }]);

  return MaxValidator;
}(AbstractValidatorDirective);

MaxValidator.ɵfac = /*@__PURE__*/function () {
  var ɵMaxValidator_BaseFactory;
  return function MaxValidator_Factory(t) {
    return (ɵMaxValidator_BaseFactory || (ɵMaxValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](MaxValidator)))(t || MaxValidator);
  };
}();

MaxValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: MaxValidator,
  selectors: [["input", "type", "number", "max", "", "formControlName", ""], ["input", "type", "number", "max", "", "formControl", ""], ["input", "type", "number", "max", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      var tmp_b_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("max", (tmp_b_0 = ctx.max) !== null && tmp_b_0 !== undefined ? tmp_b_0 : null);
    }
  },
  inputs: {
    max: "max"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([MAX_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
MaxValidator.propDecorators = {
  max: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](MaxValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',
      providers: [MAX_VALIDATOR],
      host: {
        '[attr.max]': 'max ?? null'
      }
    }]
  }], null, {
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var MIN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return MinValidator;
  }),
  multi: true
};
/**
 * A directive which installs the {@link MinValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `min` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a min validator
 *
 * The following example shows how to add a min validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel min="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var MinValidator = /*#__PURE__*/function (_AbstractValidatorDir2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(MinValidator, _AbstractValidatorDir2);

  var _super26 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(MinValidator);

  function MinValidator() {
    var _this42;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MinValidator);

    _this42 = _super26.apply(this, arguments);
    /** @internal */

    _this42.inputName = 'min';
    /** @internal */

    _this42.normalizeInput = function (input) {
      return parseFloat(input);
    };
    /** @internal */


    _this42.createValidator = function (min) {
      return minValidator(min);
    };

    return _this42;
  }
  /**
   * Declare `ngOnChanges` lifecycle hook at the main directive level (vs keeping it in base class)
   * to avoid differences in handling inheritance of lifecycle hooks between Ivy and ViewEngine in
   * AOT mode. This could be refactored once ViewEngine is removed.
   * @nodoc
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MinValidator, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this.handleChanges(changes);
    }
  }]);

  return MinValidator;
}(AbstractValidatorDirective);

MinValidator.ɵfac = /*@__PURE__*/function () {
  var ɵMinValidator_BaseFactory;
  return function MinValidator_Factory(t) {
    return (ɵMinValidator_BaseFactory || (ɵMinValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](MinValidator)))(t || MinValidator);
  };
}();

MinValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: MinValidator,
  selectors: [["input", "type", "number", "min", "", "formControlName", ""], ["input", "type", "number", "min", "", "formControl", ""], ["input", "type", "number", "min", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      var tmp_b_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("min", (tmp_b_0 = ctx.min) !== null && tmp_b_0 !== undefined ? tmp_b_0 : null);
    }
  },
  inputs: {
    min: "min"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([MIN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
MinValidator.propDecorators = {
  min: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](MinValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',
      providers: [MIN_VALIDATOR],
      host: {
        '[attr.min]': 'min ?? null'
      }
    }]
  }], null, {
    min: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return RequiredValidator;
  }),
  multi: true
};
/**
 * @description
 * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */

var CHECKBOX_REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return CheckboxRequiredValidator;
  }),
  multi: true
};
/**
 * @description
 * A directive that adds the `required` validator to any controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required validator using template-driven forms
 *
 * ```
 * <input name="fullName" ngModel required>
 * ```
 *
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 * @publicApi
 */

var RequiredValidator = /*#__PURE__*/function () {
  function RequiredValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, RequiredValidator);

    this._required = false;
  }
  /**
   * @description
   * Tracks changes to the required attribute bound to this directive.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(RequiredValidator, [{
    key: "required",
    get: function get() {
      return this._required;
    },
    set: function set(value) {
      this._required = value != null && value !== false && "".concat(value) !== 'false';
      if (this._onChange) this._onChange();
    }
    /**
     * Method that validates whether the control is empty.
     * Returns the validation result if enabled, otherwise null.
     * @nodoc
     */

  }, {
    key: "validate",
    value: function validate(control) {
      return this.required ? requiredValidator(control) : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     * @nodoc
     */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }]);

  return RequiredValidator;
}();

RequiredValidator.ɵfac = function RequiredValidator_Factory(t) {
  return new (t || RequiredValidator)();
};

RequiredValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: RequiredValidator,
  selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
  hostVars: 1,
  hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("required", ctx.required ? "" : null);
    }
  },
  inputs: {
    required: "required"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([REQUIRED_VALIDATOR])]
});
RequiredValidator.propDecorators = {
  required: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](RequiredValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
      providers: [REQUIRED_VALIDATOR],
      host: {
        '[attr.required]': 'required ? "" : null'
      }
    }]
  }], function () {
    return [];
  }, {
    required: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * A Directive that adds the `required` validator to checkbox controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required checkbox validator using template-driven forms
 *
 * The following example shows how to add a checkbox required validator to an input attached to an
 * ngModel binding.
 *
 * ```
 * <input type="checkbox" name="active" ngModel required>
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */


var CheckboxRequiredValidator = /*#__PURE__*/function (_RequiredValidator) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(CheckboxRequiredValidator, _RequiredValidator);

  var _super27 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(CheckboxRequiredValidator);

  function CheckboxRequiredValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, CheckboxRequiredValidator);

    return _super27.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(CheckboxRequiredValidator, [{
    key: "validate",
    value:
    /**
     * Method that validates whether or not the checkbox has been checked.
     * Returns the validation result if enabled, otherwise null.
     * @nodoc
     */
    function validate(control) {
      return this.required ? requiredTrueValidator(control) : null;
    }
  }]);

  return CheckboxRequiredValidator;
}(RequiredValidator);

CheckboxRequiredValidator.ɵfac = /*@__PURE__*/function () {
  var ɵCheckboxRequiredValidator_BaseFactory;
  return function CheckboxRequiredValidator_Factory(t) {
    return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetInheritedFactory"](CheckboxRequiredValidator)))(t || CheckboxRequiredValidator);
  };
}();

CheckboxRequiredValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: CheckboxRequiredValidator,
  selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("required", ctx.required ? "" : null);
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([CHECKBOX_REQUIRED_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵInheritDefinitionFeature"]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](CheckboxRequiredValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
      providers: [CHECKBOX_REQUIRED_VALIDATOR],
      host: {
        '[attr.required]': 'required ? "" : null'
      }
    }]
  }], null, null);
})();
/**
 * @description
 * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var EMAIL_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return EmailValidator;
  }),
  multi: true
};
/**
 * A directive that adds the `email` validator to controls marked with the
 * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding an email validator
 *
 * The following example shows how to add an email validator to an input attached to an ngModel
 * binding.
 *
 * ```
 * <input type="email" name="email" ngModel email>
 * <input type="email" name="email" ngModel email="true">
 * <input type="email" name="email" ngModel [email]="true">
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */

var EmailValidator = /*#__PURE__*/function () {
  function EmailValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, EmailValidator);

    this._enabled = false;
  }
  /**
   * @description
   * Tracks changes to the email attribute bound to this directive.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(EmailValidator, [{
    key: "email",
    set: function set(value) {
      this._enabled = value === '' || value === true || value === 'true';
      if (this._onChange) this._onChange();
    }
    /**
     * Method that validates whether an email address is valid.
     * Returns the validation result if enabled, otherwise null.
     * @nodoc
     */

  }, {
    key: "validate",
    value: function validate(control) {
      return this._enabled ? emailValidator(control) : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     * @nodoc
     */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }]);

  return EmailValidator;
}();

EmailValidator.ɵfac = function EmailValidator_Factory(t) {
  return new (t || EmailValidator)();
};

EmailValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: EmailValidator,
  selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
  inputs: {
    email: "email"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([EMAIL_VALIDATOR])]
});
EmailValidator.propDecorators = {
  email: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](EmailValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[email][formControlName],[email][formControl],[email][ngModel]',
      providers: [EMAIL_VALIDATOR]
    }]
  }], function () {
    return [];
  }, {
    email: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var MIN_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return MinLengthValidator;
  }),
  multi: true
};
/**
 * A directive that adds minimum length validation to controls marked with the
 * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a minimum length validator
 *
 * The following example shows how to add a minimum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel minlength="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var MinLengthValidator = /*#__PURE__*/function () {
  function MinLengthValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MinLengthValidator);

    this._validator = _nullValidator;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MinLengthValidator, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if ('minlength' in changes) {
        this._createValidator();

        if (this._onChange) this._onChange();
      }
    }
    /**
     * Method that validates whether the value meets a minimum length requirement.
     * Returns the validation result if enabled, otherwise null.
     * @nodoc
     */

  }, {
    key: "validate",
    value: function validate(control) {
      return this.enabled() ? this._validator(control) : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     * @nodoc
     */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }, {
    key: "_createValidator",
    value: function _createValidator() {
      this._validator = this.enabled() ? minLengthValidator(toNumber(this.minlength)) : _nullValidator;
    }
    /** @nodoc */

  }, {
    key: "enabled",
    value: function enabled() {
      return this.minlength != null
      /* both `null` and `undefined` */
      ;
    }
  }]);

  return MinLengthValidator;
}();

MinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) {
  return new (t || MinLengthValidator)();
};

MinLengthValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: MinLengthValidator,
  selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("minlength", ctx.enabled() ? ctx.minlength : null);
    }
  },
  inputs: {
    minlength: "minlength"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([MIN_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
MinLengthValidator.propDecorators = {
  minlength: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](MinLengthValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
      providers: [MIN_LENGTH_VALIDATOR],
      host: {
        '[attr.minlength]': 'enabled() ? minlength : null'
      }
    }]
  }], function () {
    return [];
  }, {
    minlength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var MAX_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return MaxLengthValidator;
  }),
  multi: true
};
/**
 * A directive that adds max length validation to controls marked with the
 * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a maximum length validator
 *
 * The following example shows how to add a maximum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel maxlength="25">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var MaxLengthValidator = /*#__PURE__*/function () {
  function MaxLengthValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaxLengthValidator);

    this._validator = _nullValidator;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaxLengthValidator, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if ('maxlength' in changes) {
        this._createValidator();

        if (this._onChange) this._onChange();
      }
    }
    /**
     * Method that validates whether the value exceeds the maximum length requirement.
     * @nodoc
     */

  }, {
    key: "validate",
    value: function validate(control) {
      return this.enabled() ? this._validator(control) : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     * @nodoc
     */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }, {
    key: "_createValidator",
    value: function _createValidator() {
      this._validator = this.enabled() ? maxLengthValidator(toNumber(this.maxlength)) : _nullValidator;
    }
    /** @nodoc */

  }, {
    key: "enabled",
    value: function enabled() {
      return this.maxlength != null
      /* both `null` and `undefined` */
      ;
    }
  }]);

  return MaxLengthValidator;
}();

MaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) {
  return new (t || MaxLengthValidator)();
};

MaxLengthValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: MaxLengthValidator,
  selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("maxlength", ctx.enabled() ? ctx.maxlength : null);
    }
  },
  inputs: {
    maxlength: "maxlength"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([MAX_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
MaxLengthValidator.propDecorators = {
  maxlength: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](MaxLengthValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
      providers: [MAX_LENGTH_VALIDATOR],
      host: {
        '[attr.maxlength]': 'enabled() ? maxlength : null'
      }
    }]
  }], function () {
    return [];
  }, {
    maxlength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
 */


var PATTERN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
    return PatternValidator;
  }),
  multi: true
};
/**
 * @description
 * A directive that adds regex pattern validation to controls marked with the
 * `pattern` attribute. The regex must match the entire control value.
 * The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a pattern validator
 *
 * The following example shows how to add a pattern validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */

var PatternValidator = /*#__PURE__*/function () {
  function PatternValidator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, PatternValidator);

    this._validator = _nullValidator;
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(PatternValidator, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if ('pattern' in changes) {
        this._createValidator();

        if (this._onChange) this._onChange();
      }
    }
    /**
     * Method that validates whether the value matches the pattern requirement.
     * @nodoc
     */

  }, {
    key: "validate",
    value: function validate(control) {
      return this._validator(control);
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     * @nodoc
     */

  }, {
    key: "registerOnValidatorChange",
    value: function registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
  }, {
    key: "_createValidator",
    value: function _createValidator() {
      this._validator = patternValidator(this.pattern);
    }
  }]);

  return PatternValidator;
}();

PatternValidator.ɵfac = function PatternValidator_Factory(t) {
  return new (t || PatternValidator)();
};

PatternValidator.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineDirective"]({
  type: PatternValidator,
  selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function PatternValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵattribute"]("pattern", ctx.pattern ? ctx.pattern : null);
    }
  },
  inputs: {
    pattern: "pattern"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵProvidersFeature"]([PATTERN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"]]
});
PatternValidator.propDecorators = {
  pattern: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](PatternValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Directive,
    args: [{
      selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
      providers: [PATTERN_VALIDATOR],
      host: {
        '[attr.pattern]': 'pattern ? pattern : null'
      }
    }]
  }], function () {
    return [];
  }, {
    pattern: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Input
    }]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];
var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
/**
 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
 */

var ɵInternalFormsSharedModule = function ɵInternalFormsSharedModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ɵInternalFormsSharedModule);
};

ɵInternalFormsSharedModule.ɵfac = function ɵInternalFormsSharedModule_Factory(t) {
  return new (t || ɵInternalFormsSharedModule)();
};

ɵInternalFormsSharedModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: ɵInternalFormsSharedModule
});
ɵInternalFormsSharedModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  imports: [[RadioControlRegistryModule]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](ɵInternalFormsSharedModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      declarations: SHARED_FORM_DIRECTIVES,
      imports: [RadioControlRegistryModule],
      exports: SHARED_FORM_DIRECTIVES
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](ɵInternalFormsSharedModule, {
    declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator],
    imports: [RadioControlRegistryModule],
    exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Exports the required providers and directives for template-driven forms,
 * making them available for import by NgModules that import this module.
 *
 * Providers associated with this module:
 * * `RadioControlRegistry`
 *
 * @see [Forms Overview](/guide/forms-overview)
 * @see [Template-driven Forms Guide](/guide/forms)
 *
 * @publicApi
 */


var FormsModule = function FormsModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormsModule);
};

FormsModule.ɵfac = function FormsModule_Factory(t) {
  return new (t || FormsModule)();
};

FormsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: FormsModule
});
FormsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  imports: [ɵInternalFormsSharedModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      declarations: TEMPLATE_DRIVEN_DIRECTIVES,
      exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](FormsModule, {
    declarations: [NgModel, NgModelGroup, NgForm],
    exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm]
  });
})();
/**
 * Exports the required infrastructure and directives for reactive forms,
 * making them available for import by NgModules that import this module.
 *
 * Providers associated with this module:
 * * `FormBuilder`
 * * `RadioControlRegistry`
 *
 * @see [Forms Overview](guide/forms-overview)
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @publicApi
 */


var ReactiveFormsModule = /*#__PURE__*/function () {
  function ReactiveFormsModule() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, ReactiveFormsModule);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(ReactiveFormsModule, null, [{
    key: "withConfig",
    value:
    /**
     * @description
     * Provides options for configuring the reactive forms module.
     *
     * @param opts An object of configuration options
     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
     * binding is used with reactive form directives.
     */
    function withConfig(opts) {
      return {
        ngModule: ReactiveFormsModule,
        providers: [{
          provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
          useValue: opts.warnOnNgModelWithFormControl
        }]
      };
    }
  }]);

  return ReactiveFormsModule;
}();

ReactiveFormsModule.ɵfac = function ReactiveFormsModule_Factory(t) {
  return new (t || ReactiveFormsModule)();
};

ReactiveFormsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: ReactiveFormsModule
});
ReactiveFormsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  imports: [ɵInternalFormsSharedModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](ReactiveFormsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      declarations: [REACTIVE_DRIVEN_DIRECTIVES],
      exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](ReactiveFormsModule, {
    declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
    exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function isAbstractControlOptions(options) {
  return options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined;
}
/**
 * @description
 * Creates an `AbstractControl` from a user-specified configuration.
 *
 * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
 * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
 * forms.
 *
 * @see [Reactive Forms Guide](/guide/reactive-forms)
 *
 * @publicApi
 */


var FormBuilder = /*#__PURE__*/function () {
  function FormBuilder() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, FormBuilder);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(FormBuilder, [{
    key: "group",
    value: function group(controlsConfig) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var controls = this._reduceControls(controlsConfig);

      var validators = null;
      var asyncValidators = null;
      var updateOn = undefined;

      if (options != null) {
        if (isAbstractControlOptions(options)) {
          // `options` are `AbstractControlOptions`
          validators = options.validators != null ? options.validators : null;
          asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;
          updateOn = options.updateOn != null ? options.updateOn : undefined;
        } else {
          // `options` are legacy form group options
          validators = options['validator'] != null ? options['validator'] : null;
          asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;
        }
      }

      return new FormGroup(controls, {
        asyncValidators: asyncValidators,
        updateOn: updateOn,
        validators: validators
      });
    }
    /**
     * @description
     * Construct a new `FormControl` with the given state, validators and options.
     *
     * @param formState Initializes the control with an initial state value, or
     * with an object that contains both a value and a disabled status.
     *
     * @param validatorOrOpts A synchronous validator function, or an array of
     * such functions, or an `AbstractControlOptions` object that contains
     * validation functions and a validation trigger.
     *
     * @param asyncValidator A single async validator or array of async validator
     * functions.
     *
     * @usageNotes
     *
     * ### Initialize a control as disabled
     *
     * The following example returns a control with an initial value in a disabled state.
     *
     * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
     * </code-example>
     */

  }, {
    key: "control",
    value: function control(formState, validatorOrOpts, asyncValidator) {
      return new FormControl(formState, validatorOrOpts, asyncValidator);
    }
    /**
     * Constructs a new `FormArray` from the given array of configurations,
     * validators and options.
     *
     * @param controlsConfig An array of child controls or control configs. Each
     * child control is given an index when it is registered.
     *
     * @param validatorOrOpts A synchronous validator function, or an array of
     * such functions, or an `AbstractControlOptions` object that contains
     * validation functions and a validation trigger.
     *
     * @param asyncValidator A single async validator or array of async validator
     * functions.
     */

  }, {
    key: "array",
    value: function array(controlsConfig, validatorOrOpts, asyncValidator) {
      var _this43 = this;

      var controls = controlsConfig.map(function (c) {
        return _this43._createControl(c);
      });
      return new FormArray(controls, validatorOrOpts, asyncValidator);
    }
    /** @internal */

  }, {
    key: "_reduceControls",
    value: function _reduceControls(controlsConfig) {
      var _this44 = this;

      var controls = {};
      Object.keys(controlsConfig).forEach(function (controlName) {
        controls[controlName] = _this44._createControl(controlsConfig[controlName]);
      });
      return controls;
    }
    /** @internal */

  }, {
    key: "_createControl",
    value: function _createControl(controlConfig) {
      if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
        return controlConfig;
      } else if (Array.isArray(controlConfig)) {
        var value = controlConfig[0];
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
        return this.control(value, validator, asyncValidator);
      } else {
        return this.control(controlConfig);
      }
    }
  }]);

  return FormBuilder;
}();

FormBuilder.ɵfac = function FormBuilder_Factory(t) {
  return new (t || FormBuilder)();
};

FormBuilder.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: function FormBuilder_Factory() {
    return new FormBuilder();
  },
  token: FormBuilder,
  providedIn: ReactiveFormsModule
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](FormBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: ReactiveFormsModule
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.Version('12.2.3');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 92352:
/*!***********************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/fesm2015/animations.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANIMATION_MODULE_TYPE": function() { return /* binding */ ANIMATION_MODULE_TYPE; },
/* harmony export */   "BrowserAnimationsModule": function() { return /* binding */ BrowserAnimationsModule; },
/* harmony export */   "NoopAnimationsModule": function() { return /* binding */ NoopAnimationsModule; },
/* harmony export */   "ɵAnimationRenderer": function() { return /* binding */ AnimationRenderer; },
/* harmony export */   "ɵAnimationRendererFactory": function() { return /* binding */ AnimationRendererFactory; },
/* harmony export */   "ɵBrowserAnimationBuilder": function() { return /* binding */ BrowserAnimationBuilder; },
/* harmony export */   "ɵBrowserAnimationFactory": function() { return /* binding */ BrowserAnimationFactory; },
/* harmony export */   "ɵInjectableAnimationEngine": function() { return /* binding */ InjectableAnimationEngine; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_a": function() { return /* binding */ instantiateSupportedAnimationDriver; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_b": function() { return /* binding */ instantiateDefaultStyleNormalizer; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_c": function() { return /* binding */ instantiateRendererFactory; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_d": function() { return /* binding */ BROWSER_ANIMATIONS_PROVIDERS; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_e": function() { return /* binding */ BROWSER_NOOP_ANIMATIONS_PROVIDERS; },
/* harmony export */   "ɵangular_packages_platform_browser_animations_animations_f": function() { return /* binding */ BaseAnimationRenderer; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 64790);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser */ 4919);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/animations */ 82458);
/* harmony import */ var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/animations/browser */ 26022);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ 40093);






/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */





/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */




var BrowserAnimationBuilder = /*#__PURE__*/function (_AnimationBuilder) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(BrowserAnimationBuilder, _AnimationBuilder);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(BrowserAnimationBuilder);

  function BrowserAnimationBuilder(rootRenderer, doc) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, BrowserAnimationBuilder);

    _this = _super.call(this);
    _this._nextAnimationId = 0;
    var typeData = {
      id: '0',
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__.ViewEncapsulation.None,
      styles: [],
      data: {
        animation: []
      }
    };
    _this._renderer = rootRenderer.createRenderer(doc.body, typeData);
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserAnimationBuilder, [{
    key: "build",
    value: function build(animation) {
      var id = this._nextAnimationId.toString();

      this._nextAnimationId++;
      var entry = Array.isArray(animation) ? (0,_angular_animations__WEBPACK_IMPORTED_MODULE_6__.sequence)(animation) : animation;
      issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
      return new BrowserAnimationFactory(id, this._renderer);
    }
  }]);

  return BrowserAnimationBuilder;
}(_angular_animations__WEBPACK_IMPORTED_MODULE_6__.AnimationBuilder);

BrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) {
  return new (t || BrowserAnimationBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT));
};

BrowserAnimationBuilder.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjectable"]({
  token: BrowserAnimationBuilder,
  factory: BrowserAnimationBuilder.ɵfac
});

BrowserAnimationBuilder.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵsetClassMetadata"](BrowserAnimationBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT]
      }]
    }];
  }, null);
})();

var BrowserAnimationFactory = /*#__PURE__*/function (_AnimationFactory) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(BrowserAnimationFactory, _AnimationFactory);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(BrowserAnimationFactory);

  function BrowserAnimationFactory(_id, _renderer) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, BrowserAnimationFactory);

    _this2 = _super2.call(this);
    _this2._id = _id;
    _this2._renderer = _renderer;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserAnimationFactory, [{
    key: "create",
    value: function create(element, options) {
      return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
    }
  }]);

  return BrowserAnimationFactory;
}(_angular_animations__WEBPACK_IMPORTED_MODULE_6__.AnimationFactory);

var RendererAnimationPlayer = /*#__PURE__*/function () {
  function RendererAnimationPlayer(id, element, options, _renderer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, RendererAnimationPlayer);

    this.id = id;
    this.element = element;
    this._renderer = _renderer;
    this.parentPlayer = null;
    this._started = false;
    this.totalTime = 0;

    this._command('create', options);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(RendererAnimationPlayer, [{
    key: "_listen",
    value: function _listen(eventName, callback) {
      return this._renderer.listen(this.element, "@@".concat(this.id, ":").concat(eventName), callback);
    }
  }, {
    key: "_command",
    value: function _command(command) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
    }
  }, {
    key: "onDone",
    value: function onDone(fn) {
      this._listen('done', fn);
    }
  }, {
    key: "onStart",
    value: function onStart(fn) {
      this._listen('start', fn);
    }
  }, {
    key: "onDestroy",
    value: function onDestroy(fn) {
      this._listen('destroy', fn);
    }
  }, {
    key: "init",
    value: function init() {
      this._command('init');
    }
  }, {
    key: "hasStarted",
    value: function hasStarted() {
      return this._started;
    }
  }, {
    key: "play",
    value: function play() {
      this._command('play');

      this._started = true;
    }
  }, {
    key: "pause",
    value: function pause() {
      this._command('pause');
    }
  }, {
    key: "restart",
    value: function restart() {
      this._command('restart');
    }
  }, {
    key: "finish",
    value: function finish() {
      this._command('finish');
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._command('destroy');
    }
  }, {
    key: "reset",
    value: function reset() {
      this._command('reset');

      this._started = false;
    }
  }, {
    key: "setPosition",
    value: function setPosition(p) {
      this._command('setPosition', p);
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      var _a, _b;

      return (_b = (_a = this._renderer.engine.players[+this.id]) === null || _a === void 0 ? void 0 : _a.getPosition()) !== null && _b !== void 0 ? _b : 0;
    }
  }]);

  return RendererAnimationPlayer;
}();

function issueAnimationCommand(renderer, element, id, command, args) {
  return renderer.setProperty(element, "@@".concat(id, ":").concat(command), args);
}

var ANIMATION_PREFIX = '@';
var DISABLE_ANIMATIONS_FLAG = '@.disabled';

var AnimationRendererFactory = /*#__PURE__*/function () {
  function AnimationRendererFactory(delegate, engine, _zone) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, AnimationRendererFactory);

    this.delegate = delegate;
    this.engine = engine;
    this._zone = _zone;
    this._currentId = 0;
    this._microtaskId = 1;
    this._animationCallbacksBuffer = [];
    this._rendererCache = new Map();
    this._cdRecurDepth = 0;
    this.promise = Promise.resolve(0);

    engine.onRemovalComplete = function (element, delegate) {
      // Note: if an component element has a leave animation, and the component
      // a host leave animation, the view engine will call `removeChild` for the parent
      // component renderer as well as for the child component renderer.
      // Therefore, we need to check if we already removed the element.
      if (delegate && delegate.parentNode(element)) {
        delegate.removeChild(element.parentNode, element);
      }
    };
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(AnimationRendererFactory, [{
    key: "createRenderer",
    value: function createRenderer(hostElement, type) {
      var _this3 = this;

      var EMPTY_NAMESPACE_ID = ''; // cache the delegates to find out which cached delegate can
      // be used by which cached renderer

      var delegate = this.delegate.createRenderer(hostElement, type);

      if (!hostElement || !type || !type.data || !type.data['animation']) {
        var renderer = this._rendererCache.get(delegate);

        if (!renderer) {
          renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine); // only cache this result when the base renderer is used

          this._rendererCache.set(delegate, renderer);
        }

        return renderer;
      }

      var componentId = type.id;
      var namespaceId = type.id + '-' + this._currentId;
      this._currentId++;
      this.engine.register(namespaceId, hostElement);

      var registerTrigger = function registerTrigger(trigger) {
        if (Array.isArray(trigger)) {
          trigger.forEach(registerTrigger);
        } else {
          _this3.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
        }
      };

      var animationTriggers = type.data['animation'];
      animationTriggers.forEach(registerTrigger);
      return new AnimationRenderer(this, namespaceId, delegate, this.engine);
    }
  }, {
    key: "begin",
    value: function begin() {
      this._cdRecurDepth++;

      if (this.delegate.begin) {
        this.delegate.begin();
      }
    }
  }, {
    key: "_scheduleCountTask",
    value: function _scheduleCountTask() {
      var _this4 = this;

      // always use promise to schedule microtask instead of use Zone
      this.promise.then(function () {
        _this4._microtaskId++;
      });
    }
    /** @internal */

  }, {
    key: "scheduleListenerCallback",
    value: function scheduleListenerCallback(count, fn, data) {
      var _this5 = this;

      if (count >= 0 && count < this._microtaskId) {
        this._zone.run(function () {
          return fn(data);
        });

        return;
      }

      if (this._animationCallbacksBuffer.length == 0) {
        Promise.resolve(null).then(function () {
          _this5._zone.run(function () {
            _this5._animationCallbacksBuffer.forEach(function (tuple) {
              var _tuple = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(tuple, 2),
                  fn = _tuple[0],
                  data = _tuple[1];

              fn(data);
            });

            _this5._animationCallbacksBuffer = [];
          });
        });
      }

      this._animationCallbacksBuffer.push([fn, data]);
    }
  }, {
    key: "end",
    value: function end() {
      var _this6 = this;

      this._cdRecurDepth--; // this is to prevent animations from running twice when an inner
      // component does CD when a parent component instead has inserted it

      if (this._cdRecurDepth == 0) {
        this._zone.runOutsideAngular(function () {
          _this6._scheduleCountTask();

          _this6.engine.flush(_this6._microtaskId);
        });
      }

      if (this.delegate.end) {
        this.delegate.end();
      }
    }
  }, {
    key: "whenRenderingDone",
    value: function whenRenderingDone() {
      return this.engine.whenRenderingDone();
    }
  }]);

  return AnimationRendererFactory;
}();

AnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) {
  return new (t || AnimationRendererFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"]), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_5__.NgZone));
};

AnimationRendererFactory.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjectable"]({
  token: AnimationRendererFactory,
  factory: AnimationRendererFactory.ɵfac
});

AnimationRendererFactory.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2
  }, {
    type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.NgZone
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵsetClassMetadata"](AnimationRendererFactory, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2
    }, {
      type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.NgZone
    }];
  }, null);
})();

var BaseAnimationRenderer = /*#__PURE__*/function () {
  function BaseAnimationRenderer(namespaceId, delegate, engine) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, BaseAnimationRenderer);

    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this.destroyNode = this.delegate.destroyNode ? function (n) {
      return delegate.destroyNode(n);
    } : null;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BaseAnimationRenderer, [{
    key: "data",
    get: function get() {
      return this.delegate.data;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.engine.destroy(this.namespaceId, this.delegate);
      this.delegate.destroy();
    }
  }, {
    key: "createElement",
    value: function createElement(name, namespace) {
      return this.delegate.createElement(name, namespace);
    }
  }, {
    key: "createComment",
    value: function createComment(value) {
      return this.delegate.createComment(value);
    }
  }, {
    key: "createText",
    value: function createText(value) {
      return this.delegate.createText(value);
    }
  }, {
    key: "appendChild",
    value: function appendChild(parent, newChild) {
      this.delegate.appendChild(parent, newChild);
      this.engine.onInsert(this.namespaceId, newChild, parent, false);
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(parent, newChild, refChild) {
      var isMove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      this.delegate.insertBefore(parent, newChild, refChild); // If `isMove` true than we should animate this insert.

      this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
    }
  }, {
    key: "removeChild",
    value: function removeChild(parent, oldChild, isHostElement) {
      this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
    }
  }, {
    key: "selectRootElement",
    value: function selectRootElement(selectorOrNode, preserveContent) {
      return this.delegate.selectRootElement(selectorOrNode, preserveContent);
    }
  }, {
    key: "parentNode",
    value: function parentNode(node) {
      return this.delegate.parentNode(node);
    }
  }, {
    key: "nextSibling",
    value: function nextSibling(node) {
      return this.delegate.nextSibling(node);
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(el, name, value, namespace) {
      this.delegate.setAttribute(el, name, value, namespace);
    }
  }, {
    key: "removeAttribute",
    value: function removeAttribute(el, name, namespace) {
      this.delegate.removeAttribute(el, name, namespace);
    }
  }, {
    key: "addClass",
    value: function addClass(el, name) {
      this.delegate.addClass(el, name);
    }
  }, {
    key: "removeClass",
    value: function removeClass(el, name) {
      this.delegate.removeClass(el, name);
    }
  }, {
    key: "setStyle",
    value: function setStyle(el, style, value, flags) {
      this.delegate.setStyle(el, style, value, flags);
    }
  }, {
    key: "removeStyle",
    value: function removeStyle(el, style, flags) {
      this.delegate.removeStyle(el, style, flags);
    }
  }, {
    key: "setProperty",
    value: function setProperty(el, name, value) {
      if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
        this.disableAnimations(el, !!value);
      } else {
        this.delegate.setProperty(el, name, value);
      }
    }
  }, {
    key: "setValue",
    value: function setValue(node, value) {
      this.delegate.setValue(node, value);
    }
  }, {
    key: "listen",
    value: function listen(target, eventName, callback) {
      return this.delegate.listen(target, eventName, callback);
    }
  }, {
    key: "disableAnimations",
    value: function disableAnimations(element, value) {
      this.engine.disableAnimations(element, value);
    }
  }]);

  return BaseAnimationRenderer;
}();

var AnimationRenderer = /*#__PURE__*/function (_BaseAnimationRendere) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(AnimationRenderer, _BaseAnimationRendere);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(AnimationRenderer);

  function AnimationRenderer(factory, namespaceId, delegate, engine) {
    var _this7;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, AnimationRenderer);

    _this7 = _super3.call(this, namespaceId, delegate, engine);
    _this7.factory = factory;
    _this7.namespaceId = namespaceId;
    return _this7;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(AnimationRenderer, [{
    key: "setProperty",
    value: function setProperty(el, name, value) {
      if (name.charAt(0) == ANIMATION_PREFIX) {
        if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
          value = value === undefined ? true : !!value;
          this.disableAnimations(el, value);
        } else {
          this.engine.process(this.namespaceId, el, name.substr(1), value);
        }
      } else {
        this.delegate.setProperty(el, name, value);
      }
    }
  }, {
    key: "listen",
    value: function listen(target, eventName, callback) {
      var _this8 = this;

      if (eventName.charAt(0) == ANIMATION_PREFIX) {
        var element = resolveElementFromTarget(target);
        var name = eventName.substr(1);
        var phase = ''; // @listener.phase is for trigger animation callbacks
        // @@listener is for animation builder callbacks

        if (name.charAt(0) != ANIMATION_PREFIX) {
          var _parseTriggerCallback = parseTriggerCallbackName(name);

          var _parseTriggerCallback2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_parseTriggerCallback, 2);

          name = _parseTriggerCallback2[0];
          phase = _parseTriggerCallback2[1];
        }

        return this.engine.listen(this.namespaceId, element, name, phase, function (event) {
          var countId = event['_data'] || -1;

          _this8.factory.scheduleListenerCallback(countId, callback, event);
        });
      }

      return this.delegate.listen(target, eventName, callback);
    }
  }]);

  return AnimationRenderer;
}(BaseAnimationRenderer);

function resolveElementFromTarget(target) {
  switch (target) {
    case 'body':
      return document.body;

    case 'document':
      return document;

    case 'window':
      return window;

    default:
      return target;
  }
}

function parseTriggerCallbackName(triggerName) {
  var dotIndex = triggerName.indexOf('.');
  var trigger = triggerName.substring(0, dotIndex);
  var phase = triggerName.substr(dotIndex + 1);
  return [trigger, phase];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var InjectableAnimationEngine = /*#__PURE__*/function (_ɵAnimationEngine) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__.default)(InjectableAnimationEngine, _ɵAnimationEngine);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_4__.default)(InjectableAnimationEngine);

  function InjectableAnimationEngine(doc, driver, normalizer) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, InjectableAnimationEngine);

    return _super4.call(this, doc.body, driver, normalizer);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(InjectableAnimationEngine, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.flush();
    }
  }]);

  return InjectableAnimationEngine;
}(_angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"]);

InjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) {
  return new (t || InjectableAnimationEngine)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__.AnimationDriver), _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationStyleNormalizer"]));
};

InjectableAnimationEngine.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjectable"]({
  token: InjectableAnimationEngine,
  factory: InjectableAnimationEngine.ɵfac
});

InjectableAnimationEngine.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT]
    }]
  }, {
    type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__.AnimationDriver
  }, {
    type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationStyleNormalizer"]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵsetClassMetadata"](InjectableAnimationEngine, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT]
      }]
    }, {
      type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__.AnimationDriver
    }, {
      type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationStyleNormalizer"]
    }];
  }, null);
})();

function instantiateSupportedAnimationDriver() {
  return (0,_angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵsupportsWebAnimations"])() ? new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵWebAnimationsDriver"]() : new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵCssKeyframesDriver"]();
}

function instantiateDefaultStyleNormalizer() {
  return new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵWebAnimationsStyleNormalizer"]();
}

function instantiateRendererFactory(renderer, engine, zone) {
  return new AnimationRendererFactory(renderer, engine, zone);
}
/**
 * @publicApi
 */


var ANIMATION_MODULE_TYPE = new _angular_core__WEBPACK_IMPORTED_MODULE_5__.InjectionToken('AnimationModuleType');
var SHARED_ANIMATION_PROVIDERS = [{
  provide: _angular_animations__WEBPACK_IMPORTED_MODULE_6__.AnimationBuilder,
  useClass: BrowserAnimationBuilder
}, {
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationStyleNormalizer"],
  useFactory: instantiateDefaultStyleNormalizer
}, {
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"],
  useClass: InjectableAnimationEngine
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_5__.RendererFactory2,
  useFactory: instantiateRendererFactory,
  deps: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__["ɵDomRendererFactory2"], _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_5__.NgZone]
}];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */

var BROWSER_ANIMATIONS_PROVIDERS = [{
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__.AnimationDriver,
  useFactory: instantiateSupportedAnimationDriver
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: 'BrowserAnimations'
}].concat(SHARED_ANIMATION_PROVIDERS);
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */

var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__.AnimationDriver,
  useClass: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_8__["ɵNoopAnimationDriver"]
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: 'NoopAnimations'
}].concat(SHARED_ANIMATION_PROVIDERS);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
 * for use with animations. See [Animations](guide/animations).
 * @publicApi
 */

var BrowserAnimationsModule = /*#__PURE__*/function () {
  function BrowserAnimationsModule() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, BrowserAnimationsModule);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserAnimationsModule, null, [{
    key: "withConfig",
    value:
    /**
     * Configures the module based on the specified object.
     *
     * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
     * @see `BrowserAnimationsModuleConfig`
     *
     * @usageNotes
     * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
     * function as follows:
     * ```
     * @NgModule({
     *   imports: [BrowserAnimationsModule.withConfig(config)]
     * })
     * class MyNgModule {}
     * ```
     */
    function withConfig(config) {
      return {
        ngModule: BrowserAnimationsModule,
        providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
      };
    }
  }]);

  return BrowserAnimationsModule;
}();

BrowserAnimationsModule.ɵfac = function BrowserAnimationsModule_Factory(t) {
  return new (t || BrowserAnimationsModule)();
};

BrowserAnimationsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineNgModule"]({
  type: BrowserAnimationsModule
});
BrowserAnimationsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjector"]({
  providers: BROWSER_ANIMATIONS_PROVIDERS,
  imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵsetClassMetadata"](BrowserAnimationsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.NgModule,
    args: [{
      exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule],
      providers: BROWSER_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵsetNgModuleScope"](BrowserAnimationsModule, {
    exports: function exports() {
      return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule];
    }
  });
})();
/**
 * A null player that must be imported to allow disabling of animations.
 * @publicApi
 */


var NoopAnimationsModule = function NoopAnimationsModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, NoopAnimationsModule);
};

NoopAnimationsModule.ɵfac = function NoopAnimationsModule_Factory(t) {
  return new (t || NoopAnimationsModule)();
};

NoopAnimationsModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineNgModule"]({
  type: NoopAnimationsModule
});
NoopAnimationsModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjector"]({
  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
  imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵsetClassMetadata"](NoopAnimationsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__.NgModule,
    args: [{
      exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule],
      providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵsetNgModuleScope"](NoopAnimationsModule, {
    exports: function exports() {
      return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule];
    }
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 4919:
/*!*****************************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/fesm2015/platform-browser.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ɵgetDOM": function() { return /* reexport safe */ _angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"]; },
/* harmony export */   "BrowserModule": function() { return /* binding */ BrowserModule; },
/* harmony export */   "BrowserTransferStateModule": function() { return /* binding */ BrowserTransferStateModule; },
/* harmony export */   "By": function() { return /* binding */ By; },
/* harmony export */   "DomSanitizer": function() { return /* binding */ DomSanitizer; },
/* harmony export */   "EVENT_MANAGER_PLUGINS": function() { return /* binding */ EVENT_MANAGER_PLUGINS; },
/* harmony export */   "EventManager": function() { return /* binding */ EventManager; },
/* harmony export */   "HAMMER_GESTURE_CONFIG": function() { return /* binding */ HAMMER_GESTURE_CONFIG; },
/* harmony export */   "HAMMER_LOADER": function() { return /* binding */ HAMMER_LOADER; },
/* harmony export */   "HammerGestureConfig": function() { return /* binding */ HammerGestureConfig; },
/* harmony export */   "HammerModule": function() { return /* binding */ HammerModule; },
/* harmony export */   "Meta": function() { return /* binding */ Meta; },
/* harmony export */   "Title": function() { return /* binding */ Title; },
/* harmony export */   "TransferState": function() { return /* binding */ TransferState; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "disableDebugTools": function() { return /* binding */ disableDebugTools; },
/* harmony export */   "enableDebugTools": function() { return /* binding */ enableDebugTools; },
/* harmony export */   "makeStateKey": function() { return /* binding */ makeStateKey; },
/* harmony export */   "platformBrowser": function() { return /* binding */ platformBrowser; },
/* harmony export */   "ɵBROWSER_SANITIZATION_PROVIDERS": function() { return /* binding */ BROWSER_SANITIZATION_PROVIDERS; },
/* harmony export */   "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__": function() { return /* binding */ BROWSER_SANITIZATION_PROVIDERS__POST_R3__; },
/* harmony export */   "ɵBrowserDomAdapter": function() { return /* binding */ BrowserDomAdapter; },
/* harmony export */   "ɵBrowserGetTestability": function() { return /* binding */ BrowserGetTestability; },
/* harmony export */   "ɵDomEventsPlugin": function() { return /* binding */ DomEventsPlugin; },
/* harmony export */   "ɵDomRendererFactory2": function() { return /* binding */ DomRendererFactory2; },
/* harmony export */   "ɵDomSanitizerImpl": function() { return /* binding */ DomSanitizerImpl; },
/* harmony export */   "ɵDomSharedStylesHost": function() { return /* binding */ DomSharedStylesHost; },
/* harmony export */   "ɵELEMENT_PROBE_PROVIDERS": function() { return /* binding */ ELEMENT_PROBE_PROVIDERS; },
/* harmony export */   "ɵELEMENT_PROBE_PROVIDERS__POST_R3__": function() { return /* binding */ ELEMENT_PROBE_PROVIDERS__POST_R3__; },
/* harmony export */   "ɵHAMMER_PROVIDERS__POST_R3__": function() { return /* binding */ HAMMER_PROVIDERS__POST_R3__; },
/* harmony export */   "ɵHammerGesturesPlugin": function() { return /* binding */ HammerGesturesPlugin; },
/* harmony export */   "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS": function() { return /* binding */ INTERNAL_BROWSER_PLATFORM_PROVIDERS; },
/* harmony export */   "ɵKeyEventsPlugin": function() { return /* binding */ KeyEventsPlugin; },
/* harmony export */   "ɵNAMESPACE_URIS": function() { return /* binding */ NAMESPACE_URIS; },
/* harmony export */   "ɵSharedStylesHost": function() { return /* binding */ SharedStylesHost; },
/* harmony export */   "ɵTRANSITION_ID": function() { return /* binding */ TRANSITION_ID; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_a": function() { return /* binding */ errorHandler; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_b": function() { return /* binding */ _document; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_c": function() { return /* binding */ BROWSER_MODULE_PROVIDERS; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_d": function() { return /* binding */ createMeta; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_e": function() { return /* binding */ createTitle; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_f": function() { return /* binding */ initTransferState; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_g": function() { return /* binding */ EventManagerPlugin; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_h": function() { return /* binding */ HAMMER_PROVIDERS__PRE_R3__; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_i": function() { return /* binding */ HAMMER_PROVIDERS; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_j": function() { return /* binding */ domSanitizerImplFactory; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_k": function() { return /* binding */ appInitializerFactory; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_l": function() { return /* binding */ SERVER_TRANSITION_PROVIDERS; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_m": function() { return /* binding */ _createNgProbeR2; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_n": function() { return /* binding */ ELEMENT_PROBE_PROVIDERS__PRE_R3__; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_o": function() { return /* binding */ BrowserXhr; },
/* harmony export */   "ɵangular_packages_platform_browser_platform_browser_p": function() { return /* binding */ GenericBrowserDomAdapter; },
/* harmony export */   "ɵescapeHtml": function() { return /* binding */ escapeHtml; },
/* harmony export */   "ɵflattenStyles": function() { return /* binding */ flattenStyles; },
/* harmony export */   "ɵinitDomAdapter": function() { return /* binding */ initDomAdapter; },
/* harmony export */   "ɵshimContentAttribute": function() { return /* binding */ shimContentAttribute; },
/* harmony export */   "ɵshimHostAttribute": function() { return /* binding */ shimHostAttribute; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 91477);







/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides DOM operations in any browser environment.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */

var GenericBrowserDomAdapter = /*#__PURE__*/function (_ɵDomAdapter) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(GenericBrowserDomAdapter, _ɵDomAdapter);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(GenericBrowserDomAdapter);

  function GenericBrowserDomAdapter() {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, GenericBrowserDomAdapter);

    _this = _super.apply(this, arguments);
    _this.supportsDOMEvents = true;
    return _this;
  }

  return GenericBrowserDomAdapter;
}(_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵDomAdapter"]);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A `DomAdapter` powered by full browser DOM APIs.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */

/* tslint:disable:requireParameterType no-console */


var BrowserDomAdapter = /*#__PURE__*/function (_GenericBrowserDomAda) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(BrowserDomAdapter, _GenericBrowserDomAda);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(BrowserDomAdapter);

  function BrowserDomAdapter() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, BrowserDomAdapter);

    return _super2.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserDomAdapter, [{
    key: "onAndCancel",
    value: function onAndCancel(el, evt, listener) {
      el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of
      // https://code.google.com/p/dart/issues/detail?id=17406

      return function () {
        el.removeEventListener(evt, listener, false);
      };
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(el, evt) {
      el.dispatchEvent(evt);
    }
  }, {
    key: "remove",
    value: function remove(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }
  }, {
    key: "createElement",
    value: function createElement(tagName, doc) {
      doc = doc || this.getDefaultDocument();
      return doc.createElement(tagName);
    }
  }, {
    key: "createHtmlDocument",
    value: function createHtmlDocument() {
      return document.implementation.createHTMLDocument('fakeTitle');
    }
  }, {
    key: "getDefaultDocument",
    value: function getDefaultDocument() {
      return document;
    }
  }, {
    key: "isElementNode",
    value: function isElementNode(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    }
  }, {
    key: "isShadowRoot",
    value: function isShadowRoot(node) {
      return node instanceof DocumentFragment;
    }
    /** @deprecated No longer being used in Ivy code. To be removed in version 14. */

  }, {
    key: "getGlobalEventTarget",
    value: function getGlobalEventTarget(doc, target) {
      if (target === 'window') {
        return window;
      }

      if (target === 'document') {
        return doc;
      }

      if (target === 'body') {
        return doc.body;
      }

      return null;
    }
  }, {
    key: "getBaseHref",
    value: function getBaseHref(doc) {
      var href = getBaseElementHref();
      return href == null ? null : relativePath(href);
    }
  }, {
    key: "resetBaseElement",
    value: function resetBaseElement() {
      baseElement = null;
    }
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return window.navigator.userAgent;
    }
  }, {
    key: "getCookie",
    value: function getCookie(name) {
      return (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵparseCookieValue"])(document.cookie, name);
    }
  }], [{
    key: "makeCurrent",
    value: function makeCurrent() {
      (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵsetRootDomAdapter"])(new BrowserDomAdapter());
    }
  }]);

  return BrowserDomAdapter;
}(GenericBrowserDomAdapter);

var baseElement = null;

function getBaseElementHref() {
  baseElement = baseElement || document.querySelector('base');
  return baseElement ? baseElement.getAttribute('href') : null;
} // based on urlUtils.js in AngularJS 1


var urlParsingNode;

function relativePath(url) {
  urlParsingNode = urlParsingNode || document.createElement('a');
  urlParsingNode.setAttribute('href', url);
  var pathName = urlParsingNode.pathname;
  return pathName.charAt(0) === '/' ? pathName : "/".concat(pathName);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */


var TRANSITION_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('TRANSITION_ID');

function appInitializerFactory(transitionId, document, injector) {
  return function () {
    // Wait for all application initializers to be completed before removing the styles set by
    // the server.
    injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationInitStatus).donePromise.then(function () {
      var dom = (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])();
      var styles = document.querySelectorAll("style[ng-transition=\"".concat(transitionId, "\"]"));

      for (var i = 0; i < styles.length; i++) {
        dom.remove(styles[i]);
      }
    });
  };
}

var SERVER_TRANSITION_PROVIDERS = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_INITIALIZER,
  useFactory: appInitializerFactory,
  deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injector],
  multi: true
}];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var BrowserGetTestability = /*#__PURE__*/function () {
  function BrowserGetTestability() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, BrowserGetTestability);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserGetTestability, [{
    key: "addToWindow",
    value: function addToWindow(registry) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].getAngularTestability = function (elem) {
        var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var testability = registry.findTestabilityInTree(elem, findInAncestors);

        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }

        return testability;
      };

      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].getAllAngularTestabilities = function () {
        return registry.getAllTestabilities();
      };

      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].getAllAngularRootElements = function () {
        return registry.getAllRootElements();
      };

      var whenAllStable = function whenAllStable(callback
      /** TODO #9100 */
      ) {
        var testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].getAllAngularTestabilities();
        var count = testabilities.length;
        var didWork = false;

        var decrement = function decrement(didWork_
        /** TODO #9100 */
        ) {
          didWork = didWork || didWork_;
          count--;

          if (count == 0) {
            callback(didWork);
          }
        };

        testabilities.forEach(function (testability
        /** TODO #9100 */
        ) {
          testability.whenStable(decrement);
        });
      };

      if (!_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].frameworkStabilizers) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].frameworkStabilizers = [];
      }

      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].frameworkStabilizers.push(whenAllStable);
    }
  }, {
    key: "findTestabilityInTree",
    value: function findTestabilityInTree(registry, elem, findInAncestors) {
      if (elem == null) {
        return null;
      }

      var t = registry.getTestability(elem);

      if (t != null) {
        return t;
      } else if (!findInAncestors) {
        return null;
      }

      if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])().isShadowRoot(elem)) {
        return this.findTestabilityInTree(registry, elem.host, true);
      }

      return this.findTestabilityInTree(registry, elem.parentElement, true);
    }
  }], [{
    key: "init",
    value: function init() {
      (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.setTestabilityGetter)(new BrowserGetTestability());
    }
  }]);

  return BrowserGetTestability;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
 */


var BrowserXhr = /*#__PURE__*/function () {
  function BrowserXhr() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, BrowserXhr);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserXhr, [{
    key: "build",
    value: function build() {
      return new XMLHttpRequest();
    }
  }]);

  return BrowserXhr;
}();

BrowserXhr.ɵfac = function BrowserXhr_Factory(t) {
  return new (t || BrowserXhr)();
};

BrowserXhr.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: BrowserXhr,
  factory: BrowserXhr.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](BrowserXhr, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;

function camelCaseToDashCase(input) {
  return input.replace(CAMEL_CASE_REGEXP, function () {
    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {
      m[_key] = arguments[_key];
    }

    return '-' + m[1].toLowerCase();
  });
}

function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, function () {
    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      m[_key2] = arguments[_key2];
    }

    return m[1].toUpperCase();
  });
}
/**
 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
 * `name` is `'probe'`.
 * @param name Name under which it will be exported. Keep in mind this will be a property of the
 * global `ng` object.
 * @param value The value to export.
 */


function exportNgVar(name, value) {
  if (typeof COMPILED === 'undefined' || !COMPILED) {
    // Note: we can't export `ng` when using closure enhanced optimization as:
    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
    // - we can't declare a closure extern as the namespace `ng` is already used within Google
    //   for typings for angularJS (via `goog.provide('ng....')`).
    var ng = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].ng = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵglobal"].ng || {};
    ng[name] = value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var ɵ0 = function ɵ0() {
  return {
    'ApplicationRef': _angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationRef,
    'NgZone': _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone
  };
};

var CORE_TOKENS = ɵ0();
var INSPECT_GLOBAL_NAME = 'probe';
var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
/**
 * Returns a {@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 */

function inspectNativeElementR2(element) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵgetDebugNodeR2"])(element);
}

function _createNgProbeR2(coreTokens) {
  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
  exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign(Object.assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
  return function () {
    return inspectNativeElementR2;
  };
}

function _ngProbeTokensToMap(tokens) {
  return tokens.reduce(function (prev, t) {
    return prev[t.name] = t.token, prev;
  }, {});
}
/**
 * In Ivy, we don't support NgProbe because we have our own set of testing utilities
 * with more robust functionality.
 *
 * We shouldn't bring in NgProbe because it prevents DebugNode and friends from
 * tree-shaking properly.
 */


var ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */

var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_INITIALIZER,
  useFactory: _createNgProbeR2,
  deps: [[_angular_core__WEBPACK_IMPORTED_MODULE_7__.NgProbeToken, new _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional()]],
  multi: true
}];
var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__POST_R3__;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The injection token for the event-manager plug-in service.
 *
 * @publicApi
 */

var EVENT_MANAGER_PLUGINS = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('EventManagerPlugins');
/**
 * An injectable service that provides event management for Angular
 * through a browser plug-in.
 *
 * @publicApi
 */

var EventManager = /*#__PURE__*/function () {
  /**
   * Initializes an instance of the event-manager service.
   */
  function EventManager(plugins, _zone) {
    var _this2 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, EventManager);

    this._zone = _zone;
    this._eventNameToPlugin = new Map();
    plugins.forEach(function (p) {
      return p.manager = _this2;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * Registers a handler for a specific element and event.
   *
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns  A callback function that can be used to remove the handler.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(EventManager, [{
    key: "addEventListener",
    value: function addEventListener(element, eventName, handler) {
      var plugin = this._findPluginFor(eventName);

      return plugin.addEventListener(element, eventName, handler);
    }
    /**
     * Registers a global handler for an event in a target view.
     *
     * @param target A target for global event notifications. One of "window", "document", or "body".
     * @param eventName The name of the event to listen for.
     * @param handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @returns A callback function that can be used to remove the handler.
     * @deprecated No longer being used in Ivy code. To be removed in version 14.
     */

  }, {
    key: "addGlobalEventListener",
    value: function addGlobalEventListener(target, eventName, handler) {
      var plugin = this._findPluginFor(eventName);

      return plugin.addGlobalEventListener(target, eventName, handler);
    }
    /**
     * Retrieves the compilation zone in which event listeners are registered.
     */

  }, {
    key: "getZone",
    value: function getZone() {
      return this._zone;
    }
    /** @internal */

  }, {
    key: "_findPluginFor",
    value: function _findPluginFor(eventName) {
      var plugin = this._eventNameToPlugin.get(eventName);

      if (plugin) {
        return plugin;
      }

      var plugins = this._plugins;

      for (var i = 0; i < plugins.length; i++) {
        var _plugin = plugins[i];

        if (_plugin.supports(eventName)) {
          this._eventNameToPlugin.set(eventName, _plugin);

          return _plugin;
        }
      }

      throw new Error("No event manager plugin found for event ".concat(eventName));
    }
  }]);

  return EventManager;
}();

EventManager.ɵfac = function EventManager_Factory(t) {
  return new (t || EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone));
};

EventManager.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: EventManager,
  factory: EventManager.ɵfac
});

EventManager.ctorParameters = function () {
  return [{
    type: Array,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](EventManager, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: Array,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [EVENT_MANAGER_PLUGINS]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone
    }];
  }, null);
})();

var EventManagerPlugin = /*#__PURE__*/function () {
  function EventManagerPlugin(_doc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, EventManagerPlugin);

    this._doc = _doc;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(EventManagerPlugin, [{
    key: "addGlobalEventListener",
    value: function addGlobalEventListener(element, eventName, handler) {
      var target = (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);

      if (!target) {
        throw new Error("Unsupported event target ".concat(target, " for event ").concat(eventName));
      }

      return this.addEventListener(target, eventName, handler);
    }
  }]);

  return EventManagerPlugin;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var SharedStylesHost = /*#__PURE__*/function () {
  function SharedStylesHost() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, SharedStylesHost);

    /** @internal */
    this._stylesSet = new Set();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(SharedStylesHost, [{
    key: "addStyles",
    value: function addStyles(styles) {
      var _this3 = this;

      var additions = new Set();
      styles.forEach(function (style) {
        if (!_this3._stylesSet.has(style)) {
          _this3._stylesSet.add(style);

          additions.add(style);
        }
      });
      this.onStylesAdded(additions);
    }
  }, {
    key: "onStylesAdded",
    value: function onStylesAdded(additions) {}
  }, {
    key: "getAllStyles",
    value: function getAllStyles() {
      return Array.from(this._stylesSet);
    }
  }]);

  return SharedStylesHost;
}();

SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {
  return new (t || SharedStylesHost)();
};

SharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: SharedStylesHost,
  factory: SharedStylesHost.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](SharedStylesHost, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [];
  }, null);
})();

var DomSharedStylesHost = /*#__PURE__*/function (_SharedStylesHost) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DomSharedStylesHost, _SharedStylesHost);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(DomSharedStylesHost);

  function DomSharedStylesHost(_doc) {
    var _this4;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DomSharedStylesHost);

    _this4 = _super3.call(this);
    _this4._doc = _doc; // Maps all registered host nodes to a list of style nodes that have been added to the host node.

    _this4._hostNodes = new Map();

    _this4._hostNodes.set(_doc.head, []);

    return _this4;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DomSharedStylesHost, [{
    key: "_addStylesToHost",
    value: function _addStylesToHost(styles, host, styleNodes) {
      var _this5 = this;

      styles.forEach(function (style) {
        var styleEl = _this5._doc.createElement('style');

        styleEl.textContent = style;
        styleNodes.push(host.appendChild(styleEl));
      });
    }
  }, {
    key: "addHost",
    value: function addHost(hostNode) {
      var styleNodes = [];

      this._addStylesToHost(this._stylesSet, hostNode, styleNodes);

      this._hostNodes.set(hostNode, styleNodes);
    }
  }, {
    key: "removeHost",
    value: function removeHost(hostNode) {
      var styleNodes = this._hostNodes.get(hostNode);

      if (styleNodes) {
        styleNodes.forEach(removeStyle);
      }

      this._hostNodes.delete(hostNode);
    }
  }, {
    key: "onStylesAdded",
    value: function onStylesAdded(additions) {
      var _this6 = this;

      this._hostNodes.forEach(function (styleNodes, hostNode) {
        _this6._addStylesToHost(additions, hostNode, styleNodes);
      });
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._hostNodes.forEach(function (styleNodes) {
        return styleNodes.forEach(removeStyle);
      });
    }
  }]);

  return DomSharedStylesHost;
}(SharedStylesHost);

DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {
  return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

DomSharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: DomSharedStylesHost,
  factory: DomSharedStylesHost.ɵfac
});

DomSharedStylesHost.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DomSharedStylesHost, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();

function removeStyle(styleNode) {
  (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])().remove(styleNode);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NAMESPACE_URIS = {
  'svg': 'http://www.w3.org/2000/svg',
  'xhtml': 'http://www.w3.org/1999/xhtml',
  'xlink': 'http://www.w3.org/1999/xlink',
  'xml': 'http://www.w3.org/XML/1998/namespace',
  'xmlns': 'http://www.w3.org/2000/xmlns/'
};
var COMPONENT_REGEX = /%COMP%/g;
var NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);

function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}

function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}

function flattenStyles(compId, styles, target) {
  for (var i = 0; i < styles.length; i++) {
    var style = styles[i];

    if (Array.isArray(style)) {
      flattenStyles(compId, style, target);
    } else {
      style = style.replace(COMPONENT_REGEX, compId);
      target.push(style);
    }
  }

  return target;
}

function decoratePreventDefault(eventHandler) {
  // `DebugNode.triggerEventHandler` needs to know if the listener was created with
  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
  // the listener (see below).
  return function (event) {
    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
    // can inspect the listener toString contents for the existence of this special token. Because
    // the token is a string literal, it is ensured to not be modified by compiled code.
    if (event === '__ngUnwrap__') {
      return eventHandler;
    }

    var allowDefaultBehavior = eventHandler(event);

    if (allowDefaultBehavior === false) {
      // TODO(tbosch): move preventDefault into event plugins...
      event.preventDefault();
      event.returnValue = false;
    }

    return undefined;
  };
}

var hasLoggedNativeEncapsulationWarning = false;

var DomRendererFactory2 = /*#__PURE__*/function () {
  function DomRendererFactory2(eventManager, sharedStylesHost, appId) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DomRendererFactory2);

    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.appId = appId;
    this.rendererByCompId = new Map();
    this.defaultRenderer = new DefaultDomRenderer2(eventManager);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DomRendererFactory2, [{
    key: "createRenderer",
    value: function createRenderer(element, type) {
      if (!element || !type) {
        return this.defaultRenderer;
      }

      switch (type.encapsulation) {
        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewEncapsulation.Emulated:
          {
            var renderer = this.rendererByCompId.get(type.id);

            if (!renderer) {
              renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
              this.rendererByCompId.set(type.id, renderer);
            }

            renderer.applyToHost(element);
            return renderer;
          }
        // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an enum
        // value that is not known (but previously was the value for ViewEncapsulation.Native)

        case 1:
        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewEncapsulation.ShadowDom:
          // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.
          if ((typeof ngDevMode === 'undefined' || ngDevMode) && // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an
          // enum value that is not known (but previously was the value for
          // ViewEncapsulation.Native)
          !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {
            hasLoggedNativeEncapsulationWarning = true;
            console.warn('ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');
          }

          return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

        default:
          {
            if (!this.rendererByCompId.has(type.id)) {
              var styles = flattenStyles(type.id, type.styles, []);
              this.sharedStylesHost.addStyles(styles);
              this.rendererByCompId.set(type.id, this.defaultRenderer);
            }

            return this.defaultRenderer;
          }
      }
    }
  }, {
    key: "begin",
    value: function begin() {}
  }, {
    key: "end",
    value: function end() {}
  }]);

  return DomRendererFactory2;
}();

DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {
  return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID));
};

DomRendererFactory2.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: DomRendererFactory2,
  factory: DomRendererFactory2.ɵfac
});

DomRendererFactory2.ctorParameters = function () {
  return [{
    type: EventManager
  }, {
    type: DomSharedStylesHost
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DomRendererFactory2, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: EventManager
    }, {
      type: DomSharedStylesHost
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID]
      }]
    }];
  }, null);
})();

var DefaultDomRenderer2 = /*#__PURE__*/function () {
  function DefaultDomRenderer2(eventManager) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DefaultDomRenderer2);

    this.eventManager = eventManager;
    this.data = Object.create(null);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DefaultDomRenderer2, [{
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "createElement",
    value: function createElement(name, namespace) {
      if (namespace) {
        // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
        // will result in undefined, so we just return the namespace here.
        return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
      }

      return document.createElement(name);
    }
  }, {
    key: "createComment",
    value: function createComment(value) {
      return document.createComment(value);
    }
  }, {
    key: "createText",
    value: function createText(value) {
      return document.createTextNode(value);
    }
  }, {
    key: "appendChild",
    value: function appendChild(parent, newChild) {
      parent.appendChild(newChild);
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(parent, newChild, refChild) {
      if (parent) {
        parent.insertBefore(newChild, refChild);
      }
    }
  }, {
    key: "removeChild",
    value: function removeChild(parent, oldChild) {
      if (parent) {
        parent.removeChild(oldChild);
      }
    }
  }, {
    key: "selectRootElement",
    value: function selectRootElement(selectorOrNode, preserveContent) {
      var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;

      if (!el) {
        throw new Error("The selector \"".concat(selectorOrNode, "\" did not match any elements"));
      }

      if (!preserveContent) {
        el.textContent = '';
      }

      return el;
    }
  }, {
    key: "parentNode",
    value: function parentNode(node) {
      return node.parentNode;
    }
  }, {
    key: "nextSibling",
    value: function nextSibling(node) {
      return node.nextSibling;
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(el, name, value, namespace) {
      if (namespace) {
        name = namespace + ':' + name; // TODO(FW-811): Ivy may cause issues here because it's passing around
        // full URIs for namespaces, therefore this lookup will fail.

        var namespaceUri = NAMESPACE_URIS[namespace];

        if (namespaceUri) {
          el.setAttributeNS(namespaceUri, name, value);
        } else {
          el.setAttribute(name, value);
        }
      } else {
        el.setAttribute(name, value);
      }
    }
  }, {
    key: "removeAttribute",
    value: function removeAttribute(el, name, namespace) {
      if (namespace) {
        // TODO(FW-811): Ivy may cause issues here because it's passing around
        // full URIs for namespaces, therefore this lookup will fail.
        var namespaceUri = NAMESPACE_URIS[namespace];

        if (namespaceUri) {
          el.removeAttributeNS(namespaceUri, name);
        } else {
          // TODO(FW-811): Since ivy is passing around full URIs for namespaces
          // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
          // which is wrong.
          el.removeAttribute("".concat(namespace, ":").concat(name));
        }
      } else {
        el.removeAttribute(name);
      }
    }
  }, {
    key: "addClass",
    value: function addClass(el, name) {
      el.classList.add(name);
    }
  }, {
    key: "removeClass",
    value: function removeClass(el, name) {
      el.classList.remove(name);
    }
  }, {
    key: "setStyle",
    value: function setStyle(el, style, value, flags) {
      if (flags & (_angular_core__WEBPACK_IMPORTED_MODULE_7__.RendererStyleFlags2.DashCase | _angular_core__WEBPACK_IMPORTED_MODULE_7__.RendererStyleFlags2.Important)) {
        el.style.setProperty(style, value, flags & _angular_core__WEBPACK_IMPORTED_MODULE_7__.RendererStyleFlags2.Important ? 'important' : '');
      } else {
        el.style[style] = value;
      }
    }
  }, {
    key: "removeStyle",
    value: function removeStyle(el, style, flags) {
      if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_7__.RendererStyleFlags2.DashCase) {
        el.style.removeProperty(style);
      } else {
        // IE requires '' instead of null
        // see https://github.com/angular/angular/issues/7916
        el.style[style] = '';
      }
    }
  }, {
    key: "setProperty",
    value: function setProperty(el, name, value) {
      NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
      el[name] = value;
    }
  }, {
    key: "setValue",
    value: function setValue(node, value) {
      node.nodeValue = value;
    }
  }, {
    key: "listen",
    value: function listen(target, event, callback) {
      NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');

      if (typeof target === 'string') {
        return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
      }

      return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
    }
  }]);

  return DefaultDomRenderer2;
}();

var ɵ0$1 = function ɵ0$1() {
  return '@'.charCodeAt(0);
};

var AT_CHARCODE = ɵ0$1();

function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new Error("Found the synthetic ".concat(nameKind, " ").concat(name, ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application."));
  }
}

var EmulatedEncapsulationDomRenderer2 = /*#__PURE__*/function (_DefaultDomRenderer) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(EmulatedEncapsulationDomRenderer2, _DefaultDomRenderer);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(EmulatedEncapsulationDomRenderer2);

  function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
    var _this7;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, EmulatedEncapsulationDomRenderer2);

    _this7 = _super4.call(this, eventManager);
    _this7.component = component;
    var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
    sharedStylesHost.addStyles(styles);
    _this7.contentAttr = shimContentAttribute(appId + '-' + component.id);
    _this7.hostAttr = shimHostAttribute(appId + '-' + component.id);
    return _this7;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(EmulatedEncapsulationDomRenderer2, [{
    key: "applyToHost",
    value: function applyToHost(element) {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, element, this.hostAttr, '');
    }
  }, {
    key: "createElement",
    value: function createElement(parent, name) {
      var el = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(EmulatedEncapsulationDomRenderer2.prototype), "createElement", this).call(this, parent, name);

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, el, this.contentAttr, '');

      return el;
    }
  }]);

  return EmulatedEncapsulationDomRenderer2;
}(DefaultDomRenderer2);

var ShadowDomRenderer = /*#__PURE__*/function (_DefaultDomRenderer2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(ShadowDomRenderer, _DefaultDomRenderer2);

  var _super5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(ShadowDomRenderer);

  function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
    var _this8;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, ShadowDomRenderer);

    _this8 = _super5.call(this, eventManager);
    _this8.sharedStylesHost = sharedStylesHost;
    _this8.hostEl = hostEl;
    _this8.shadowRoot = hostEl.attachShadow({
      mode: 'open'
    });

    _this8.sharedStylesHost.addHost(_this8.shadowRoot);

    var styles = flattenStyles(component.id, component.styles, []);

    for (var i = 0; i < styles.length; i++) {
      var styleEl = document.createElement('style');
      styleEl.textContent = styles[i];

      _this8.shadowRoot.appendChild(styleEl);
    }

    return _this8;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(ShadowDomRenderer, [{
    key: "nodeOrShadowRoot",
    value: function nodeOrShadowRoot(node) {
      return node === this.hostEl ? this.shadowRoot : node;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.sharedStylesHost.removeHost(this.shadowRoot);
    }
  }, {
    key: "appendChild",
    value: function appendChild(parent, newChild) {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ShadowDomRenderer.prototype), "appendChild", this).call(this, this.nodeOrShadowRoot(parent), newChild);
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(parent, newChild, refChild) {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ShadowDomRenderer.prototype), "insertBefore", this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
    }
  }, {
    key: "removeChild",
    value: function removeChild(parent, oldChild) {
      return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ShadowDomRenderer.prototype), "removeChild", this).call(this, this.nodeOrShadowRoot(parent), oldChild);
    }
  }, {
    key: "parentNode",
    value: function parentNode(node) {
      return this.nodeOrShadowRoot((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ShadowDomRenderer.prototype), "parentNode", this).call(this, this.nodeOrShadowRoot(node)));
    }
  }]);

  return ShadowDomRenderer;
}(DefaultDomRenderer2);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DomEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DomEventsPlugin, _EventManagerPlugin);

  var _super6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(DomEventsPlugin);

  function DomEventsPlugin(doc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DomEventsPlugin);

    return _super6.call(this, doc);
  } // This plugin should come last in the list of plugins, because it accepts all
  // events.


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DomEventsPlugin, [{
    key: "supports",
    value: function supports(eventName) {
      return true;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(element, eventName, handler) {
      var _this9 = this;

      element.addEventListener(eventName, handler, false);
      return function () {
        return _this9.removeEventListener(element, eventName, handler);
      };
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(target, eventName, callback) {
      return target.removeEventListener(eventName, callback);
    }
  }]);

  return DomEventsPlugin;
}(EventManagerPlugin);

DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {
  return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

DomEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: DomEventsPlugin,
  factory: DomEventsPlugin.ɵfac
});

DomEventsPlugin.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DomEventsPlugin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Supported HammerJS recognizer event names.
 */


var EVENT_NAMES = {
  // pan
  'pan': true,
  'panstart': true,
  'panmove': true,
  'panend': true,
  'pancancel': true,
  'panleft': true,
  'panright': true,
  'panup': true,
  'pandown': true,
  // pinch
  'pinch': true,
  'pinchstart': true,
  'pinchmove': true,
  'pinchend': true,
  'pinchcancel': true,
  'pinchin': true,
  'pinchout': true,
  // press
  'press': true,
  'pressup': true,
  // rotate
  'rotate': true,
  'rotatestart': true,
  'rotatemove': true,
  'rotateend': true,
  'rotatecancel': true,
  // swipe
  'swipe': true,
  'swipeleft': true,
  'swiperight': true,
  'swipeup': true,
  'swipedown': true,
  // tap
  'tap': true,
  'doubletap': true
};
/**
 * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.
 * @see `HammerGestureConfig`
 *
 * @ngModule HammerModule
 * @publicApi
 */

var HAMMER_GESTURE_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('HammerGestureConfig');
/**
 * Injection token used to provide a {@link HammerLoader} to Angular.
 *
 * @publicApi
 */

var HAMMER_LOADER = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.InjectionToken('HammerLoader');
/**
 * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
 * for gesture recognition. Configures specific event recognition.
 * @publicApi
 */

var HammerGestureConfig = /*#__PURE__*/function () {
  function HammerGestureConfig() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, HammerGestureConfig);

    /**
     * A set of supported event names for gestures to be used in Angular.
     * Angular supports all built-in recognizers, as listed in
     * [HammerJS documentation](https://hammerjs.github.io/).
     */
    this.events = [];
    /**
     * Maps gesture event names to a set of configuration options
     * that specify overrides to the default values for specific properties.
     *
     * The key is a supported event name to be configured,
     * and the options object contains a set of properties, with override values
     * to be applied to the named recognizer event.
     * For example, to disable recognition of the rotate event, specify
     *  `{"rotate": {"enable": false}}`.
     *
     * Properties that are not present take the HammerJS default values.
     * For information about which properties are supported for which events,
     * and their allowed and default values, see
     * [HammerJS documentation](https://hammerjs.github.io/).
     *
     */

    this.overrides = {};
  }
  /**
   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
   * and attaches it to a given HTML element.
   * @param element The element that will recognize gestures.
   * @returns A HammerJS event-manager object.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(HammerGestureConfig, [{
    key: "buildHammer",
    value: function buildHammer(element) {
      var mc = new Hammer(element, this.options);
      mc.get('pinch').set({
        enable: true
      });
      mc.get('rotate').set({
        enable: true
      });

      for (var eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }

      return mc;
    }
  }]);

  return HammerGestureConfig;
}();

HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {
  return new (t || HammerGestureConfig)();
};

HammerGestureConfig.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: HammerGestureConfig,
  factory: HammerGestureConfig.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](HammerGestureConfig, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [];
  }, null);
})();
/**
 * Event plugin that adds Hammer support to an application.
 *
 * @ngModule HammerModule
 */


var HammerGesturesPlugin = /*#__PURE__*/function (_EventManagerPlugin2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(HammerGesturesPlugin, _EventManagerPlugin2);

  var _super7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(HammerGesturesPlugin);

  function HammerGesturesPlugin(doc, _config, console, loader) {
    var _this10;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, HammerGesturesPlugin);

    _this10 = _super7.call(this, doc);
    _this10._config = _config;
    _this10.console = console;
    _this10.loader = loader;
    _this10._loaderPromise = null;
    return _this10;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(HammerGesturesPlugin, [{
    key: "supports",
    value: function supports(eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
        return false;
      }

      if (!window.Hammer && !this.loader) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          this.console.warn("The \"".concat(eventName, "\" event cannot be bound because Hammer.JS is not ") + "loaded and no custom loader has been specified.");
        }

        return false;
      }

      return true;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(element, eventName, handler) {
      var _this11 = this;

      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener
      // until Hammer is loaded.

      if (!window.Hammer && this.loader) {
        this._loaderPromise = this._loaderPromise || this.loader(); // This `addEventListener` method returns a function to remove the added listener.
        // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
        // than remove anything.

        var cancelRegistration = false;

        var deregister = function deregister() {
          cancelRegistration = true;
        };

        this._loaderPromise.then(function () {
          // If Hammer isn't actually loaded when the custom loader resolves, give up.
          if (!window.Hammer) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              _this11.console.warn("The custom HAMMER_LOADER completed, but Hammer.JS is not present.");
            }

            deregister = function deregister() {};

            return;
          }

          if (!cancelRegistration) {
            // Now that Hammer is loaded and the listener is being loaded for real,
            // the deregistration function changes from canceling registration to removal.
            deregister = _this11.addEventListener(element, eventName, handler);
          }
        }).catch(function () {
          if (typeof ngDevMode === 'undefined' || ngDevMode) {
            _this11.console.warn("The \"".concat(eventName, "\" event cannot be bound because the custom ") + "Hammer.JS loader failed.");
          }

          deregister = function deregister() {};
        }); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
        // can change the behavior of `deregister` once the listener is added. Using a closure in
        // this way allows us to avoid any additional data structures to track listener removal.


        return function () {
          deregister();
        };
      }

      return zone.runOutsideAngular(function () {
        // Creating the manager bind events, must be done outside of angular
        var mc = _this11._config.buildHammer(element);

        var callback = function callback(eventObj) {
          zone.runGuarded(function () {
            handler(eventObj);
          });
        };

        mc.on(eventName, callback);
        return function () {
          mc.off(eventName, callback); // destroy mc to prevent memory leak

          if (typeof mc.destroy === 'function') {
            mc.destroy();
          }
        };
      });
    }
  }, {
    key: "isCustomEvent",
    value: function isCustomEvent(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }
  }]);

  return HammerGesturesPlugin;
}(EventManagerPlugin);

HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {
  return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](HAMMER_LOADER, 8));
};

HammerGesturesPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: HammerGesturesPlugin,
  factory: HammerGesturesPlugin.ɵfac
});

HammerGesturesPlugin.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }, {
    type: HammerGestureConfig,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵConsole"]
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [HAMMER_LOADER]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](HammerGesturesPlugin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }, {
      type: HammerGestureConfig,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [HAMMER_GESTURE_CONFIG]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵConsole"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [HAMMER_LOADER]
      }]
    }];
  }, null);
})();
/**
 * In Ivy, support for Hammer gestures is optional, so applications must
 * import the `HammerModule` at root to turn on support. This means that
 * Hammer-specific code can be tree-shaken away if not needed.
 */


var HAMMER_PROVIDERS__POST_R3__ = [];
/**
 * In View Engine, support for Hammer gestures is built-in by default.
 */

var HAMMER_PROVIDERS__PRE_R3__ = [{
  provide: EVENT_MANAGER_PLUGINS,
  useClass: HammerGesturesPlugin,
  multi: true,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT, HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵConsole"], [new _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional(), HAMMER_LOADER]]
}, {
  provide: HAMMER_GESTURE_CONFIG,
  useClass: HammerGestureConfig,
  deps: []
}];
var HAMMER_PROVIDERS = HAMMER_PROVIDERS__POST_R3__;
/**
 * Adds support for HammerJS.
 *
 * Import this module at the root of your application so that Angular can work with
 * HammerJS to detect gesture events.
 *
 * Note that applications still need to include the HammerJS script itself. This module
 * simply sets up the coordination layer between HammerJS and Angular's EventManager.
 *
 * @publicApi
 */

var HammerModule = function HammerModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, HammerModule);
};

HammerModule.ɵfac = function HammerModule_Factory(t) {
  return new (t || HammerModule)();
};

HammerModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: HammerModule
});
HammerModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  providers: HAMMER_PROVIDERS__PRE_R3__
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](HammerModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      providers: HAMMER_PROVIDERS__PRE_R3__
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines supported modifiers for key events.
 */


var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var DOM_KEY_LOCATION_NUMPAD = 3; // Map to convert some key or keyIdentifier values to what will be returned by getEventKey

var _keyMap = {
  // The following values are here for cross-browser compatibility and to match the W3C standard
  // cf https://www.w3.org/TR/DOM-Level-3-Events-key/
  '\b': 'Backspace',
  '\t': 'Tab',
  '\x7F': 'Delete',
  '\x1B': 'Escape',
  'Del': 'Delete',
  'Esc': 'Escape',
  'Left': 'ArrowLeft',
  'Right': 'ArrowRight',
  'Up': 'ArrowUp',
  'Down': 'ArrowDown',
  'Menu': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'Win': 'OS'
}; // There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...

var _chromeNumKeyPadMap = {
  'A': '1',
  'B': '2',
  'C': '3',
  'D': '4',
  'E': '5',
  'F': '6',
  'G': '7',
  'H': '8',
  'I': '9',
  'J': '*',
  'K': '+',
  'M': '-',
  'N': '.',
  'O': '/',
  '\x60': '0',
  '\x90': 'NumLock'
};

var ɵ0$2 = function ɵ0$2(event) {
  return event.altKey;
},
    ɵ1 = function ɵ1(event) {
  return event.ctrlKey;
},
    ɵ2 = function ɵ2(event) {
  return event.metaKey;
},
    ɵ3 = function ɵ3(event) {
  return event.shiftKey;
};
/**
 * Retrieves modifiers from key-event objects.
 */


var MODIFIER_KEY_GETTERS = {
  'alt': ɵ0$2,
  'control': ɵ1,
  'meta': ɵ2,
  'shift': ɵ3
};
/**
 * @publicApi
 * A browser plug-in that provides support for handling of key events in Angular.
 */

var KeyEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(KeyEventsPlugin, _EventManagerPlugin3);

  var _super8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(KeyEventsPlugin);

  /**
   * Initializes an instance of the browser plug-in.
   * @param doc The document in which key events will be detected.
   */
  function KeyEventsPlugin(doc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, KeyEventsPlugin);

    return _super8.call(this, doc);
  }
  /**
   * Reports whether a named key event is supported.
   * @param eventName The event name to query.
   * @return True if the named key event is supported.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(KeyEventsPlugin, [{
    key: "supports",
    value: function supports(eventName) {
      return KeyEventsPlugin.parseEventName(eventName) != null;
    }
    /**
     * Registers a handler for a specific element and key event.
     * @param element The HTML element to receive event notifications.
     * @param eventName The name of the key event to listen for.
     * @param handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @returns The key event that was registered.
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(element, eventName, handler) {
      var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(function () {
        return (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
      });
    }
  }], [{
    key: "parseEventName",
    value: function parseEventName(eventName) {
      var parts = eventName.toLowerCase().split('.');
      var domEventName = parts.shift();

      if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
        return null;
      }

      var key = KeyEventsPlugin._normalizeKey(parts.pop());

      var fullKey = '';
      MODIFIER_KEYS.forEach(function (modifierName) {
        var index = parts.indexOf(modifierName);

        if (index > -1) {
          parts.splice(index, 1);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;

      if (parts.length != 0 || key.length === 0) {
        // returning null instead of throwing to let another plugin process the event
        return null;
      } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.
      //       The code must remain in the `result['domEventName']` form.
      // return {domEventName, fullKey};


      var result = {};
      result['domEventName'] = domEventName;
      result['fullKey'] = fullKey;
      return result;
    }
  }, {
    key: "getEventFullKey",
    value: function getEventFullKey(event) {
      var fullKey = '';
      var key = getEventKey(event);
      key = key.toLowerCase();

      if (key === ' ') {
        key = 'space'; // for readability
      } else if (key === '.') {
        key = 'dot'; // because '.' is used as a separator in event names
      }

      MODIFIER_KEYS.forEach(function (modifierName) {
        if (modifierName != key) {
          var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];

          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    }
    /**
     * Configures a handler callback for a key event.
     * @param fullKey The event name that combines all simultaneous keystrokes.
     * @param handler The function that responds to the key event.
     * @param zone The zone in which the event occurred.
     * @returns A callback function.
     */

  }, {
    key: "eventCallback",
    value: function eventCallback(fullKey, handler, zone) {
      return function (event
      /** TODO #9100 */
      ) {
        if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
          zone.runGuarded(function () {
            return handler(event);
          });
        }
      };
    }
    /** @internal */

  }, {
    key: "_normalizeKey",
    value: function _normalizeKey(keyName) {
      // TODO: switch to a Map if the mapping grows too much
      switch (keyName) {
        case 'esc':
          return 'escape';

        default:
          return keyName;
      }
    }
  }]);

  return KeyEventsPlugin;
}(EventManagerPlugin);

KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {
  return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

KeyEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: KeyEventsPlugin,
  factory: KeyEventsPlugin.ɵfac
});

KeyEventsPlugin.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](KeyEventsPlugin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();

function getEventKey(event) {
  var key = event.key;

  if (key == null) {
    key = event.keyIdentifier; // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
    // Safari cf
    // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces

    if (key == null) {
      return 'Unidentified';
    }

    if (key.startsWith('U+')) {
      key = String.fromCharCode(parseInt(key.substring(2), 16));

      if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
        // There is a bug in Chrome for numeric keypad keys:
        // https://code.google.com/p/chromium/issues/detail?id=155654
        // 1, 2, 3 ... are reported as A, B, C ...
        key = _chromeNumKeyPadMap[key];
      }
    }
  }

  return _keyMap[key] || key;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](https://g.co/ng/security).
 *
 * @publicApi
 */


var DomSanitizer = function DomSanitizer() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DomSanitizer);
};

DomSanitizer.ɵfac = function DomSanitizer_Factory(t) {
  return new (t || DomSanitizer)();
};

DomSanitizer.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: function DomSanitizer_Factory() {
    return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"])(DomSanitizerImpl);
  },
  token: DomSanitizer,
  providedIn: "root"
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DomSanitizer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: 'root',
      useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.forwardRef)(function () {
        return DomSanitizerImpl;
      })
    }]
  }], null, null);
})();

function domSanitizerImplFactory(injector) {
  return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
}

var DomSanitizerImpl = /*#__PURE__*/function (_DomSanitizer) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(DomSanitizerImpl, _DomSanitizer);

  var _super9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(DomSanitizerImpl);

  function DomSanitizerImpl(_doc) {
    var _this12;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DomSanitizerImpl);

    _this12 = _super9.call(this);
    _this12._doc = _doc;
    return _this12;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(DomSanitizerImpl, [{
    key: "sanitize",
    value: function sanitize(ctx, value) {
      if (value == null) return null;

      switch (ctx) {
        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.NONE:
          return value;

        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.HTML:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵallowSanitizationBypassAndThrow"])(value, "HTML"
          /* Html */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵunwrapSafeValue"])(value);
          }

          return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵ_sanitizeHtml"])(this._doc, String(value)).toString();

        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.STYLE:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵallowSanitizationBypassAndThrow"])(value, "Style"
          /* Style */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵunwrapSafeValue"])(value);
          }

          return value;

        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.SCRIPT:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵallowSanitizationBypassAndThrow"])(value, "Script"
          /* Script */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵunwrapSafeValue"])(value);
          }

          throw new Error('unsafe value used in a script context');

        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.URL:
          var type = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵgetSanitizationBypassType"])(value);

          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵallowSanitizationBypassAndThrow"])(value, "URL"
          /* Url */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵunwrapSafeValue"])(value);
          }

          return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵ_sanitizeUrl"])(String(value));

        case _angular_core__WEBPACK_IMPORTED_MODULE_7__.SecurityContext.RESOURCE_URL:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL"
          /* ResourceUrl */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵunwrapSafeValue"])(value);
          }

          throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');

        default:
          throw new Error("Unexpected SecurityContext ".concat(ctx, " (see https://g.co/ng/security#xss)"));
      }
    }
  }, {
    key: "bypassSecurityTrustHtml",
    value: function bypassSecurityTrustHtml(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵbypassSanitizationTrustHtml"])(value);
    }
  }, {
    key: "bypassSecurityTrustStyle",
    value: function bypassSecurityTrustStyle(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵbypassSanitizationTrustStyle"])(value);
    }
  }, {
    key: "bypassSecurityTrustScript",
    value: function bypassSecurityTrustScript(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵbypassSanitizationTrustScript"])(value);
    }
  }, {
    key: "bypassSecurityTrustUrl",
    value: function bypassSecurityTrustUrl(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵbypassSanitizationTrustUrl"])(value);
    }
  }, {
    key: "bypassSecurityTrustResourceUrl",
    value: function bypassSecurityTrustResourceUrl(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵbypassSanitizationTrustResourceUrl"])(value);
    }
  }]);

  return DomSanitizerImpl;
}(DomSanitizer);

DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {
  return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

DomSanitizerImpl.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: function DomSanitizerImpl_Factory() {
    return domSanitizerImplFactory((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_7__.INJECTOR));
  },
  token: DomSanitizerImpl,
  providedIn: "root"
});

DomSanitizerImpl.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](DomSanitizerImpl, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: 'root',
      useFactory: domSanitizerImplFactory,
      deps: [_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injector]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
  BrowserGetTestability.init();
}

function errorHandler() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_7__.ErrorHandler();
}

function _document() {
  // Tell ivy about the global document
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetDocument"])(document);
  return document;
}

var ɵ0$3 = _angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵPLATFORM_BROWSER_ID"];
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.PLATFORM_ID,
  useValue: ɵ0$3
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT,
  useFactory: _document,
  deps: []
}];
var BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Sanitizer,
  useExisting: DomSanitizer
}, {
  provide: DomSanitizer,
  useClass: DomSanitizerImpl,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
}];
var BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];
/**
 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).
 * @publicApi
 */

var BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
/**
 * A factory function that returns a `PlatformRef` instance associated with browser service
 * providers.
 *
 * @publicApi
 */

var platformBrowser = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.createPlatformFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_7__.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
var BROWSER_MODULE_PROVIDERS = [BROWSER_SANITIZATION_PROVIDERS, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵINJECTOR_SCOPE"],
  useValue: 'root'
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ErrorHandler,
  useFactory: errorHandler,
  deps: []
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone, _angular_core__WEBPACK_IMPORTED_MODULE_7__.PLATFORM_ID]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
}, HAMMER_PROVIDERS, {
  provide: DomRendererFactory2,
  useClass: DomRendererFactory2,
  deps: [EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: SharedStylesHost,
  useExisting: DomSharedStylesHost
}, {
  provide: DomSharedStylesHost,
  useClass: DomSharedStylesHost,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Testability,
  useClass: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Testability,
  deps: [_angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone]
}, {
  provide: EventManager,
  useClass: EventManager,
  deps: [EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgZone]
}, {
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory,
  useClass: BrowserXhr,
  deps: []
}, ELEMENT_PROBE_PROVIDERS];
/**
 * Exports required infrastructure for all Angular apps.
 * Included by default in all Angular apps created with the CLI
 * `new` command.
 * Re-exports `CommonModule` and `ApplicationModule`, making their
 * exports and providers available to all apps.
 *
 * @publicApi
 */

var BrowserModule = /*#__PURE__*/function () {
  function BrowserModule(parentModule) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, BrowserModule);

    if (parentModule) {
      throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
    }
  }
  /**
   * Configures a browser-based app to transition from a server-rendered app, if
   * one is present on the page.
   *
   * @param params An object containing an identifier for the app to transition.
   * The ID must match between the client and server versions of the app.
   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(BrowserModule, null, [{
    key: "withServerTransition",
    value: function withServerTransition(params) {
      return {
        ngModule: BrowserModule,
        providers: [{
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID,
          useValue: params.appId
        }, {
          provide: TRANSITION_ID,
          useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID
        }, SERVER_TRANSITION_PROVIDERS]
      };
    }
  }]);

  return BrowserModule;
}();

BrowserModule.ɵfac = function BrowserModule_Factory(t) {
  return new (t || BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](BrowserModule, 12));
};

BrowserModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: BrowserModule
});
BrowserModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  providers: BROWSER_MODULE_PROVIDERS,
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationModule]
});

BrowserModule.ctorParameters = function () {
  return [{
    type: BrowserModule,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [BrowserModule]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](BrowserModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      providers: BROWSER_MODULE_PROVIDERS,
      exports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationModule]
    }]
  }], function () {
    return [{
      type: BrowserModule,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.SkipSelf
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [BrowserModule]
      }]
    }];
  }, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](BrowserModule, {
    exports: function exports() {
      return [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationModule];
    }
  });
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Factory to create a `Meta` service instance for the current DOM document.
 */


function createMeta() {
  return new Meta((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
}
/**
 * A service for managing HTML `<meta>` tags.
 *
 * Properties of the `MetaDefinition` object match the attributes of the
 * HTML `<meta>` tag. These tags define document metadata that is important for
 * things like configuring a Content Security Policy, defining browser compatibility
 * and security settings, setting HTTP Headers, defining rich content for social sharing,
 * and Search Engine Optimization (SEO).
 *
 * To identify specific `<meta>` tags in a document, use an attribute selection
 * string in the format `"tag_attribute='value string'"`.
 * For example, an `attrSelector` value of `"name='description'"` matches a tag
 * whose `name` attribute has the value `"description"`.
 * Selectors are used with the `querySelector()` Document method,
 * in the format `meta[{attrSelector}]`.
 *
 * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)
 * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
 *
 *
 * @publicApi
 */


var Meta = /*#__PURE__*/function () {
  function Meta(_doc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, Meta);

    this._doc = _doc;
    this._dom = (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])();
  }
  /**
   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * If an existing element is found, it is returned and is not modified in any way.
   * @param tag The definition of a `<meta>` element to match or create.
   * @param forceCreation True to create a new element without checking whether one already exists.
   * @returns The existing element with the same attributes and values if found,
   * the new element if no match is found, or `null` if the tag parameter is not defined.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(Meta, [{
    key: "addTag",
    value: function addTag(tag) {
      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!tag) return null;
      return this._getOrCreateElement(tag, forceCreation);
    }
    /**
     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
     * values in the provided tag definition, and verifies that all other attribute values are equal.
     * @param tags An array of tag definitions to match or create.
     * @param forceCreation True to create new elements without checking whether they already exist.
     * @returns The matching elements if found, or the new elements.
     */

  }, {
    key: "addTags",
    value: function addTags(tags) {
      var _this13 = this;

      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!tags) return [];
      return tags.reduce(function (result, tag) {
        if (tag) {
          result.push(_this13._getOrCreateElement(tag, forceCreation));
        }

        return result;
      }, []);
    }
    /**
     * Retrieves a `<meta>` tag element in the current HTML document.
     * @param attrSelector The tag attribute and value to match against, in the format
     * `"tag_attribute='value string'"`.
     * @returns The matching element, if any.
     */

  }, {
    key: "getTag",
    value: function getTag(attrSelector) {
      if (!attrSelector) return null;
      return this._doc.querySelector("meta[".concat(attrSelector, "]")) || null;
    }
    /**
     * Retrieves a set of `<meta>` tag elements in the current HTML document.
     * @param attrSelector The tag attribute and value to match against, in the format
     * `"tag_attribute='value string'"`.
     * @returns The matching elements, if any.
     */

  }, {
    key: "getTags",
    value: function getTags(attrSelector) {
      if (!attrSelector) return [];

      var list
      /*NodeList*/
      = this._doc.querySelectorAll("meta[".concat(attrSelector, "]"));

      return list ? [].slice.call(list) : [];
    }
    /**
     * Modifies an existing `<meta>` tag element in the current HTML document.
     * @param tag The tag description with which to replace the existing tag content.
     * @param selector A tag attribute and value to match against, to identify
     * an existing tag. A string in the format `"tag_attribute=`value string`"`.
     * If not supplied, matches a tag with the same `name` or `property` attribute value as the
     * replacement tag.
     * @return The modified element.
     */

  }, {
    key: "updateTag",
    value: function updateTag(tag, selector) {
      if (!tag) return null;
      selector = selector || this._parseSelector(tag);
      var meta = this.getTag(selector);

      if (meta) {
        return this._setMetaElementAttributes(tag, meta);
      }

      return this._getOrCreateElement(tag, true);
    }
    /**
     * Removes an existing `<meta>` tag element from the current HTML document.
     * @param attrSelector A tag attribute and value to match against, to identify
     * an existing tag. A string in the format `"tag_attribute=`value string`"`.
     */

  }, {
    key: "removeTag",
    value: function removeTag(attrSelector) {
      this.removeTagElement(this.getTag(attrSelector));
    }
    /**
     * Removes an existing `<meta>` tag element from the current HTML document.
     * @param meta The tag definition to match against to identify an existing tag.
     */

  }, {
    key: "removeTagElement",
    value: function removeTagElement(meta) {
      if (meta) {
        this._dom.remove(meta);
      }
    }
  }, {
    key: "_getOrCreateElement",
    value: function _getOrCreateElement(meta) {
      var _this14 = this;

      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!forceCreation) {
        var selector = this._parseSelector(meta); // It's allowed to have multiple elements with the same name so it's not enough to
        // just check that element with the same name already present on the page. We also need to
        // check if element has tag attributes


        var elem = this.getTags(selector).filter(function (elem) {
          return _this14._containsAttributes(meta, elem);
        })[0];
        if (elem !== undefined) return elem;
      }

      var element = this._dom.createElement('meta');

      this._setMetaElementAttributes(meta, element);

      var head = this._doc.getElementsByTagName('head')[0];

      head.appendChild(element);
      return element;
    }
  }, {
    key: "_setMetaElementAttributes",
    value: function _setMetaElementAttributes(tag, el) {
      var _this15 = this;

      Object.keys(tag).forEach(function (prop) {
        return el.setAttribute(_this15._getMetaKeyMap(prop), tag[prop]);
      });
      return el;
    }
  }, {
    key: "_parseSelector",
    value: function _parseSelector(tag) {
      var attr = tag.name ? 'name' : 'property';
      return "".concat(attr, "=\"").concat(tag[attr], "\"");
    }
  }, {
    key: "_containsAttributes",
    value: function _containsAttributes(tag, elem) {
      var _this16 = this;

      return Object.keys(tag).every(function (key) {
        return elem.getAttribute(_this16._getMetaKeyMap(key)) === tag[key];
      });
    }
  }, {
    key: "_getMetaKeyMap",
    value: function _getMetaKeyMap(prop) {
      return META_KEYS_MAP[prop] || prop;
    }
  }]);

  return Meta;
}();

Meta.ɵfac = function Meta_Factory(t) {
  return new (t || Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

Meta.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: createMeta,
  token: Meta,
  providedIn: "root"
});

Meta.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](Meta, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: 'root',
      useFactory: createMeta,
      deps: []
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * Mapping for MetaDefinition properties with their correct meta attribute names
 */


var META_KEYS_MAP = {
  httpEquiv: 'http-equiv'
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Factory to create Title service.
 */

function createTitle() {
  return new Title((0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
}
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * @publicApi
 */


var Title = /*#__PURE__*/function () {
  function Title(_doc) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, Title);

    this._doc = _doc;
  }
  /**
   * Get the title of the current HTML document.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(Title, [{
    key: "getTitle",
    value: function getTitle() {
      return this._doc.title;
    }
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */

  }, {
    key: "setTitle",
    value: function setTitle(newTitle) {
      this._doc.title = newTitle || '';
    }
  }]);

  return Title;
}();

Title.ɵfac = function Title_Factory(t) {
  return new (t || Title)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};

Title.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"])({
  factory: createTitle,
  token: Title,
  providedIn: "root"
});

Title.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](Title, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable,
    args: [{
      providedIn: 'root',
      useFactory: createTitle,
      deps: []
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var win = typeof window !== 'undefined' && window || {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var ChangeDetectionPerfRecord = function ChangeDetectionPerfRecord(msPerTick, numTicks) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, ChangeDetectionPerfRecord);

  this.msPerTick = msPerTick;
  this.numTicks = numTicks;
};
/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */


var AngularProfiler = /*#__PURE__*/function () {
  function AngularProfiler(ref) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, AngularProfiler);

    this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_7__.ApplicationRef);
  } // tslint:disable:no-console

  /**
   * Exercises change detection in a loop and then prints the average amount of
   * time in milliseconds how long a single round of change detection takes for
   * the current state of the UI. It runs a minimum of 5 rounds for a minimum
   * of 500 milliseconds.
   *
   * Optionally, a user may pass a `config` parameter containing a map of
   * options. Supported options are:
   *
   * `record` (boolean) - causes the profiler to record a CPU profile while
   * it exercises the change detector. Example:
   *
   * ```
   * ng.profiler.timeChangeDetection({record: true})
   * ```
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(AngularProfiler, [{
    key: "timeChangeDetection",
    value: function timeChangeDetection(config) {
      var record = config && config['record'];
      var profileName = 'Change Detection'; // Profiler is not available in Android browsers without dev tools opened

      var isProfilerAvailable = win.console.profile != null;

      if (record && isProfilerAvailable) {
        win.console.profile(profileName);
      }

      var start = performanceNow();
      var numTicks = 0;

      while (numTicks < 5 || performanceNow() - start < 500) {
        this.appRef.tick();
        numTicks++;
      }

      var end = performanceNow();

      if (record && isProfilerAvailable) {
        win.console.profileEnd(profileName);
      }

      var msPerTick = (end - start) / numTicks;
      win.console.log("ran ".concat(numTicks, " change detection cycles"));
      win.console.log("".concat(msPerTick.toFixed(2), " ms per check"));
      return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    }
  }]);

  return AngularProfiler;
}();

function performanceNow() {
  return win.performance && win.performance.now ? win.performance.now() : new Date().getTime();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var PROFILER_GLOBAL_NAME = 'profiler';
/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * @publicApi
 */

function enableDebugTools(ref) {
  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
  return ref;
}
/**
 * Disables Angular tools.
 *
 * @publicApi
 */


function disableDebugTools() {
  exportNgVar(PROFILER_GLOBAL_NAME, null);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function escapeHtml(text) {
  var escapedText = {
    '&': '&a;',
    '"': '&q;',
    '\'': '&s;',
    '<': '&l;',
    '>': '&g;'
  };
  return text.replace(/[&"'<>]/g, function (s) {
    return escapedText[s];
  });
}

function unescapeHtml(text) {
  var unescapedText = {
    '&a;': '&',
    '&q;': '"',
    '&s;': '\'',
    '&l;': '<',
    '&g;': '>'
  };
  return text.replace(/&[^;]+;/g, function (s) {
    return unescapedText[s];
  });
}
/**
 * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
 *
 * Example:
 *
 * ```
 * const COUNTER_KEY = makeStateKey<number>('counter');
 * let value = 10;
 *
 * transferState.set(COUNTER_KEY, value);
 * ```
 *
 * @publicApi
 */


function makeStateKey(key) {
  return key;
}
/**
 * A key value store that is transferred from the application on the server side to the application
 * on the client side.
 *
 * `TransferState` will be available as an injectable token. To use it import
 * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
 *
 * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
 * boolean, number, string, null and non-class objects will be serialized and deserialized in a
 * non-lossy manner.
 *
 * @publicApi
 */


var TransferState = /*#__PURE__*/function () {
  function TransferState() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, TransferState);

    this.store = {};
    this.onSerializeCallbacks = {};
  }
  /** @internal */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(TransferState, [{
    key: "get",
    value:
    /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     */
    function get(key, defaultValue) {
      return this.store[key] !== undefined ? this.store[key] : defaultValue;
    }
    /**
     * Set the value corresponding to a key.
     */

  }, {
    key: "set",
    value: function set(key, value) {
      this.store[key] = value;
    }
    /**
     * Remove a key from the store.
     */

  }, {
    key: "remove",
    value: function remove(key) {
      delete this.store[key];
    }
    /**
     * Test whether a key exists in the store.
     */

  }, {
    key: "hasKey",
    value: function hasKey(key) {
      return this.store.hasOwnProperty(key);
    }
    /**
     * Register a callback to provide the value for a key when `toJson` is called.
     */

  }, {
    key: "onSerialize",
    value: function onSerialize(key, callback) {
      this.onSerializeCallbacks[key] = callback;
    }
    /**
     * Serialize the current state of the store to JSON.
     */

  }, {
    key: "toJson",
    value: function toJson() {
      // Call the onSerialize callbacks and put those values into the store.
      for (var key in this.onSerializeCallbacks) {
        if (this.onSerializeCallbacks.hasOwnProperty(key)) {
          try {
            this.store[key] = this.onSerializeCallbacks[key]();
          } catch (e) {
            console.warn('Exception in onSerialize callback: ', e);
          }
        }
      }

      return JSON.stringify(this.store);
    }
  }], [{
    key: "init",
    value: function init(initState) {
      var transferState = new TransferState();
      transferState.store = initState;
      return transferState;
    }
  }]);

  return TransferState;
}();

TransferState.ɵfac = function TransferState_Factory(t) {
  return new (t || TransferState)();
};

TransferState.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjectable"]({
  token: TransferState,
  factory: TransferState.ɵfac
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](TransferState, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable
  }], function () {
    return [];
  }, null);
})();

function initTransferState(doc, appId) {
  // Locate the script tag with the JSON data transferred from the server.
  // The id of the script tag is set to the Angular appId + 'state'.
  var script = doc.getElementById(appId + '-state');
  var initialState = {};

  if (script && script.textContent) {
    try {
      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).
      initialState = JSON.parse(unescapeHtml(script.textContent));
    } catch (e) {
      console.warn('Exception while restoring TransferState for app ' + appId, e);
    }
  }

  return TransferState.init(initialState);
}
/**
 * NgModule to install on the client side while using the `TransferState` to transfer state from
 * server to client.
 *
 * @publicApi
 */


var BrowserTransferStateModule = function BrowserTransferStateModule() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, BrowserTransferStateModule);
};

BrowserTransferStateModule.ɵfac = function BrowserTransferStateModule_Factory(t) {
  return new (t || BrowserTransferStateModule)();
};

BrowserTransferStateModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
  type: BrowserTransferStateModule
});
BrowserTransferStateModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
  providers: [{
    provide: TransferState,
    useFactory: initTransferState,
    deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID]
  }]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵsetClassMetadata"](BrowserTransferStateModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.NgModule,
    args: [{
      providers: [{
        provide: TransferState,
        useFactory: initTransferState,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_7__.APP_ID]
      }]
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Predicates for use with {@link DebugElement}'s query functions.
 *
 * @publicApi
 */


var By = /*#__PURE__*/function () {
  function By() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, By);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(By, null, [{
    key: "all",
    value:
    /**
     * Match all nodes.
     *
     * @usageNotes
     * ### Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     */
    function all() {
      return function () {
        return true;
      };
    }
    /**
     * Match elements by the given CSS selector.
     *
     * @usageNotes
     * ### Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     */

  }, {
    key: "css",
    value: function css(selector) {
      return function (debugElement) {
        return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;
      };
    }
    /**
     * Match nodes that have the given directive present.
     *
     * @usageNotes
     * ### Example
     *
     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     */

  }, {
    key: "directive",
    value: function directive(type) {
      return function (debugNode) {
        return debugNode.providerTokens.indexOf(type) !== -1;
      };
    }
  }]);

  return By;
}();

function elementMatches(n, selector) {
  if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵgetDOM"])().isElementNode(n)) {
    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.Version('12.2.3');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 79661:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/router/fesm2015/router.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivatedRoute": function() { return /* binding */ ActivatedRoute; },
/* harmony export */   "ActivatedRouteSnapshot": function() { return /* binding */ ActivatedRouteSnapshot; },
/* harmony export */   "ActivationEnd": function() { return /* binding */ ActivationEnd; },
/* harmony export */   "ActivationStart": function() { return /* binding */ ActivationStart; },
/* harmony export */   "BaseRouteReuseStrategy": function() { return /* binding */ BaseRouteReuseStrategy; },
/* harmony export */   "ChildActivationEnd": function() { return /* binding */ ChildActivationEnd; },
/* harmony export */   "ChildActivationStart": function() { return /* binding */ ChildActivationStart; },
/* harmony export */   "ChildrenOutletContexts": function() { return /* binding */ ChildrenOutletContexts; },
/* harmony export */   "DefaultUrlSerializer": function() { return /* binding */ DefaultUrlSerializer; },
/* harmony export */   "GuardsCheckEnd": function() { return /* binding */ GuardsCheckEnd; },
/* harmony export */   "GuardsCheckStart": function() { return /* binding */ GuardsCheckStart; },
/* harmony export */   "NavigationCancel": function() { return /* binding */ NavigationCancel; },
/* harmony export */   "NavigationEnd": function() { return /* binding */ NavigationEnd; },
/* harmony export */   "NavigationError": function() { return /* binding */ NavigationError; },
/* harmony export */   "NavigationStart": function() { return /* binding */ NavigationStart; },
/* harmony export */   "NoPreloading": function() { return /* binding */ NoPreloading; },
/* harmony export */   "OutletContext": function() { return /* binding */ OutletContext; },
/* harmony export */   "PRIMARY_OUTLET": function() { return /* binding */ PRIMARY_OUTLET; },
/* harmony export */   "PreloadAllModules": function() { return /* binding */ PreloadAllModules; },
/* harmony export */   "PreloadingStrategy": function() { return /* binding */ PreloadingStrategy; },
/* harmony export */   "ROUTER_CONFIGURATION": function() { return /* binding */ ROUTER_CONFIGURATION; },
/* harmony export */   "ROUTER_INITIALIZER": function() { return /* binding */ ROUTER_INITIALIZER; },
/* harmony export */   "ROUTES": function() { return /* binding */ ROUTES; },
/* harmony export */   "ResolveEnd": function() { return /* binding */ ResolveEnd; },
/* harmony export */   "ResolveStart": function() { return /* binding */ ResolveStart; },
/* harmony export */   "RouteConfigLoadEnd": function() { return /* binding */ RouteConfigLoadEnd; },
/* harmony export */   "RouteConfigLoadStart": function() { return /* binding */ RouteConfigLoadStart; },
/* harmony export */   "RouteReuseStrategy": function() { return /* binding */ RouteReuseStrategy; },
/* harmony export */   "Router": function() { return /* binding */ Router; },
/* harmony export */   "RouterEvent": function() { return /* binding */ RouterEvent; },
/* harmony export */   "RouterLink": function() { return /* binding */ RouterLink; },
/* harmony export */   "RouterLinkActive": function() { return /* binding */ RouterLinkActive; },
/* harmony export */   "RouterLinkWithHref": function() { return /* binding */ RouterLinkWithHref; },
/* harmony export */   "RouterModule": function() { return /* binding */ RouterModule; },
/* harmony export */   "RouterOutlet": function() { return /* binding */ RouterOutlet; },
/* harmony export */   "RouterPreloader": function() { return /* binding */ RouterPreloader; },
/* harmony export */   "RouterState": function() { return /* binding */ RouterState; },
/* harmony export */   "RouterStateSnapshot": function() { return /* binding */ RouterStateSnapshot; },
/* harmony export */   "RoutesRecognized": function() { return /* binding */ RoutesRecognized; },
/* harmony export */   "Scroll": function() { return /* binding */ Scroll; },
/* harmony export */   "UrlHandlingStrategy": function() { return /* binding */ UrlHandlingStrategy; },
/* harmony export */   "UrlSegment": function() { return /* binding */ UrlSegment; },
/* harmony export */   "UrlSegmentGroup": function() { return /* binding */ UrlSegmentGroup; },
/* harmony export */   "UrlSerializer": function() { return /* binding */ UrlSerializer; },
/* harmony export */   "UrlTree": function() { return /* binding */ UrlTree; },
/* harmony export */   "VERSION": function() { return /* binding */ VERSION; },
/* harmony export */   "convertToParamMap": function() { return /* binding */ convertToParamMap; },
/* harmony export */   "provideRoutes": function() { return /* binding */ provideRoutes; },
/* harmony export */   "ɵEmptyOutletComponent": function() { return /* binding */ ɵEmptyOutletComponent; },
/* harmony export */   "ɵROUTER_PROVIDERS": function() { return /* binding */ ROUTER_PROVIDERS; },
/* harmony export */   "ɵangular_packages_router_router_a": function() { return /* binding */ ROUTER_FORROOT_GUARD; },
/* harmony export */   "ɵangular_packages_router_router_b": function() { return /* binding */ routerNgProbeToken; },
/* harmony export */   "ɵangular_packages_router_router_c": function() { return /* binding */ createRouterScroller; },
/* harmony export */   "ɵangular_packages_router_router_d": function() { return /* binding */ provideLocationStrategy; },
/* harmony export */   "ɵangular_packages_router_router_e": function() { return /* binding */ provideForRootGuard; },
/* harmony export */   "ɵangular_packages_router_router_f": function() { return /* binding */ setupRouter; },
/* harmony export */   "ɵangular_packages_router_router_g": function() { return /* binding */ rootRoute; },
/* harmony export */   "ɵangular_packages_router_router_h": function() { return /* binding */ RouterInitializer; },
/* harmony export */   "ɵangular_packages_router_router_i": function() { return /* binding */ getAppInitializer; },
/* harmony export */   "ɵangular_packages_router_router_j": function() { return /* binding */ getBootstrapListener; },
/* harmony export */   "ɵangular_packages_router_router_k": function() { return /* binding */ provideRouterInitializer; },
/* harmony export */   "ɵangular_packages_router_router_l": function() { return /* binding */ ɵEmptyOutletComponent; },
/* harmony export */   "ɵangular_packages_router_router_m": function() { return /* binding */ Tree; },
/* harmony export */   "ɵangular_packages_router_router_n": function() { return /* binding */ TreeNode; },
/* harmony export */   "ɵangular_packages_router_router_o": function() { return /* binding */ RouterScroller; },
/* harmony export */   "ɵassignExtraOptionsToRouter": function() { return /* binding */ assignExtraOptionsToRouter; },
/* harmony export */   "ɵflatten": function() { return /* binding */ flatten; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ 61861);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/common */ 40093);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 34361);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 81134);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 76491);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ 61486);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ 25160);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs */ 25239);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs */ 76461);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! rxjs */ 58640);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! rxjs */ 8117);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! rxjs */ 92494);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 33927);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 79902);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 53466);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 1143);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 77430);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ 9170);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs/operators */ 18293);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ 56816);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rxjs/operators */ 27153);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs/operators */ 20088);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs/operators */ 85816);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 98636);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! rxjs/operators */ 86828);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! rxjs/operators */ 97085);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! rxjs/operators */ 71435);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! rxjs/operators */ 96324);









/**
 * @license Angular v12.2.3
 * (c) 2010-2021 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Base for events the router goes through, as opposed to events tied to a specific
 * route. Fired one time for any given navigation.
 *
 * The following code shows how a class subscribes to router events.
 *
 * ```ts
 * import {Event, RouterEvent, Router} from '@angular/router';
 *
 * class MyService {
 *   constructor(public router: Router) {
 *     router.events.pipe(
 *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)
 *     ).subscribe((e: RouterEvent) => {
 *       // Do something
 *     });
 *   }
 * }
 * ```
 *
 * @see `Event`
 * @see [Router events summary](guide/router-reference#router-events)
 * @publicApi
 */




var RouterEvent = function RouterEvent(
/** A unique ID that the router assigns to every router navigation. */
id,
/** The URL that is the destination for this navigation. */
url) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterEvent);

  this.id = id;
  this.url = url;
};
/**
 * An event triggered when a navigation starts.
 *
 * @publicApi
 */


var NavigationStart = /*#__PURE__*/function (_RouterEvent) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(NavigationStart, _RouterEvent);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(NavigationStart);

  function NavigationStart(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url) {
    var _this;

    var navigationTrigger = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'imperative';
    var restoredState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NavigationStart);

    _this = _super.call(this, id, url);
    _this.navigationTrigger = navigationTrigger;
    _this.restoredState = restoredState;
    return _this;
  }
  /** @docsNotRequired */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NavigationStart, [{
    key: "toString",
    value: function toString() {
      return "NavigationStart(id: ".concat(this.id, ", url: '").concat(this.url, "')");
    }
  }]);

  return NavigationStart;
}(RouterEvent);
/**
 * An event triggered when a navigation ends successfully.
 *
 * @see `NavigationStart`
 * @see `NavigationCancel`
 * @see `NavigationError`
 *
 * @publicApi
 */


var NavigationEnd = /*#__PURE__*/function (_RouterEvent2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(NavigationEnd, _RouterEvent2);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(NavigationEnd);

  function NavigationEnd(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NavigationEnd);

    _this2 = _super2.call(this, id, url);
    _this2.urlAfterRedirects = urlAfterRedirects;
    return _this2;
  }
  /** @docsNotRequired */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NavigationEnd, [{
    key: "toString",
    value: function toString() {
      return "NavigationEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "')");
    }
  }]);

  return NavigationEnd;
}(RouterEvent);
/**
 * An event triggered when a navigation is canceled, directly or indirectly.
 * This can happen for several reasons including when a route guard
 * returns `false` or initiates a redirect by returning a `UrlTree`.
 *
 * @see `NavigationStart`
 * @see `NavigationEnd`
 * @see `NavigationError`
 *
 * @publicApi
 */


var NavigationCancel = /*#__PURE__*/function (_RouterEvent3) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(NavigationCancel, _RouterEvent3);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(NavigationCancel);

  function NavigationCancel(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  reason) {
    var _this3;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NavigationCancel);

    _this3 = _super3.call(this, id, url);
    _this3.reason = reason;
    return _this3;
  }
  /** @docsNotRequired */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NavigationCancel, [{
    key: "toString",
    value: function toString() {
      return "NavigationCancel(id: ".concat(this.id, ", url: '").concat(this.url, "')");
    }
  }]);

  return NavigationCancel;
}(RouterEvent);
/**
 * An event triggered when a navigation fails due to an unexpected error.
 *
 * @see `NavigationStart`
 * @see `NavigationEnd`
 * @see `NavigationCancel`
 *
 * @publicApi
 */


var NavigationError = /*#__PURE__*/function (_RouterEvent4) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(NavigationError, _RouterEvent4);

  var _super4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(NavigationError);

  function NavigationError(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  error) {
    var _this4;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NavigationError);

    _this4 = _super4.call(this, id, url);
    _this4.error = error;
    return _this4;
  }
  /** @docsNotRequired */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NavigationError, [{
    key: "toString",
    value: function toString() {
      return "NavigationError(id: ".concat(this.id, ", url: '").concat(this.url, "', error: ").concat(this.error, ")");
    }
  }]);

  return NavigationError;
}(RouterEvent);
/**
 * An event triggered when routes are recognized.
 *
 * @publicApi
 */


var RoutesRecognized = /*#__PURE__*/function (_RouterEvent5) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(RoutesRecognized, _RouterEvent5);

  var _super5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(RoutesRecognized);

  function RoutesRecognized(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    var _this5;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RoutesRecognized);

    _this5 = _super5.call(this, id, url);
    _this5.urlAfterRedirects = urlAfterRedirects;
    _this5.state = state;
    return _this5;
  }
  /** @docsNotRequired */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RoutesRecognized, [{
    key: "toString",
    value: function toString() {
      return "RoutesRecognized(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
    }
  }]);

  return RoutesRecognized;
}(RouterEvent);
/**
 * An event triggered at the start of the Guard phase of routing.
 *
 * @see `GuardsCheckEnd`
 *
 * @publicApi
 */


var GuardsCheckStart = /*#__PURE__*/function (_RouterEvent6) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(GuardsCheckStart, _RouterEvent6);

  var _super6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(GuardsCheckStart);

  function GuardsCheckStart(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    var _this6;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, GuardsCheckStart);

    _this6 = _super6.call(this, id, url);
    _this6.urlAfterRedirects = urlAfterRedirects;
    _this6.state = state;
    return _this6;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(GuardsCheckStart, [{
    key: "toString",
    value: function toString() {
      return "GuardsCheckStart(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
    }
  }]);

  return GuardsCheckStart;
}(RouterEvent);
/**
 * An event triggered at the end of the Guard phase of routing.
 *
 * @see `GuardsCheckStart`
 *
 * @publicApi
 */


var GuardsCheckEnd = /*#__PURE__*/function (_RouterEvent7) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(GuardsCheckEnd, _RouterEvent7);

  var _super7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(GuardsCheckEnd);

  function GuardsCheckEnd(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state,
  /** @docsNotRequired */
  shouldActivate) {
    var _this7;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, GuardsCheckEnd);

    _this7 = _super7.call(this, id, url);
    _this7.urlAfterRedirects = urlAfterRedirects;
    _this7.state = state;
    _this7.shouldActivate = shouldActivate;
    return _this7;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(GuardsCheckEnd, [{
    key: "toString",
    value: function toString() {
      return "GuardsCheckEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ", shouldActivate: ").concat(this.shouldActivate, ")");
    }
  }]);

  return GuardsCheckEnd;
}(RouterEvent);
/**
 * An event triggered at the start of the Resolve phase of routing.
 *
 * Runs in the "resolve" phase whether or not there is anything to resolve.
 * In future, may change to only run when there are things to be resolved.
 *
 * @see `ResolveEnd`
 *
 * @publicApi
 */


var ResolveStart = /*#__PURE__*/function (_RouterEvent8) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(ResolveStart, _RouterEvent8);

  var _super8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(ResolveStart);

  function ResolveStart(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    var _this8;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ResolveStart);

    _this8 = _super8.call(this, id, url);
    _this8.urlAfterRedirects = urlAfterRedirects;
    _this8.state = state;
    return _this8;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ResolveStart, [{
    key: "toString",
    value: function toString() {
      return "ResolveStart(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
    }
  }]);

  return ResolveStart;
}(RouterEvent);
/**
 * An event triggered at the end of the Resolve phase of routing.
 * @see `ResolveStart`.
 *
 * @publicApi
 */


var ResolveEnd = /*#__PURE__*/function (_RouterEvent9) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(ResolveEnd, _RouterEvent9);

  var _super9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(ResolveEnd);

  function ResolveEnd(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    var _this9;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ResolveEnd);

    _this9 = _super9.call(this, id, url);
    _this9.urlAfterRedirects = urlAfterRedirects;
    _this9.state = state;
    return _this9;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ResolveEnd, [{
    key: "toString",
    value: function toString() {
      return "ResolveEnd(id: ".concat(this.id, ", url: '").concat(this.url, "', urlAfterRedirects: '").concat(this.urlAfterRedirects, "', state: ").concat(this.state, ")");
    }
  }]);

  return ResolveEnd;
}(RouterEvent);
/**
 * An event triggered before lazy loading a route configuration.
 *
 * @see `RouteConfigLoadEnd`
 *
 * @publicApi
 */


var RouteConfigLoadStart = /*#__PURE__*/function () {
  function RouteConfigLoadStart(
  /** @docsNotRequired */
  route) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouteConfigLoadStart);

    this.route = route;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouteConfigLoadStart, [{
    key: "toString",
    value: function toString() {
      return "RouteConfigLoadStart(path: ".concat(this.route.path, ")");
    }
  }]);

  return RouteConfigLoadStart;
}();
/**
 * An event triggered when a route has been lazy loaded.
 *
 * @see `RouteConfigLoadStart`
 *
 * @publicApi
 */


var RouteConfigLoadEnd = /*#__PURE__*/function () {
  function RouteConfigLoadEnd(
  /** @docsNotRequired */
  route) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouteConfigLoadEnd);

    this.route = route;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouteConfigLoadEnd, [{
    key: "toString",
    value: function toString() {
      return "RouteConfigLoadEnd(path: ".concat(this.route.path, ")");
    }
  }]);

  return RouteConfigLoadEnd;
}();
/**
 * An event triggered at the start of the child-activation
 * part of the Resolve phase of routing.
 * @see  `ChildActivationEnd`
 * @see `ResolveStart`
 *
 * @publicApi
 */


var ChildActivationStart = /*#__PURE__*/function () {
  function ChildActivationStart(
  /** @docsNotRequired */
  snapshot) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ChildActivationStart);

    this.snapshot = snapshot;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ChildActivationStart, [{
    key: "toString",
    value: function toString() {
      var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
      return "ChildActivationStart(path: '".concat(path, "')");
    }
  }]);

  return ChildActivationStart;
}();
/**
 * An event triggered at the end of the child-activation part
 * of the Resolve phase of routing.
 * @see `ChildActivationStart`
 * @see `ResolveStart`
 * @publicApi
 */


var ChildActivationEnd = /*#__PURE__*/function () {
  function ChildActivationEnd(
  /** @docsNotRequired */
  snapshot) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ChildActivationEnd);

    this.snapshot = snapshot;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ChildActivationEnd, [{
    key: "toString",
    value: function toString() {
      var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
      return "ChildActivationEnd(path: '".concat(path, "')");
    }
  }]);

  return ChildActivationEnd;
}();
/**
 * An event triggered at the start of the activation part
 * of the Resolve phase of routing.
 * @see `ActivationEnd`
 * @see `ResolveStart`
 *
 * @publicApi
 */


var ActivationStart = /*#__PURE__*/function () {
  function ActivationStart(
  /** @docsNotRequired */
  snapshot) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ActivationStart);

    this.snapshot = snapshot;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ActivationStart, [{
    key: "toString",
    value: function toString() {
      var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
      return "ActivationStart(path: '".concat(path, "')");
    }
  }]);

  return ActivationStart;
}();
/**
 * An event triggered at the end of the activation part
 * of the Resolve phase of routing.
 * @see `ActivationStart`
 * @see `ResolveStart`
 *
 * @publicApi
 */


var ActivationEnd = /*#__PURE__*/function () {
  function ActivationEnd(
  /** @docsNotRequired */
  snapshot) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ActivationEnd);

    this.snapshot = snapshot;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ActivationEnd, [{
    key: "toString",
    value: function toString() {
      var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
      return "ActivationEnd(path: '".concat(path, "')");
    }
  }]);

  return ActivationEnd;
}();
/**
 * An event triggered by scrolling.
 *
 * @publicApi
 */


var Scroll = /*#__PURE__*/function () {
  function Scroll(
  /** @docsNotRequired */
  routerEvent,
  /** @docsNotRequired */
  position,
  /** @docsNotRequired */
  anchor) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Scroll);

    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Scroll, [{
    key: "toString",
    value: function toString() {
      var pos = this.position ? "".concat(this.position[0], ", ").concat(this.position[1]) : null;
      return "Scroll(anchor: '".concat(this.anchor, "', position: '").concat(pos, "')");
    }
  }]);

  return Scroll;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The primary routing outlet.
 *
 * @publicApi
 */


var PRIMARY_OUTLET = 'primary';

var ParamsAsMap = /*#__PURE__*/function () {
  function ParamsAsMap(params) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ParamsAsMap);

    this.params = params || {};
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ParamsAsMap, [{
    key: "has",
    value: function has(name) {
      return Object.prototype.hasOwnProperty.call(this.params, name);
    }
  }, {
    key: "get",
    value: function get(name) {
      if (this.has(name)) {
        var v = this.params[name];
        return Array.isArray(v) ? v[0] : v;
      }

      return null;
    }
  }, {
    key: "getAll",
    value: function getAll(name) {
      if (this.has(name)) {
        var v = this.params[name];
        return Array.isArray(v) ? v : [v];
      }

      return [];
    }
  }, {
    key: "keys",
    get: function get() {
      return Object.keys(this.params);
    }
  }]);

  return ParamsAsMap;
}();
/**
 * Converts a `Params` instance to a `ParamMap`.
 * @param params The instance to convert.
 * @returns The new map instance.
 *
 * @publicApi
 */


function convertToParamMap(params) {
  return new ParamsAsMap(params);
}

var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';

function navigationCancelingError(message) {
  var error = Error('NavigationCancelingError: ' + message);
  error[NAVIGATION_CANCELING_ERROR] = true;
  return error;
}

function isNavigationCancelingError(error) {
  return error && error[NAVIGATION_CANCELING_ERROR];
} // Matches the route configuration (`route`) against the actual URL (`segments`).


function defaultUrlMatcher(segments, segmentGroup, route) {
  var parts = route.path.split('/');

  if (parts.length > segments.length) {
    // The actual URL is shorter than the config, no match
    return null;
  }

  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    // The config is longer than the actual URL but we are looking for a full match, return null
    return null;
  }

  var posParams = {}; // Check each config part against the actual URL

  for (var index = 0; index < parts.length; index++) {
    var part = parts[index];
    var segment = segments[index];
    var isParameter = part.startsWith(':');

    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      // The actual URL part does not match the config, no match
      return null;
    }
  }

  return {
    consumed: segments.slice(0, parts.length),
    posParams: posParams
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function shallowEqualArrays(a, b) {
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i])) return false;
  }

  return true;
}

function shallowEqual(a, b) {
  // While `undefined` should never be possible, it would sometimes be the case in IE 11
  // and pre-chromium Edge. The check below accounts for this edge case.
  var k1 = a ? Object.keys(a) : undefined;
  var k2 = b ? Object.keys(b) : undefined;

  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }

  var key;

  for (var i = 0; i < k1.length; i++) {
    key = k1[i];

    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }

  return true;
}
/**
 * Test equality for arrays of strings or a string.
 */


function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;

    var aSorted = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(a).sort();

    var bSorted = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(b).sort();

    return aSorted.every(function (val, index) {
      return bSorted[index] === val;
    });
  } else {
    return a === b;
  }
}
/**
 * Flattens single-level nested arrays.
 */


function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}
/**
 * Return the last element of an array.
 */


function last(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
/**
 * Verifys all booleans in an array are `true`.
 */


function and(bools) {
  return !bools.some(function (v) {
    return !v;
  });
}

function forEach(map, callback) {
  for (var prop in map) {
    if (map.hasOwnProperty(prop)) {
      callback(map[prop], prop);
    }
  }
}

function wrapIntoObservable(value) {
  if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵisObservable"])(value)) {
    return value;
  }

  if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵisPromise"])(value)) {
    // Use `Promise.resolve()` to wrap promise-like instances.
    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
    // change detection.
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(Promise.resolve(value));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function createEmptyUrlTree() {
  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}

var pathCompareMap = {
  'exact': equalSegmentGroups,
  'subset': containsSegmentGroup
};
var paramCompareMap = {
  'exact': equalParams,
  'subset': containsParams,
  'ignored': function ignored() {
    return true;
  }
};

function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);
}

function equalParams(container, containee) {
  // TODO: This does not handle array params correctly.
  return shallowEqual(container, containee);
}

function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments)) return false;

  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }

  if (container.numberOfChildren !== containee.numberOfChildren) return false;

  for (var c in containee.children) {
    if (!container.children[c]) return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
  }

  return true;
}

function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(function (key) {
    return equalArraysOrString(container[key], containee[key]);
  });
}

function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}

function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    var current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths)) return false;
    if (containee.hasChildren()) return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths)) return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;

    for (var c in containee.children) {
      if (!container.children[c]) return false;

      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }

    return true;
  } else {
    var _current = containeePaths.slice(0, container.segments.length);

    var next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, _current)) return false;
    if (!matrixParamsMatch(container.segments, _current, matrixParams)) return false;
    if (!container.children[PRIMARY_OUTLET]) return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}

function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every(function (containeeSegment, i) {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
/**
 * @description
 *
 * Represents the parsed URL.
 *
 * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
 * serialized tree.
 * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree =
 *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
 *     const f = tree.fragment; // return 'fragment'
 *     const q = tree.queryParams; // returns {debug: 'true'}
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
 *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
 *     g.children['support'].segments; // return 1 segment 'help'
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var UrlTree = /*#__PURE__*/function () {
  /** @internal */
  function UrlTree(
  /** The root segment group of the URL tree */
  root,
  /** The query params of the URL */
  queryParams,
  /** The fragment of the URL */
  fragment) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlTree);

    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(UrlTree, [{
    key: "queryParamMap",
    get: function get() {
      if (!this._queryParamMap) {
        this._queryParamMap = convertToParamMap(this.queryParams);
      }

      return this._queryParamMap;
    }
    /** @docsNotRequired */

  }, {
    key: "toString",
    value: function toString() {
      return DEFAULT_SERIALIZER.serialize(this);
    }
  }]);

  return UrlTree;
}();
/**
 * @description
 *
 * Represents the parsed URL segment group.
 *
 * See `UrlTree` for more information.
 *
 * @publicApi
 */


var UrlSegmentGroup = /*#__PURE__*/function () {
  function UrlSegmentGroup(
  /** The URL segments of this group. See `UrlSegment` for more information */
  segments,
  /** The list of children of this group */
  children) {
    var _this10 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlSegmentGroup);

    this.segments = segments;
    this.children = children;
    /** The parent node in the url tree */

    this.parent = null;
    forEach(children, function (v, k) {
      return v.parent = _this10;
    });
  }
  /** Whether the segment has child segments */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(UrlSegmentGroup, [{
    key: "hasChildren",
    value: function hasChildren() {
      return this.numberOfChildren > 0;
    }
    /** Number of child segments */

  }, {
    key: "numberOfChildren",
    get: function get() {
      return Object.keys(this.children).length;
    }
    /** @docsNotRequired */

  }, {
    key: "toString",
    value: function toString() {
      return serializePaths(this);
    }
  }]);

  return UrlSegmentGroup;
}();
/**
 * @description
 *
 * Represents a single URL segment.
 *
 * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
 * parameters associated with the segment.
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree = router.parseUrl('/team;id=33');
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments;
 *     s[0].path; // returns 'team'
 *     s[0].parameters; // returns {id: 33}
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var UrlSegment = /*#__PURE__*/function () {
  function UrlSegment(
  /** The path part of a URL segment */
  path,
  /** The matrix parameters associated with a segment */
  parameters) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlSegment);

    this.path = path;
    this.parameters = parameters;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(UrlSegment, [{
    key: "parameterMap",
    get: function get() {
      if (!this._parameterMap) {
        this._parameterMap = convertToParamMap(this.parameters);
      }

      return this._parameterMap;
    }
    /** @docsNotRequired */

  }, {
    key: "toString",
    value: function toString() {
      return serializePath(this);
    }
  }]);

  return UrlSegment;
}();

function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every(function (a, i) {
    return shallowEqual(a.parameters, bs[i].parameters);
  });
}

function equalPath(as, bs) {
  if (as.length !== bs.length) return false;
  return as.every(function (a, i) {
    return a.path === bs[i].path;
  });
}

function mapChildrenIntoArray(segment, fn) {
  var res = [];
  forEach(segment.children, function (child, childOutlet) {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  forEach(segment.children, function (child, childOutlet) {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  return res;
}
/**
 * @description
 *
 * Serializes and deserializes a URL string into a URL tree.
 *
 * The url serialization strategy is customizable. You can
 * make all URLs case insensitive by providing a custom UrlSerializer.
 *
 * See `DefaultUrlSerializer` for an example of a URL serializer.
 *
 * @publicApi
 */


var UrlSerializer = function UrlSerializer() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlSerializer);
};
/**
 * @description
 *
 * A default implementation of the `UrlSerializer`.
 *
 * Example URLs:
 *
 * ```
 * /inbox/33(popup:compose)
 * /inbox/33;open=true/messages/44
 * ```
 *
 * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
 * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
 * specify route specific parameters.
 *
 * @publicApi
 */


var DefaultUrlSerializer = /*#__PURE__*/function () {
  function DefaultUrlSerializer() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, DefaultUrlSerializer);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DefaultUrlSerializer, [{
    key: "parse",
    value:
    /** Parses a url into a `UrlTree` */
    function parse(url) {
      var p = new UrlParser(url);
      return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    }
    /** Converts a `UrlTree` into a url */

  }, {
    key: "serialize",
    value: function serialize(tree) {
      var segment = "/".concat(serializeSegment(tree.root, true));
      var query = serializeQueryParams(tree.queryParams);
      var fragment = typeof tree.fragment === "string" ? "#".concat(encodeUriFragment(tree.fragment)) : '';
      return "".concat(segment).concat(query).concat(fragment);
    }
  }]);

  return DefaultUrlSerializer;
}();

var DEFAULT_SERIALIZER = new DefaultUrlSerializer();

function serializePaths(segment) {
  return segment.segments.map(function (p) {
    return serializePath(p);
  }).join('/');
}

function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }

  if (root) {
    var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
    var children = [];
    forEach(segment.children, function (v, k) {
      if (k !== PRIMARY_OUTLET) {
        children.push("".concat(k, ":").concat(serializeSegment(v, false)));
      }
    });
    return children.length > 0 ? "".concat(primary, "(").concat(children.join('//'), ")") : primary;
  } else {
    var _children = mapChildrenIntoArray(segment, function (v, k) {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }

      return ["".concat(k, ":").concat(serializeSegment(v, false))];
    }); // use no parenthesis if the only child is a primary outlet route


    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return "".concat(serializePaths(segment), "/").concat(_children[0]);
    }

    return "".concat(serializePaths(segment), "/(").concat(_children.join('//'), ")");
  }
}
/**
 * Encodes a URI string with the default encoding. This function will only ever be called from
 * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need
 * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't
 * have to be encoded per https://url.spec.whatwg.org.
 */


function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');
}
/**
 * This function should be used to encode both keys and values in a query string key/value. In
 * the following URL, you need to call encodeUriQuery on "k" and "v":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ';');
}
/**
 * This function should be used to encode a URL fragment. In the following URL, you need to call
 * encodeUriFragment on "f":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriFragment(s) {
  return encodeURI(s);
}
/**
 * This function should be run on any URI segment as well as the key and value in a key/value
 * pair for matrix params. In the following URL, you need to call encodeUriSegment on "html",
 * "mk", and "mv":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%26/gi, '&');
}

function decode(s) {
  return decodeURIComponent(s);
} // Query keys/values should have the "+" replaced first, as "+" in a query string is " ".
// decodeURIComponent function will not decode "+" as a space.


function decodeQuery(s) {
  return decode(s.replace(/\+/g, '%20'));
}

function serializePath(path) {
  return "".concat(encodeUriSegment(path.path)).concat(serializeMatrixParams(path.parameters));
}

function serializeMatrixParams(params) {
  return Object.keys(params).map(function (key) {
    return ";".concat(encodeUriSegment(key), "=").concat(encodeUriSegment(params[key]));
  }).join('');
}

function serializeQueryParams(params) {
  var strParams = Object.keys(params).map(function (name) {
    var value = params[name];
    return Array.isArray(value) ? value.map(function (v) {
      return "".concat(encodeUriQuery(name), "=").concat(encodeUriQuery(v));
    }).join('&') : "".concat(encodeUriQuery(name), "=").concat(encodeUriQuery(value));
  }).filter(function (s) {
    return !!s;
  });
  return strParams.length ? "?".concat(strParams.join('&')) : '';
}

var SEGMENT_RE = /^[^\/()?;=#]+/;

function matchSegments(str) {
  var match = str.match(SEGMENT_RE);
  return match ? match[0] : '';
}

var QUERY_PARAM_RE = /^[^=?&#]+/; // Return the name of the query param at the start of the string or an empty string

function matchQueryParams(str) {
  var match = str.match(QUERY_PARAM_RE);
  return match ? match[0] : '';
}

var QUERY_PARAM_VALUE_RE = /^[^?&#]+/; // Return the value of the query param at the start of the string or an empty string

function matchUrlQueryParamValue(str) {
  var match = str.match(QUERY_PARAM_VALUE_RE);
  return match ? match[0] : '';
}

var UrlParser = /*#__PURE__*/function () {
  function UrlParser(url) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlParser);

    this.url = url;
    this.remaining = url;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(UrlParser, [{
    key: "parseRootSegment",
    value: function parseRootSegment() {
      this.consumeOptional('/');

      if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
        return new UrlSegmentGroup([], {});
      } // The root segment group never has segments


      return new UrlSegmentGroup([], this.parseChildren());
    }
  }, {
    key: "parseQueryParams",
    value: function parseQueryParams() {
      var params = {};

      if (this.consumeOptional('?')) {
        do {
          this.parseQueryParam(params);
        } while (this.consumeOptional('&'));
      }

      return params;
    }
  }, {
    key: "parseFragment",
    value: function parseFragment() {
      return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
    }
  }, {
    key: "parseChildren",
    value: function parseChildren() {
      if (this.remaining === '') {
        return {};
      }

      this.consumeOptional('/');
      var segments = [];

      if (!this.peekStartsWith('(')) {
        segments.push(this.parseSegment());
      }

      while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
        this.capture('/');
        segments.push(this.parseSegment());
      }

      var children = {};

      if (this.peekStartsWith('/(')) {
        this.capture('/');
        children = this.parseParens(true);
      }

      var res = {};

      if (this.peekStartsWith('(')) {
        res = this.parseParens(false);
      }

      if (segments.length > 0 || Object.keys(children).length > 0) {
        res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
      }

      return res;
    } // parse a segment with its matrix parameters
    // ie `name;k1=v1;k2`

  }, {
    key: "parseSegment",
    value: function parseSegment() {
      var path = matchSegments(this.remaining);

      if (path === '' && this.peekStartsWith(';')) {
        throw new Error("Empty path url segment cannot have parameters: '".concat(this.remaining, "'."));
      }

      this.capture(path);
      return new UrlSegment(decode(path), this.parseMatrixParams());
    }
  }, {
    key: "parseMatrixParams",
    value: function parseMatrixParams() {
      var params = {};

      while (this.consumeOptional(';')) {
        this.parseParam(params);
      }

      return params;
    }
  }, {
    key: "parseParam",
    value: function parseParam(params) {
      var key = matchSegments(this.remaining);

      if (!key) {
        return;
      }

      this.capture(key);
      var value = '';

      if (this.consumeOptional('=')) {
        var valueMatch = matchSegments(this.remaining);

        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }

      params[decode(key)] = decode(value);
    } // Parse a single query parameter `name[=value]`

  }, {
    key: "parseQueryParam",
    value: function parseQueryParam(params) {
      var key = matchQueryParams(this.remaining);

      if (!key) {
        return;
      }

      this.capture(key);
      var value = '';

      if (this.consumeOptional('=')) {
        var valueMatch = matchUrlQueryParamValue(this.remaining);

        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }

      var decodedKey = decodeQuery(key);
      var decodedVal = decodeQuery(value);

      if (params.hasOwnProperty(decodedKey)) {
        // Append to existing values
        var currentVal = params[decodedKey];

        if (!Array.isArray(currentVal)) {
          currentVal = [currentVal];
          params[decodedKey] = currentVal;
        }

        currentVal.push(decodedVal);
      } else {
        // Create a new value
        params[decodedKey] = decodedVal;
      }
    } // parse `(a/b//outlet_name:c/d)`

  }, {
    key: "parseParens",
    value: function parseParens(allowPrimary) {
      var segments = {};
      this.capture('(');

      while (!this.consumeOptional(')') && this.remaining.length > 0) {
        var path = matchSegments(this.remaining);
        var next = this.remaining[path.length]; // if is is not one of these characters, then the segment was unescaped
        // or the group was not closed

        if (next !== '/' && next !== ')' && next !== ';') {
          throw new Error("Cannot parse url '".concat(this.url, "'"));
        }

        var outletName = undefined;

        if (path.indexOf(':') > -1) {
          outletName = path.substr(0, path.indexOf(':'));
          this.capture(outletName);
          this.capture(':');
        } else if (allowPrimary) {
          outletName = PRIMARY_OUTLET;
        }

        var children = this.parseChildren();
        segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
        this.consumeOptional('//');
      }

      return segments;
    }
  }, {
    key: "peekStartsWith",
    value: function peekStartsWith(str) {
      return this.remaining.startsWith(str);
    } // Consumes the prefix when it is present and returns whether it has been consumed

  }, {
    key: "consumeOptional",
    value: function consumeOptional(str) {
      if (this.peekStartsWith(str)) {
        this.remaining = this.remaining.substring(str.length);
        return true;
      }

      return false;
    }
  }, {
    key: "capture",
    value: function capture(str) {
      if (!this.consumeOptional(str)) {
        throw new Error("Expected \"".concat(str, "\"."));
      }
    }
  }]);

  return UrlParser;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var Tree = /*#__PURE__*/function () {
  function Tree(root) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Tree);

    this._root = root;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Tree, [{
    key: "root",
    get: function get() {
      return this._root.value;
    }
    /**
     * @internal
     */

  }, {
    key: "parent",
    value: function parent(t) {
      var p = this.pathFromRoot(t);
      return p.length > 1 ? p[p.length - 2] : null;
    }
    /**
     * @internal
     */

  }, {
    key: "children",
    value: function children(t) {
      var n = findNode(t, this._root);
      return n ? n.children.map(function (t) {
        return t.value;
      }) : [];
    }
    /**
     * @internal
     */

  }, {
    key: "firstChild",
    value: function firstChild(t) {
      var n = findNode(t, this._root);
      return n && n.children.length > 0 ? n.children[0].value : null;
    }
    /**
     * @internal
     */

  }, {
    key: "siblings",
    value: function siblings(t) {
      var p = findPath(t, this._root);
      if (p.length < 2) return [];
      var c = p[p.length - 2].children.map(function (c) {
        return c.value;
      });
      return c.filter(function (cc) {
        return cc !== t;
      });
    }
    /**
     * @internal
     */

  }, {
    key: "pathFromRoot",
    value: function pathFromRoot(t) {
      return findPath(t, this._root).map(function (s) {
        return s.value;
      });
    }
  }]);

  return Tree;
}(); // DFS for the node matching the value


function findNode(value, node) {
  if (value === node.value) return node;

  var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(node.children),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var child = _step.value;

      var _node = findNode(value, child);

      if (_node) return _node;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
} // Return the path to the node with the given value using DFS


function findPath(value, node) {
  if (value === node.value) return [node];

  var _iterator2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(node.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var child = _step2.value;
      var path = findPath(value, child);

      if (path.length) {
        path.unshift(node);
        return path;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return [];
}

var TreeNode = /*#__PURE__*/function () {
  function TreeNode(value, children) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, TreeNode);

    this.value = value;
    this.children = children;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(TreeNode, [{
    key: "toString",
    value: function toString() {
      return "TreeNode(".concat(this.value, ")");
    }
  }]);

  return TreeNode;
}(); // Return the list of T indexed by outlet name


function nodeChildrenAsMap(node) {
  var map = {};

  if (node) {
    node.children.forEach(function (child) {
      return map[child.value.outlet] = child;
    });
  }

  return map;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents the state of the router as a tree of activated routes.
 *
 * @usageNotes
 *
 * Every node in the route tree is an `ActivatedRoute` instance
 * that knows about the "consumed" URL segments, the extracted parameters,
 * and the resolved data.
 * Use the `ActivatedRoute` properties to traverse the tree from any node.
 *
 * The following fragment shows how a component gets the root node
 * of the current state to establish its own route tree:
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const root: ActivatedRoute = state.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * @see `ActivatedRoute`
 * @see [Getting route information](guide/router#getting-route-information)
 *
 * @publicApi
 */


var RouterState = /*#__PURE__*/function (_Tree) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(RouterState, _Tree);

  var _super10 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(RouterState);

  /** @internal */
  function RouterState(root,
  /** The current snapshot of the router state */
  snapshot) {
    var _this11;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterState);

    _this11 = _super10.call(this, root);
    _this11.snapshot = snapshot;
    setRouterState((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__.default)(_this11), root);
    return _this11;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterState, [{
    key: "toString",
    value: function toString() {
      return this.snapshot.toString();
    }
  }]);

  return RouterState;
}(Tree);

function createEmptyState(urlTree, rootComponent) {
  var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
  var emptyUrl = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject([new UrlSegment('', {})]);
  var emptyParams = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject({});
  var emptyData = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject({});
  var emptyQueryParams = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject({});
  var fragment = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject('');
  var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}

function createEmptyStateSnapshot(urlTree, rootComponent) {
  var emptyParams = {};
  var emptyData = {};
  var emptyQueryParams = {};
  var fragment = '';
  var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
  return new RouterStateSnapshot('', new TreeNode(activated, []));
}
/**
 * Provides access to information about a route associated with a component
 * that is loaded in an outlet.
 * Use to traverse the `RouterState` tree and extract information from nodes.
 *
 * The following example shows how to construct a component using information from a
 * currently activated route.
 *
 * Note: the observables in this class only emit when the current and previous values differ based
 * on shallow equality. For example, changing deeply nested properties in resolved `data` will not
 * cause the `ActivatedRoute.data` `Observable` to emit a new value.
 *
 * {@example router/activated-route/module.ts region="activated-route"
 *     header="activated-route.component.ts"}
 *
 * @see [Getting route information](guide/router#getting-route-information)
 *
 * @publicApi
 */


var ActivatedRoute = /*#__PURE__*/function () {
  /** @internal */
  function ActivatedRoute(
  /** An observable of the URL segments matched by this route. */
  url,
  /** An observable of the matrix parameters scoped to this route. */
  params,
  /** An observable of the query parameters shared by all the routes. */
  queryParams,
  /** An observable of the URL fragment shared by all the routes. */
  fragment,
  /** An observable of the static and resolved data of this route. */
  data,
  /** The outlet name of the route, a constant. */
  outlet,
  /** The component of the route, a constant. */
  // TODO(vsavkin): remove |string
  component, futureSnapshot) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ActivatedRoute);

    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
  }
  /** The configuration used to match this route. */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ActivatedRoute, [{
    key: "routeConfig",
    get: function get() {
      return this._futureSnapshot.routeConfig;
    }
    /** The root of the router state. */

  }, {
    key: "root",
    get: function get() {
      return this._routerState.root;
    }
    /** The parent of this route in the router state tree. */

  }, {
    key: "parent",
    get: function get() {
      return this._routerState.parent(this);
    }
    /** The first child of this route in the router state tree. */

  }, {
    key: "firstChild",
    get: function get() {
      return this._routerState.firstChild(this);
    }
    /** The children of this route in the router state tree. */

  }, {
    key: "children",
    get: function get() {
      return this._routerState.children(this);
    }
    /** The path from the root of the router state tree to this route. */

  }, {
    key: "pathFromRoot",
    get: function get() {
      return this._routerState.pathFromRoot(this);
    }
    /**
     * An Observable that contains a map of the required and optional parameters
     * specific to the route.
     * The map supports retrieving single and multiple values from the same parameter.
     */

  }, {
    key: "paramMap",
    get: function get() {
      if (!this._paramMap) {
        this._paramMap = this.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (p) {
          return convertToParamMap(p);
        }));
      }

      return this._paramMap;
    }
    /**
     * An Observable that contains a map of the query parameters available to all routes.
     * The map supports retrieving single and multiple values from the query parameter.
     */

  }, {
    key: "queryParamMap",
    get: function get() {
      if (!this._queryParamMap) {
        this._queryParamMap = this.queryParams.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (p) {
          return convertToParamMap(p);
        }));
      }

      return this._queryParamMap;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.snapshot ? this.snapshot.toString() : "Future(".concat(this._futureSnapshot, ")");
    }
  }]);

  return ActivatedRoute;
}();
/**
 * Returns the inherited params, data, and resolve for a given route.
 * By default, this only inherits values up to the nearest path-less or component-less route.
 * @internal
 */


function inheritedParamsDataResolve(route) {
  var paramsInheritanceStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'emptyOnly';
  var pathFromRoot = route.pathFromRoot;
  var inheritingStartingFrom = 0;

  if (paramsInheritanceStrategy !== 'always') {
    inheritingStartingFrom = pathFromRoot.length - 1;

    while (inheritingStartingFrom >= 1) {
      var current = pathFromRoot[inheritingStartingFrom];
      var parent = pathFromRoot[inheritingStartingFrom - 1]; // current route is an empty path => inherits its parent's params and data

      if (current.routeConfig && current.routeConfig.path === '') {
        inheritingStartingFrom--; // parent is componentless => current route should inherit its params and data
      } else if (!parent.component) {
        inheritingStartingFrom--;
      } else {
        break;
      }
    }
  }

  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));
}
/** @internal */


function flattenInherited(pathFromRoot) {
  return pathFromRoot.reduce(function (res, curr) {
    var params = Object.assign(Object.assign({}, res.params), curr.params);
    var data = Object.assign(Object.assign({}, res.data), curr.data);
    var resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);
    return {
      params: params,
      data: data,
      resolve: resolve
    };
  }, {
    params: {},
    data: {},
    resolve: {}
  });
}
/**
 * @description
 *
 * Contains the information about a route associated with a component loaded in an
 * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to
 * traverse the router state tree.
 *
 * The following example initializes a component with route information extracted
 * from the snapshot of the root node at the time of creation.
 *
 * ```
 * @Component({templateUrl:'./my-component.html'})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: string = route.snapshot.params.id;
 *     const url: string = route.snapshot.url.join('');
 *     const user = route.snapshot.data.user;
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var ActivatedRouteSnapshot = /*#__PURE__*/function () {
  /** @internal */
  function ActivatedRouteSnapshot(
  /** The URL segments matched by this route */
  url,
  /**
   *  The matrix parameters scoped to this route.
   *
   *  You can compute all params (or data) in the router state or to get params outside
   *  of an activated component by traversing the `RouterState` tree as in the following
   *  example:
   *  ```
   *  collectRouteParams(router: Router) {
   *    let params = {};
   *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];
   *    while (stack.length > 0) {
   *      const route = stack.pop()!;
   *      params = {...params, ...route.params};
   *      stack.push(...route.children);
   *    }
   *    return params;
   *  }
   *  ```
   */
  params,
  /** The query parameters shared by all the routes */
  queryParams,
  /** The URL fragment shared by all the routes */
  fragment,
  /** The static and resolved data of this route */
  data,
  /** The outlet name of the route */
  outlet,
  /** The component of the route */
  component, routeConfig, urlSegment, lastPathIndex, resolve) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ActivatedRouteSnapshot);

    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._urlSegment = urlSegment;
    this._lastPathIndex = lastPathIndex;
    this._resolve = resolve;
  }
  /** The root of the router state */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ActivatedRouteSnapshot, [{
    key: "root",
    get: function get() {
      return this._routerState.root;
    }
    /** The parent of this route in the router state tree */

  }, {
    key: "parent",
    get: function get() {
      return this._routerState.parent(this);
    }
    /** The first child of this route in the router state tree */

  }, {
    key: "firstChild",
    get: function get() {
      return this._routerState.firstChild(this);
    }
    /** The children of this route in the router state tree */

  }, {
    key: "children",
    get: function get() {
      return this._routerState.children(this);
    }
    /** The path from the root of the router state tree to this route */

  }, {
    key: "pathFromRoot",
    get: function get() {
      return this._routerState.pathFromRoot(this);
    }
  }, {
    key: "paramMap",
    get: function get() {
      if (!this._paramMap) {
        this._paramMap = convertToParamMap(this.params);
      }

      return this._paramMap;
    }
  }, {
    key: "queryParamMap",
    get: function get() {
      if (!this._queryParamMap) {
        this._queryParamMap = convertToParamMap(this.queryParams);
      }

      return this._queryParamMap;
    }
  }, {
    key: "toString",
    value: function toString() {
      var url = this.url.map(function (segment) {
        return segment.toString();
      }).join('/');
      var matched = this.routeConfig ? this.routeConfig.path : '';
      return "Route(url:'".concat(url, "', path:'").concat(matched, "')");
    }
  }]);

  return ActivatedRouteSnapshot;
}();
/**
 * @description
 *
 * Represents the state of the router at a moment in time.
 *
 * This is a tree of activated route snapshots. Every node in this tree knows about
 * the "consumed" URL segments, the extracted parameters, and the resolved data.
 *
 * The following example shows how a component is initialized with information
 * from the snapshot of the root node's state at the time of creation.
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const snapshot: RouterStateSnapshot = state.snapshot;
 *     const root: ActivatedRouteSnapshot = snapshot.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * @publicApi
 */


var RouterStateSnapshot = /*#__PURE__*/function (_Tree2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(RouterStateSnapshot, _Tree2);

  var _super11 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(RouterStateSnapshot);

  /** @internal */
  function RouterStateSnapshot(
  /** The url from which this snapshot was created */
  url, root) {
    var _this12;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterStateSnapshot);

    _this12 = _super11.call(this, root);
    _this12.url = url;
    setRouterState((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__.default)(_this12), root);
    return _this12;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterStateSnapshot, [{
    key: "toString",
    value: function toString() {
      return serializeNode(this._root);
    }
  }]);

  return RouterStateSnapshot;
}(Tree);

function setRouterState(state, node) {
  node.value._routerState = state;
  node.children.forEach(function (c) {
    return setRouterState(state, c);
  });
}

function serializeNode(node) {
  var c = node.children.length > 0 ? " { ".concat(node.children.map(serializeNode).join(', '), " } ") : '';
  return "".concat(node.value).concat(c);
}
/**
 * The expectation is that the activate route is created with the right set of parameters.
 * So we push new values into the observables only when they are not the initial values.
 * And we detect that by checking if the snapshot field is set.
 */


function advanceActivatedRoute(route) {
  if (route.snapshot) {
    var currentSnapshot = route.snapshot;
    var nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;

    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParams.next(nextSnapshot.queryParams);
    }

    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragment.next(nextSnapshot.fragment);
    }

    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.params.next(nextSnapshot.params);
    }

    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.url.next(nextSnapshot.url);
    }

    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.data.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot; // this is for resolved data

    route.data.next(route._futureSnapshot.data);
  }
}

function equalParamsAndUrlSegments(a, b) {
  var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  var parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function createRouterState(routeReuseStrategy, curr, prevState) {
  var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
  return new RouterState(root, curr);
}

function createNode(routeReuseStrategy, curr, prevState) {
  // reuse an activated route that is currently displayed on the screen
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    var value = prevState.value;
    value._futureSnapshot = curr.value;
    var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      // retrieve an activated route that is used to be displayed, but is not currently displayed
      var detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);

      if (detachedRouteHandle !== null) {
        var _tree = detachedRouteHandle.route;
        setFutureSnapshotsOfActivatedRoutes(curr, _tree);
        return _tree;
      }
    }

    var _value = createActivatedRoute(curr.value);

    var _children2 = curr.children.map(function (c) {
      return createNode(routeReuseStrategy, c);
    });

    return new TreeNode(_value, _children2);
  }
}

function setFutureSnapshotsOfActivatedRoutes(curr, result) {
  if (curr.value.routeConfig !== result.value.routeConfig) {
    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
  }

  if (curr.children.length !== result.children.length) {
    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
  }

  result.value._futureSnapshot = curr.value;

  for (var i = 0; i < curr.children.length; ++i) {
    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
  }
}

function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map(function (child) {
    var _iterator3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(prevState.children),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var p = _step3.value;

        if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
          return createNode(routeReuseStrategy, child, p);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return createNode(routeReuseStrategy, child);
  });
}

function createActivatedRoute(c) {
  return new ActivatedRoute(new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(c.url), new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(c.params), new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(c.queryParams), new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(c.fragment), new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(c.data), c.outlet, c.component, c);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function _createUrlTree(route, urlTree, commands, queryParams, fragment) {
  if (commands.length === 0) {
    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
  }

  var nav = computeNavigation(commands);

  if (nav.toRoot()) {
    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
  }

  var startingPosition = findStartingPosition(nav, urlTree, route);
  var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}

function isMatrixParams(command) {
  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
}
/**
 * Determines if a given command has an `outlets` map. When we encounter a command
 * with an outlets k/v map, we need to apply each outlet individually to the existing segment.
 */


function isCommandWithOutlets(command) {
  return typeof command === 'object' && command != null && command.outlets;
}

function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
  var qp = {};

  if (queryParams) {
    forEach(queryParams, function (value, name) {
      qp[name] = Array.isArray(value) ? value.map(function (v) {
        return "".concat(v);
      }) : "".concat(value);
    });
  }

  if (urlTree.root === oldSegmentGroup) {
    return new UrlTree(newSegmentGroup, qp, fragment);
  }

  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
}

function replaceSegment(current, oldSegment, newSegment) {
  var children = {};
  forEach(current.children, function (c, outletName) {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}

var Navigation = /*#__PURE__*/function () {
  function Navigation(isAbsolute, numberOfDoubleDots, commands) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Navigation);

    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;

    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new Error('Root segment cannot have matrix parameters');
    }

    var cmdWithOutlet = commands.find(isCommandWithOutlets);

    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {
      throw new Error('{outlets:{}} has to be the last command');
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Navigation, [{
    key: "toRoot",
    value: function toRoot() {
      return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
    }
  }]);

  return Navigation;
}();
/** Transforms commands to a normalized `Navigation` */


function computeNavigation(commands) {
  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {
    return new Navigation(true, 0, commands);
  }

  var numberOfDoubleDots = 0;
  var isAbsolute = false;
  var res = commands.reduce(function (res, cmd, cmdIdx) {
    if (typeof cmd === 'object' && cmd != null) {
      if (cmd.outlets) {
        var outlets = {};
        forEach(cmd.outlets, function (commands, name) {
          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;
        });
        return [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(res), [{
          outlets: outlets
        }]);
      }

      if (cmd.segmentPath) {
        return [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(res), [cmd.segmentPath]);
      }
    }

    if (!(typeof cmd === 'string')) {
      return [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(res), [cmd]);
    }

    if (cmdIdx === 0) {
      cmd.split('/').forEach(function (urlPart, partIndex) {
        if (partIndex == 0 && urlPart === '.') {// skip './a'
        } else if (partIndex == 0 && urlPart === '') {
          //  '/a'
          isAbsolute = true;
        } else if (urlPart === '..') {
          //  '../a'
          numberOfDoubleDots++;
        } else if (urlPart != '') {
          res.push(urlPart);
        }
      });
      return res;
    }

    return [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(res), [cmd]);
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}

var Position = function Position(segmentGroup, processChildren, index) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Position);

  this.segmentGroup = segmentGroup;
  this.processChildren = processChildren;
  this.index = index;
};

function findStartingPosition(nav, tree, route) {
  if (nav.isAbsolute) {
    return new Position(tree.root, true, 0);
  }

  if (route.snapshot._lastPathIndex === -1) {
    var segmentGroup = route.snapshot._urlSegment; // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children
    // see issue #26224, #13011, #35687
    // However, if the ActivatedRoute is the root we should process children like above.

    var processChildren = segmentGroup === tree.root;
    return new Position(segmentGroup, processChildren, 0);
  }

  var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  var index = route.snapshot._lastPathIndex + modifier;
  return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}

function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
  var g = group;
  var ci = index;
  var dd = numberOfDoubleDots;

  while (dd > ci) {
    dd -= ci;
    g = g.parent;

    if (!g) {
      throw new Error('Invalid number of \'../\'');
    }

    ci = g.segments.length;
  }

  return new Position(g, false, ci - dd);
}

function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }

  return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, PRIMARY_OUTLET, commands);
}

function updateSegmentGroup(segmentGroup, startIndex, commands) {
  if (!segmentGroup) {
    segmentGroup = new UrlSegmentGroup([], {});
  }

  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }

  var m = prefixedWith(segmentGroup, startIndex, commands);
  var slicedCommands = commands.slice(m.commandIndex);

  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}

function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    var outlets = getOutlets(commands);
    var children = {};
    forEach(outlets, function (commands, outlet) {
      if (typeof commands === 'string') {
        commands = [commands];
      }

      if (commands !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
      }
    });
    forEach(segmentGroup.children, function (child, childOutlet) {
      if (outlets[childOutlet] === undefined) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}

function prefixedWith(segmentGroup, startIndex, commands) {
  var currentCommandIndex = 0;
  var currentPathIndex = startIndex;
  var noMatch = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };

  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length) return noMatch;
    var path = segmentGroup.segments[currentPathIndex];
    var command = commands[currentCommandIndex]; // Do not try to consume command as part of the prefixing if it has outlets because it can
    // contain outlets other than the one being processed. Consuming the outlets command would
    // result in other outlets being ignored.

    if (isCommandWithOutlets(command)) {
      break;
    }

    var curr = "".concat(command);
    var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === undefined) break;

    if (curr && next && typeof next === 'object' && next.outlets === undefined) {
      if (!compare(curr, next, path)) return noMatch;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path)) return noMatch;
      currentCommandIndex++;
    }

    currentPathIndex++;
  }

  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}

function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  var paths = segmentGroup.segments.slice(0, startIndex);
  var i = 0;

  while (i < commands.length) {
    var command = commands[i];

    if (isCommandWithOutlets(command)) {
      var children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    } // if we start with an object literal, we need to reuse the path part from the segment


    if (i === 0 && isMatrixParams(commands[0])) {
      var p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify(commands[0])));
      i++;
      continue;
    }

    var curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : "".concat(command);
    var next = i < commands.length - 1 ? commands[i + 1] : null;

    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }

  return new UrlSegmentGroup(paths, {});
}

function createNewSegmentChildren(outlets) {
  var children = {};
  forEach(outlets, function (commands, outlet) {
    if (typeof commands === 'string') {
      commands = [commands];
    }

    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}

function stringify(params) {
  var res = {};
  forEach(params, function (v, k) {
    return res[k] = "".concat(v);
  });
  return res;
}

function compare(path, params, segment) {
  return path == segment.path && shallowEqual(params, segment.parameters);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var activateRoutes = function activateRoutes(rootContexts, routeReuseStrategy, forwardEvent) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (t) {
    new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent).activate(rootContexts);
    return t;
  });
};

var ActivateRoutes = /*#__PURE__*/function () {
  function ActivateRoutes(routeReuseStrategy, futureState, currState, forwardEvent) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ActivateRoutes);

    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ActivateRoutes, [{
    key: "activate",
    value: function activate(parentContexts) {
      var futureRoot = this.futureState._root;
      var currRoot = this.currState ? this.currState._root : null;
      this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
      advanceActivatedRoute(this.futureState.root);
      this.activateChildRoutes(futureRoot, currRoot, parentContexts);
    } // De-activate the child route that are not re-used for the future state

  }, {
    key: "deactivateChildRoutes",
    value: function deactivateChildRoutes(futureNode, currNode, contexts) {
      var _this13 = this;

      var children = nodeChildrenAsMap(currNode); // Recurse on the routes active in the future state to de-activate deeper children

      futureNode.children.forEach(function (futureChild) {
        var childOutletName = futureChild.value.outlet;

        _this13.deactivateRoutes(futureChild, children[childOutletName], contexts);

        delete children[childOutletName];
      }); // De-activate the routes that will not be re-used

      forEach(children, function (v, childName) {
        _this13.deactivateRouteAndItsChildren(v, contexts);
      });
    }
  }, {
    key: "deactivateRoutes",
    value: function deactivateRoutes(futureNode, currNode, parentContext) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;

      if (future === curr) {
        // Reusing the node, check to see if the children need to be de-activated
        if (future.component) {
          // If we have a normal route, we need to go through an outlet.
          var context = parentContext.getContext(future.outlet);

          if (context) {
            this.deactivateChildRoutes(futureNode, currNode, context.children);
          }
        } else {
          // if we have a componentless route, we recurse but keep the same outlet map.
          this.deactivateChildRoutes(futureNode, currNode, parentContext);
        }
      } else {
        if (curr) {
          // Deactivate the current route which will not be re-used
          this.deactivateRouteAndItsChildren(currNode, parentContext);
        }
      }
    }
  }, {
    key: "deactivateRouteAndItsChildren",
    value: function deactivateRouteAndItsChildren(route, parentContexts) {
      if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
        this.detachAndStoreRouteSubtree(route, parentContexts);
      } else {
        this.deactivateRouteAndOutlet(route, parentContexts);
      }
    }
  }, {
    key: "detachAndStoreRouteSubtree",
    value: function detachAndStoreRouteSubtree(route, parentContexts) {
      var context = parentContexts.getContext(route.value.outlet);

      if (context && context.outlet) {
        var componentRef = context.outlet.detach();
        var contexts = context.children.onOutletDeactivated();
        this.routeReuseStrategy.store(route.value.snapshot, {
          componentRef: componentRef,
          route: route,
          contexts: contexts
        });
      }
    }
  }, {
    key: "deactivateRouteAndOutlet",
    value: function deactivateRouteAndOutlet(route, parentContexts) {
      var context = parentContexts.getContext(route.value.outlet); // The context could be `null` if we are on a componentless route but there may still be
      // children that need deactivating.

      var contexts = context && route.value.component ? context.children : parentContexts;
      var children = nodeChildrenAsMap(route);

      for (var _i = 0, _Object$keys = Object.keys(children); _i < _Object$keys.length; _i++) {
        var childOutlet = _Object$keys[_i];
        this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
      }

      if (context && context.outlet) {
        // Destroy the component
        context.outlet.deactivate(); // Destroy the contexts for all the outlets that were in the component

        context.children.onOutletDeactivated(); // Clear the information about the attached component on the context but keep the reference to
        // the outlet.

        context.attachRef = null;
        context.resolver = null;
        context.route = null;
      }
    }
  }, {
    key: "activateChildRoutes",
    value: function activateChildRoutes(futureNode, currNode, contexts) {
      var _this14 = this;

      var children = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function (c) {
        _this14.activateRoutes(c, children[c.value.outlet], contexts);

        _this14.forwardEvent(new ActivationEnd(c.value.snapshot));
      });

      if (futureNode.children.length) {
        this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
      }
    }
  }, {
    key: "activateRoutes",
    value: function activateRoutes(futureNode, currNode, parentContexts) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      advanceActivatedRoute(future); // reusing the node

      if (future === curr) {
        if (future.component) {
          // If we have a normal route, we need to go through an outlet.
          var context = parentContexts.getOrCreateContext(future.outlet);
          this.activateChildRoutes(futureNode, currNode, context.children);
        } else {
          // if we have a componentless route, we recurse but keep the same outlet map.
          this.activateChildRoutes(futureNode, currNode, parentContexts);
        }
      } else {
        if (future.component) {
          // if we have a normal route, we need to place the component into the outlet and recurse.
          var _context = parentContexts.getOrCreateContext(future.outlet);

          if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
            var stored = this.routeReuseStrategy.retrieve(future.snapshot);
            this.routeReuseStrategy.store(future.snapshot, null);

            _context.children.onOutletReAttached(stored.contexts);

            _context.attachRef = stored.componentRef;
            _context.route = stored.route.value;

            if (_context.outlet) {
              // Attach right away when the outlet has already been instantiated
              // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
              _context.outlet.attach(stored.componentRef, stored.route.value);
            }

            advanceActivatedRouteNodeAndItsChildren(stored.route);
          } else {
            var config = parentLoadedConfig(future.snapshot);
            var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
            _context.attachRef = null;
            _context.route = future;
            _context.resolver = cmpFactoryResolver;

            if (_context.outlet) {
              // Activate the outlet when it has already been instantiated
              // Otherwise it will get activated from its `ngOnInit` when instantiated
              _context.outlet.activateWith(future, cmpFactoryResolver);
            }

            this.activateChildRoutes(futureNode, null, _context.children);
          }
        } else {
          // if we have a componentless route, we recurse but keep the same outlet map.
          this.activateChildRoutes(futureNode, null, parentContexts);
        }
      }
    }
  }]);

  return ActivateRoutes;
}();

function advanceActivatedRouteNodeAndItsChildren(node) {
  advanceActivatedRoute(node.value);
  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
}

function parentLoadedConfig(snapshot) {
  for (var s = snapshot.parent; s; s = s.parent) {
    var route = s.routeConfig;
    if (route && route._loadedConfig) return route._loadedConfig;
    if (route && route.component) return null;
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var LoadedRouterConfig = function LoadedRouterConfig(routes, module) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, LoadedRouterConfig);

  this.routes = routes;
  this.module = module;
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Simple function check, but generic so type inference will flow. Example:
 *
 * function product(a: number, b: number) {
 *   return a * b;
 * }
 *
 * if (isFunction<product>(fn)) {
 *   return fn(1, 2);
 * } else {
 *   throw "Must provide the `product` function";
 * }
 */


function isFunction(v) {
  return typeof v === 'function';
}

function isBoolean(v) {
  return typeof v === 'boolean';
}

function isUrlTree(v) {
  return v instanceof UrlTree;
}

function isCanLoad(guard) {
  return guard && isFunction(guard.canLoad);
}

function isCanActivate(guard) {
  return guard && isFunction(guard.canActivate);
}

function isCanActivateChild(guard) {
  return guard && isFunction(guard.canActivateChild);
}

function isCanDeactivate(guard) {
  return guard && isFunction(guard.canDeactivate);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var INITIAL_VALUE = Symbol('INITIAL_VALUE');

function prioritizedGuardValue() {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (obs) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)(obs.map(function (o) {
      return o.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.startWith)(INITIAL_VALUE));
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.scan)(function (acc, list) {
      var isPending = false;
      return list.reduce(function (innerAcc, val, i) {
        if (innerAcc !== INITIAL_VALUE) return innerAcc; // Toggle pending flag if any values haven't been set yet

        if (val === INITIAL_VALUE) isPending = true; // Any other return values are only valid if we haven't yet hit a pending
        // call. This guarantees that in the case of a guard at the bottom of the
        // tree that returns a redirect, we will wait for the higher priority
        // guard at the top to finish before performing the redirect.

        if (!isPending) {
          // Early return when we hit a `false` value as that should always
          // cancel navigation
          if (val === false) return val;

          if (i === list.length - 1 || isUrlTree(val)) {
            return val;
          }
        }

        return innerAcc;
      }, acc);
    }, INITIAL_VALUE), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (item) {
      return item !== INITIAL_VALUE;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (item) {
      return isUrlTree(item) ? item : item === true;
    }), //
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.take)(1));
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This component is used internally within the router to be a placeholder when an empty
 * router-outlet is needed. For example, with a config such as:
 *
 * `{path: 'parent', outlet: 'nav', children: [...]}`
 *
 * In order to render, there needs to be a component on this config, which will default
 * to this `EmptyOutletComponent`.
 */


var ɵEmptyOutletComponent = function ɵEmptyOutletComponent() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ɵEmptyOutletComponent);
};

ɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) {
  return new (t || ɵEmptyOutletComponent)();
};

ɵEmptyOutletComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineComponent"]({
  type: ɵEmptyOutletComponent,
  selectors: [["ng-component"]],
  decls: 1,
  vars: 0,
  template: function ɵEmptyOutletComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](0, "router-outlet");
    }
  },
  directives: function directives() {
    return [RouterOutlet];
  },
  encapsulation: 2
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](ɵEmptyOutletComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Component,
    args: [{
      template: "<router-outlet></router-outlet>"
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function validateConfig(config) {
  var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  // forEach doesn't iterate undefined values
  for (var i = 0; i < config.length; i++) {
    var route = config[i];
    var fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath);
  }
}

function validateNode(route, fullPath) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (!route) {
      throw new Error("\n      Invalid configuration of route '".concat(fullPath, "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    "));
    }

    if (Array.isArray(route)) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': Array cannot be specified"));
    }

    if (!route.component && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': a componentless route without children or loadChildren cannot have a named outlet set"));
    }

    if (route.redirectTo && route.children) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and children cannot be used together"));
    }

    if (route.redirectTo && route.loadChildren) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and loadChildren cannot be used together"));
    }

    if (route.children && route.loadChildren) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': children and loadChildren cannot be used together"));
    }

    if (route.redirectTo && route.component) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and component cannot be used together"));
    }

    if (route.redirectTo && route.canActivate) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': redirectTo and canActivate cannot be used together. Redirects happen before activation ") + "so canActivate will never be executed.");
    }

    if (route.path && route.matcher) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': path and matcher cannot be used together"));
    }

    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "'. One of the following must be provided: component, redirectTo, children or loadChildren"));
    }

    if (route.path === void 0 && route.matcher === void 0) {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': routes must have either a path or a matcher specified"));
    }

    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': path cannot start with a slash"));
    }

    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
      throw new Error("Invalid configuration of route '{path: \"".concat(fullPath, "\", redirectTo: \"").concat(route.redirectTo, "\"}': please provide 'pathMatch'. ").concat(exp));
    }

    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
      throw new Error("Invalid configuration of route '".concat(fullPath, "': pathMatch can only be set to 'prefix' or 'full'"));
    }
  }

  if (route.children) {
    validateConfig(route.children, fullPath);
  }
}

function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }

  if (!parentPath && !currentRoute.path) {
    return '';
  } else if (parentPath && !currentRoute.path) {
    return "".concat(parentPath, "/");
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return "".concat(parentPath, "/").concat(currentRoute.path);
  }
}
/**
 * Makes a copy of the config and adds any default required properties.
 */


function standardizeConfig(r) {
  var children = r.children && r.children.map(standardizeConfig);
  var c = children ? Object.assign(Object.assign({}, r), {
    children: children
  }) : Object.assign({}, r);

  if (!c.component && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = ɵEmptyOutletComponent;
  }

  return c;
}
/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */


function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
/**
 * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.
 * The order of the configs is otherwise preserved.
 */


function sortByMatchingOutlets(routes, outletName) {
  var sortedConfig = routes.filter(function (r) {
    return getOutlet(r) === outletName;
  });
  sortedConfig.push.apply(sortedConfig, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(routes.filter(function (r) {
    return getOutlet(r) !== outletName;
  })));
  return sortedConfig;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var noMatch = {
  matched: false,
  consumedSegments: [],
  lastChild: 0,
  parameters: {},
  positionalParamSegments: {}
};

function match(segmentGroup, route, segments) {
  var _a;

  if (route.path === '') {
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
      return Object.assign({}, noMatch);
    }

    return {
      matched: true,
      consumedSegments: [],
      lastChild: 0,
      parameters: {},
      positionalParamSegments: {}
    };
  }

  var matcher = route.matcher || defaultUrlMatcher;
  var res = matcher(segments, segmentGroup, route);
  if (!res) return Object.assign({}, noMatch);
  var posParams = {};
  forEach(res.posParams, function (v, k) {
    posParams[k] = v.path;
  });
  var parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    lastChild: res.consumed.length,
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters: parameters,
    positionalParamSegments: (_a = res.posParams) !== null && _a !== void 0 ? _a : {}
  };
}

function split(segmentGroup, consumedSegments, slicedSegments, config) {
  var relativeLinkResolution = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'corrected';

  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
    var _s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));

    _s._sourceSegment = segmentGroup;
    _s._segmentIndexShift = consumedSegments.length;
    return {
      segmentGroup: _s,
      slicedSegments: []
    };
  }

  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
    var _s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));

    _s2._sourceSegment = segmentGroup;
    _s2._segmentIndexShift = consumedSegments.length;
    return {
      segmentGroup: _s2,
      slicedSegments: slicedSegments
    };
  }

  var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  s._sourceSegment = segmentGroup;
  s._segmentIndexShift = consumedSegments.length;
  return {
    segmentGroup: s,
    slicedSegments: slicedSegments
  };
}

function addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {
  var res = {};

  var _iterator4 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(routes),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var r = _step4.value;

      if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;

        if (relativeLinkResolution === 'legacy') {
          s._segmentIndexShift = segmentGroup.segments.length;
        } else {
          s._segmentIndexShift = consumedSegments.length;
        }

        res[getOutlet(r)] = s;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return Object.assign(Object.assign({}, children), res);
}

function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
  var res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  primarySegment._sourceSegment = segmentGroup;
  primarySegment._segmentIndexShift = consumedSegments.length;

  var _iterator5 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(routes),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var r = _step5.value;

      if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        res[getOutlet(r)] = s;
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  return res;
}

function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
  return routes.some(function (r) {
    return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET;
  });
}

function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
  return routes.some(function (r) {
    return emptyPathMatch(segmentGroup, slicedSegments, r);
  });
}

function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
    return false;
  }

  return r.path === '';
}
/**
 * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without
 * verifying that its children are a full match for the remainder of the `rawSegment` children as
 * well.
 */


function isImmediateMatch(route, rawSegment, segments, outlet) {
  // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to
  // a config like
  // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`
  // or even
  // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`
  //
  // The exception here is when the segment outlet is for the primary outlet. This would
  // result in a match inside the named outlet because all children there are written as primary
  // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like
  // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`
  // This should only match if the url is `/(x:b)`.
  if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
    return false;
  }

  if (route.path === '**') {
    return true;
  }

  return match(rawSegment, route, segments).matched;
}

function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NoMatch = function NoMatch(segmentGroup) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NoMatch);

  this.segmentGroup = segmentGroup || null;
};

var AbsoluteRedirect = function AbsoluteRedirect(urlTree) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, AbsoluteRedirect);

  this.urlTree = urlTree;
};

function noMatch$1(segmentGroup) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_19__.Observable(function (obs) {
    return obs.error(new NoMatch(segmentGroup));
  });
}

function absoluteRedirect(newTree) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_19__.Observable(function (obs) {
    return obs.error(new AbsoluteRedirect(newTree));
  });
}

function namedOutletsRedirect(redirectTo) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_19__.Observable(function (obs) {
    return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '".concat(redirectTo, "'")));
  });
}

function canLoadFails(route) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_19__.Observable(function (obs) {
    return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '".concat(route.path, "'\" returned false")));
  });
}
/**
 * Returns the `UrlTree` with the redirection applied.
 *
 * Lazy modules are loaded along the way.
 */


function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
}

var ApplyRedirects = /*#__PURE__*/function () {
  function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ApplyRedirects);

    this.configLoader = configLoader;
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
    this.config = config;
    this.allowRedirects = true;
    this.ngModule = moduleInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleRef);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ApplyRedirects, [{
    key: "apply",
    value: function apply() {
      var _this15 = this;

      var splitGroup = split(this.urlTree.root, [], [], this.config).segmentGroup; // TODO(atscott): creating a new segment removes the _sourceSegment _segmentIndexShift, which is
      // only necessary to prevent failures in tests which assert exact object matches. The `split` is
      // now shared between `applyRedirects` and `recognize` but only the `recognize` step needs these
      // properties. Before the implementations were merged, the `applyRedirects` would not assign
      // them. We should be able to remove this logic as a "breaking change" but should do some more
      // investigation into the failures first.

      var rootSegmentGroup = new UrlSegmentGroup(splitGroup.segments, splitGroup.children);
      var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, rootSegmentGroup, PRIMARY_OUTLET);
      var urlTrees$ = expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (rootSegmentGroup) {
        return _this15.createUrlTree(squashSegmentGroup(rootSegmentGroup), _this15.urlTree.queryParams, _this15.urlTree.fragment);
      }));
      return urlTrees$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (e) {
        if (e instanceof AbsoluteRedirect) {
          // After an absolute redirect we do not apply any more redirects!
          // If this implementation changes, update the documentation note in `redirectTo`.
          _this15.allowRedirects = false; // we need to run matching, so we can fetch all lazy-loaded modules

          return _this15.match(e.urlTree);
        }

        if (e instanceof NoMatch) {
          throw _this15.noMatchError(e);
        }

        throw e;
      }));
    }
  }, {
    key: "match",
    value: function match(tree) {
      var _this16 = this;

      var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
      var mapped$ = expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (rootSegmentGroup) {
        return _this16.createUrlTree(squashSegmentGroup(rootSegmentGroup), tree.queryParams, tree.fragment);
      }));
      return mapped$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (e) {
        if (e instanceof NoMatch) {
          throw _this16.noMatchError(e);
        }

        throw e;
      }));
    }
  }, {
    key: "noMatchError",
    value: function noMatchError(e) {
      return new Error("Cannot match any routes. URL Segment: '".concat(e.segmentGroup, "'"));
    }
  }, {
    key: "createUrlTree",
    value: function createUrlTree(rootCandidate, queryParams, fragment) {
      var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, PRIMARY_OUTLET, rootCandidate)) : rootCandidate;
      return new UrlTree(root, queryParams, fragment);
    }
  }, {
    key: "expandSegmentGroup",
    value: function expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return this.expandChildren(ngModule, routes, segmentGroup).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (children) {
          return new UrlSegmentGroup([], children);
        }));
      }

      return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
    } // Recursively expand segment groups for all the child outlets

  }, {
    key: "expandChildren",
    value: function expandChildren(ngModule, routes, segmentGroup) {
      var _this17 = this;

      // Expand outlets one at a time, starting with the primary outlet. We need to do it this way
      // because an absolute redirect from the primary outlet takes precedence.
      var childOutlets = [];

      for (var _i2 = 0, _Object$keys2 = Object.keys(segmentGroup.children); _i2 < _Object$keys2.length; _i2++) {
        var child = _Object$keys2[_i2];

        if (child === 'primary') {
          childOutlets.unshift(child);
        } else {
          childOutlets.push(child);
        }
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(childOutlets).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.concatMap)(function (childOutlet) {
        var child = segmentGroup.children[childOutlet]; // Sort the routes so routes with outlets that match the segment appear
        // first, followed by routes for other outlets, which might match if they have an
        // empty path.

        var sortedRoutes = sortByMatchingOutlets(routes, childOutlet);
        return _this17.expandSegmentGroup(ngModule, sortedRoutes, child, childOutlet).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (s) {
          return {
            segment: s,
            outlet: childOutlet
          };
        }));
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.scan)(function (children, expandedChild) {
        children[expandedChild.outlet] = expandedChild.segment;
        return children;
      }, {}), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.last)());
    }
  }, {
    key: "expandSegment",
    value: function expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
      var _this18 = this;

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(routes).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.concatMap)(function (r) {
        var expanded$ = _this18.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);

        return expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (e) {
          if (e instanceof NoMatch) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null);
          }

          throw e;
        }));
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)(function (s) {
        return !!s;
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (e, _) {
        if (e instanceof rxjs__WEBPACK_IMPORTED_MODULE_24__.EmptyError || e.name === 'EmptyError') {
          if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(new UrlSegmentGroup([], {}));
          }

          throw new NoMatch(segmentGroup);
        }

        throw e;
      }));
    }
  }, {
    key: "expandSegmentAgainstRoute",
    value: function expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
      if (!isImmediateMatch(route, segmentGroup, paths, outlet)) {
        return noMatch$1(segmentGroup);
      }

      if (route.redirectTo === undefined) {
        return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths, outlet);
      }

      if (allowRedirects && this.allowRedirects) {
        return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
      }

      return noMatch$1(segmentGroup);
    }
  }, {
    key: "expandSegmentAgainstRouteUsingRedirect",
    value: function expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
      if (route.path === '**') {
        return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
      }

      return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
    }
  }, {
    key: "expandWildCardWithParamsAgainstRouteUsingRedirect",
    value: function expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {
      var _this19 = this;

      var newTree = this.applyRedirectCommands([], route.redirectTo, {});

      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newTree);
      }

      return this.lineralizeSegments(route, newTree).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (newSegments) {
        var group = new UrlSegmentGroup(newSegments, {});
        return _this19.expandSegment(ngModule, group, routes, newSegments, outlet, false);
      }));
    }
  }, {
    key: "expandRegularSegmentAgainstRouteUsingRedirect",
    value: function expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
      var _this20 = this;

      var _match = match(segmentGroup, route, segments),
          matched = _match.matched,
          consumedSegments = _match.consumedSegments,
          lastChild = _match.lastChild,
          positionalParamSegments = _match.positionalParamSegments;

      if (!matched) return noMatch$1(segmentGroup);
      var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);

      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newTree);
      }

      return this.lineralizeSegments(route, newTree).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (newSegments) {
        return _this20.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
      }));
    }
  }, {
    key: "matchSegmentAgainstRoute",
    value: function matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments, outlet) {
      var _this21 = this;

      if (route.path === '**') {
        if (route.loadChildren) {
          var loaded$ = route._loadedConfig ? (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(route._loadedConfig) : this.configLoader.load(ngModule.injector, route);
          return loaded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (cfg) {
            route._loadedConfig = cfg;
            return new UrlSegmentGroup(segments, {});
          }));
        }

        return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(new UrlSegmentGroup(segments, {}));
      }

      var _match2 = match(rawSegmentGroup, route, segments),
          matched = _match2.matched,
          consumedSegments = _match2.consumedSegments,
          lastChild = _match2.lastChild;

      if (!matched) return noMatch$1(rawSegmentGroup);
      var rawSlicedSegments = segments.slice(lastChild);
      var childConfig$ = this.getChildConfig(ngModule, route, segments);
      return childConfig$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (routerConfig) {
        var childModule = routerConfig.module;
        var childConfig = routerConfig.routes;

        var _split = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig),
            splitSegmentGroup = _split.segmentGroup,
            slicedSegments = _split.slicedSegments; // See comment on the other call to `split` about why this is necessary.


        var segmentGroup = new UrlSegmentGroup(splitSegmentGroup.segments, splitSegmentGroup.children);

        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
          var _expanded$ = _this21.expandChildren(childModule, childConfig, segmentGroup);

          return _expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (children) {
            return new UrlSegmentGroup(consumedSegments, children);
          }));
        }

        if (childConfig.length === 0 && slicedSegments.length === 0) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(new UrlSegmentGroup(consumedSegments, {}));
        }

        var matchedOnOutlet = getOutlet(route) === outlet;

        var expanded$ = _this21.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true);

        return expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (cs) {
          return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);
        }));
      }));
    }
  }, {
    key: "getChildConfig",
    value: function getChildConfig(ngModule, route, segments) {
      var _this22 = this;

      if (route.children) {
        // The children belong to the same module
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(new LoadedRouterConfig(route.children, ngModule));
      }

      if (route.loadChildren) {
        // lazy children belong to the loaded module
        if (route._loadedConfig !== undefined) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(route._loadedConfig);
        }

        return this.runCanLoadGuards(ngModule.injector, route, segments).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (shouldLoadResult) {
          if (shouldLoadResult) {
            return _this22.configLoader.load(ngModule.injector, route).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (cfg) {
              route._loadedConfig = cfg;
              return cfg;
            }));
          }

          return canLoadFails(route);
        }));
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(new LoadedRouterConfig([], ngModule));
    }
  }, {
    key: "runCanLoadGuards",
    value: function runCanLoadGuards(moduleInjector, route, segments) {
      var _this23 = this;

      var canLoad = route.canLoad;
      if (!canLoad || canLoad.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(true);
      var canLoadObservables = canLoad.map(function (injectionToken) {
        var guard = moduleInjector.get(injectionToken);
        var guardVal;

        if (isCanLoad(guard)) {
          guardVal = guard.canLoad(route, segments);
        } else if (isFunction(guard)) {
          guardVal = guard(route, segments);
        } else {
          throw new Error('Invalid CanLoad guard');
        }

        return wrapIntoObservable(guardVal);
      });
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(canLoadObservables).pipe(prioritizedGuardValue(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (result) {
        if (!isUrlTree(result)) return;
        var error = navigationCancelingError("Redirecting to \"".concat(_this23.urlSerializer.serialize(result), "\""));
        error.url = result;
        throw error;
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (result) {
        return result === true;
      }));
    }
  }, {
    key: "lineralizeSegments",
    value: function lineralizeSegments(route, urlTree) {
      var res = [];
      var c = urlTree.root;

      while (true) {
        res = res.concat(c.segments);

        if (c.numberOfChildren === 0) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(res);
        }

        if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
          return namedOutletsRedirect(route.redirectTo);
        }

        c = c.children[PRIMARY_OUTLET];
      }
    }
  }, {
    key: "applyRedirectCommands",
    value: function applyRedirectCommands(segments, redirectTo, posParams) {
      return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    }
  }, {
    key: "applyRedirectCreatreUrlTree",
    value: function applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {
      var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
      return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    }
  }, {
    key: "createQueryParams",
    value: function createQueryParams(redirectToParams, actualParams) {
      var res = {};
      forEach(redirectToParams, function (v, k) {
        var copySourceValue = typeof v === 'string' && v.startsWith(':');

        if (copySourceValue) {
          var sourceName = v.substring(1);
          res[k] = actualParams[sourceName];
        } else {
          res[k] = v;
        }
      });
      return res;
    }
  }, {
    key: "createSegmentGroup",
    value: function createSegmentGroup(redirectTo, group, segments, posParams) {
      var _this24 = this;

      var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
      var children = {};
      forEach(group.children, function (child, name) {
        children[name] = _this24.createSegmentGroup(redirectTo, child, segments, posParams);
      });
      return new UrlSegmentGroup(updatedSegments, children);
    }
  }, {
    key: "createSegments",
    value: function createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
      var _this25 = this;

      return redirectToSegments.map(function (s) {
        return s.path.startsWith(':') ? _this25.findPosParam(redirectTo, s, posParams) : _this25.findOrReturn(s, actualSegments);
      });
    }
  }, {
    key: "findPosParam",
    value: function findPosParam(redirectTo, redirectToUrlSegment, posParams) {
      var pos = posParams[redirectToUrlSegment.path.substring(1)];
      if (!pos) throw new Error("Cannot redirect to '".concat(redirectTo, "'. Cannot find '").concat(redirectToUrlSegment.path, "'."));
      return pos;
    }
  }, {
    key: "findOrReturn",
    value: function findOrReturn(redirectToUrlSegment, actualSegments) {
      var idx = 0;

      var _iterator6 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(actualSegments),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var s = _step6.value;

          if (s.path === redirectToUrlSegment.path) {
            actualSegments.splice(idx);
            return s;
          }

          idx++;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return redirectToUrlSegment;
    }
  }]);

  return ApplyRedirects;
}();
/**
 * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.
 *
 * When a segment group has only one child which is a primary outlet, merges that child into the
 * parent. That is, the child segment group's segments are merged into the `s` and the child's
 * children become the children of `s`. Think of this like a 'squash', merging the child segment
 * group into the parent.
 */


function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    var c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }

  return s;
}
/**
 * Recursively merges primary segment children into their parents and also drops empty children
 * (those which have no segments and no children themselves). The latter prevents serializing a
 * group into something like `/a(aux:)`, where `aux` is an empty child segment.
 */


function squashSegmentGroup(segmentGroup) {
  var newChildren = {};

  for (var _i3 = 0, _Object$keys3 = Object.keys(segmentGroup.children); _i3 < _Object$keys3.length; _i3++) {
    var childOutlet = _Object$keys3[_i3];
    var child = segmentGroup.children[childOutlet];
    var childCandidate = squashSegmentGroup(child); // don't add empty children

    if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }

  var s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (t) {
    return applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (urlAfterRedirects) {
      return Object.assign(Object.assign({}, t), {
        urlAfterRedirects: urlAfterRedirects
      });
    }));
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var CanActivate = function CanActivate(path) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, CanActivate);

  this.path = path;
  this.route = this.path[this.path.length - 1];
};

var CanDeactivate = function CanDeactivate(component, route) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, CanDeactivate);

  this.component = component;
  this.route = route;
};

function getAllRouteGuards(future, curr, parentContexts) {
  var futureRoot = future._root;
  var currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}

function getCanActivateChild(p) {
  var canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0) return null;
  return {
    node: p,
    guards: canActivateChild
  };
}

function getToken(token, snapshot, moduleInjector) {
  var config = getClosestLoadedConfig(snapshot);
  var injector = config ? config.module.injector : moduleInjector;
  return injector.get(token);
}

function getClosestLoadedConfig(snapshot) {
  if (!snapshot) return null;

  for (var s = snapshot.parent; s; s = s.parent) {
    var route = s.routeConfig;
    if (route && route._loadedConfig) return route._loadedConfig;
  }

  return null;
}

function getChildRouteGuards(futureNode, currNode, contexts, futurePath) {
  var checks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
    canDeactivateChecks: [],
    canActivateChecks: []
  };
  var prevChildren = nodeChildrenAsMap(currNode); // Process the children of the future route

  futureNode.children.forEach(function (c) {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  }); // Process any children left from the current route (not active for the future route)

  forEach(prevChildren, function (v, k) {
    return deactivateRouteAndItsChildren(v, contexts.getContext(k), checks);
  });
  return checks;
}

function getRouteGuards(futureNode, currNode, parentContexts, futurePath) {
  var checks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
    canDeactivateChecks: [],
    canActivateChecks: []
  };
  var future = futureNode.value;
  var curr = currNode ? currNode.value : null;
  var context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null; // reusing the node

  if (curr && future.routeConfig === curr.routeConfig) {
    var shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);

    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      // we need to set the data
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    } // If we have a component, we need to go through an outlet.


    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }

    if (shouldRun && context && context.outlet && context.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context, checks);
    }

    checks.canActivateChecks.push(new CanActivate(futurePath)); // If we have a component, we need to go through an outlet.

    if (future.component) {
      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }

  return checks;
}

function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === 'function') {
    return mode(curr, future);
  }

  switch (mode) {
    case 'pathParamsChange':
      return !equalPath(curr.url, future.url);

    case 'pathParamsOrQueryParamsChange':
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);

    case 'always':
      return true;

    case 'paramsOrQueryParamsChange':
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);

    case 'paramsChange':
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}

function deactivateRouteAndItsChildren(route, context, checks) {
  var children = nodeChildrenAsMap(route);
  var r = route.value;
  forEach(children, function (node, childName) {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context, checks);
    } else if (context) {
      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });

  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context && context.outlet && context.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function checkGuards(moduleInjector, forwardEvent) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (t) {
    var targetSnapshot = t.targetSnapshot,
        currentSnapshot = t.currentSnapshot,
        _t$guards = t.guards,
        canActivateChecks = _t$guards.canActivateChecks,
        canDeactivateChecks = _t$guards.canDeactivateChecks;

    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(Object.assign(Object.assign({}, t), {
        guardsResult: true
      }));
    }

    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (canDeactivate) {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) : (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(canDeactivate);
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (guardsResult) {
      return Object.assign(Object.assign({}, t), {
        guardsResult: guardsResult
      });
    }));
  });
}

function runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(checks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (check) {
    return runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector);
  }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)(function (result) {
    return result !== true;
  }, true));
}

function runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(checks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.concatMap)(function (check) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_27__.concat)(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, moduleInjector), runCanActivate(futureSnapshot, check.route, moduleInjector));
  }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)(function (result) {
    return result !== true;
  }, true));
}
/**
 * This should fire off `ActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 */


function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(true);
}
/**
 * This should fire off `ChildActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 */


function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(true);
}

function runCanActivate(futureRSS, futureARS, moduleInjector) {
  var canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(true);
  var canActivateObservables = canActivate.map(function (c) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_28__.defer)(function () {
      var guard = getToken(c, futureARS, moduleInjector);
      var observable;

      if (isCanActivate(guard)) {
        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));
      } else if (isFunction(guard)) {
        observable = wrapIntoObservable(guard(futureARS, futureRSS));
      } else {
        throw new Error('Invalid CanActivate guard');
      }

      return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)());
    });
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(canActivateObservables).pipe(prioritizedGuardValue());
}

function runCanActivateChild(futureRSS, path, moduleInjector) {
  var futureARS = path[path.length - 1];
  var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function (p) {
    return getCanActivateChild(p);
  }).filter(function (_) {
    return _ !== null;
  });
  var canActivateChildGuardsMapped = canActivateChildGuards.map(function (d) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_28__.defer)(function () {
      var guardsMapped = d.guards.map(function (c) {
        var guard = getToken(c, d.node, moduleInjector);
        var observable;

        if (isCanActivateChild(guard)) {
          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));
        } else if (isFunction(guard)) {
          observable = wrapIntoObservable(guard(futureARS, futureRSS));
        } else {
          throw new Error('Invalid CanActivateChild guard');
        }

        return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)());
      });
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}

function runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {
  var canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(true);
  var canDeactivateObservables = canDeactivate.map(function (c) {
    var guard = getToken(c, currARS, moduleInjector);
    var observable;

    if (isCanDeactivate(guard)) {
      observable = wrapIntoObservable(guard.canDeactivate(component, currARS, currRSS, futureRSS));
    } else if (isFunction(guard)) {
      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));
    } else {
      throw new Error('Invalid CanDeactivate guard');
    }

    return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.first)());
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(canDeactivateObservables).pipe(prioritizedGuardValue());
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var NoMatch$1 = function NoMatch$1() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NoMatch$1);
};

function newObservableError(e) {
  // TODO(atscott): This pattern is used throughout the router code and can be `throwError` instead.
  return new rxjs__WEBPACK_IMPORTED_MODULE_19__.Observable(function (obs) {
    return obs.error(e);
  });
}

function recognize(rootComponentType, config, urlTree, url) {
  var paramsInheritanceStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'emptyOnly';
  var relativeLinkResolution = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'legacy';

  try {
    var result = new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution).recognize();

    if (result === null) {
      return newObservableError(new NoMatch$1());
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(result);
    }
  } catch (e) {
    // Catch the potential error from recognize due to duplicate outlet matches and return as an
    // `Observable` error instead.
    return newObservableError(e);
  }
}

var Recognizer = /*#__PURE__*/function () {
  function Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Recognizer);

    this.rootComponentType = rootComponentType;
    this.config = config;
    this.urlTree = urlTree;
    this.url = url;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.relativeLinkResolution = relativeLinkResolution;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Recognizer, [{
    key: "recognize",
    value: function recognize() {
      var rootSegmentGroup = split(this.urlTree.root, [], [], this.config.filter(function (c) {
        return c.redirectTo === undefined;
      }), this.relativeLinkResolution).segmentGroup;
      var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);

      if (children === null) {
        return null;
      } // Use Object.freeze to prevent readers of the Router state from modifying it outside of a
      // navigation, resulting in the router being out of sync with the browser.


      var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
      var rootNode = new TreeNode(root, children);
      var routeState = new RouterStateSnapshot(this.url, rootNode);
      this.inheritParamsAndData(routeState._root);
      return routeState;
    }
  }, {
    key: "inheritParamsAndData",
    value: function inheritParamsAndData(routeNode) {
      var _this26 = this;

      var route = routeNode.value;
      var i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);
      route.params = Object.freeze(i.params);
      route.data = Object.freeze(i.data);
      routeNode.children.forEach(function (n) {
        return _this26.inheritParamsAndData(n);
      });
    }
  }, {
    key: "processSegmentGroup",
    value: function processSegmentGroup(config, segmentGroup, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return this.processChildren(config, segmentGroup);
      }

      return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
    }
    /**
     * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
     * we cannot find a match for _any_ of the children.
     *
     * @param config - The `Routes` to match against
     * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
     *     config.
     */

  }, {
    key: "processChildren",
    value: function processChildren(config, segmentGroup) {
      var children = [];

      for (var _i4 = 0, _Object$keys4 = Object.keys(segmentGroup.children); _i4 < _Object$keys4.length; _i4++) {
        var childOutlet = _Object$keys4[_i4];
        var child = segmentGroup.children[childOutlet]; // Sort the config so that routes with outlets that match the one being activated appear
        // first, followed by routes for other outlets, which might match if they have an empty path.

        var sortedConfig = sortByMatchingOutlets(config, childOutlet);
        var outletChildren = this.processSegmentGroup(sortedConfig, child, childOutlet);

        if (outletChildren === null) {
          // Configs must match all segment children so because we did not find a match for this
          // outlet, return `null`.
          return null;
        }

        children.push.apply(children, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(outletChildren));
      } // Because we may have matched two outlets to the same empty path segment, we can have multiple
      // activated results for the same outlet. We should merge the children of these results so the
      // final return value is only one `TreeNode` per outlet.


      var mergedChildren = mergeEmptyPathMatches(children);

      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        // This should really never happen - we are only taking the first match for each outlet and
        // merge the empty path matches.
        checkOutletNameUniqueness(mergedChildren);
      }

      sortActivatedRouteSnapshots(mergedChildren);
      return mergedChildren;
    }
  }, {
    key: "processSegment",
    value: function processSegment(config, segmentGroup, segments, outlet) {
      var _iterator7 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(config),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var r = _step7.value;
          var children = this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);

          if (children !== null) {
            return children;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
        return [];
      }

      return null;
    }
  }, {
    key: "processSegmentAgainstRoute",
    value: function processSegmentAgainstRoute(route, rawSegment, segments, outlet) {
      if (route.redirectTo || !isImmediateMatch(route, rawSegment, segments, outlet)) return null;
      var snapshot;
      var consumedSegments = [];
      var rawSlicedSegments = [];

      if (route.path === '**') {
        var params = segments.length > 0 ? last(segments).parameters : {};
        snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
      } else {
        var result = match(rawSegment, route, segments);

        if (!result.matched) {
          return null;
        }

        consumedSegments = result.consumedSegments;
        rawSlicedSegments = segments.slice(result.lastChild);
        snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
      }

      var childConfig = getChildConfig(route);

      var _split2 = split(rawSegment, consumedSegments, rawSlicedSegments, // Filter out routes with redirectTo because we are trying to create activated route
      // snapshots and don't handle redirects here. That should have been done in
      // `applyRedirects`.
      childConfig.filter(function (c) {
        return c.redirectTo === undefined;
      }), this.relativeLinkResolution),
          segmentGroup = _split2.segmentGroup,
          slicedSegments = _split2.slicedSegments;

      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
        var _children3 = this.processChildren(childConfig, segmentGroup);

        if (_children3 === null) {
          return null;
        }

        return [new TreeNode(snapshot, _children3)];
      }

      if (childConfig.length === 0 && slicedSegments.length === 0) {
        return [new TreeNode(snapshot, [])];
      }

      var matchedOnOutlet = getOutlet(route) === outlet; // If we matched a config due to empty path match on a different outlet, we need to continue
      // passing the current outlet for the segment rather than switch to PRIMARY.
      // Note that we switch to primary when we have a match because outlet configs look like this:
      // {path: 'a', outlet: 'a', children: [
      //  {path: 'b', component: B},
      //  {path: 'c', component: C},
      // ]}
      // Notice that the children of the named outlet are configured with the primary outlet

      var children = this.processSegment(childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet);

      if (children === null) {
        return null;
      }

      return [new TreeNode(snapshot, children)];
    }
  }]);

  return Recognizer;
}();

function sortActivatedRouteSnapshots(nodes) {
  nodes.sort(function (a, b) {
    if (a.value.outlet === PRIMARY_OUTLET) return -1;
    if (b.value.outlet === PRIMARY_OUTLET) return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}

function getChildConfig(route) {
  if (route.children) {
    return route.children;
  }

  if (route.loadChildren) {
    return route._loadedConfig.routes;
  }

  return [];
}

function hasEmptyPathConfig(node) {
  var config = node.value.routeConfig;
  return config && config.path === '' && config.redirectTo === undefined;
}
/**
 * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with the
 * children from each duplicate. This is necessary because different outlets can match a single
 * empty path route config and the results need to then be merged.
 */


function mergeEmptyPathMatches(nodes) {
  var result = []; // The set of nodes which contain children that were merged from two duplicate empty path nodes.

  var mergedNodes = new Set();

  var _iterator8 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(nodes),
      _step8;

  try {
    var _loop = function _loop() {
      var node = _step8.value;

      if (!hasEmptyPathConfig(node)) {
        result.push(node);
        return "continue";
      }

      var duplicateEmptyPathNode = result.find(function (resultNode) {
        return node.value.routeConfig === resultNode.value.routeConfig;
      });

      if (duplicateEmptyPathNode !== undefined) {
        var _duplicateEmptyPathNo;

        (_duplicateEmptyPathNo = duplicateEmptyPathNode.children).push.apply(_duplicateEmptyPathNo, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(node.children));

        mergedNodes.add(duplicateEmptyPathNode);
      } else {
        result.push(node);
      }
    };

    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    } // For each node which has children from multiple sources, we need to recompute a new `TreeNode`
    // by also merging those children. This is necessary when there are multiple empty path configs in
    // a row. Put another way: whenever we combine children of two nodes, we need to also check if any
    // of those children can be combined into a single node as well.

  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  var _iterator9 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(mergedNodes),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var mergedNode = _step9.value;
      var mergedChildren = mergeEmptyPathMatches(mergedNode.children);
      result.push(new TreeNode(mergedNode.value, mergedChildren));
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  return result.filter(function (n) {
    return !mergedNodes.has(n);
  });
}

function checkOutletNameUniqueness(nodes) {
  var names = {};
  nodes.forEach(function (n) {
    var routeWithSameOutletName = names[n.value.outlet];

    if (routeWithSameOutletName) {
      var p = routeWithSameOutletName.url.map(function (s) {
        return s.toString();
      }).join('/');
      var c = n.value.url.map(function (s) {
        return s.toString();
      }).join('/');
      throw new Error("Two segments cannot have the same outlet name: '".concat(p, "' and '").concat(c, "'."));
    }

    names[n.value.outlet] = n.value;
  });
}

function getSourceSegmentGroup(segmentGroup) {
  var s = segmentGroup;

  while (s._sourceSegment) {
    s = s._sourceSegment;
  }

  return s;
}

function getPathIndexShift(segmentGroup) {
  var s = segmentGroup;
  var res = s._segmentIndexShift ? s._segmentIndexShift : 0;

  while (s._sourceSegment) {
    s = s._sourceSegment;
    res += s._segmentIndexShift ? s._segmentIndexShift : 0;
  }

  return res - 1;
}

function getData(route) {
  return route.data || {};
}

function getResolve(route) {
  return route.resolve || {};
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (t) {
    return recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (targetSnapshot) {
      return Object.assign(Object.assign({}, t), {
        targetSnapshot: targetSnapshot
      });
    }));
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function resolveData(paramsInheritanceStrategy, moduleInjector) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (t) {
    var targetSnapshot = t.targetSnapshot,
        canActivateChecks = t.guards.canActivateChecks;

    if (!canActivateChecks.length) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t);
    }

    var canActivateChecksResolved = 0;
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(canActivateChecks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.concatMap)(function (check) {
      return runResolve(check.route, targetSnapshot, paramsInheritanceStrategy, moduleInjector);
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function () {
      return canActivateChecksResolved++;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_29__.takeLast)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (_) {
      return canActivateChecksResolved === canActivateChecks.length ? (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t) : rxjs__WEBPACK_IMPORTED_MODULE_30__.EMPTY;
    }));
  });
}

function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {
  var resolve = futureARS._resolve;
  return resolveNode(resolve, futureARS, futureRSS, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (resolvedData) {
    futureARS._resolvedData = resolvedData;
    futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);
    return null;
  }));
}

function resolveNode(resolve, futureARS, futureRSS, moduleInjector) {
  var keys = Object.keys(resolve);

  if (keys.length === 0) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)({});
  }

  var data = {};
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(keys).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (key) {
    return getResolver(resolve[key], futureARS, futureRSS, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (value) {
      data[key] = value;
    }));
  }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_29__.takeLast)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function () {
    // Ensure all resolvers returned values, otherwise don't emit any "next" and just complete
    // the chain which will cancel navigation
    if (Object.keys(data).length === keys.length) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(data);
    }

    return rxjs__WEBPACK_IMPORTED_MODULE_30__.EMPTY;
  }));
}

function getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {
  var resolver = getToken(injectionToken, futureARS, moduleInjector);
  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) : wrapIntoObservable(resolver(futureARS, futureRSS));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Perform a side effect through a switchMap for every emission on the source Observable,
 * but return an Observable that is identical to the source. It's essentially the same as
 * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,
 * it will wait before continuing with the original value.
 */


function switchTap(next) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (v) {
    var nextResult = next(v);

    if (nextResult) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(nextResult).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function () {
        return v;
      }));
    }

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(v);
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a way to customize when activated routes get reused.
 *
 * @publicApi
 */


var RouteReuseStrategy = function RouteReuseStrategy() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouteReuseStrategy);
};
/**
 * @description
 *
 * This base route reuse strategy only reuses routes when the matched router configs are
 * identical. This prevents components from being destroyed and recreated
 * when just the fragment or query parameters change
 * (that is, the existing component is _reused_).
 *
 * This strategy does not store any routes for later reuse.
 *
 * Angular uses this strategy by default.
 *
 *
 * It can be used as a base class for custom route reuse strategies, i.e. you can create your own
 * class that extends the `BaseRouteReuseStrategy` one.
 * @publicApi
 */


var BaseRouteReuseStrategy = /*#__PURE__*/function () {
  function BaseRouteReuseStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, BaseRouteReuseStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(BaseRouteReuseStrategy, [{
    key: "shouldDetach",
    value:
    /**
     * Whether the given route should detach for later reuse.
     * Always returns false for `BaseRouteReuseStrategy`.
     * */
    function shouldDetach(route) {
      return false;
    }
    /**
     * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
     */

  }, {
    key: "store",
    value: function store(route, detachedTree) {}
    /** Returns `false`, meaning the route (and its subtree) is never reattached */

  }, {
    key: "shouldAttach",
    value: function shouldAttach(route) {
      return false;
    }
    /** Returns `null` because this strategy does not store routes for later re-use. */

  }, {
    key: "retrieve",
    value: function retrieve(route) {
      return null;
    }
    /**
     * Determines if a route should be reused.
     * This strategy returns `true` when the future route config and current route config are
     * identical.
     */

  }, {
    key: "shouldReuseRoute",
    value: function shouldReuseRoute(future, curr) {
      return future.routeConfig === curr.routeConfig;
    }
  }]);

  return BaseRouteReuseStrategy;
}();

var DefaultRouteReuseStrategy = /*#__PURE__*/function (_BaseRouteReuseStrate) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(DefaultRouteReuseStrategy, _BaseRouteReuseStrate);

  var _super12 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(DefaultRouteReuseStrategy);

  function DefaultRouteReuseStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, DefaultRouteReuseStrategy);

    return _super12.apply(this, arguments);
  }

  return DefaultRouteReuseStrategy;
}(BaseRouteReuseStrategy);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The [DI token](guide/glossary/#di-token) for a router configuration.
 *
 * `ROUTES` is a low level API for router configuration via dependency injection.
 *
 * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,
 * `RouterModule.forChild()`, `provideRoutes`, or `Router.resetConfig()`.
 *
 * @publicApi
 */


var ROUTES = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('ROUTES');

var RouterConfigLoader = /*#__PURE__*/function () {
  function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterConfigLoader);

    this.loader = loader;
    this.compiler = compiler;
    this.onLoadStartListener = onLoadStartListener;
    this.onLoadEndListener = onLoadEndListener;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterConfigLoader, [{
    key: "load",
    value: function load(parentInjector, route) {
      var _this27 = this;

      if (route._loader$) {
        return route._loader$;
      }

      if (this.onLoadStartListener) {
        this.onLoadStartListener(route);
      }

      var moduleFactory$ = this.loadModuleFactory(route.loadChildren);
      var loadRunner = moduleFactory$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (factory) {
        if (_this27.onLoadEndListener) {
          _this27.onLoadEndListener(route);
        }

        var module = factory.create(parentInjector); // When loading a module that doesn't provide `RouterModule.forChild()` preloader
        // will get stuck in an infinite loop. The child module's Injector will look to
        // its parent `Injector` when it doesn't find any ROUTES so it will return routes
        // for it's parent module instead.

        return new LoadedRouterConfig(flatten(module.injector.get(ROUTES, undefined, _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectFlags.Self | _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectFlags.Optional)).map(standardizeConfig), module);
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (err) {
        route._loader$ = undefined;
        throw err;
      })); // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much

      route._loader$ = new rxjs__WEBPACK_IMPORTED_MODULE_31__.ConnectableObservable(loadRunner, function () {
        return new rxjs__WEBPACK_IMPORTED_MODULE_32__.Subject();
      }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_33__.refCount)());
      return route._loader$;
    }
  }, {
    key: "loadModuleFactory",
    value: function loadModuleFactory(loadChildren) {
      var _this28 = this;

      if (typeof loadChildren === 'string') {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(this.loader.load(loadChildren));
      } else {
        return wrapIntoObservable(loadChildren()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (t) {
          if (t instanceof _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactory) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t);
          } else {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(_this28.compiler.compileModuleAsync(t));
          }
        }));
      }
    }
  }]);

  return RouterConfigLoader;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Store contextual information about a `RouterOutlet`
 *
 * @publicApi
 */


var OutletContext = function OutletContext() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, OutletContext);

  this.outlet = null;
  this.route = null;
  this.resolver = null;
  this.children = new ChildrenOutletContexts();
  this.attachRef = null;
};
/**
 * Store contextual information about the children (= nested) `RouterOutlet`
 *
 * @publicApi
 */


var ChildrenOutletContexts = /*#__PURE__*/function () {
  function ChildrenOutletContexts() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, ChildrenOutletContexts);

    // contexts for child outlets, by name.
    this.contexts = new Map();
  }
  /** Called when a `RouterOutlet` directive is instantiated */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(ChildrenOutletContexts, [{
    key: "onChildOutletCreated",
    value: function onChildOutletCreated(childName, outlet) {
      var context = this.getOrCreateContext(childName);
      context.outlet = outlet;
      this.contexts.set(childName, context);
    }
    /**
     * Called when a `RouterOutlet` directive is destroyed.
     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
     * re-created later.
     */

  }, {
    key: "onChildOutletDestroyed",
    value: function onChildOutletDestroyed(childName) {
      var context = this.getContext(childName);

      if (context) {
        context.outlet = null;
      }
    }
    /**
     * Called when the corresponding route is deactivated during navigation.
     * Because the component get destroyed, all children outlet are destroyed.
     */

  }, {
    key: "onOutletDeactivated",
    value: function onOutletDeactivated() {
      var contexts = this.contexts;
      this.contexts = new Map();
      return contexts;
    }
  }, {
    key: "onOutletReAttached",
    value: function onOutletReAttached(contexts) {
      this.contexts = contexts;
    }
  }, {
    key: "getOrCreateContext",
    value: function getOrCreateContext(childName) {
      var context = this.getContext(childName);

      if (!context) {
        context = new OutletContext();
        this.contexts.set(childName, context);
      }

      return context;
    }
  }, {
    key: "getContext",
    value: function getContext(childName) {
      return this.contexts.get(childName) || null;
    }
  }]);

  return ChildrenOutletContexts;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a way to migrate AngularJS applications to Angular.
 *
 * @publicApi
 */


var UrlHandlingStrategy = function UrlHandlingStrategy() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, UrlHandlingStrategy);
};
/**
 * @publicApi
 */


var DefaultUrlHandlingStrategy = /*#__PURE__*/function () {
  function DefaultUrlHandlingStrategy() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, DefaultUrlHandlingStrategy);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DefaultUrlHandlingStrategy, [{
    key: "shouldProcessUrl",
    value: function shouldProcessUrl(url) {
      return true;
    }
  }, {
    key: "extract",
    value: function extract(url) {
      return url;
    }
  }, {
    key: "merge",
    value: function merge(newUrlPart, wholeUrl) {
      return newUrlPart;
    }
  }]);

  return DefaultUrlHandlingStrategy;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function defaultErrorHandler(error) {
  throw error;
}

function defaultMalformedUriErrorHandler(error, urlSerializer, url) {
  return urlSerializer.parse('/');
}
/**
 * @internal
 */


function defaultRouterHook(snapshot, runExtras) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null);
}
/**
 * The equivalent `IsActiveUrlTreeOptions` options for `Router.isActive` is called with `true`
 * (exact = true).
 */


var exactMatchOptions = {
  paths: 'exact',
  fragment: 'ignored',
  matrixParams: 'ignored',
  queryParams: 'exact'
};
/**
 * The equivalent `IsActiveUrlTreeOptions` options for `Router.isActive` is called with `false`
 * (exact = false).
 */

var subsetMatchOptions = {
  paths: 'subset',
  fragment: 'ignored',
  matrixParams: 'ignored',
  queryParams: 'subset'
};
/**
 * @description
 *
 * A service that provides navigation among views and URL manipulation capabilities.
 *
 * @see `Route`.
 * @see [Routing and Navigation Guide](guide/router).
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */

var Router = /*#__PURE__*/function () {
  /**
   * Creates the router service.
   */
  // TODO: vsavkin make internal after the final is out.
  function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {
    var _this29 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, Router);

    this.rootComponentType = rootComponentType;
    this.urlSerializer = urlSerializer;
    this.rootContexts = rootContexts;
    this.location = location;
    this.config = config;
    this.lastSuccessfulNavigation = null;
    this.currentNavigation = null;
    this.disposed = false;
    /**
     * Tracks the previously seen location change from the location subscription so we can compare
     * the two latest to see if they are duplicates. See setUpLocationChangeListener.
     */

    this.lastLocationChangeInfo = null;
    this.navigationId = 0;
    /**
     * The id of the currently active page in the router.
     * Updated to the transition's target id on a successful navigation.
     *
     * This is used to track what page the router last activated. When an attempted navigation fails,
     * the router can then use this to compute how to restore the state back to the previously active
     * page.
     */

    this.currentPageId = 0;
    this.isNgZoneEnabled = false;
    /**
     * An event stream for routing events in this NgModule.
     */

    this.events = new rxjs__WEBPACK_IMPORTED_MODULE_32__.Subject();
    /**
     * A handler for navigation errors in this NgModule.
     */

    this.errorHandler = defaultErrorHandler;
    /**
     * A handler for errors thrown by `Router.parseUrl(url)`
     * when `url` contains an invalid character.
     * The most common case is a `%` sign
     * that's not encoded and is not part of a percent encoded sequence.
     */

    this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;
    /**
     * True if at least one navigation event has occurred,
     * false otherwise.
     */

    this.navigated = false;
    this.lastSuccessfulId = -1;
    /**
     * Hooks that enable you to pause navigation,
     * either before or after the preactivation phase.
     * Used by `RouterModule`.
     *
     * @internal
     */

    this.hooks = {
      beforePreactivation: defaultRouterHook,
      afterPreactivation: defaultRouterHook
    };
    /**
     * A strategy for extracting and merging URLs.
     * Used for AngularJS to Angular migrations.
     */

    this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
    /**
     * A strategy for re-using routes.
     */

    this.routeReuseStrategy = new DefaultRouteReuseStrategy();
    /**
     * How to handle a navigation request to the current URL. One of:
     *
     * - `'ignore'` :  The router ignores the request.
     * - `'reload'` : The router reloads the URL. Use to implement a "refresh" feature.
     *
     * Note that this only configures whether the Route reprocesses the URL and triggers related
     * action and events like redirects, guards, and resolvers. By default, the router re-uses a
     * component instance when it re-navigates to the same component type without visiting a different
     * component first. This behavior is configured by the `RouteReuseStrategy`. In order to reload
     * routed components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`
     * _and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`.
     */

    this.onSameUrlNavigation = 'ignore';
    /**
     * How to merge parameters, data, and resolved data from parent to child
     * routes. One of:
     *
     * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data
     * for path-less or component-less routes.
     * - `'always'` : Inherit parent parameters, data, and resolved data
     * for all child routes.
     */

    this.paramsInheritanceStrategy = 'emptyOnly';
    /**
     * Determines when the router updates the browser URL.
     * By default (`"deferred"`), updates the browser URL after navigation has finished.
     * Set to `'eager'` to update the browser URL at the beginning of navigation.
     * You can choose to update early so that, if navigation fails,
     * you can show an error message with the URL that failed.
     */

    this.urlUpdateStrategy = 'deferred';
    /**
     * Enables a bug fix that corrects relative link resolution in components with empty paths.
     * @see `RouterModule`
     */

    this.relativeLinkResolution = 'corrected';
    /**
     * Configures how the Router attempts to restore state when a navigation is cancelled.
     *
     * 'replace' - Always uses `location.replaceState` to set the browser state to the state of the
     * router before the navigation started.
     *
     * 'computed' - Will always return to the same state that corresponds to the actual Angular route
     * when the navigation gets cancelled right after triggering a `popstate` event.
     *
     * The default value is `replace`
     *
     * @internal
     */
    // TODO(atscott): Determine how/when/if to make this public API
    // This shouldn’t be an option at all but may need to be in order to allow migration without a
    // breaking change. We need to determine if it should be made into public api (or if we forgo
    // the option and release as a breaking change bug fix in a major version).

    this.canceledNavigationResolution = 'replace';

    var onLoadStart = function onLoadStart(r) {
      return _this29.triggerEvent(new RouteConfigLoadStart(r));
    };

    var onLoadEnd = function onLoadEnd(r) {
      return _this29.triggerEvent(new RouteConfigLoadEnd(r));
    };

    this.ngModule = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleRef);
    this.console = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵConsole"]);
    var ngZone = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone);
    this.isNgZoneEnabled = ngZone instanceof _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone && _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone.isInAngularZone();
    this.resetConfig(config);
    this.currentUrlTree = createEmptyUrlTree();
    this.rawUrlTree = this.currentUrlTree;
    this.browserUrlTree = this.currentUrlTree;
    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);
    this.transitions = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject({
      id: 0,
      targetPageId: 0,
      currentUrlTree: this.currentUrlTree,
      currentRawUrl: this.currentUrlTree,
      extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
      urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
      rawUrl: this.currentUrlTree,
      extras: {},
      resolve: null,
      reject: null,
      promise: Promise.resolve(true),
      source: 'imperative',
      restoredState: null,
      currentSnapshot: this.routerState.snapshot,
      targetSnapshot: null,
      currentRouterState: this.routerState,
      targetRouterState: null,
      guards: {
        canActivateChecks: [],
        canDeactivateChecks: []
      },
      guardsResult: null
    });
    this.navigations = this.setupNavigations(this.transitions);
    this.processNavigations();
  }
  /**
   * The ɵrouterPageId of whatever page is currently active in the browser history. This is
   * important for computing the target page id for new navigations because we need to ensure each
   * page id in the browser history is 1 more than the previous entry.
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(Router, [{
    key: "browserPageId",
    get: function get() {
      var _a;

      return (_a = this.location.getState()) === null || _a === void 0 ? void 0 : _a.ɵrouterPageId;
    }
  }, {
    key: "setupNavigations",
    value: function setupNavigations(transitions) {
      var _this30 = this;

      var eventsSubject = this.events;
      return transitions.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (t) {
        return t.id !== 0;
      }), // Extract URL
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (t) {
        return Object.assign(Object.assign({}, t), {
          extractedUrl: _this30.urlHandlingStrategy.extract(t.rawUrl)
        });
      }), // Using switchMap so we cancel executing navigations when a new one comes in
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (t) {
        var completed = false;
        var errored = false;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t).pipe( // Store the Navigation object
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
          _this30.currentNavigation = {
            id: t.id,
            initialUrl: t.currentRawUrl,
            extractedUrl: t.extractedUrl,
            trigger: t.source,
            extras: t.extras,
            previousNavigation: _this30.lastSuccessfulNavigation ? Object.assign(Object.assign({}, _this30.lastSuccessfulNavigation), {
              previousNavigation: null
            }) : null
          };
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (t) {
          var urlTransition = !_this30.navigated || t.extractedUrl.toString() !== _this30.browserUrlTree.toString();

          var processCurrentUrl = (_this30.onSameUrlNavigation === 'reload' ? true : urlTransition) && _this30.urlHandlingStrategy.shouldProcessUrl(t.rawUrl); // If the source of the navigation is from a browser event, the URL is
          // already updated. We already need to sync the internal state.


          if (isBrowserTriggeredNavigation(t.source)) {
            _this30.browserUrlTree = t.rawUrl;
          }

          if (processCurrentUrl) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t).pipe( // Fire NavigationStart event
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (t) {
              var transition = _this30.transitions.getValue();

              eventsSubject.next(new NavigationStart(t.id, _this30.serializeUrl(t.extractedUrl), t.source, t.restoredState));

              if (transition !== _this30.transitions.getValue()) {
                return rxjs__WEBPACK_IMPORTED_MODULE_30__.EMPTY;
              } // This delay is required to match old behavior that forced
              // navigation to always be async


              return Promise.resolve(t);
            }), // ApplyRedirects
            applyRedirects$1(_this30.ngModule.injector, _this30.configLoader, _this30.urlSerializer, _this30.config), // Update the currentNavigation
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
              _this30.currentNavigation = Object.assign(Object.assign({}, _this30.currentNavigation), {
                finalUrl: t.urlAfterRedirects
              });
            }), // Recognize
            recognize$1(_this30.rootComponentType, _this30.config, function (url) {
              return _this30.serializeUrl(url);
            }, _this30.paramsInheritanceStrategy, _this30.relativeLinkResolution), // Update URL if in `eager` update mode
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
              if (_this30.urlUpdateStrategy === 'eager') {
                if (!t.extras.skipLocationChange) {
                  _this30.setBrowserUrl(t.urlAfterRedirects, t);
                }

                _this30.browserUrlTree = t.urlAfterRedirects;
              } // Fire RoutesRecognized


              var routesRecognized = new RoutesRecognized(t.id, _this30.serializeUrl(t.extractedUrl), _this30.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
              eventsSubject.next(routesRecognized);
            }));
          } else {
            var processPreviousUrl = urlTransition && _this30.rawUrlTree && _this30.urlHandlingStrategy.shouldProcessUrl(_this30.rawUrlTree);
            /* When the current URL shouldn't be processed, but the previous one was,
             * we handle this "error condition" by navigating to the previously
             * successful URL, but leaving the URL intact.*/


            if (processPreviousUrl) {
              var id = t.id,
                  extractedUrl = t.extractedUrl,
                  source = t.source,
                  restoredState = t.restoredState,
                  extras = t.extras;
              var navStart = new NavigationStart(id, _this30.serializeUrl(extractedUrl), source, restoredState);
              eventsSubject.next(navStart);
              var targetSnapshot = createEmptyState(extractedUrl, _this30.rootComponentType).snapshot;
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(Object.assign(Object.assign({}, t), {
                targetSnapshot: targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: Object.assign(Object.assign({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              }));
            } else {
              /* When neither the current or previous URL can be processed, do nothing
               * other than update router's internal reference to the current "settled"
               * URL. This way the next navigation will be coming from the current URL
               * in the browser.
               */
              _this30.rawUrlTree = t.rawUrl;
              _this30.browserUrlTree = t.urlAfterRedirects;
              t.resolve(null);
              return rxjs__WEBPACK_IMPORTED_MODULE_30__.EMPTY;
            }
          }
        }), // Before Preactivation
        switchTap(function (t) {
          var targetSnapshot = t.targetSnapshot,
              navigationId = t.id,
              appliedUrlTree = t.extractedUrl,
              rawUrlTree = t.rawUrl,
              _t$extras = t.extras,
              skipLocationChange = _t$extras.skipLocationChange,
              replaceUrl = _t$extras.replaceUrl;
          return _this30.hooks.beforePreactivation(targetSnapshot, {
            navigationId: navigationId,
            appliedUrlTree: appliedUrlTree,
            rawUrlTree: rawUrlTree,
            skipLocationChange: !!skipLocationChange,
            replaceUrl: !!replaceUrl
          });
        }), // --- GUARDS ---
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
          var guardsStart = new GuardsCheckStart(t.id, _this30.serializeUrl(t.extractedUrl), _this30.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

          _this30.triggerEvent(guardsStart);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (t) {
          return Object.assign(Object.assign({}, t), {
            guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, _this30.rootContexts)
          });
        }), checkGuards(_this30.ngModule.injector, function (evt) {
          return _this30.triggerEvent(evt);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
          if (isUrlTree(t.guardsResult)) {
            var error = navigationCancelingError("Redirecting to \"".concat(_this30.serializeUrl(t.guardsResult), "\""));
            error.url = t.guardsResult;
            throw error;
          }

          var guardsEnd = new GuardsCheckEnd(t.id, _this30.serializeUrl(t.extractedUrl), _this30.serializeUrl(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);

          _this30.triggerEvent(guardsEnd);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (t) {
          if (!t.guardsResult) {
            _this30.restoreHistory(t);

            _this30.cancelNavigationTransition(t, '');

            return false;
          }

          return true;
        }), // --- RESOLVE ---
        switchTap(function (t) {
          if (t.guards.canActivateChecks.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
              var resolveStart = new ResolveStart(t.id, _this30.serializeUrl(t.extractedUrl), _this30.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

              _this30.triggerEvent(resolveStart);
            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.switchMap)(function (t) {
              var dataResolved = false;
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(t).pipe(resolveData(_this30.paramsInheritanceStrategy, _this30.ngModule.injector), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)({
                next: function next() {
                  return dataResolved = true;
                },
                complete: function complete() {
                  if (!dataResolved) {
                    _this30.restoreHistory(t);

                    _this30.cancelNavigationTransition(t, "At least one route resolver didn't emit any value.");
                  }
                }
              }));
            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
              var resolveEnd = new ResolveEnd(t.id, _this30.serializeUrl(t.extractedUrl), _this30.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);

              _this30.triggerEvent(resolveEnd);
            }));
          }

          return undefined;
        }), // --- AFTER PREACTIVATION ---
        switchTap(function (t) {
          var targetSnapshot = t.targetSnapshot,
              navigationId = t.id,
              appliedUrlTree = t.extractedUrl,
              rawUrlTree = t.rawUrl,
              _t$extras2 = t.extras,
              skipLocationChange = _t$extras2.skipLocationChange,
              replaceUrl = _t$extras2.replaceUrl;
          return _this30.hooks.afterPreactivation(targetSnapshot, {
            navigationId: navigationId,
            appliedUrlTree: appliedUrlTree,
            rawUrlTree: rawUrlTree,
            skipLocationChange: !!skipLocationChange,
            replaceUrl: !!replaceUrl
          });
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (t) {
          var targetRouterState = createRouterState(_this30.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
          return Object.assign(Object.assign({}, t), {
            targetRouterState: targetRouterState
          });
        }),
        /* Once here, we are about to activate syncronously. The assumption is this
           will succeed, and user code may read from the Router service. Therefore
           before activation, we need to update router properties storing the current
           URL and the RouterState, as well as updated the browser URL. All this should
           happen *before* activating. */
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)(function (t) {
          _this30.currentUrlTree = t.urlAfterRedirects;
          _this30.rawUrlTree = _this30.urlHandlingStrategy.merge(_this30.currentUrlTree, t.rawUrl);
          _this30.routerState = t.targetRouterState;

          if (_this30.urlUpdateStrategy === 'deferred') {
            if (!t.extras.skipLocationChange) {
              _this30.setBrowserUrl(_this30.rawUrlTree, t);
            }

            _this30.browserUrlTree = t.urlAfterRedirects;
          }
        }), activateRoutes(_this30.rootContexts, _this30.routeReuseStrategy, function (evt) {
          return _this30.triggerEvent(evt);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.tap)({
          next: function next() {
            completed = true;
          },
          complete: function complete() {
            completed = true;
          }
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_34__.finalize)(function () {
          /* When the navigation stream finishes either through error or success, we
           * set the `completed` or `errored` flag. However, there are some situations
           * where we could get here without either of those being set. For instance, a
           * redirect during NavigationStart. Therefore, this is a catch-all to make
           * sure the NavigationCancel
           * event is fired when a navigation gets cancelled but not caught by other
           * means. */
          if (!completed && !errored) {
            var cancelationReason = "Navigation ID ".concat(t.id, " is not equal to the current navigation id ").concat(_this30.navigationId);

            if (_this30.canceledNavigationResolution === 'replace') {
              // Must reset to current URL tree here to ensure history.state is set. On
              // a fresh page load, if a new navigation comes in before a successful
              // navigation completes, there will be nothing in
              // history.state.navigationId. This can cause sync problems with
              // AngularJS sync code which looks for a value here in order to determine
              // whether or not to handle a given popstate event or to leave it to the
              // Angular router.
              _this30.restoreHistory(t);

              _this30.cancelNavigationTransition(t, cancelationReason);
            } else {
              // We cannot trigger a `location.historyGo` if the
              // cancellation was due to a new navigation before the previous could
              // complete. This is because `location.historyGo` triggers a `popstate`
              // which would also trigger another navigation. Instead, treat this as a
              // redirect and do not reset the state.
              _this30.cancelNavigationTransition(t, cancelationReason); // TODO(atscott): The same problem happens here with a fresh page load
              // and a new navigation before that completes where we won't set a page
              // id.

            }
          } // currentNavigation should always be reset to null here. If navigation was
          // successful, lastSuccessfulTransition will have already been set. Therefore
          // we can safely set currentNavigation to null here.


          _this30.currentNavigation = null;
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function (e) {
          // TODO(atscott): The NavigationTransition `t` used here does not accurately
          // reflect the current state of the whole transition because some operations
          // return a new object rather than modifying the one in the outermost
          // `switchMap`.
          //  The fix can likely be to:
          //  1. Rename the outer `t` variable so it's not shadowed all the time and
          //  confusing
          //  2. Keep reassigning to the outer variable after each stage to ensure it
          //  gets updated. Or change the implementations to not return a copy.
          // Not changed yet because it affects existing code and would need to be
          // tested more thoroughly.
          errored = true;
          /* This error type is issued during Redirect, and is handled as a
           * cancellation rather than an error. */

          if (isNavigationCancelingError(e)) {
            var redirecting = isUrlTree(e.url);

            if (!redirecting) {
              // Set property only if we're not redirecting. If we landed on a page and
              // redirect to `/` route, the new navigation is going to see the `/`
              // isn't a change from the default currentUrlTree and won't navigate.
              // This is only applicable with initial navigation, so setting
              // `navigated` only when not redirecting resolves this scenario.
              _this30.navigated = true;

              _this30.restoreHistory(t, true);
            }

            var navCancel = new NavigationCancel(t.id, _this30.serializeUrl(t.extractedUrl), e.message);
            eventsSubject.next(navCancel); // When redirecting, we need to delay resolving the navigation
            // promise and push it to the redirect navigation

            if (!redirecting) {
              t.resolve(false);
            } else {
              // setTimeout is required so this navigation finishes with
              // the return EMPTY below. If it isn't allowed to finish
              // processing, there can be multiple navigations to the same
              // URL.
              setTimeout(function () {
                var mergedTree = _this30.urlHandlingStrategy.merge(e.url, _this30.rawUrlTree);

                var extras = {
                  skipLocationChange: t.extras.skipLocationChange,
                  // The URL is already updated at this point if we have 'eager' URL
                  // updates or if the navigation was triggered by the browser (back
                  // button, URL bar, etc). We want to replace that item in history if
                  // the navigation is rejected.
                  replaceUrl: _this30.urlUpdateStrategy === 'eager' || isBrowserTriggeredNavigation(t.source)
                };

                _this30.scheduleNavigation(mergedTree, 'imperative', null, extras, {
                  resolve: t.resolve,
                  reject: t.reject,
                  promise: t.promise
                });
              }, 0);
            }
            /* All other errors should reset to the router's internal URL reference to
             * the pre-error state. */

          } else {
            _this30.restoreHistory(t, true);

            var navError = new NavigationError(t.id, _this30.serializeUrl(t.extractedUrl), e);
            eventsSubject.next(navError);

            try {
              t.resolve(_this30.errorHandler(e));
            } catch (ee) {
              t.reject(ee);
            }
          }

          return rxjs__WEBPACK_IMPORTED_MODULE_30__.EMPTY;
        })); // TODO(jasonaden): remove cast once g3 is on updated TypeScript
      }));
    }
    /**
     * @internal
     * TODO: this should be removed once the constructor of the router made internal
     */

  }, {
    key: "resetRootComponentType",
    value: function resetRootComponentType(rootComponentType) {
      this.rootComponentType = rootComponentType; // TODO: vsavkin router 4.0 should make the root component set to null
      // this will simplify the lifecycle of the router.

      this.routerState.root.component = this.rootComponentType;
    }
  }, {
    key: "getTransition",
    value: function getTransition() {
      var transition = this.transitions.value; // This value needs to be set. Other values such as extractedUrl are set on initial navigation
      // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not
      // processing the previous URL.

      transition.urlAfterRedirects = this.browserUrlTree;
      return transition;
    }
  }, {
    key: "setTransition",
    value: function setTransition(t) {
      this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));
    }
    /**
     * Sets up the location change listener and performs the initial navigation.
     */

  }, {
    key: "initialNavigation",
    value: function initialNavigation() {
      this.setUpLocationChangeListener();

      if (this.navigationId === 0) {
        this.navigateByUrl(this.location.path(true), {
          replaceUrl: true
        });
      }
    }
    /**
     * Sets up the location change listener. This listener detects navigations triggered from outside
     * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
     * navigation so that the correct events, guards, etc. are triggered.
     */

  }, {
    key: "setUpLocationChangeListener",
    value: function setUpLocationChangeListener() {
      var _this31 = this;

      // Don't need to use Zone.wrap any more, because zone.js
      // already patch onPopState, so location change callback will
      // run into ngZone
      if (!this.locationSubscription) {
        this.locationSubscription = this.location.subscribe(function (event) {
          var currentChange = _this31.extractLocationChangeInfoFromEvent(event); // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS
          // hybrid apps.


          if (_this31.shouldScheduleNavigation(_this31.lastLocationChangeInfo, currentChange)) {
            setTimeout(function () {
              var source = currentChange.source,
                  state = currentChange.state,
                  urlTree = currentChange.urlTree;
              var extras = {
                replaceUrl: true
              };

              if (state) {
                var stateCopy = Object.assign({}, state);
                delete stateCopy.navigationId;
                delete stateCopy.ɵrouterPageId;

                if (Object.keys(stateCopy).length !== 0) {
                  extras.state = stateCopy;
                }
              }

              _this31.scheduleNavigation(urlTree, source, state, extras);
            }, 0);
          }

          _this31.lastLocationChangeInfo = currentChange;
        });
      }
    }
    /** Extracts router-related information from a `PopStateEvent`. */

  }, {
    key: "extractLocationChangeInfoFromEvent",
    value: function extractLocationChangeInfoFromEvent(change) {
      var _a;

      return {
        source: change['type'] === 'popstate' ? 'popstate' : 'hashchange',
        urlTree: this.parseUrl(change['url']),
        // Navigations coming from Angular router have a navigationId state
        // property. When this exists, restore the state.
        state: ((_a = change.state) === null || _a === void 0 ? void 0 : _a.navigationId) ? change.state : null,
        transitionId: this.getTransition().id
      };
    }
    /**
     * Determines whether two events triggered by the Location subscription are due to the same
     * navigation. The location subscription can fire two events (popstate and hashchange) for a
     * single navigation. The second one should be ignored, that is, we should not schedule another
     * navigation in the Router.
     */

  }, {
    key: "shouldScheduleNavigation",
    value: function shouldScheduleNavigation(previous, current) {
      if (!previous) return true;
      var sameDestination = current.urlTree.toString() === previous.urlTree.toString();
      var eventsOccurredAtSameTime = current.transitionId === previous.transitionId;

      if (!eventsOccurredAtSameTime || !sameDestination) {
        return true;
      }

      if (current.source === 'hashchange' && previous.source === 'popstate' || current.source === 'popstate' && previous.source === 'hashchange') {
        return false;
      }

      return true;
    }
    /** The current URL. */

  }, {
    key: "url",
    get: function get() {
      return this.serializeUrl(this.currentUrlTree);
    }
    /**
     * Returns the current `Navigation` object when the router is navigating,
     * and `null` when idle.
     */

  }, {
    key: "getCurrentNavigation",
    value: function getCurrentNavigation() {
      return this.currentNavigation;
    }
    /** @internal */

  }, {
    key: "triggerEvent",
    value: function triggerEvent(event) {
      this.events.next(event);
    }
    /**
     * Resets the route configuration used for navigation and generating links.
     *
     * @param config The route array for the new configuration.
     *
     * @usageNotes
     *
     * ```
     * router.resetConfig([
     *  { path: 'team/:id', component: TeamCmp, children: [
     *    { path: 'simple', component: SimpleCmp },
     *    { path: 'user/:name', component: UserCmp }
     *  ]}
     * ]);
     * ```
     */

  }, {
    key: "resetConfig",
    value: function resetConfig(config) {
      validateConfig(config);
      this.config = config.map(standardizeConfig);
      this.navigated = false;
      this.lastSuccessfulId = -1;
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.dispose();
    }
    /** Disposes of the router. */

  }, {
    key: "dispose",
    value: function dispose() {
      this.transitions.complete();

      if (this.locationSubscription) {
        this.locationSubscription.unsubscribe();
        this.locationSubscription = undefined;
      }

      this.disposed = true;
    }
    /**
     * Appends URL segments to the current URL tree to create a new URL tree.
     *
     * @param commands An array of URL fragments with which to construct the new URL tree.
     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
     * segments, followed by the parameters for each segment.
     * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
     * property of the options object, if supplied.
     * @param navigationExtras Options that control the navigation strategy.
     * @returns The new URL tree.
     *
     * @usageNotes
     *
     * ```
     * // create /team/33/user/11
     * router.createUrlTree(['/team', 33, 'user', 11]);
     *
     * // create /team/33;expand=true/user/11
     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
     *
     * // you can collapse static segments like this (this works only with the first passed-in value):
     * router.createUrlTree(['/team/33/user', userId]);
     *
     * // If the first segment can contain slashes, and you do not want the router to split it,
     * // you can do the following:
     * router.createUrlTree([{segmentPath: '/one/two'}]);
     *
     * // create /team/33/(user/11//right:chat)
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
     *
     * // remove the right secondary node
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
     *
     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
     *
     * // navigate to /team/33/user/11/details
     * router.createUrlTree(['details'], {relativeTo: route});
     *
     * // navigate to /team/33/user/22
     * router.createUrlTree(['../22'], {relativeTo: route});
     *
     * // navigate to /team/44/user/22
     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
     *
     * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
     * tree should be created relative to the root.
     * ```
     */

  }, {
    key: "createUrlTree",
    value: function createUrlTree(commands) {
      var navigationExtras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var relativeTo = navigationExtras.relativeTo,
          queryParams = navigationExtras.queryParams,
          fragment = navigationExtras.fragment,
          queryParamsHandling = navigationExtras.queryParamsHandling,
          preserveFragment = navigationExtras.preserveFragment;
      var a = relativeTo || this.routerState.root;
      var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
      var q = null;

      switch (queryParamsHandling) {
        case 'merge':
          q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);
          break;

        case 'preserve':
          q = this.currentUrlTree.queryParams;
          break;

        default:
          q = queryParams || null;
      }

      if (q !== null) {
        q = this.removeEmptyProps(q);
      }

      return _createUrlTree(a, this.currentUrlTree, commands, q, f !== null && f !== void 0 ? f : null);
    }
    /**
     * Navigates to a view using an absolute route path.
     *
     * @param url An absolute path for a defined route. The function does not apply any delta to the
     *     current URL.
     * @param extras An object containing properties that modify the navigation strategy.
     *
     * @returns A Promise that resolves to 'true' when navigation succeeds,
     * to 'false' when navigation fails, or is rejected on error.
     *
     * @usageNotes
     *
     * The following calls request navigation to an absolute path.
     *
     * ```
     * router.navigateByUrl("/team/33/user/11");
     *
     * // Navigate without updating the URL
     * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
     * ```
     *
     * @see [Routing and Navigation guide](guide/router)
     *
     */

  }, {
    key: "navigateByUrl",
    value: function navigateByUrl(url) {
      var extras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        skipLocationChange: false
      };

      if (typeof ngDevMode === 'undefined' || ngDevMode && this.isNgZoneEnabled && !_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgZone.isInAngularZone()) {
        this.console.warn("Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?");
      }

      var urlTree = isUrlTree(url) ? url : this.parseUrl(url);
      var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
      return this.scheduleNavigation(mergedTree, 'imperative', null, extras);
    }
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     *
     * @param commands An array of URL fragments with which to construct the target URL.
     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
     * segments, followed by the parameters for each segment.
     * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
     * of the options object, if supplied.
     * @param extras An options object that determines how the URL should be constructed or
     *     interpreted.
     *
     * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation
     *     fails,
     * or is rejected on error.
     *
     * @usageNotes
     *
     * The following calls request navigation to a dynamic route path relative to the current URL.
     *
     * ```
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
     *
     * // Navigate without updating the URL, overriding the default behavior
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
     * ```
     *
     * @see [Routing and Navigation guide](guide/router)
     *
     */

  }, {
    key: "navigate",
    value: function navigate(commands) {
      var extras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        skipLocationChange: false
      };
      validateCommands(commands);
      return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    }
    /** Serializes a `UrlTree` into a string */

  }, {
    key: "serializeUrl",
    value: function serializeUrl(url) {
      return this.urlSerializer.serialize(url);
    }
    /** Parses a string into a `UrlTree` */

  }, {
    key: "parseUrl",
    value: function parseUrl(url) {
      var urlTree;

      try {
        urlTree = this.urlSerializer.parse(url);
      } catch (e) {
        urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);
      }

      return urlTree;
    }
  }, {
    key: "isActive",
    value: function isActive(url, matchOptions) {
      var options;

      if (matchOptions === true) {
        options = Object.assign({}, exactMatchOptions);
      } else if (matchOptions === false) {
        options = Object.assign({}, subsetMatchOptions);
      } else {
        options = matchOptions;
      }

      if (isUrlTree(url)) {
        return containsTree(this.currentUrlTree, url, options);
      }

      var urlTree = this.parseUrl(url);
      return containsTree(this.currentUrlTree, urlTree, options);
    }
  }, {
    key: "removeEmptyProps",
    value: function removeEmptyProps(params) {
      return Object.keys(params).reduce(function (result, key) {
        var value = params[key];

        if (value !== null && value !== undefined) {
          result[key] = value;
        }

        return result;
      }, {});
    }
  }, {
    key: "processNavigations",
    value: function processNavigations() {
      var _this32 = this;

      this.navigations.subscribe(function (t) {
        _this32.navigated = true;
        _this32.lastSuccessfulId = t.id;
        _this32.currentPageId = t.targetPageId;

        _this32.events.next(new NavigationEnd(t.id, _this32.serializeUrl(t.extractedUrl), _this32.serializeUrl(_this32.currentUrlTree)));

        _this32.lastSuccessfulNavigation = _this32.currentNavigation;
        t.resolve(true);
      }, function (e) {
        _this32.console.warn("Unhandled Navigation Error: ");
      });
    }
  }, {
    key: "scheduleNavigation",
    value: function scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
      var _a, _b;

      if (this.disposed) {
        return Promise.resolve(false);
      } // * Imperative navigations (router.navigate) might trigger additional navigations to the same
      //   URL via a popstate event and the locationChangeListener. We should skip these duplicate
      //   navs. Duplicates may also be triggered by attempts to sync AngularJS and Angular router
      //   states.
      // * Imperative navigations can be cancelled by router guards, meaning the URL won't change. If
      //   the user follows that with a navigation using the back/forward button or manual URL change,
      //   the destination may be the same as the previous imperative attempt. We should not skip
      //   these navigations because it's a separate case from the one above -- it's not a duplicate
      //   navigation.


      var lastNavigation = this.getTransition(); // We don't want to skip duplicate successful navs if they're imperative because
      // onSameUrlNavigation could be 'reload' (so the duplicate is intended).

      var browserNavPrecededByRouterNav = isBrowserTriggeredNavigation(source) && lastNavigation && !isBrowserTriggeredNavigation(lastNavigation.source);
      var lastNavigationSucceeded = this.lastSuccessfulId === lastNavigation.id; // If the last navigation succeeded or is in flight, we can use the rawUrl as the comparison.
      // However, if it failed, we should compare to the final result (urlAfterRedirects).

      var lastNavigationUrl = lastNavigationSucceeded || this.currentNavigation ? lastNavigation.rawUrl : lastNavigation.urlAfterRedirects;
      var duplicateNav = lastNavigationUrl.toString() === rawUrl.toString();

      if (browserNavPrecededByRouterNav && duplicateNav) {
        return Promise.resolve(true); // return value is not used
      }

      var resolve;
      var reject;
      var promise;

      if (priorPromise) {
        resolve = priorPromise.resolve;
        reject = priorPromise.reject;
        promise = priorPromise.promise;
      } else {
        promise = new Promise(function (res, rej) {
          resolve = res;
          reject = rej;
        });
      }

      var id = ++this.navigationId;
      var targetPageId;

      if (this.canceledNavigationResolution === 'computed') {
        var isInitialPage = this.currentPageId === 0;

        if (isInitialPage) {
          restoredState = this.location.getState();
        } // If the `ɵrouterPageId` exist in the state then `targetpageId` should have the value of
        // `ɵrouterPageId`. This is the case for something like a page refresh where we assign the
        // target id to the previously set value for that page.


        if (restoredState && restoredState.ɵrouterPageId) {
          targetPageId = restoredState.ɵrouterPageId;
        } else {
          // If we're replacing the URL or doing a silent navigation, we do not want to increment the
          // page id because we aren't pushing a new entry to history.
          if (extras.replaceUrl || extras.skipLocationChange) {
            targetPageId = (_a = this.browserPageId) !== null && _a !== void 0 ? _a : 0;
          } else {
            targetPageId = ((_b = this.browserPageId) !== null && _b !== void 0 ? _b : 0) + 1;
          }
        }
      } else {
        // This is unused when `canceledNavigationResolution` is not computed.
        targetPageId = 0;
      }

      this.setTransition({
        id: id,
        targetPageId: targetPageId,
        source: source,
        restoredState: restoredState,
        currentUrlTree: this.currentUrlTree,
        currentRawUrl: this.rawUrlTree,
        rawUrl: rawUrl,
        extras: extras,
        resolve: resolve,
        reject: reject,
        promise: promise,
        currentSnapshot: this.routerState.snapshot,
        currentRouterState: this.routerState
      }); // Make sure that the error is propagated even though `processNavigations` catch
      // handler does not rethrow

      return promise.catch(function (e) {
        return Promise.reject(e);
      });
    }
  }, {
    key: "setBrowserUrl",
    value: function setBrowserUrl(url, t) {
      var path = this.urlSerializer.serialize(url);
      var state = Object.assign(Object.assign({}, t.extras.state), this.generateNgRouterState(t.id, t.targetPageId));

      if (this.location.isCurrentPathEqualTo(path) || !!t.extras.replaceUrl) {
        this.location.replaceState(path, '', state);
      } else {
        this.location.go(path, '', state);
      }
    }
    /**
     * Performs the necessary rollback action to restore the browser URL to the
     * state before the transition.
     */

  }, {
    key: "restoreHistory",
    value: function restoreHistory(t) {
      var restoringFromCaughtError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var _a, _b;

      if (this.canceledNavigationResolution === 'computed') {
        var targetPagePosition = this.currentPageId - t.targetPageId; // The navigator change the location before triggered the browser event,
        // so we need to go back to the current url if the navigation is canceled.
        // Also, when navigation gets cancelled while using url update strategy eager, then we need to
        // go back. Because, when `urlUpdateSrategy` is `eager`; `setBrowserUrl` method is called
        // before any verification.

        var browserUrlUpdateOccurred = t.source === 'popstate' || this.urlUpdateStrategy === 'eager' || this.currentUrlTree === ((_a = this.currentNavigation) === null || _a === void 0 ? void 0 : _a.finalUrl);

        if (browserUrlUpdateOccurred && targetPagePosition !== 0) {
          this.location.historyGo(targetPagePosition);
        } else if (this.currentUrlTree === ((_b = this.currentNavigation) === null || _b === void 0 ? void 0 : _b.finalUrl) && targetPagePosition === 0) {
          // We got to the activation stage (where currentUrlTree is set to the navigation's
          // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).
          // We still need to reset the router state back to what it was when the navigation started.
          this.resetState(t); // TODO(atscott): resetting the `browserUrlTree` should really be done in `resetState`.
          // Investigate if this can be done by running TGP.

          this.browserUrlTree = t.currentUrlTree;
          this.resetUrlToCurrentUrlTree();
        } else {// The browser URL and router state was not updated before the navigation cancelled so
          // there's no restoration needed.
        }
      } else if (this.canceledNavigationResolution === 'replace') {
        // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op
        // for `deferred` navigations that haven't change the internal state yet because guards
        // reject. For 'eager' navigations, it seems like we also really should reset the state
        // because the navigation was cancelled. Investigate if this can be done by running TGP.
        if (restoringFromCaughtError) {
          this.resetState(t);
        }

        this.resetUrlToCurrentUrlTree();
      }
    }
  }, {
    key: "resetState",
    value: function resetState(t) {
      this.routerState = t.currentRouterState;
      this.currentUrlTree = t.currentUrlTree;
      this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);
    }
  }, {
    key: "resetUrlToCurrentUrlTree",
    value: function resetUrlToCurrentUrlTree() {
      this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
    }
  }, {
    key: "cancelNavigationTransition",
    value: function cancelNavigationTransition(t, reason) {
      var navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), reason);
      this.triggerEvent(navCancel);
      t.resolve(false);
    }
  }, {
    key: "generateNgRouterState",
    value: function generateNgRouterState(navigationId, routerPageId) {
      if (this.canceledNavigationResolution === 'computed') {
        return {
          navigationId: navigationId,
          ɵrouterPageId: routerPageId
        };
      }

      return {
        navigationId: navigationId
      };
    }
  }]);

  return Router;
}();

Router.ɵfac = function Router_Factory(t) {
  return new (t || Router)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Type), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](UrlSerializer), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_35__.Location), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](undefined));
};

Router.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: Router,
  factory: Router.ɵfac
});

Router.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Type
  }, {
    type: UrlSerializer
  }, {
    type: ChildrenOutletContexts
  }, {
    type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.Location
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler
  }, {
    type: undefined
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](Router, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Type
    }, {
      type: UrlSerializer
    }, {
      type: ChildrenOutletContexts
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.Location
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler
    }, {
      type: undefined
    }];
  }, null);
})();

function validateCommands(commands) {
  for (var i = 0; i < commands.length; i++) {
    var cmd = commands[i];

    if (cmd == null) {
      throw new Error("The requested path contains ".concat(cmd, " segment at index ").concat(i));
    }
  }
}

function isBrowserTriggeredNavigation(source) {
  return source !== 'imperative';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * When applied to an element in a template, makes that element a link
 * that initiates navigation to a route. Navigation opens one or more routed components
 * in one or more `<router-outlet>` locations on the page.
 *
 * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,
 * the following creates a static link to the route:
 * `<a routerLink="/user/bob">link to user component</a>`
 *
 * You can use dynamic values to generate the link.
 * For a dynamic link, pass an array of path segments,
 * followed by the params for each segment.
 * For example, `['/team', teamId, 'user', userName, {details: true}]`
 * generates a link to `/team/11/user/bob;details=true`.
 *
 * Multiple static segments can be merged into one term and combined with dynamic segements.
 * For example, `['/team/11/user', userName, {details: true}]`
 *
 * The input that you provide to the link is treated as a delta to the current URL.
 * For instance, suppose the current URL is `/user/(box//aux:team)`.
 * The link `<a [routerLink]="['/user/jim']">Jim</a>` creates the URL
 * `/user/(jim//aux:team)`.
 * See {@link Router#createUrlTree createUrlTree} for more information.
 *
 * @usageNotes
 *
 * You can use absolute or relative paths in a link, set query parameters,
 * control how parameters are handled, and keep a history of navigation states.
 *
 * ### Relative link paths
 *
 * The first segment name can be prepended with `/`, `./`, or `../`.
 * * If the first segment begins with `/`, the router looks up the route from the root of the
 *   app.
 * * If the first segment begins with `./`, or doesn't begin with a slash, the router
 *   looks in the children of the current activated route.
 * * If the first segment begins with `../`, the router goes up one level in the route tree.
 *
 * ### Setting and handling query params and fragments
 *
 * The following link adds a query parameter and a fragment to the generated URL:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
 *   link to user component
 * </a>
 * ```
 * By default, the directive constructs the new URL using the given query parameters.
 * The example generates the link: `/user/bob?debug=true#education`.
 *
 * You can instruct the directive to handle query parameters differently
 * by specifying the `queryParamsHandling` option in the link.
 * Allowed values are:
 *
 *  - `'merge'`: Merge the given `queryParams` into the current query params.
 *  - `'preserve'`: Preserve the current query params.
 *
 * For example:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
 *   link to user component
 * </a>
 * ```
 *
 * See {@link UrlCreationOptions.queryParamsHandling UrlCreationOptions#queryParamsHandling}.
 *
 * ### Preserving navigation history
 *
 * You can provide a `state` value to be persisted to the browser's
 * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).
 * For example:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [state]="{tracingId: 123}">
 *   link to user component
 * </a>
 * ```
 *
 * Use {@link Router.getCurrentNavigation() Router#getCurrentNavigation} to retrieve a saved
 * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`
 * event:
 *
 * ```
 * // Get NavigationStart events
 * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {
 *   const navigation = router.getCurrentNavigation();
 *   tracingService.trace({id: navigation.extras.state.tracingId});
 * });
 * ```
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


var RouterLink = /*#__PURE__*/function () {
  function RouterLink(router, route, tabIndex, renderer, el) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterLink);

    this.router = router;
    this.route = route;
    this.commands = [];
    /** @internal */

    this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_32__.Subject();

    if (tabIndex == null) {
      renderer.setAttribute(el.nativeElement, 'tabindex', '0');
    }
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterLink, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes
      // to the RouterLinks it's tracking.
      this.onChanges.next(this);
    }
    /**
     * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
     *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`
     * @see {@link Router#createUrlTree Router#createUrlTree}
     */

  }, {
    key: "routerLink",
    set: function set(commands) {
      if (commands != null) {
        this.commands = Array.isArray(commands) ? commands : [commands];
      } else {
        this.commands = [];
      }
    }
    /** @nodoc */

  }, {
    key: "onClick",
    value: function onClick() {
      var extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl),
        state: this.state
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return true;
    }
  }, {
    key: "urlTree",
    get: function get() {
      return this.router.createUrlTree(this.commands, {
        // If the `relativeTo` input is not defined, we want to use `this.route` by default.
        // Otherwise, we should use the value provided by the user in the input.
        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
        queryParams: this.queryParams,
        fragment: this.fragment,
        queryParamsHandling: this.queryParamsHandling,
        preserveFragment: attrBoolValue(this.preserveFragment)
      });
    }
  }]);

  return RouterLink;
}();

RouterLink.ɵfac = function RouterLink_Factory(t) {
  return new (t || RouterLink)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef));
};

RouterLink.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: RouterLink,
  selectors: [["", "routerLink", "", 5, "a", 5, "area"]],
  hostBindings: function RouterLink_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function RouterLink_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
  },
  inputs: {
    routerLink: "routerLink",
    queryParams: "queryParams",
    fragment: "fragment",
    queryParamsHandling: "queryParamsHandling",
    preserveFragment: "preserveFragment",
    skipLocationChange: "skipLocationChange",
    replaceUrl: "replaceUrl",
    state: "state",
    relativeTo: "relativeTo"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});

RouterLink.ctorParameters = function () {
  return [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Attribute,
      args: ['tabindex']
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }];
};

RouterLink.propDecorators = {
  queryParams: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  fragment: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  queryParamsHandling: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  preserveFragment: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  skipLocationChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  replaceUrl: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  state: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  relativeTo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  routerLink: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  onClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['click']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterLink, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: ':not(a):not(area)[routerLink]'
    }]
  }], function () {
    return [{
      type: Router
    }, {
      type: ActivatedRoute
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Attribute,
        args: ['tabindex']
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }];
  }, {
    routerLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],

    /** @nodoc */
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['click']
    }],
    queryParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    fragment: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    queryParamsHandling: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    preserveFragment: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    skipLocationChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    replaceUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    state: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    relativeTo: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();
/**
 * @description
 *
 * Lets you link to specific routes in your app.
 *
 * See `RouterLink` for more information.
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


var RouterLinkWithHref = /*#__PURE__*/function () {
  function RouterLinkWithHref(router, route, locationStrategy) {
    var _this33 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterLinkWithHref);

    this.router = router;
    this.route = route;
    this.locationStrategy = locationStrategy;
    this.commands = [];
    /** @internal */

    this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_32__.Subject();
    this.subscription = router.events.subscribe(function (s) {
      if (s instanceof NavigationEnd) {
        _this33.updateTargetUrlAndHref();
      }
    });
  }
  /**
   * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
   *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
   *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`
   * @see {@link Router#createUrlTree Router#createUrlTree}
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterLinkWithHref, [{
    key: "routerLink",
    set: function set(commands) {
      if (commands != null) {
        this.commands = Array.isArray(commands) ? commands : [commands];
      } else {
        this.commands = [];
      }
    }
    /** @nodoc */

  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this.updateTargetUrlAndHref();
      this.onChanges.next(this);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.subscription.unsubscribe();
    }
    /** @nodoc */

  }, {
    key: "onClick",
    value: function onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }

      if (typeof this.target === 'string' && this.target != '_self') {
        return true;
      }

      var extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl),
        state: this.state
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return false;
    }
  }, {
    key: "updateTargetUrlAndHref",
    value: function updateTargetUrlAndHref() {
      this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    }
  }, {
    key: "urlTree",
    get: function get() {
      return this.router.createUrlTree(this.commands, {
        // If the `relativeTo` input is not defined, we want to use `this.route` by default.
        // Otherwise, we should use the value provided by the user in the input.
        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
        queryParams: this.queryParams,
        fragment: this.fragment,
        queryParamsHandling: this.queryParamsHandling,
        preserveFragment: attrBoolValue(this.preserveFragment)
      });
    }
  }]);

  return RouterLinkWithHref;
}();

RouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) {
  return new (t || RouterLinkWithHref)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_35__.LocationStrategy));
};

RouterLinkWithHref.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: RouterLinkWithHref,
  selectors: [["a", "routerLink", ""], ["area", "routerLink", ""]],
  hostVars: 2,
  hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("click", function RouterLinkWithHref_click_HostBindingHandler($event) {
        return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵhostProperty"]("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsanitizeUrl"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵattribute"]("target", ctx.target);
    }
  },
  inputs: {
    routerLink: "routerLink",
    target: "target",
    queryParams: "queryParams",
    fragment: "fragment",
    queryParamsHandling: "queryParamsHandling",
    preserveFragment: "preserveFragment",
    skipLocationChange: "skipLocationChange",
    replaceUrl: "replaceUrl",
    state: "state",
    relativeTo: "relativeTo"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});

RouterLinkWithHref.ctorParameters = function () {
  return [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.LocationStrategy
  }];
};

RouterLinkWithHref.propDecorators = {
  target: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding,
    args: ['attr.target']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  queryParams: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  fragment: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  queryParamsHandling: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  preserveFragment: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  skipLocationChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  replaceUrl: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  state: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  relativeTo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  href: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding
  }],
  routerLink: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  onClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterLinkWithHref, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: 'a[routerLink],area[routerLink]'
    }]
  }], function () {
    return [{
      type: Router
    }, {
      type: ActivatedRoute
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.LocationStrategy
    }];
  }, {
    routerLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],

    /** @nodoc */
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['click', ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey']]
    }],
    href: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding
    }],
    target: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding,
      args: ['attr.target']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    queryParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    fragment: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    queryParamsHandling: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    preserveFragment: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    skipLocationChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    replaceUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    state: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    relativeTo: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();

function attrBoolValue(s) {
  return s === '' || !!s;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * @description
 *
 * Tracks whether the linked route of an element is currently active, and allows you
 * to specify one or more CSS classes to add to the element when the linked route
 * is active.
 *
 * Use this directive to create a visual distinction for elements associated with an active route.
 * For example, the following code highlights the word "Bob" when the router
 * activates the associated route:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * Whenever the URL is either '/user' or '/user/bob', the "active-link" class is
 * added to the anchor tag. If the URL changes, the class is removed.
 *
 * You can set more than one class using a space-separated string or an array.
 * For example:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
 * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * To add the classes only when the URL matches the link exactly, add the option `exact: true`:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * To directly check the `isActive` status of the link, assign the `RouterLinkActive`
 * instance to a template variable.
 * For example, the following checks the status without assigning any CSS classes:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.
 * For example, the following sets the active-link class on the `<div>`  parent tag
 * when the URL is either '/user/jim' or '/user/bob'.
 *
 * ```
 * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
 *   <a routerLink="/user/jim">Jim</a>
 *   <a routerLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


var RouterLinkActive = /*#__PURE__*/function () {
  function RouterLinkActive(router, element, renderer, cdr, link, linkWithHref) {
    var _this34 = this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterLinkActive);

    this.router = router;
    this.element = element;
    this.renderer = renderer;
    this.cdr = cdr;
    this.link = link;
    this.linkWithHref = linkWithHref;
    this.classes = [];
    this.isActive = false;
    /**
     * Options to configure how to determine if the router link is active.
     *
     * These options are passed to the `Router.isActive()` function.
     *
     * @see Router.isActive
     */

    this.routerLinkActiveOptions = {
      exact: false
    };
    this.routerEventsSubscription = router.events.subscribe(function (s) {
      if (s instanceof NavigationEnd) {
        _this34.update();
      }
    });
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterLinkActive, [{
    key: "ngAfterContentInit",
    value: function ngAfterContentInit() {
      var _this35 = this;

      // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).
      (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(this.links.changes, this.linksWithHrefs.changes, (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_36__.mergeAll)()).subscribe(function (_) {
        _this35.update();

        _this35.subscribeToEachLinkOnChanges();
      });
    }
  }, {
    key: "subscribeToEachLinkOnChanges",
    value: function subscribeToEachLinkOnChanges() {
      var _this36 = this;

      var _a;

      (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
      var allLinkChanges = [].concat((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(this.links.toArray()), (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__.default)(this.linksWithHrefs.toArray()), [this.link, this.linkWithHref]).filter(function (link) {
        return !!link;
      }).map(function (link) {
        return link.onChanges;
      });
      this.linkInputChangesSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(allLinkChanges).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_36__.mergeAll)()).subscribe(function (link) {
        if (_this36.isActive !== _this36.isLinkActive(_this36.router)(link)) {
          _this36.update();
        }
      });
    }
  }, {
    key: "routerLinkActive",
    set: function set(data) {
      var classes = Array.isArray(data) ? data : data.split(' ');
      this.classes = classes.filter(function (c) {
        return !!c;
      });
    }
    /** @nodoc */

  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      this.update();
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      var _a;

      this.routerEventsSubscription.unsubscribe();
      (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
  }, {
    key: "update",
    value: function update() {
      var _this37 = this;

      if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
      Promise.resolve().then(function () {
        var hasActiveLinks = _this37.hasActiveLinks();

        if (_this37.isActive !== hasActiveLinks) {
          _this37.isActive = hasActiveLinks;

          _this37.cdr.markForCheck();

          _this37.classes.forEach(function (c) {
            if (hasActiveLinks) {
              _this37.renderer.addClass(_this37.element.nativeElement, c);
            } else {
              _this37.renderer.removeClass(_this37.element.nativeElement, c);
            }
          });
        }
      });
    }
  }, {
    key: "isLinkActive",
    value: function isLinkActive(router) {
      var options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : this.routerLinkActiveOptions.exact || false;
      return function (link) {
        return router.isActive(link.urlTree, options);
      };
    }
  }, {
    key: "hasActiveLinks",
    value: function hasActiveLinks() {
      var isActiveCheckFn = this.isLinkActive(this.router);
      return this.link && isActiveCheckFn(this.link) || this.linkWithHref && isActiveCheckFn(this.linkWithHref) || this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);
    }
  }]);

  return RouterLinkActive;
}();

RouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) {
  return new (t || RouterLinkActive)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](RouterLink, 8), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](RouterLinkWithHref, 8));
};

RouterLinkActive.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: RouterLinkActive,
  selectors: [["", "routerLinkActive", ""]],
  contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵcontentQuery"](dirIndex, RouterLink, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵcontentQuery"](dirIndex, RouterLinkWithHref, 5);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵloadQuery"]()) && (ctx.links = _t);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵloadQuery"]()) && (ctx.linksWithHrefs = _t);
    }
  },
  inputs: {
    routerLinkActiveOptions: "routerLinkActiveOptions",
    routerLinkActive: "routerLinkActive"
  },
  exportAs: ["routerLinkActive"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});

RouterLinkActive.ctorParameters = function () {
  return [{
    type: Router
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
  }, {
    type: RouterLink,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }]
  }, {
    type: RouterLinkWithHref,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }]
  }];
};

RouterLinkActive.propDecorators = {
  links: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ContentChildren,
    args: [RouterLink, {
      descendants: true
    }]
  }],
  linksWithHrefs: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ContentChildren,
    args: [RouterLinkWithHref, {
      descendants: true
    }]
  }],
  routerLinkActiveOptions: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  routerLinkActive: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterLinkActive, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: '[routerLinkActive]',
      exportAs: 'routerLinkActive'
    }]
  }], function () {
    return [{
      type: Router
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
    }, {
      type: RouterLink,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }]
    }, {
      type: RouterLinkWithHref,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }]
    }];
  }, {
    routerLinkActiveOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    routerLinkActive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    links: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }],
    linksWithHrefs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ContentChildren,
      args: [RouterLinkWithHref, {
        descendants: true
      }]
    }]
  });
})();
/**
 * Use instead of `'paths' in options` to be compatible with property renaming
 */


function isActiveMatchOptions(options) {
  return !!options.paths;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Acts as a placeholder that Angular dynamically fills based on the current router state.
 *
 * Each outlet can have a unique name, determined by the optional `name` attribute.
 * The name cannot be set or changed dynamically. If not set, default value is "primary".
 *
 * ```
 * <router-outlet></router-outlet>
 * <router-outlet name='left'></router-outlet>
 * <router-outlet name='right'></router-outlet>
 * ```
 *
 * Named outlets can be the targets of secondary routes.
 * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:
 *
 * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`
 *
 * Using named outlets and secondary routes, you can target multiple outlets in
 * the same `RouterLink` directive.
 *
 * The router keeps track of separate branches in a navigation tree for each named outlet and
 * generates a representation of that tree in the URL.
 * The URL for a secondary route uses the following syntax to specify both the primary and secondary
 * routes at the same time:
 *
 * `http://base-path/primary-route-path(outlet-name:route-path)`
 *
 * A router outlet emits an activate event when a new component is instantiated,
 * and a deactivate event when a component is destroyed.
 *
 * ```
 * <router-outlet
 *   (activate)='onActivate($event)'
 *   (deactivate)='onDeactivate($event)'></router-outlet>
 * ```
 *
 * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets "Example of a named
 * outlet and secondary route configuration").
 * @see `RouterLink`
 * @see `Route`
 * @ngModule RouterModule
 *
 * @publicApi
 */


var RouterOutlet = /*#__PURE__*/function () {
  function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterOutlet);

    this.parentContexts = parentContexts;
    this.location = location;
    this.resolver = resolver;
    this.changeDetector = changeDetector;
    this.activated = null;
    this._activatedRoute = null;
    this.activateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.deactivateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this.name = name || PRIMARY_OUTLET;
    parentContexts.onChildOutletCreated(this.name, this);
  }
  /** @nodoc */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterOutlet, [{
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    /** @nodoc */

  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      if (!this.activated) {
        // If the outlet was not instantiated at the time the route got activated we need to populate
        // the outlet when it is initialized (ie inside a NgIf)
        var context = this.parentContexts.getContext(this.name);

        if (context && context.route) {
          if (context.attachRef) {
            // `attachRef` is populated when there is an existing component to mount
            this.attach(context.attachRef, context.route);
          } else {
            // otherwise the component defined in the configuration is created
            this.activateWith(context.route, context.resolver || null);
          }
        }
      }
    }
  }, {
    key: "isActivated",
    get: function get() {
      return !!this.activated;
    }
    /**
     * @returns The currently activated component instance.
     * @throws An error if the outlet is not activated.
     */

  }, {
    key: "component",
    get: function get() {
      if (!this.activated) throw new Error('Outlet is not activated');
      return this.activated.instance;
    }
  }, {
    key: "activatedRoute",
    get: function get() {
      if (!this.activated) throw new Error('Outlet is not activated');
      return this._activatedRoute;
    }
  }, {
    key: "activatedRouteData",
    get: function get() {
      if (this._activatedRoute) {
        return this._activatedRoute.snapshot.data;
      }

      return {};
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */

  }, {
    key: "detach",
    value: function detach() {
      if (!this.activated) throw new Error('Outlet is not activated');
      this.location.detach();
      var cmp = this.activated;
      this.activated = null;
      this._activatedRoute = null;
      return cmp;
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */

  }, {
    key: "attach",
    value: function attach(ref, activatedRoute) {
      this.activated = ref;
      this._activatedRoute = activatedRoute;
      this.location.insert(ref.hostView);
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      if (this.activated) {
        var c = this.component;
        this.activated.destroy();
        this.activated = null;
        this._activatedRoute = null;
        this.deactivateEvents.emit(c);
      }
    }
  }, {
    key: "activateWith",
    value: function activateWith(activatedRoute, resolver) {
      if (this.isActivated) {
        throw new Error('Cannot activate an already activated outlet');
      }

      this._activatedRoute = activatedRoute;
      var snapshot = activatedRoute._futureSnapshot;
      var component = snapshot.routeConfig.component;
      resolver = resolver || this.resolver;
      var factory = resolver.resolveComponentFactory(component);
      var childContexts = this.parentContexts.getOrCreateContext(this.name).children;
      var injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
      this.activated = this.location.createComponent(factory, this.location.length, injector); // Calling `markForCheck` to make sure we will run the change detection when the
      // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.

      this.changeDetector.markForCheck();
      this.activateEvents.emit(this.activated.instance);
    }
  }]);

  return RouterOutlet;
}();

RouterOutlet.ɵfac = function RouterOutlet_Factory(t) {
  return new (t || RouterOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinjectAttribute"]('name'), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef));
};

RouterOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: RouterOutlet,
  selectors: [["router-outlet"]],
  outputs: {
    activateEvents: "activate",
    deactivateEvents: "deactivate"
  },
  exportAs: ["outlet"]
});

RouterOutlet.ctorParameters = function () {
  return [{
    type: ChildrenOutletContexts
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ComponentFactoryResolver
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Attribute,
      args: ['name']
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
  }];
};

RouterOutlet.propDecorators = {
  activateEvents: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output,
    args: ['activate']
  }],
  deactivateEvents: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output,
    args: ['deactivate']
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterOutlet, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: 'router-outlet',
      exportAs: 'outlet'
    }]
  }], function () {
    return [{
      type: ChildrenOutletContexts
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ComponentFactoryResolver
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Attribute,
        args: ['name']
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
    }];
  }, {
    activateEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output,
      args: ['activate']
    }],
    deactivateEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output,
      args: ['deactivate']
    }]
  });
})();

var OutletInjector = /*#__PURE__*/function () {
  function OutletInjector(route, childContexts, parent) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, OutletInjector);

    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(OutletInjector, [{
    key: "get",
    value: function get(token, notFoundValue) {
      if (token === ActivatedRoute) {
        return this.route;
      }

      if (token === ChildrenOutletContexts) {
        return this.childContexts;
      }

      return this.parent.get(token, notFoundValue);
    }
  }]);

  return OutletInjector;
}();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a preloading strategy.
 *
 * @publicApi
 */


var PreloadingStrategy = function PreloadingStrategy() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, PreloadingStrategy);
};
/**
 * @description
 *
 * Provides a preloading strategy that preloads all modules as quickly as possible.
 *
 * ```
 * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
 * ```
 *
 * @publicApi
 */


var PreloadAllModules = /*#__PURE__*/function () {
  function PreloadAllModules() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, PreloadAllModules);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(PreloadAllModules, [{
    key: "preload",
    value: function preload(route, fn) {
      return fn().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.catchError)(function () {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null);
      }));
    }
  }]);

  return PreloadAllModules;
}();
/**
 * @description
 *
 * Provides a preloading strategy that does not preload any modules.
 *
 * This strategy is enabled by default.
 *
 * @publicApi
 */


var NoPreloading = /*#__PURE__*/function () {
  function NoPreloading() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, NoPreloading);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(NoPreloading, [{
    key: "preload",
    value: function preload(route, fn) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null);
    }
  }]);

  return NoPreloading;
}();
/**
 * The preloader optimistically loads all router configurations to
 * make navigations into lazily-loaded sections of the application faster.
 *
 * The preloader runs in the background. When the router bootstraps, the preloader
 * starts listening to all navigation events. After every such event, the preloader
 * will check if any configurations can be loaded lazily.
 *
 * If a route is protected by `canLoad` guards, the preloaded will not load it.
 *
 * @publicApi
 */


var RouterPreloader = /*#__PURE__*/function () {
  function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterPreloader);

    this.router = router;
    this.injector = injector;
    this.preloadingStrategy = preloadingStrategy;

    var onStartLoad = function onStartLoad(r) {
      return router.triggerEvent(new RouteConfigLoadStart(r));
    };

    var onEndLoad = function onEndLoad(r) {
      return router.triggerEvent(new RouteConfigLoadEnd(r));
    };

    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterPreloader, [{
    key: "setUpPreloading",
    value: function setUpPreloading() {
      var _this38 = this;

      this.subscription = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.filter)(function (e) {
        return e instanceof NavigationEnd;
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.concatMap)(function () {
        return _this38.preload();
      })).subscribe(function () {});
    }
  }, {
    key: "preload",
    value: function preload() {
      var ngModule = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleRef);
      return this.processRoutes(ngModule, this.router.config);
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }
  }, {
    key: "processRoutes",
    value: function processRoutes(ngModule, routes) {
      var res = [];

      var _iterator10 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_2__.default)(routes),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var route = _step10.value;

          // we already have the config loaded, just recurse
          if (route.loadChildren && !route.canLoad && route._loadedConfig) {
            var childConfig = route._loadedConfig;
            res.push(this.processRoutes(childConfig.module, childConfig.routes)); // no config loaded, fetch the config
          } else if (route.loadChildren && !route.canLoad) {
            res.push(this.preloadConfig(ngModule, route)); // recurse into children
          } else if (route.children) {
            res.push(this.processRoutes(ngModule, route.children));
          }
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(res).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_36__.mergeAll)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.map)(function (_) {
        return void 0;
      }));
    }
  }, {
    key: "preloadConfig",
    value: function preloadConfig(ngModule, route) {
      var _this39 = this;

      return this.preloadingStrategy.preload(route, function () {
        var loaded$ = route._loadedConfig ? (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(route._loadedConfig) : _this39.loader.load(ngModule.injector, route);
        return loaded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.mergeMap)(function (config) {
          route._loadedConfig = config;
          return _this39.processRoutes(config.module, config.routes);
        }));
      });
    }
  }]);

  return RouterPreloader;
}();

RouterPreloader.ɵfac = function RouterPreloader_Factory(t) {
  return new (t || RouterPreloader)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](PreloadingStrategy));
};

RouterPreloader.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: RouterPreloader,
  factory: RouterPreloader.ɵfac
});

RouterPreloader.ctorParameters = function () {
  return [{
    type: Router
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
  }, {
    type: PreloadingStrategy
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterPreloader, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: Router
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
    }, {
      type: PreloadingStrategy
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var RouterScroller = /*#__PURE__*/function () {
  function RouterScroller(router,
  /** @docsNotRequired */
  viewportScroller) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterScroller);

    this.router = router;
    this.viewportScroller = viewportScroller;
    this.options = options;
    this.lastId = 0;
    this.lastSource = 'imperative';
    this.restoredId = 0;
    this.store = {}; // Default both options to 'disabled'

    options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';
    options.anchorScrolling = options.anchorScrolling || 'disabled';
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterScroller, [{
    key: "init",
    value: function init() {
      // we want to disable the automatic scrolling because having two places
      // responsible for scrolling results race conditions, especially given
      // that browser don't implement this behavior consistently
      if (this.options.scrollPositionRestoration !== 'disabled') {
        this.viewportScroller.setHistoryScrollRestoration('manual');
      }

      this.routerEventsSubscription = this.createScrollEvents();
      this.scrollEventsSubscription = this.consumeScrollEvents();
    }
  }, {
    key: "createScrollEvents",
    value: function createScrollEvents() {
      var _this40 = this;

      return this.router.events.subscribe(function (e) {
        if (e instanceof NavigationStart) {
          // store the scroll position of the current stable navigations.
          _this40.store[_this40.lastId] = _this40.viewportScroller.getScrollPosition();
          _this40.lastSource = e.navigationTrigger;
          _this40.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
        } else if (e instanceof NavigationEnd) {
          _this40.lastId = e.id;

          _this40.scheduleScrollEvent(e, _this40.router.parseUrl(e.urlAfterRedirects).fragment);
        }
      });
    }
  }, {
    key: "consumeScrollEvents",
    value: function consumeScrollEvents() {
      var _this41 = this;

      return this.router.events.subscribe(function (e) {
        if (!(e instanceof Scroll)) return; // a popstate event. The pop state event will always ignore anchor scrolling.

        if (e.position) {
          if (_this41.options.scrollPositionRestoration === 'top') {
            _this41.viewportScroller.scrollToPosition([0, 0]);
          } else if (_this41.options.scrollPositionRestoration === 'enabled') {
            _this41.viewportScroller.scrollToPosition(e.position);
          } // imperative navigation "forward"

        } else {
          if (e.anchor && _this41.options.anchorScrolling === 'enabled') {
            _this41.viewportScroller.scrollToAnchor(e.anchor);
          } else if (_this41.options.scrollPositionRestoration !== 'disabled') {
            _this41.viewportScroller.scrollToPosition([0, 0]);
          }
        }
      });
    }
  }, {
    key: "scheduleScrollEvent",
    value: function scheduleScrollEvent(routerEvent, anchor) {
      this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));
    }
    /** @nodoc */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.routerEventsSubscription) {
        this.routerEventsSubscription.unsubscribe();
      }

      if (this.scrollEventsSubscription) {
        this.scrollEventsSubscription.unsubscribe();
      }
    }
  }]);

  return RouterScroller;
}();

RouterScroller.ɵfac = function RouterScroller_Factory(t) {
  return new (t || RouterScroller)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_35__.ViewportScroller), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](undefined));
};

RouterScroller.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: RouterScroller,
  factory: RouterScroller.ɵfac
});

RouterScroller.ctorParameters = function () {
  return [{
    type: Router
  }, {
    type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.ViewportScroller
  }, {
    type: undefined
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterScroller, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: Router
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_35__.ViewportScroller
    }, {
      type: undefined
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The directives defined in the `RouterModule`.
 */


var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent];
/**
 * A [DI token](guide/glossary/#di-token) for the router service.
 *
 * @publicApi
 */

var ROUTER_CONFIGURATION = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('ROUTER_CONFIGURATION');
/**
 * @docsNotRequired
 */

var ROUTER_FORROOT_GUARD = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('ROUTER_FORROOT_GUARD');
var ɵ0 = {
  enableTracing: false
};
var ROUTER_PROVIDERS = [_angular_common__WEBPACK_IMPORTED_MODULE_35__.Location, {
  provide: UrlSerializer,
  useClass: DefaultUrlSerializer
}, {
  provide: Router,
  useFactory: setupRouter,
  deps: [UrlSerializer, ChildrenOutletContexts, _angular_common__WEBPACK_IMPORTED_MODULE_35__.Location, _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector, _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader, _angular_core__WEBPACK_IMPORTED_MODULE_8__.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional()], [RouteReuseStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional()]]
}, ChildrenOutletContexts, {
  provide: ActivatedRoute,
  useFactory: rootRoute,
  deps: [Router]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModuleFactoryLoader,
  useClass: _angular_core__WEBPACK_IMPORTED_MODULE_8__.SystemJsNgModuleLoader
}, RouterPreloader, NoPreloading, PreloadAllModules, {
  provide: ROUTER_CONFIGURATION,
  useValue: ɵ0
}];

function routerNgProbeToken() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgProbeToken('Router', Router);
}
/**
 * @description
 *
 * Adds directives and providers for in-app navigation among views defined in an application.
 * Use the Angular `Router` service to declaratively specify application states and manage state
 * transitions.
 *
 * You can import this NgModule multiple times, once for each lazy-loaded bundle.
 * However, only one `Router` service can be active.
 * To ensure this, there are two ways to register routes when importing this module:
 *
 * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given
 * routes, and the `Router` service itself.
 * * The `forChild()` method creates an `NgModule` that contains all the directives and the given
 * routes, but does not include the `Router` service.
 *
 * @see [Routing and Navigation guide](guide/router) for an
 * overview of how the `Router` service should be used.
 *
 * @publicApi
 */


var RouterModule = /*#__PURE__*/function () {
  // Note: We are injecting the Router so it gets created eagerly...
  function RouterModule(guard, router) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterModule);
  }
  /**
   * Creates and configures a module with all the router providers and directives.
   * Optionally sets up an application listener to perform an initial navigation.
   *
   * When registering the NgModule at the root, import as follows:
   *
   * ```
   * @NgModule({
   *   imports: [RouterModule.forRoot(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the application.
   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
   * @return The new `NgModule`.
   *
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterModule, null, [{
    key: "forRoot",
    value: function forRoot(routes, config) {
      return {
        ngModule: RouterModule,
        providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
          provide: ROUTER_FORROOT_GUARD,
          useFactory: provideForRootGuard,
          deps: [[Router, new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_8__.SkipSelf()]]
        }, {
          provide: ROUTER_CONFIGURATION,
          useValue: config ? config : {}
        }, {
          provide: _angular_common__WEBPACK_IMPORTED_MODULE_35__.LocationStrategy,
          useFactory: provideLocationStrategy,
          deps: [_angular_common__WEBPACK_IMPORTED_MODULE_35__.PlatformLocation, [new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject(_angular_common__WEBPACK_IMPORTED_MODULE_35__.APP_BASE_HREF), new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional()], ROUTER_CONFIGURATION]
        }, {
          provide: RouterScroller,
          useFactory: createRouterScroller,
          deps: [Router, _angular_common__WEBPACK_IMPORTED_MODULE_35__.ViewportScroller, ROUTER_CONFIGURATION]
        }, {
          provide: PreloadingStrategy,
          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
        }, {
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgProbeToken,
          multi: true,
          useFactory: routerNgProbeToken
        }, provideRouterInitializer()]
      };
    }
    /**
     * Creates a module with all the router directives and a provider registering routes,
     * without creating a new Router service.
     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
     *
     * ```
     * @NgModule({
     *   imports: [RouterModule.forChild(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * @param routes An array of `Route` objects that define the navigation paths for the submodule.
     * @return The new NgModule.
     *
     */

  }, {
    key: "forChild",
    value: function forChild(routes) {
      return {
        ngModule: RouterModule,
        providers: [provideRoutes(routes)]
      };
    }
  }]);

  return RouterModule;
}();

RouterModule.ɵfac = function RouterModule_Factory(t) {
  return new (t || RouterModule)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](ROUTER_FORROOT_GUARD, 8), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](Router, 8));
};

RouterModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineNgModule"]({
  type: RouterModule
});
RouterModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjector"]({});

RouterModule.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [ROUTER_FORROOT_GUARD]
    }]
  }, {
    type: Router,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule,
    args: [{
      declarations: ROUTER_DIRECTIVES,
      exports: ROUTER_DIRECTIVES,
      entryComponents: [ɵEmptyOutletComponent]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [ROUTER_FORROOT_GUARD]
      }]
    }, {
      type: Router,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional
      }]
    }];
  }, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsetNgModuleScope"](RouterModule, {
    declarations: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent],
    exports: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent]
  });
})();

function createRouterScroller(router, viewportScroller, config) {
  if (config.scrollOffset) {
    viewportScroller.setOffset(config.scrollOffset);
  }

  return new RouterScroller(router, viewportScroller, config);
}

function provideLocationStrategy(platformLocationStrategy, baseHref) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return options.useHash ? new _angular_common__WEBPACK_IMPORTED_MODULE_35__.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common__WEBPACK_IMPORTED_MODULE_35__.PathLocationStrategy(platformLocationStrategy, baseHref);
}

function provideForRootGuard(router) {
  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {
    throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
  }

  return 'guarded';
}
/**
 * Registers a [DI provider](guide/glossary#provider) for a set of routes.
 * @param routes The route configuration to provide.
 *
 * @usageNotes
 *
 * ```
 * @NgModule({
 *   imports: [RouterModule.forChild(ROUTES)],
 *   providers: [provideRoutes(EXTRA_ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * @publicApi
 */


function provideRoutes(routes) {
  return [{
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ANALYZE_FOR_ENTRY_COMPONENTS,
    multi: true,
    useValue: routes
  }, {
    provide: ROUTES,
    multi: true,
    useValue: routes
  }];
}

function setupRouter(urlSerializer, contexts, location, injector, loader, compiler, config) {
  var opts = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
  var urlHandlingStrategy = arguments.length > 8 ? arguments[8] : undefined;
  var routeReuseStrategy = arguments.length > 9 ? arguments[9] : undefined;
  var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));

  if (urlHandlingStrategy) {
    router.urlHandlingStrategy = urlHandlingStrategy;
  }

  if (routeReuseStrategy) {
    router.routeReuseStrategy = routeReuseStrategy;
  }

  assignExtraOptionsToRouter(opts, router);

  if (opts.enableTracing) {
    router.events.subscribe(function (e) {
      var _a, _b; // tslint:disable:no-console


      (_a = console.group) === null || _a === void 0 ? void 0 : _a.call(console, "Router Event: ".concat(e.constructor.name));
      console.log(e.toString());
      console.log(e);
      (_b = console.groupEnd) === null || _b === void 0 ? void 0 : _b.call(console); // tslint:enable:no-console
    });
  }

  return router;
}

function assignExtraOptionsToRouter(opts, router) {
  if (opts.errorHandler) {
    router.errorHandler = opts.errorHandler;
  }

  if (opts.malformedUriErrorHandler) {
    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;
  }

  if (opts.onSameUrlNavigation) {
    router.onSameUrlNavigation = opts.onSameUrlNavigation;
  }

  if (opts.paramsInheritanceStrategy) {
    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;
  }

  if (opts.relativeLinkResolution) {
    router.relativeLinkResolution = opts.relativeLinkResolution;
  }

  if (opts.urlUpdateStrategy) {
    router.urlUpdateStrategy = opts.urlUpdateStrategy;
  }
}

function rootRoute(router) {
  return router.routerState.root;
}
/**
 * Router initialization requires two steps:
 *
 * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if
 * a resolver or a guard executes asynchronously.
 *
 * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the
 * `afterPreactivation` hook provided by the router.
 * The router navigation starts, reaches the point when preactivation is done, and then
 * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
 */


var RouterInitializer = /*#__PURE__*/function () {
  function RouterInitializer(injector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_7__.default)(this, RouterInitializer);

    this.injector = injector;
    this.initNavigation = false;
    this.destroyed = false;
    this.resultOfPreactivationDone = new rxjs__WEBPACK_IMPORTED_MODULE_32__.Subject();
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(RouterInitializer, [{
    key: "appInitializer",
    value: function appInitializer() {
      var _this42 = this;

      var p = this.injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_35__.LOCATION_INITIALIZED, Promise.resolve(null));
      return p.then(function () {
        // If the injector was destroyed, the DI lookups below will fail.
        if (_this42.destroyed) {
          return Promise.resolve(true);
        }

        var resolve = null;
        var res = new Promise(function (r) {
          return resolve = r;
        });

        var router = _this42.injector.get(Router);

        var opts = _this42.injector.get(ROUTER_CONFIGURATION);

        if (opts.initialNavigation === 'disabled') {
          router.setUpLocationChangeListener();
          resolve(true);
        } else if ( // TODO: enabled is deprecated as of v11, can be removed in v13
        opts.initialNavigation === 'enabled' || opts.initialNavigation === 'enabledBlocking') {
          router.hooks.afterPreactivation = function () {
            // only the initial navigation should be delayed
            if (!_this42.initNavigation) {
              _this42.initNavigation = true;
              resolve(true);
              return _this42.resultOfPreactivationDone; // subsequent navigations should not be delayed
            } else {
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(null);
            }
          };

          router.initialNavigation();
        } else {
          resolve(true);
        }

        return res;
      });
    }
  }, {
    key: "bootstrapListener",
    value: function bootstrapListener(bootstrappedComponentRef) {
      var opts = this.injector.get(ROUTER_CONFIGURATION);
      var preloader = this.injector.get(RouterPreloader);
      var routerScroller = this.injector.get(RouterScroller);
      var router = this.injector.get(Router);
      var ref = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_8__.ApplicationRef);

      if (bootstrappedComponentRef !== ref.components[0]) {
        return;
      } // Default case


      if (opts.initialNavigation === 'enabledNonBlocking' || opts.initialNavigation === undefined) {
        router.initialNavigation();
      }

      preloader.setUpPreloading();
      routerScroller.init();
      router.resetRootComponentType(ref.componentTypes[0]);
      this.resultOfPreactivationDone.next(null);
      this.resultOfPreactivationDone.complete();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.destroyed = true;
    }
  }]);

  return RouterInitializer;
}();

RouterInitializer.ɵfac = function RouterInitializer_Factory(t) {
  return new (t || RouterInitializer)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector));
};

RouterInitializer.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: RouterInitializer,
  factory: RouterInitializer.ɵfac
});

RouterInitializer.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](RouterInitializer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injector
    }];
  }, null);
})();

function getAppInitializer(r) {
  return r.appInitializer.bind(r);
}

function getBootstrapListener(r) {
  return r.bootstrapListener.bind(r);
}
/**
 * A [DI token](guide/glossary/#di-token) for the router initializer that
 * is called after the app is bootstrapped.
 *
 * @publicApi
 */


var ROUTER_INITIALIZER = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('Router Initializer');

function provideRouterInitializer() {
  return [RouterInitializer, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_8__.APP_INITIALIZER,
    multi: true,
    useFactory: getAppInitializer,
    deps: [RouterInitializer]
  }, {
    provide: ROUTER_INITIALIZER,
    useFactory: getBootstrapListener,
    deps: [RouterInitializer]
  }, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_8__.APP_BOOTSTRAP_LISTENER,
    multi: true,
    useExisting: ROUTER_INITIALIZER
  }];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Version('12.2.3');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 13146:
/*!********************************************************************!*\
  !*** ./node_modules/ng-monaco-editor/fesm2015/ng-monaco-editor.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CodeColorizeDirective": function() { return /* binding */ CodeColorizeDirective; },
/* harmony export */   "MONACO_PROVIDER": function() { return /* binding */ MONACO_PROVIDER; },
/* harmony export */   "MonacoCommonEditorComponent": function() { return /* binding */ MonacoCommonEditorComponent; },
/* harmony export */   "MonacoDiffEditorComponent": function() { return /* binding */ MonacoDiffEditorComponent; },
/* harmony export */   "MonacoEditorComponent": function() { return /* binding */ MonacoEditorComponent; },
/* harmony export */   "MonacoEditorConfig": function() { return /* binding */ MonacoEditorConfig; },
/* harmony export */   "MonacoEditorModule": function() { return /* binding */ MonacoEditorModule; },
/* harmony export */   "MonacoProviderFactory": function() { return /* binding */ MonacoProviderFactory; },
/* harmony export */   "MonacoProviderService": function() { return /* binding */ MonacoProviderService; },
/* harmony export */   "observeResizeOn": function() { return /* binding */ observeResizeOn; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 28557);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 38957);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 3786);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 91477);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 76491);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 25160);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ 79441);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es */ 33263);
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es */ 11434);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 22663);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/forms */ 59298);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/common */ 40093);















/**
 * Configuration over monaco editor.
 */



var _c0 = ["monacoContainer"];
var _c1 = ["monacoAnchor"];

function MonacoDiffEditorComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](1, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](2, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
  }
}

function MonacoEditorComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](1, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](2, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
  }
}

var _c2 = "ng-monaco-diff-editor,ng-monaco-editor{display:block}.ng-monaco-editor-container{height:100%}.ng-monaco-editor-container__monaco-anchor{width:100%;height:100%}.ng-monaco-editor-container__monaco-anchor .monaco-diff-editor,.ng-monaco-editor-container__monaco-anchor .monaco-editor{flex:1}.ng-monaco-editor-container,.ng-monaco-editor-container__monaco-anchor{flex:1;display:flex;flex-flow:column}.ng-monaco-editor-spinner{width:40px;height:40px;position:absolute;top:50%;left:50%}.ng-monaco-editor-spinner__double-bounce1,.ng-monaco-editor-spinner__double-bounce2{width:100%;height:100%;border-radius:50%;background-color:#333;opacity:.6;position:absolute;top:0;left:0;animation:sk-bounce 2s ease-in-out infinite}.ng-monaco-editor-spinner__double-bounce2{animation-delay:-1s}@keyframes sk-bounce{0%,to{transform:scale(0)}50%{transform:scale(1)}}";

var MonacoEditorConfig = function MonacoEditorConfig() {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoEditorConfig);
};
/**
 * Provider for monaco editor.
 */


var MonacoProviderService = /*#__PURE__*/function () {
  function MonacoProviderService(monacoEditorConfig) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoProviderService);

    this.monacoEditorConfig = monacoEditorConfig;
    this.isDarkTheme$$ = new rxjs__WEBPACK_IMPORTED_MODULE_9__.BehaviorSubject(this.isDarkTheme);
    this.isDarkTheme$ = this.isDarkTheme$$.asObservable();
    this._theme = this.themes[0];
  }
  /**
   * Returns all available themes
   */


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MonacoProviderService, [{
    key: "themes",
    get: function get() {
      return ['vs', 'vs-dark'];
    }
    /**
     * Return the current theme
     */

  }, {
    key: "theme",
    get: function get() {
      return this._theme;
    }
  }, {
    key: "isDarkTheme",
    get: function get() {
      var _a;

      return (_a = this._theme) === null || _a === void 0 ? void 0 : _a.endsWith('-dark');
    }
    /**
     * Expose global monaco object
     */

  }, {
    key: "monaco",
    get: function get() {
      return this._monaco || window.monaco;
    }
    /**
     * Expose global amd require function/object
     */

  }, {
    key: "require",
    get: function get() {
      return window.require;
    }
  }, {
    key: "initMonaco",
    value: function initMonaco() {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().mark(function _callee() {
        return _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this._loadingPromise || (this._loadingPromise = this.loadMonaco()));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
    /**
     * Load additional monaco-editor modules.
     */

  }, {
    key: "loadModule",
    value: function loadModule(deps) {
      var _this = this;

      return new Promise(function (resolve) {
        return _this.require(deps, resolve);
      });
    }
  }, {
    key: "toggleTheme",
    value: function toggleTheme() {
      var _this2 = this;

      this.changeTheme(this.themes.find(function (theme) {
        return theme !== _this2.theme;
      }));
    }
  }, {
    key: "changeTheme",
    value: function changeTheme(theme) {
      this.assertMonaco();
      this._theme = theme;
      this.monaco.editor.setTheme(theme);
      this.isDarkTheme$$.next(this.isDarkTheme);
    }
  }, {
    key: "getEditorOptions",
    value: function getEditorOptions(options) {
      return Object.assign(Object.assign(Object.assign({}, this.monacoEditorConfig.defaultOptions), {
        theme: this.theme
      }), options);
    }
    /**
     * Create a code-editor at the given dom element.
     */

  }, {
    key: "create",
    value: function create(domElement, options) {
      this.assertMonaco();
      return this.monaco.editor.create(domElement, this.getEditorOptions(options));
    }
  }, {
    key: "createDiffEditor",
    value: function createDiffEditor(domElement, options) {
      this.assertMonaco();
      return this.monaco.editor.createDiffEditor(domElement, Object.assign({
        renderSideBySide: false,
        // You can optionally disable resizing by passing in the option.
        enableSplitViewResizing: false
      }, this.getEditorOptions(options)));
    }
    /**
     * Colorize an arbitrary element:
     */

  }, {
    key: "colorizeElement",
    value: function colorizeElement(domElement, options) {
      this.assertMonaco();
      return this.monaco.editor.colorizeElement(domElement, Object.assign({
        theme: this.theme
      }, options));
    }
    /**
     * Let the monaco-editor returns language information for the given alias.
     */

  }, {
    key: "getLanguageExtensionPoint",
    value: function getLanguageExtensionPoint(alias) {
      this.assertMonaco();
      return this.monaco.languages.getLanguages().find(function (_ref) {
        var aliases = _ref.aliases,
            id = _ref.id;
        return (aliases === null || aliases === void 0 ? void 0 : aliases.includes(alias)) || id === alias;
      });
    }
    /**
     * Currently monaco-editor is loaded via its own loader and it is RequireJs (amd) spec:
     */

  }, {
    key: "configAmdLoader",
    value: function configAmdLoader(baseUrl) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_this3.monaco && _this3.require) {
          return resolve();
        }

        var loaderScript = document.createElement('script');
        loaderScript.type = 'text/javascript';
        loaderScript.src = [_this3.monacoEditorConfig.baseUrl, 'vs/loader.js'].filter(function (_) {
          return !!_;
        }).join('/');
        loaderScript.addEventListener('load', function () {
          _this3.require.config({
            baseUrl: baseUrl,
            paths: {
              vs: 'vs'
            }
          });

          resolve();
        });
        loaderScript.addEventListener('error', reject);
        document.body.append(loaderScript);
      });
    }
  }, {
    key: "assertMonaco",
    value: function assertMonaco() {
      if (!this.monaco) {
        throw new Error('`monaco` has not been initialized, please call `initMonaco()` first');
      }
    }
  }, {
    key: "loadMonaco",
    value: function loadMonaco() {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().mark(function _callee2() {
        var _this4 = this;

        return _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.monacoEditorConfig.dynamicImport) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", this.monacoEditorConfig.dynamicImport().then(function (monaco) {
                  return _this4._monaco = monaco;
                }));

              case 2:
                if (!(this.monacoEditorConfig.baseUrl != null)) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 5;
                return this.configAmdLoader(this.monacoEditorConfig.baseUrl);

              case 5:
                return _context2.abrupt("return", this.loadModule(['vs/editor/editor.main']).then(function (monaco) {
                  return _this4._monaco = monaco;
                }));

              case 6:
                if (window.monaco) {
                  _context2.next = 8;
                  break;
                }

                throw new Error('No `monaco` found on `window`');

              case 8:
                return _context2.abrupt("return", Promise.resolve(window.monaco));

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
    }
  }]);

  return MonacoProviderService;
}();

MonacoProviderService.ɵfac = function MonacoProviderService_Factory(t) {
  return new (t || MonacoProviderService)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](MonacoEditorConfig));
};

MonacoProviderService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: MonacoProviderService,
  factory: MonacoProviderService.ɵfac
});

MonacoProviderService.ctorParameters = function () {
  return [{
    type: MonacoEditorConfig
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MonacoProviderService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: MonacoEditorConfig
    }];
  }, null);
})();
/**
 * Colorize a section of code with Monaco Editor.
 */


var CodeColorizeDirective = /*#__PURE__*/function () {
  function CodeColorizeDirective(element, monacoProvider) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, CodeColorizeDirective);

    this.element = element;
    this.monacoProvider = monacoProvider;
    this.destroyed = false;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(CodeColorizeDirective, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      var el = this.element.nativeElement;
      this.originalDisplay = el.style.display;
      el.style.display = 'none';
    }
  }, {
    key: "ngAfterContentChecked",
    value: function ngAfterContentChecked() {
      var el = this.element.nativeElement;

      if (this.lastContent === el.innerHTML) {
        return;
      }

      this.lastContent = el.innerHTML;
      this.doColorize();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.destroyed = true;
    }
  }, {
    key: "doColorize",
    value: function doColorize() {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().mark(function _callee3() {
        var el, siblingEl, useSiblingEl, nextEl;
        return _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.destroyed) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return");

              case 2:
                el = this.element.nativeElement;
                siblingEl = el.nextElementSibling;
                useSiblingEl = siblingEl === null || siblingEl === void 0 ? void 0 : siblingEl.dataset.ngCodeColorizeCloned;
                nextEl = useSiblingEl ? siblingEl : el.cloneNode(true);

                if (useSiblingEl) {
                  nextEl.innerHTML = el.innerHTML;
                  nextEl.className = nextEl.className.split(' ').filter(function (_) {
                    return _ !== 'vs';
                  }).join('').trim();
                } else {
                  nextEl.style.display = this.originalDisplay;
                  nextEl.dataset.ngCodeColorizeCloned = 'true';
                  el.parentNode.insertBefore(nextEl, el.nextSibling);
                } // Monaco editor use data-lang to identify the language.


                nextEl.dataset.lang = this.ngCodeColorize;
                _context3.next = 10;
                return this.monacoProvider.initMonaco();

              case 10:
                _context3.next = 12;
                return this.monacoProvider.colorizeElement(nextEl, this.ngCodeColorizeOptions);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    }
  }]);

  return CodeColorizeDirective;
}();

CodeColorizeDirective.ɵfac = function CodeColorizeDirective_Factory(t) {
  return new (t || CodeColorizeDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](MonacoProviderService));
};

CodeColorizeDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: CodeColorizeDirective,
  selectors: [["", "ngCodeColorize", ""]],
  inputs: {
    ngCodeColorize: "ngCodeColorize",
    ngCodeColorizeOptions: "ngCodeColorizeOptions"
  }
});

CodeColorizeDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }, {
    type: MonacoProviderService
  }];
};

CodeColorizeDirective.propDecorators = {
  ngCodeColorize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  ngCodeColorizeOptions: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](CodeColorizeDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: '[ngCodeColorize]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }, {
      type: MonacoProviderService
    }];
  }, {
    ngCodeColorize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    ngCodeColorizeOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();

var observeResizeOn = function observeResizeOn(target, options) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_11__.Observable(function (observer) {
    var resizeObserver = new ResizeObserver(function (entries) {
      var _iterator = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_4__.default)(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          observer.next(entry.target);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    resizeObserver.observe(target, options);
    return function () {
      resizeObserver.unobserve(target);
      resizeObserver.disconnect();
    };
  });
};

var DEFAULT_RELAYOUT_INTERVAL = 100;
/**
 * Wraps powerful Monaco Editor for simplicity use in Angular.
 */

var MonacoCommonEditorComponent = /*#__PURE__*/function () {
  function MonacoCommonEditorComponent(monacoEditorConfig, monacoProvider, cdr) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoCommonEditorComponent);

    this.monacoEditorConfig = monacoEditorConfig;
    this.monacoProvider = monacoProvider;
    this.cdr = cdr;
    /**
     * Events emitted when monaco editor changed.
     */

    this.editorChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    /**
     * Events emitted when monaco editor blurs.
     */

    this.editorBlur = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.EventEmitter();
    this._monacoLoaded = false;
    this._destroyed = false;
    this.destroy$$ = new rxjs__WEBPACK_IMPORTED_MODULE_12__.Subject();
    this._value = '';
    this._disposables = []; // Following are APIs required by ControlValueAccessor
    // eslint-disable-next-line @typescript-eslint/no-empty-function

    this.onChange = function (_) {}; // eslint-disable-next-line @typescript-eslint/no-empty-function


    this.onTouched = function () {};
  } // for MonacoDiffEditorComponent usage


  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MonacoCommonEditorComponent, [{
    key: "rootEditor",
    get: function get() {
      var _a;

      return (_a = this._rootEditor) !== null && _a !== void 0 ? _a : this.editor;
    },
    set: function set(editor) {
      this._rootEditor = editor;
    } // used in html

  }, {
    key: "monacoLoaded",
    get: function get() {
      return this._monacoLoaded;
    }
  }, {
    key: "destroyed",
    get: function get() {
      return this._destroyed;
    }
  }, {
    key: "value",
    get: function get() {
      return this._value;
    }
  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      this.resetEditor();
    }
  }, {
    key: "ngAfterViewInit",
    value: function ngAfterViewInit() {
      var _this5 = this;

      var _a;

      var layoutInterval = (_a = this.monacoEditorConfig.autoLayoutInterval) !== null && _a !== void 0 ? _a : DEFAULT_RELAYOUT_INTERVAL;

      if (layoutInterval) {
        observeResizeOn(this.monacoContainer.nativeElement).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.takeUntil)(this.destroy$$)).subscribe((0,lodash_es__WEBPACK_IMPORTED_MODULE_14__.default)(function () {
          if (_this5.editor) {
            _this5.editor.layout();
          }
        }, layoutInterval));
      }
    }
  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(_ref2) {
      var modelUri = _ref2.modelUri,
          options = _ref2.options;

      if (modelUri && !modelUri.isFirstChange()) {
        // If modelUri is changed, we need to recreate the editor to reflect the change.
        this.resetEditor();
      }

      if (options) {
        var currOptions = options.currentValue; // We should reset the editor when options change.

        if (this._prevOptions && !(0,lodash_es__WEBPACK_IMPORTED_MODULE_15__.default)(this._prevOptions, currOptions)) {
          this.rootEditor.updateOptions(currOptions);
        }

        this._prevOptions = currOptions;
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.dispose();
      this._destroyed = true;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      var _a;

      (_a = this.rootEditor) === null || _a === void 0 ? void 0 : _a.dispose();

      if (this.model && !this.model.isDisposed()) {
        this.model.dispose();
      }

      this._disposables.forEach(function (disposable) {
        return disposable.dispose();
      });

      this.rootEditor = this.editor = null;
      this.model = null;
      this._disposables = [];
    }
  }, {
    key: "writeValue",
    value: function writeValue(value) {
      this._value = value || ''; // Fix for value change while dispose in process.

      if (this.editor) {
        this.model.setValue(this._value);
      }
    }
  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this.onChange = fn;
    }
  }, {
    key: "registerOnTouched",
    value: function registerOnTouched(fn) {
      this.onTouched = fn;
    }
  }, {
    key: "createModel",
    value: function createModel(value, uri) {
      var monaco = this.monacoProvider.monaco;
      return monaco.editor.createModel(value, this.options.language, uri ? monaco.Uri.parse(uri) : undefined);
    }
  }, {
    key: "resetEditor",
    value: function resetEditor() {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().mark(function _callee4() {
        return _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this.monacoLoaded) {
                  _context4.next = 4;
                  break;
                }

                this.dispose();
                _context4.next = 7;
                break;

              case 4:
                _context4.next = 6;
                return this.monacoProvider.initMonaco();

              case 6:
                this._monacoLoaded = true;

              case 7:
                if (!this.destroyed) {
                  this.editor = this.createEditor();
                  this.listenModelChanges();
                  this.editorChange.emit(this.editor);
                  this.modelId = this.model.id;
                  this.cdr.markForCheck();
                }

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    }
  }, {
    key: "listenModelChanges",
    value: function listenModelChanges() {
      var _this6 = this;

      var editor = this.editor;
      var model = this.model;
      this._disposables = [model.onDidChangeContent(function () {
        var value = model.getValue();

        if (_this6._value === value) {
          return;
        }

        _this6.onChange(value);

        _this6._value = value;

        _this6.cdr.markForCheck();
      }), editor.onDidChangeModel(function () {
        _this6.cdr.markForCheck();
      }), editor.onDidBlurEditorWidget(function () {
        _this6.onTouched();

        _this6.editorBlur.emit();
      })];
    }
  }]);

  return MonacoCommonEditorComponent;
}();

MonacoCommonEditorComponent.ɵfac = function MonacoCommonEditorComponent_Factory(t) {
  return new (t || MonacoCommonEditorComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](MonacoEditorConfig), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](MonacoProviderService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef));
};

MonacoCommonEditorComponent.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: MonacoCommonEditorComponent,
  viewQuery: function MonacoCommonEditorComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵviewQuery"](_c0, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵviewQuery"](_c1, 7);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵloadQuery"]()) && (ctx.monacoContainer = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵloadQuery"]()) && (ctx.monacoAnchor = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function MonacoCommonEditorComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵattribute"]("model-id", ctx.modelId);
    }
  },
  inputs: {
    options: "options",
    modelUri: "modelUri"
  },
  outputs: {
    editorChange: "editorChange",
    editorBlur: "editorBlur"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});

MonacoCommonEditorComponent.ctorParameters = function () {
  return [{
    type: MonacoEditorConfig
  }, {
    type: MonacoProviderService
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
  }];
};

MonacoCommonEditorComponent.propDecorators = {
  options: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  modelUri: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  editorChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
  }],
  editorBlur: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
  }],
  modelId: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding,
    args: ['attr.model-id']
  }],
  monacoContainer: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
    args: ['monacoContainer', {
      static: true
    }]
  }],
  monacoAnchor: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
    args: ['monacoAnchor', {
      static: true
    }]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MonacoCommonEditorComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive
  }], function () {
    return [{
      type: MonacoEditorConfig
    }, {
      type: MonacoProviderService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectorRef
    }];
  }, {
    editorChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
    }],
    editorBlur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Output
    }],
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    modelUri: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    modelId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostBinding,
      args: ['attr.model-id']
    }],
    monacoContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
      args: ['monacoContainer', {
        static: true
      }]
    }],
    monacoAnchor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewChild,
      args: ['monacoAnchor', {
        static: true
      }]
    }]
  });
})();
/**
 * Wraps powerful Monaco Editor for simplicity usage in Angular.
 */


var MonacoDiffEditorComponent = /*#__PURE__*/function (_MonacoCommonEditorCo) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(MonacoDiffEditorComponent, _MonacoCommonEditorCo);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(MonacoDiffEditorComponent);

  function MonacoDiffEditorComponent() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoDiffEditorComponent);

    return _super.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MonacoDiffEditorComponent, [{
    key: "createEditor",
    value: function createEditor() {
      this.originalModel = this.createModel(this.originalValue);
      this.model = this.createModel(this.value, this.modelUri);
      var editor = this.monacoProvider.createDiffEditor(this.monacoAnchor.nativeElement, this.options);
      this.rootEditor = editor;
      editor.setModel({
        original: this.originalModel,
        modified: this.model
      });
      return editor.getModifiedEditor();
    }
  }, {
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      var _a;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(MonacoDiffEditorComponent.prototype), "ngOnChanges", this).call(this, changes);

      if (changes.originalValue) {
        (_a = this.originalModel) === null || _a === void 0 ? void 0 : _a.setValue(changes.originalValue.currentValue);
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      var _a;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(MonacoDiffEditorComponent.prototype), "ngOnDestroy", this).call(this);

      (_a = this.originalModel) === null || _a === void 0 ? void 0 : _a.dispose();
    }
  }]);

  return MonacoDiffEditorComponent;
}(MonacoCommonEditorComponent);

MonacoDiffEditorComponent.ɵfac = /*@__PURE__*/function () {
  var ɵMonacoDiffEditorComponent_BaseFactory;
  return function MonacoDiffEditorComponent_Factory(t) {
    return (ɵMonacoDiffEditorComponent_BaseFactory || (ɵMonacoDiffEditorComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵgetInheritedFactory"](MonacoDiffEditorComponent)))(t || MonacoDiffEditorComponent);
  };
}();

MonacoDiffEditorComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineComponent"]({
  type: MonacoDiffEditorComponent,
  selectors: [["ng-monaco-diff-editor"]],
  inputs: {
    originalValue: "originalValue"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NG_VALUE_ACCESSOR,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
      return MonacoDiffEditorComponent;
    }),
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]],
  decls: 5,
  vars: 1,
  consts: [[1, "ng-monaco-editor-container"], ["monacoContainer", ""], ["class", "ng-monaco-editor-spinner", 4, "ngIf"], [1, "ng-monaco-editor-container__monaco-anchor"], ["monacoAnchor", ""], [1, "ng-monaco-editor-spinner"], [1, "ng-monaco-editor-spinner__double-bounce1"], [1, "ng-monaco-editor-spinner__double-bounce2"]],
  template: function MonacoDiffEditorComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtemplate"](2, MonacoDiffEditorComponent_div_2_Template, 3, 0, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](3, "div", 3, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("ngIf", !ctx.monacoLoaded);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_17__.NgIf],
  styles: [_c2],
  encapsulation: 2,
  changeDetection: 0
});
MonacoDiffEditorComponent.propDecorators = {
  originalValue: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MonacoDiffEditorComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Component,
    args: [{
      selector: 'ng-monaco-diff-editor',
      template: "<div class=\"ng-monaco-editor-container\" #monacoContainer>\n  <!-- Show a spinner if monaco-editor library is not yet ready -->\n  <div *ngIf=\"!monacoLoaded\" class=\"ng-monaco-editor-spinner\">\n    <div class=\"ng-monaco-editor-spinner__double-bounce1\"></div>\n    <div class=\"ng-monaco-editor-spinner__double-bounce2\"></div>\n  </div>\n\n  <div class=\"ng-monaco-editor-container__monaco-anchor\" #monacoAnchor></div>\n</div>\n",
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewEncapsulation.None,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NG_VALUE_ACCESSOR,
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
          return MonacoDiffEditorComponent;
        }),
        multi: true
      }],
      styles: ["ng-monaco-diff-editor,ng-monaco-editor{display:block}.ng-monaco-editor-container{height:100%}.ng-monaco-editor-container__monaco-anchor{width:100%;height:100%}.ng-monaco-editor-container__monaco-anchor .monaco-diff-editor,.ng-monaco-editor-container__monaco-anchor .monaco-editor{flex:1}.ng-monaco-editor-container,.ng-monaco-editor-container__monaco-anchor{flex:1;display:flex;flex-flow:column}.ng-monaco-editor-spinner{width:40px;height:40px;position:absolute;top:50%;left:50%}.ng-monaco-editor-spinner__double-bounce1,.ng-monaco-editor-spinner__double-bounce2{width:100%;height:100%;border-radius:50%;background-color:#333;opacity:.6;position:absolute;top:0;left:0;animation:sk-bounce 2s ease-in-out infinite}.ng-monaco-editor-spinner__double-bounce2{animation-delay:-1s}@keyframes sk-bounce{0%,to{transform:scale(0)}50%{transform:scale(1)}}"]
    }]
  }], null, {
    originalValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }]
  });
})();
/**
 * Wraps Monaco Editor for simplicity use in Angular.
 */


var MonacoEditorComponent = /*#__PURE__*/function (_MonacoCommonEditorCo2) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(MonacoEditorComponent, _MonacoCommonEditorCo2);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(MonacoEditorComponent);

  function MonacoEditorComponent() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoEditorComponent);

    return _super2.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MonacoEditorComponent, [{
    key: "createEditor",
    value: function createEditor() {
      this.model = this.createModel(this.value, this.modelUri);
      return this.monacoProvider.create(this.monacoAnchor.nativeElement, Object.assign(Object.assign({}, this.options), {
        model: this.model
      }));
    }
  }]);

  return MonacoEditorComponent;
}(MonacoCommonEditorComponent);

MonacoEditorComponent.ɵfac = /*@__PURE__*/function () {
  var ɵMonacoEditorComponent_BaseFactory;
  return function MonacoEditorComponent_Factory(t) {
    return (ɵMonacoEditorComponent_BaseFactory || (ɵMonacoEditorComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵgetInheritedFactory"](MonacoEditorComponent)))(t || MonacoEditorComponent);
  };
}();

MonacoEditorComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineComponent"]({
  type: MonacoEditorComponent,
  selectors: [["ng-monaco-editor"]],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NG_VALUE_ACCESSOR,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
      return MonacoEditorComponent;
    }),
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵInheritDefinitionFeature"]],
  decls: 5,
  vars: 1,
  consts: [[1, "ng-monaco-editor-container"], ["monacoContainer", ""], ["class", "ng-monaco-editor-spinner", 4, "ngIf"], [1, "ng-monaco-editor-container__monaco-anchor"], ["monacoAnchor", ""], [1, "ng-monaco-editor-spinner"], [1, "ng-monaco-editor-spinner__double-bounce1"], [1, "ng-monaco-editor-spinner__double-bounce2"]],
  template: function MonacoEditorComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵtemplate"](2, MonacoEditorComponent_div_2_Template, 3, 0, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelement"](3, "div", 3, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵproperty"]("ngIf", !ctx.monacoLoaded);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_17__.NgIf],
  styles: [_c2],
  encapsulation: 2,
  changeDetection: 0
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MonacoEditorComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Component,
    args: [{
      selector: 'ng-monaco-editor',
      template: "<div class=\"ng-monaco-editor-container\" #monacoContainer>\n  <!-- Show a spinner if monaco-editor library is not yet ready -->\n  <div *ngIf=\"!monacoLoaded\" class=\"ng-monaco-editor-spinner\">\n    <div class=\"ng-monaco-editor-spinner__double-bounce1\"></div>\n    <div class=\"ng-monaco-editor-spinner__double-bounce2\"></div>\n  </div>\n\n  <div class=\"ng-monaco-editor-container__monaco-anchor\" #monacoAnchor></div>\n</div>\n",
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ViewEncapsulation.None,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NG_VALUE_ACCESSOR,
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
          return MonacoEditorComponent;
        }),
        multi: true
      }],
      styles: ["ng-monaco-diff-editor,ng-monaco-editor{display:block}.ng-monaco-editor-container{height:100%}.ng-monaco-editor-container__monaco-anchor{width:100%;height:100%}.ng-monaco-editor-container__monaco-anchor .monaco-diff-editor,.ng-monaco-editor-container__monaco-anchor .monaco-editor{flex:1}.ng-monaco-editor-container,.ng-monaco-editor-container__monaco-anchor{flex:1;display:flex;flex-flow:column}.ng-monaco-editor-spinner{width:40px;height:40px;position:absolute;top:50%;left:50%}.ng-monaco-editor-spinner__double-bounce1,.ng-monaco-editor-spinner__double-bounce2{width:100%;height:100%;border-radius:50%;background-color:#333;opacity:.6;position:absolute;top:0;left:0;animation:sk-bounce 2s ease-in-out infinite}.ng-monaco-editor-spinner__double-bounce2{animation-delay:-1s}@keyframes sk-bounce{0%,to{transform:scale(0)}50%{transform:scale(1)}}"]
    }]
  }], null, null);
})();

var EXPORTABLES = [MonacoEditorComponent, MonacoDiffEditorComponent, CodeColorizeDirective];

function MonacoProviderFactory(parent, monacoEditorConfig) {
  return parent || new MonacoProviderService(monacoEditorConfig);
}

var MONACO_PROVIDER = {
  // If there is already an CodeEditorIntl available, use that. Otherwise, provide a new one.
  provide: MonacoProviderService,
  deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_8__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_8__.SkipSelf(), MonacoProviderService], MonacoEditorConfig],
  useFactory: MonacoProviderFactory
};

var MonacoEditorModule = /*#__PURE__*/function () {
  function MonacoEditorModule() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__.default)(this, MonacoEditorModule);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(MonacoEditorModule, null, [{
    key: "forRoot",
    value: function forRoot() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        ngModule: MonacoEditorModule,
        providers: [{
          provide: MonacoEditorConfig,
          useValue: config
        }]
      };
    }
  }]);

  return MonacoEditorModule;
}();

MonacoEditorModule.ɵfac = function MonacoEditorModule_Factory(t) {
  return new (t || MonacoEditorModule)();
};

MonacoEditorModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineNgModule"]({
  type: MonacoEditorModule
});
MonacoEditorModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjector"]({
  providers: [MONACO_PROVIDER],
  imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_17__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.ReactiveFormsModule]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MonacoEditorModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_17__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.ReactiveFormsModule],
      declarations: EXPORTABLES,
      exports: EXPORTABLES,
      providers: [MONACO_PROVIDER]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsetNgModuleScope"](MonacoEditorModule, {
    declarations: function declarations() {
      return [MonacoEditorComponent, MonacoDiffEditorComponent, CodeColorizeDirective];
    },
    imports: function imports() {
      return [_angular_common__WEBPACK_IMPORTED_MODULE_17__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.ReactiveFormsModule];
    },
    exports: function exports() {
      return [MonacoEditorComponent, MonacoDiffEditorComponent, CodeColorizeDirective];
    }
  });
})();
/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 37106:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

/***/ }),

/***/ 76491:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BehaviorSubject": function() { return /* binding */ BehaviorSubject; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Subject */ 79441);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ 96874);








var BehaviorSubject = /*#__PURE__*/function (_Subject) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(BehaviorSubject, _Subject);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(BehaviorSubject);

  function BehaviorSubject(_value) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, BehaviorSubject);

    _this = _super.call(this);
    _this._value = _value;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(BehaviorSubject, [{
    key: "value",
    get: function get() {
      return this.getValue();
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      var subscription = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(BehaviorSubject.prototype), "_subscribe", this).call(this, subscriber);

      if (subscription && !subscription.closed) {
        subscriber.next(this._value);
      }

      return subscription;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (this.hasError) {
        throw this.thrownError;
      } else if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_6__.ObjectUnsubscribedError();
      } else {
        return this._value;
      }
    }
  }, {
    key: "next",
    value: function next(value) {
      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(BehaviorSubject.prototype), "next", this).call(this, this._value = value);
    }
  }]);

  return BehaviorSubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_7__.Subject);

/***/ }),

/***/ 90898:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InnerSubscriber": function() { return /* binding */ InnerSubscriber; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subscriber */ 71003);





var InnerSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(InnerSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(InnerSubscriber);

  function InnerSubscriber(parent, outerValue, outerIndex) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, InnerSubscriber);

    _this = _super.call(this);
    _this.parent = parent;
    _this.outerValue = outerValue;
    _this.outerIndex = outerIndex;
    _this.index = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(InnerSubscriber, [{
    key: "_next",
    value: function _next(value) {
      this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    }
  }, {
    key: "_error",
    value: function _error(error) {
      this.parent.notifyError(error, this);
      this.unsubscribe();
    }
  }, {
    key: "_complete",
    value: function _complete() {
      this.parent.notifyComplete(this);
      this.unsubscribe();
    }
  }]);

  return InnerSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 93621:
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Notification.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationKind": function() { return /* binding */ NotificationKind; },
/* harmony export */   "Notification": function() { return /* binding */ Notification; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observable/empty */ 8117);
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observable/of */ 81134);
/* harmony import */ var _observable_throwError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observable/throwError */ 45871);





var NotificationKind;

(function (NotificationKind) {
  NotificationKind["NEXT"] = "N";
  NotificationKind["ERROR"] = "E";
  NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));

var Notification = /*#__PURE__*/function () {
  function Notification(kind, value, error) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Notification);

    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === 'N';
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Notification, [{
    key: "observe",
    value: function observe(observer) {
      switch (this.kind) {
        case 'N':
          return observer.next && observer.next(this.value);

        case 'E':
          return observer.error && observer.error(this.error);

        case 'C':
          return observer.complete && observer.complete();
      }
    }
  }, {
    key: "do",
    value: function _do(next, error, complete) {
      var kind = this.kind;

      switch (kind) {
        case 'N':
          return next && next(this.value);

        case 'E':
          return error && error(this.error);

        case 'C':
          return complete && complete();
      }
    }
  }, {
    key: "accept",
    value: function accept(nextOrObserver, error, complete) {
      if (nextOrObserver && typeof nextOrObserver.next === 'function') {
        return this.observe(nextOrObserver);
      } else {
        return this.do(nextOrObserver, error, complete);
      }
    }
  }, {
    key: "toObservable",
    value: function toObservable() {
      var kind = this.kind;

      switch (kind) {
        case 'N':
          return (0,_observable_of__WEBPACK_IMPORTED_MODULE_2__.of)(this.value);

        case 'E':
          return (0,_observable_throwError__WEBPACK_IMPORTED_MODULE_3__.throwError)(this.error);

        case 'C':
          return (0,_observable_empty__WEBPACK_IMPORTED_MODULE_4__.empty)();
      }

      throw new Error('unexpected notification kind value');
    }
  }], [{
    key: "createNext",
    value: function createNext(value) {
      if (typeof value !== 'undefined') {
        return new Notification('N', value);
      }

      return Notification.undefinedValueNotification;
    }
  }, {
    key: "createError",
    value: function createError(err) {
      return new Notification('E', undefined, err);
    }
  }, {
    key: "createComplete",
    value: function createComplete() {
      return Notification.completeNotification;
    }
  }]);

  return Notification;
}();
Notification.completeNotification = new Notification('C');
Notification.undefinedValueNotification = new Notification('N', undefined);

/***/ }),

/***/ 25160:
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Observable.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observable": function() { return /* binding */ Observable; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/canReportError */ 48428);
/* harmony import */ var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/toSubscriber */ 94540);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./symbol/observable */ 76165);
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/pipe */ 89763);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ 24572);







var Observable = /*#__PURE__*/function () {
  function Observable(subscribe) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Observable);

    this._isScalar = false;

    if (subscribe) {
      this._subscribe = subscribe;
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Observable, [{
    key: "lift",
    value: function lift(operator) {
      var observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    }
  }, {
    key: "subscribe",
    value: function subscribe(observerOrNext, error, complete) {
      var operator = this.operator;
      var sink = (0,_util_toSubscriber__WEBPACK_IMPORTED_MODULE_2__.toSubscriber)(observerOrNext, error, complete);

      if (operator) {
        sink.add(operator.call(sink, this.source));
      } else {
        sink.add(this.source || _config__WEBPACK_IMPORTED_MODULE_3__.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
      }

      if (_config__WEBPACK_IMPORTED_MODULE_3__.config.useDeprecatedSynchronousErrorHandling) {
        if (sink.syncErrorThrowable) {
          sink.syncErrorThrowable = false;

          if (sink.syncErrorThrown) {
            throw sink.syncErrorValue;
          }
        }
      }

      return sink;
    }
  }, {
    key: "_trySubscribe",
    value: function _trySubscribe(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        if (_config__WEBPACK_IMPORTED_MODULE_3__.config.useDeprecatedSynchronousErrorHandling) {
          sink.syncErrorThrown = true;
          sink.syncErrorValue = err;
        }

        if ((0,_util_canReportError__WEBPACK_IMPORTED_MODULE_4__.canReportError)(sink)) {
          sink.error(err);
        } else {
          console.warn(err);
        }
      }
    }
  }, {
    key: "forEach",
    value: function forEach(next, promiseCtor) {
      var _this = this;

      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function (resolve, reject) {
        var subscription;
        subscription = _this.subscribe(function (value) {
          try {
            next(value);
          } catch (err) {
            reject(err);

            if (subscription) {
              subscription.unsubscribe();
            }
          }
        }, reject, resolve);
      });
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      var source = this.source;
      return source && source.subscribe(subscriber);
    }
  }, {
    key: _symbol_observable__WEBPACK_IMPORTED_MODULE_5__.observable,
    value: function value() {
      return this;
    }
  }, {
    key: "pipe",
    value: function pipe() {
      for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {
        operations[_key] = arguments[_key];
      }

      if (operations.length === 0) {
        return this;
      }

      return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_6__.pipeFromArray)(operations)(this);
    }
  }, {
    key: "toPromise",
    value: function toPromise(promiseCtor) {
      var _this2 = this;

      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function (resolve, reject) {
        var value;

        _this2.subscribe(function (x) {
          return value = x;
        }, function (err) {
          return reject(err);
        }, function () {
          return resolve(value);
        });
      });
    }
  }]);

  return Observable;
}();

Observable.create = function (subscribe) {
  return new Observable(subscribe);
};

function getPromiseCtor(promiseCtor) {
  if (!promiseCtor) {
    promiseCtor = _config__WEBPACK_IMPORTED_MODULE_3__.config.Promise || Promise;
  }

  if (!promiseCtor) {
    throw new Error('no Promise impl found');
  }

  return promiseCtor;
}

/***/ }),

/***/ 80269:
/*!*********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Observer.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "empty": function() { return /* binding */ empty; }
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ 24572);
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hostReportError */ 76901);


var empty = {
  closed: true,
  next: function next(value) {},
  error: function error(err) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {
      throw err;
    } else {
      (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__.hostReportError)(err);
    }
  },
  complete: function complete() {}
};

/***/ }),

/***/ 88237:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OuterSubscriber": function() { return /* binding */ OuterSubscriber; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subscriber */ 71003);





var OuterSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(OuterSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(OuterSubscriber);

  function OuterSubscriber() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, OuterSubscriber);

    return _super.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(OuterSubscriber, [{
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    }
  }, {
    key: "notifyError",
    value: function notifyError(error, innerSub) {
      this.destination.error(error);
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete(innerSub) {
      this.destination.complete();
    }
  }]);

  return OuterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 13413:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReplaySubject": function() { return /* binding */ ReplaySubject; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Subject */ 79441);
/* harmony import */ var _scheduler_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./scheduler/queue */ 75751);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Subscription */ 94283);
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operators/observeOn */ 93253);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ 96874);
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SubjectSubscription */ 32691);












var ReplaySubject = /*#__PURE__*/function (_Subject) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(ReplaySubject, _Subject);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(ReplaySubject);

  function ReplaySubject() {
    var _this;

    var bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
    var windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
    var scheduler = arguments.length > 2 ? arguments[2] : undefined;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, ReplaySubject);

    _this = _super.call(this);
    _this.scheduler = scheduler;
    _this._events = [];
    _this._infiniteTimeWindow = false;
    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    _this._windowTime = windowTime < 1 ? 1 : windowTime;

    if (windowTime === Number.POSITIVE_INFINITY) {
      _this._infiniteTimeWindow = true;
      _this.next = _this.nextInfiniteTimeWindow;
    } else {
      _this.next = _this.nextTimeWindow;
    }

    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(ReplaySubject, [{
    key: "nextInfiniteTimeWindow",
    value: function nextInfiniteTimeWindow(value) {
      var _events = this._events;

      _events.push(value);

      if (_events.length > this._bufferSize) {
        _events.shift();
      }

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(ReplaySubject.prototype), "next", this).call(this, value);
    }
  }, {
    key: "nextTimeWindow",
    value: function nextTimeWindow(value) {
      this._events.push(new ReplayEvent(this._getNow(), value));

      this._trimBufferThenGetEvents();

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(ReplaySubject.prototype), "next", this).call(this, value);
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      var _infiniteTimeWindow = this._infiniteTimeWindow;

      var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

      var scheduler = this.scheduler;
      var len = _events.length;
      var subscription;

      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_6__.ObjectUnsubscribedError();
      } else if (this.isStopped || this.hasError) {
        subscription = _Subscription__WEBPACK_IMPORTED_MODULE_7__.Subscription.EMPTY;
      } else {
        this.observers.push(subscriber);
        subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_8__.SubjectSubscription(this, subscriber);
      }

      if (scheduler) {
        subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_9__.ObserveOnSubscriber(subscriber, scheduler));
      }

      if (_infiniteTimeWindow) {
        for (var i = 0; i < len && !subscriber.closed; i++) {
          subscriber.next(_events[i]);
        }
      } else {
        for (var _i = 0; _i < len && !subscriber.closed; _i++) {
          subscriber.next(_events[_i].value);
        }
      }

      if (this.hasError) {
        subscriber.error(this.thrownError);
      } else if (this.isStopped) {
        subscriber.complete();
      }

      return subscription;
    }
  }, {
    key: "_getNow",
    value: function _getNow() {
      return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_10__.queue).now();
    }
  }, {
    key: "_trimBufferThenGetEvents",
    value: function _trimBufferThenGetEvents() {
      var now = this._getNow();

      var _bufferSize = this._bufferSize;
      var _windowTime = this._windowTime;
      var _events = this._events;
      var eventsCount = _events.length;
      var spliceCount = 0;

      while (spliceCount < eventsCount) {
        if (now - _events[spliceCount].time < _windowTime) {
          break;
        }

        spliceCount++;
      }

      if (eventsCount > _bufferSize) {
        spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
      }

      if (spliceCount > 0) {
        _events.splice(0, spliceCount);
      }

      return _events;
    }
  }]);

  return ReplaySubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_11__.Subject);

var ReplayEvent = function ReplayEvent(time, value) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, ReplayEvent);

  this.time = time;
  this.value = value;
};

/***/ }),

/***/ 45979:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Scheduler.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scheduler": function() { return /* binding */ Scheduler; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);


var Scheduler = /*#__PURE__*/function () {
  function Scheduler(SchedulerAction) {
    var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Scheduler.now;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Scheduler);

    this.SchedulerAction = SchedulerAction;
    this.now = now;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Scheduler, [{
    key: "schedule",
    value: function schedule(work) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var state = arguments.length > 2 ? arguments[2] : undefined;
      return new this.SchedulerAction(this, work).schedule(state, delay);
    }
  }]);

  return Scheduler;
}();

Scheduler.now = function () {
  return Date.now();
};

/***/ }),

/***/ 79441:
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subject.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubjectSubscriber": function() { return /* binding */ SubjectSubscriber; },
/* harmony export */   "Subject": function() { return /* binding */ Subject; },
/* harmony export */   "AnonymousSubject": function() { return /* binding */ AnonymousSubject; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Observable */ 25160);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Subscriber */ 71003);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Subscription */ 94283);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ 96874);
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SubjectSubscription */ 32691);
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ 69975);












var SubjectSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(SubjectSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(SubjectSubscriber);

  function SubjectSubscriber(destination) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, SubjectSubscriber);

    _this = _super.call(this, destination);
    _this.destination = destination;
    return _this;
  }

  return SubjectSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_6__.Subscriber);
var Subject = /*#__PURE__*/function (_Observable) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(Subject, _Observable);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(Subject);

  function Subject() {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, Subject);

    _this2 = _super2.call(this);
    _this2.observers = [];
    _this2.closed = false;
    _this2.isStopped = false;
    _this2.hasError = false;
    _this2.thrownError = null;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__.default)(Subject, [{
    key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_7__.rxSubscriber,
    value: function value() {
      return new SubjectSubscriber(this);
    }
  }, {
    key: "lift",
    value: function lift(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    }
  }, {
    key: "next",
    value: function next(value) {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__.ObjectUnsubscribedError();
      }

      if (!this.isStopped) {
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();

        for (var i = 0; i < len; i++) {
          copy[i].next(value);
        }
      }
    }
  }, {
    key: "error",
    value: function error(err) {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__.ObjectUnsubscribedError();
      }

      this.hasError = true;
      this.thrownError = err;
      this.isStopped = true;
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();

      for (var i = 0; i < len; i++) {
        copy[i].error(err);
      }

      this.observers.length = 0;
    }
  }, {
    key: "complete",
    value: function complete() {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__.ObjectUnsubscribedError();
      }

      this.isStopped = true;
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();

      for (var i = 0; i < len; i++) {
        copy[i].complete();
      }

      this.observers.length = 0;
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      this.isStopped = true;
      this.closed = true;
      this.observers = null;
    }
  }, {
    key: "_trySubscribe",
    value: function _trySubscribe(subscriber) {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__.ObjectUnsubscribedError();
      } else {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_1__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__.default)(Subject.prototype), "_trySubscribe", this).call(this, subscriber);
      }
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_8__.ObjectUnsubscribedError();
      } else if (this.hasError) {
        subscriber.error(this.thrownError);
        return _Subscription__WEBPACK_IMPORTED_MODULE_9__.Subscription.EMPTY;
      } else if (this.isStopped) {
        subscriber.complete();
        return _Subscription__WEBPACK_IMPORTED_MODULE_9__.Subscription.EMPTY;
      } else {
        this.observers.push(subscriber);
        return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_10__.SubjectSubscription(this, subscriber);
      }
    }
  }, {
    key: "asObservable",
    value: function asObservable() {
      var observable = new _Observable__WEBPACK_IMPORTED_MODULE_11__.Observable();
      observable.source = this;
      return observable;
    }
  }]);

  return Subject;
}(_Observable__WEBPACK_IMPORTED_MODULE_11__.Observable);

Subject.create = function (destination, source) {
  return new AnonymousSubject(destination, source);
};

var AnonymousSubject = /*#__PURE__*/function (_Subject) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(AnonymousSubject, _Subject);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(AnonymousSubject);

  function AnonymousSubject(destination, source) {
    var _this3;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, AnonymousSubject);

    _this3 = _super3.call(this);
    _this3.destination = destination;
    _this3.source = source;
    return _this3;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__.default)(AnonymousSubject, [{
    key: "next",
    value: function next(value) {
      var destination = this.destination;

      if (destination && destination.next) {
        destination.next(value);
      }
    }
  }, {
    key: "error",
    value: function error(err) {
      var destination = this.destination;

      if (destination && destination.error) {
        this.destination.error(err);
      }
    }
  }, {
    key: "complete",
    value: function complete() {
      var destination = this.destination;

      if (destination && destination.complete) {
        this.destination.complete();
      }
    }
  }, {
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      var source = this.source;

      if (source) {
        return this.source.subscribe(subscriber);
      } else {
        return _Subscription__WEBPACK_IMPORTED_MODULE_9__.Subscription.EMPTY;
      }
    }
  }]);

  return AnonymousSubject;
}(Subject);

/***/ }),

/***/ 32691:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubjectSubscription": function() { return /* binding */ SubjectSubscription; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subscription */ 94283);





var SubjectSubscription = /*#__PURE__*/function (_Subscription) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(SubjectSubscription, _Subscription);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(SubjectSubscription);

  function SubjectSubscription(subject, subscriber) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, SubjectSubscription);

    _this = _super.call(this);
    _this.subject = subject;
    _this.subscriber = subscriber;
    _this.closed = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(SubjectSubscription, [{
    key: "unsubscribe",
    value: function unsubscribe() {
      if (this.closed) {
        return;
      }

      this.closed = true;
      var subject = this.subject;
      var observers = subject.observers;
      this.subject = null;

      if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
        return;
      }

      var subscriberIndex = observers.indexOf(this.subscriber);

      if (subscriberIndex !== -1) {
        observers.splice(subscriberIndex, 1);
      }
    }
  }]);

  return SubjectSubscription;
}(_Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription);

/***/ }),

/***/ 71003:
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subscriber.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Subscriber": function() { return /* binding */ Subscriber; },
/* harmony export */   "SafeSubscriber": function() { return /* binding */ SafeSubscriber; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util/isFunction */ 80018);
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Observer */ 80269);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Subscription */ 94283);
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ 69975);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./config */ 24572);
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./util/hostReportError */ 76901);













var Subscriber = /*#__PURE__*/function (_Subscription) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(Subscriber, _Subscription);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(Subscriber);

  function Subscriber(destinationOrNext, error, complete) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Subscriber);

    _this = _super.call(this);
    _this.syncErrorValue = null;
    _this.syncErrorThrown = false;
    _this.syncErrorThrowable = false;
    _this.isStopped = false;

    switch (arguments.length) {
      case 0:
        _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_7__.empty;
        break;

      case 1:
        if (!destinationOrNext) {
          _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_7__.empty;
          break;
        }

        if (typeof destinationOrNext === 'object') {
          if (destinationOrNext instanceof Subscriber) {
            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
            _this.destination = destinationOrNext;
            destinationOrNext.add((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this));
          } else {
            _this.syncErrorThrowable = true;
            _this.destination = new SafeSubscriber((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this), destinationOrNext);
          }

          break;
        }

      default:
        _this.syncErrorThrowable = true;
        _this.destination = new SafeSubscriber((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this), destinationOrNext, error, complete);
        break;
    }

    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Subscriber, [{
    key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_8__.rxSubscriber,
    value: function value() {
      return this;
    }
  }, {
    key: "next",
    value: function next(value) {
      if (!this.isStopped) {
        this._next(value);
      }
    }
  }, {
    key: "error",
    value: function error(err) {
      if (!this.isStopped) {
        this.isStopped = true;

        this._error(err);
      }
    }
  }, {
    key: "complete",
    value: function complete() {
      if (!this.isStopped) {
        this.isStopped = true;

        this._complete();
      }
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      if (this.closed) {
        return;
      }

      this.isStopped = true;

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(Subscriber.prototype), "unsubscribe", this).call(this);
    }
  }, {
    key: "_next",
    value: function _next(value) {
      this.destination.next(value);
    }
  }, {
    key: "_error",
    value: function _error(err) {
      this.destination.error(err);
      this.unsubscribe();
    }
  }, {
    key: "_complete",
    value: function _complete() {
      this.destination.complete();
      this.unsubscribe();
    }
  }, {
    key: "_unsubscribeAndRecycle",
    value: function _unsubscribeAndRecycle() {
      var _parentOrParents = this._parentOrParents;
      this._parentOrParents = null;
      this.unsubscribe();
      this.closed = false;
      this.isStopped = false;
      this._parentOrParents = _parentOrParents;
      return this;
    }
  }], [{
    key: "create",
    value: function create(next, error, complete) {
      var subscriber = new Subscriber(next, error, complete);
      subscriber.syncErrorThrowable = false;
      return subscriber;
    }
  }]);

  return Subscriber;
}(_Subscription__WEBPACK_IMPORTED_MODULE_9__.Subscription);
var SafeSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(SafeSubscriber, _Subscriber);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(SafeSubscriber);

  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, SafeSubscriber);

    _this2 = _super2.call(this);
    _this2._parentSubscriber = _parentSubscriber;
    var next;

    var context = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this2);

    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_10__.isFunction)(observerOrNext)) {
      next = observerOrNext;
    } else if (observerOrNext) {
      next = observerOrNext.next;
      error = observerOrNext.error;
      complete = observerOrNext.complete;

      if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_7__.empty) {
        context = Object.create(observerOrNext);

        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_10__.isFunction)(context.unsubscribe)) {
          _this2.add(context.unsubscribe.bind(context));
        }

        context.unsubscribe = _this2.unsubscribe.bind((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this2));
      }
    }

    _this2._context = context;
    _this2._next = next;
    _this2._error = error;
    _this2._complete = complete;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(SafeSubscriber, [{
    key: "next",
    value: function next(value) {
      if (!this.isStopped && this._next) {
        var _parentSubscriber = this._parentSubscriber;

        if (!_config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(this._next, value);
        } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
          this.unsubscribe();
        }
      }
    }
  }, {
    key: "error",
    value: function error(err) {
      if (!this.isStopped) {
        var _parentSubscriber = this._parentSubscriber;
        var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling;

        if (this._error) {
          if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
            this.__tryOrUnsub(this._error, err);

            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parentSubscriber, this._error, err);

            this.unsubscribe();
          }
        } else if (!_parentSubscriber.syncErrorThrowable) {
          this.unsubscribe();

          if (useDeprecatedSynchronousErrorHandling) {
            throw err;
          }

          (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_12__.hostReportError)(err);
        } else {
          if (useDeprecatedSynchronousErrorHandling) {
            _parentSubscriber.syncErrorValue = err;
            _parentSubscriber.syncErrorThrown = true;
          } else {
            (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_12__.hostReportError)(err);
          }

          this.unsubscribe();
        }
      }
    }
  }, {
    key: "complete",
    value: function complete() {
      var _this3 = this;

      if (!this.isStopped) {
        var _parentSubscriber = this._parentSubscriber;

        if (this._complete) {
          var wrappedComplete = function wrappedComplete() {
            return _this3._complete.call(_this3._context);
          };

          if (!_config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
            this.__tryOrUnsub(wrappedComplete);

            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parentSubscriber, wrappedComplete);

            this.unsubscribe();
          }
        } else {
          this.unsubscribe();
        }
      }
    }
  }, {
    key: "__tryOrUnsub",
    value: function __tryOrUnsub(fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        this.unsubscribe();

        if (_config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling) {
          throw err;
        } else {
          (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_12__.hostReportError)(err);
        }
      }
    }
  }, {
    key: "__tryOrSetError",
    value: function __tryOrSetError(parent, fn, value) {
      if (!_config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling) {
        throw new Error('bad call');
      }

      try {
        fn.call(this._context, value);
      } catch (err) {
        if (_config__WEBPACK_IMPORTED_MODULE_11__.config.useDeprecatedSynchronousErrorHandling) {
          parent.syncErrorValue = err;
          parent.syncErrorThrown = true;
          return true;
        } else {
          (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_12__.hostReportError)(err);
          return true;
        }
      }

      return false;
    }
  }, {
    key: "_unsubscribe",
    value: function _unsubscribe() {
      var _parentSubscriber = this._parentSubscriber;
      this._context = null;
      this._parentSubscriber = null;

      _parentSubscriber.unsubscribe();
    }
  }]);

  return SafeSubscriber;
}(Subscriber);

/***/ }),

/***/ 94283:
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subscription.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Subscription": function() { return /* binding */ Subscription; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/isArray */ 49861);
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/isObject */ 71533);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isFunction */ 80018);
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/UnsubscriptionError */ 66742);






var Subscription = /*#__PURE__*/function () {
  function Subscription(unsubscribe) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Subscription);

    this.closed = false;
    this._parentOrParents = null;
    this._subscriptions = null;

    if (unsubscribe) {
      this._unsubscribe = unsubscribe;
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Subscription, [{
    key: "unsubscribe",
    value: function unsubscribe() {
      var errors;

      if (this.closed) {
        return;
      }

      var _parentOrParents = this._parentOrParents,
          _unsubscribe = this._unsubscribe,
          _subscriptions = this._subscriptions;
      this.closed = true;
      this._parentOrParents = null;
      this._subscriptions = null;

      if (_parentOrParents instanceof Subscription) {
        _parentOrParents.remove(this);
      } else if (_parentOrParents !== null) {
        for (var index = 0; index < _parentOrParents.length; ++index) {
          var parent = _parentOrParents[index];
          parent.remove(this);
        }
      }

      if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_2__.isFunction)(_unsubscribe)) {
        try {
          _unsubscribe.call(this);
        } catch (e) {
          errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
        }
      }

      if ((0,_util_isArray__WEBPACK_IMPORTED_MODULE_4__.isArray)(_subscriptions)) {
        var _index = -1;

        var len = _subscriptions.length;

        while (++_index < len) {
          var sub = _subscriptions[_index];

          if ((0,_util_isObject__WEBPACK_IMPORTED_MODULE_5__.isObject)(sub)) {
            try {
              sub.unsubscribe();
            } catch (e) {
              errors = errors || [];

              if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__.UnsubscriptionError) {
                errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
              } else {
                errors.push(e);
              }
            }
          }
        }
      }

      if (errors) {
        throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__.UnsubscriptionError(errors);
      }
    }
  }, {
    key: "add",
    value: function add(teardown) {
      var subscription = teardown;

      if (!teardown) {
        return Subscription.EMPTY;
      }

      switch (typeof teardown) {
        case 'function':
          subscription = new Subscription(teardown);

        case 'object':
          if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
            return subscription;
          } else if (this.closed) {
            subscription.unsubscribe();
            return subscription;
          } else if (!(subscription instanceof Subscription)) {
            var tmp = subscription;
            subscription = new Subscription();
            subscription._subscriptions = [tmp];
          }

          break;

        default:
          {
            throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
          }
      }

      var _subscription = subscription,
          _parentOrParents = _subscription._parentOrParents;

      if (_parentOrParents === null) {
        subscription._parentOrParents = this;
      } else if (_parentOrParents instanceof Subscription) {
        if (_parentOrParents === this) {
          return subscription;
        }

        subscription._parentOrParents = [_parentOrParents, this];
      } else if (_parentOrParents.indexOf(this) === -1) {
        _parentOrParents.push(this);
      } else {
        return subscription;
      }

      var subscriptions = this._subscriptions;

      if (subscriptions === null) {
        this._subscriptions = [subscription];
      } else {
        subscriptions.push(subscription);
      }

      return subscription;
    }
  }, {
    key: "remove",
    value: function remove(subscription) {
      var subscriptions = this._subscriptions;

      if (subscriptions) {
        var subscriptionIndex = subscriptions.indexOf(subscription);

        if (subscriptionIndex !== -1) {
          subscriptions.splice(subscriptionIndex, 1);
        }
      }
    }
  }]);

  return Subscription;
}();

Subscription.EMPTY = function (empty) {
  empty.closed = true;
  return empty;
}(new Subscription());

function flattenUnsubscriptionErrors(errors) {
  return errors.reduce(function (errs, err) {
    return errs.concat(err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__.UnsubscriptionError ? err.errors : err);
  }, []);
}

/***/ }),

/***/ 24572:
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/config.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": function() { return /* binding */ config; }
/* harmony export */ });
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
  Promise: undefined,

  set useDeprecatedSynchronousErrorHandling(value) {
    if (value) {
      var error = new Error();
      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
      console.log('RxJS: Back to a better error behavior. Thank you. <3');
    }

    _enable_super_gross_mode_that_will_cause_bad_things = value;
  },

  get useDeprecatedSynchronousErrorHandling() {
    return _enable_super_gross_mode_that_will_cause_bad_things;
  }

};

/***/ }),

/***/ 92494:
/*!*********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectableObservable": function() { return /* binding */ ConnectableObservable; },
/* harmony export */   "connectableObservableDescriptor": function() { return /* binding */ connectableObservableDescriptor; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Subject */ 79441);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Subscription */ 94283);
/* harmony import */ var _operators_refCount__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operators/refCount */ 97085);











var ConnectableObservable = /*#__PURE__*/function (_Observable) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(ConnectableObservable, _Observable);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(ConnectableObservable);

  function ConnectableObservable(source, subjectFactory) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ConnectableObservable);

    _this = _super.call(this);
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._refCount = 0;
    _this._isComplete = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ConnectableObservable, [{
    key: "_subscribe",
    value: function _subscribe(subscriber) {
      return this.getSubject().subscribe(subscriber);
    }
  }, {
    key: "getSubject",
    value: function getSubject() {
      var subject = this._subject;

      if (!subject || subject.isStopped) {
        this._subject = this.subjectFactory();
      }

      return this._subject;
    }
  }, {
    key: "connect",
    value: function connect() {
      var connection = this._connection;

      if (!connection) {
        this._isComplete = false;
        connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_6__.Subscription();
        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

        if (connection.closed) {
          this._connection = null;
          connection = _Subscription__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
        }
      }

      return connection;
    }
  }, {
    key: "refCount",
    value: function refCount() {
      return (0,_operators_refCount__WEBPACK_IMPORTED_MODULE_7__.refCount)()(this);
    }
  }]);

  return ConnectableObservable;
}(_Observable__WEBPACK_IMPORTED_MODULE_8__.Observable);
var connectableObservableDescriptor = function () {
  var connectableProto = ConnectableObservable.prototype;
  return {
    operator: {
      value: null
    },
    _refCount: {
      value: 0,
      writable: true
    },
    _subject: {
      value: null,
      writable: true
    },
    _connection: {
      value: null,
      writable: true
    },
    _subscribe: {
      value: connectableProto._subscribe
    },
    _isComplete: {
      value: connectableProto._isComplete,
      writable: true
    },
    getSubject: {
      value: connectableProto.getSubject
    },
    connect: {
      value: connectableProto.connect
    },
    refCount: {
      value: connectableProto.refCount
    }
  };
}();

var ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(ConnectableSubscriber, _SubjectSubscriber);

  var _super2 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(ConnectableSubscriber);

  function ConnectableSubscriber(destination, connectable) {
    var _this2;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ConnectableSubscriber);

    _this2 = _super2.call(this, destination);
    _this2.connectable = connectable;
    return _this2;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ConnectableSubscriber, [{
    key: "_error",
    value: function _error(err) {
      this._unsubscribe();

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ConnectableSubscriber.prototype), "_error", this).call(this, err);
    }
  }, {
    key: "_complete",
    value: function _complete() {
      this.connectable._isComplete = true;

      this._unsubscribe();

      (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(ConnectableSubscriber.prototype), "_complete", this).call(this);
    }
  }, {
    key: "_unsubscribe",
    value: function _unsubscribe() {
      var connectable = this.connectable;

      if (connectable) {
        this.connectable = null;
        var connection = connectable._connection;
        connectable._refCount = 0;
        connectable._subject = null;
        connectable._connection = null;

        if (connection) {
          connection.unsubscribe();
        }
      }
    }
  }]);

  return ConnectableSubscriber;
}(_Subject__WEBPACK_IMPORTED_MODULE_9__.SubjectSubscriber);

var RefCountOperator = /*#__PURE__*/function () {
  function RefCountOperator(connectable) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, RefCountOperator);

    this.connectable = connectable;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(RefCountOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      var connectable = this.connectable;
      connectable._refCount++;
      var refCounter = new RefCountSubscriber(subscriber, connectable);
      var subscription = source.subscribe(refCounter);

      if (!refCounter.closed) {
        refCounter.connection = connectable.connect();
      }

      return subscription;
    }
  }]);

  return RefCountOperator;
}();

var RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(RefCountSubscriber, _Subscriber);

  var _super3 = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(RefCountSubscriber);

  function RefCountSubscriber(destination, connectable) {
    var _this3;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, RefCountSubscriber);

    _this3 = _super3.call(this, destination);
    _this3.connectable = connectable;
    return _this3;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(RefCountSubscriber, [{
    key: "_unsubscribe",
    value: function _unsubscribe() {
      var connectable = this.connectable;

      if (!connectable) {
        this.connection = null;
        return;
      }

      this.connectable = null;
      var refCount = connectable._refCount;

      if (refCount <= 0) {
        this.connection = null;
        return;
      }

      connectable._refCount = refCount - 1;

      if (refCount > 1) {
        this.connection = null;
        return;
      }

      var connection = this.connection;
      var sharedConnection = connectable._connection;
      this.connection = null;

      if (sharedConnection && (!connection || sharedConnection === connection)) {
        sharedConnection.unsubscribe();
      }
    }
  }]);

  return RefCountSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_10__.Subscriber);

/***/ }),

/***/ 61486:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combineLatest": function() { return /* binding */ combineLatest; },
/* harmony export */   "CombineLatestOperator": function() { return /* binding */ CombineLatestOperator; },
/* harmony export */   "CombineLatestSubscriber": function() { return /* binding */ CombineLatestSubscriber; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isScheduler */ 86770);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isArray */ 49861);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromArray */ 83446);









var NONE = {};
function combineLatest() {
  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {
    observables[_key] = arguments[_key];
  }

  var resultSelector = null;
  var scheduler = null;

  if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__.isScheduler)(observables[observables.length - 1])) {
    scheduler = observables.pop();
  }

  if (typeof observables[observables.length - 1] === 'function') {
    resultSelector = observables.pop();
  }

  if (observables.length === 1 && (0,_util_isArray__WEBPACK_IMPORTED_MODULE_5__.isArray)(observables[0])) {
    observables = observables[0];
  }

  return (0,_fromArray__WEBPACK_IMPORTED_MODULE_6__.fromArray)(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*#__PURE__*/function () {
  function CombineLatestOperator(resultSelector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, CombineLatestOperator);

    this.resultSelector = resultSelector;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(CombineLatestOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    }
  }]);

  return CombineLatestOperator;
}();
var CombineLatestSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(CombineLatestSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(CombineLatestSubscriber);

  function CombineLatestSubscriber(destination, resultSelector) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, CombineLatestSubscriber);

    _this = _super.call(this, destination);
    _this.resultSelector = resultSelector;
    _this.active = 0;
    _this.values = [];
    _this.observables = [];
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(CombineLatestSubscriber, [{
    key: "_next",
    value: function _next(observable) {
      this.values.push(NONE);
      this.observables.push(observable);
    }
  }, {
    key: "_complete",
    value: function _complete() {
      var observables = this.observables;
      var len = observables.length;

      if (len === 0) {
        this.destination.complete();
      } else {
        this.active = len;
        this.toRespond = len;

        for (var i = 0; i < len; i++) {
          var observable = observables[i];
          this.add((0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__.subscribeToResult)(this, observable, observable, i));
        }
      }
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete(unused) {
      if ((this.active -= 1) === 0) {
        this.destination.complete();
      }
    }
  }, {
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      var values = this.values;
      var oldVal = values[outerIndex];
      var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
      values[outerIndex] = innerValue;

      if (toRespond === 0) {
        if (this.resultSelector) {
          this._tryResultSelector(values);
        } else {
          this.destination.next(values.slice());
        }
      }
    }
  }, {
    key: "_tryResultSelector",
    value: function _tryResultSelector(values) {
      var result;

      try {
        result = this.resultSelector.apply(this, values);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      this.destination.next(result);
    }
  }]);

  return CombineLatestSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__.OuterSubscriber);

/***/ }),

/***/ 76461:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/concat.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": function() { return /* binding */ concat; }
/* harmony export */ });
/* harmony import */ var _of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./of */ 81134);
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operators/concatAll */ 92125);


function concat() {
  return (0,_operators_concatAll__WEBPACK_IMPORTED_MODULE_0__.concatAll)()(_of__WEBPACK_IMPORTED_MODULE_1__.of.apply(void 0, arguments));
}

/***/ }),

/***/ 58640:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/defer.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defer": function() { return /* binding */ defer; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ 34361);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ 8117);



function defer(observableFactory) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    var input;

    try {
      input = observableFactory();
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }

    var source = input ? (0,_from__WEBPACK_IMPORTED_MODULE_1__.from)(input) : (0,_empty__WEBPACK_IMPORTED_MODULE_2__.empty)();
    return source.subscribe(subscriber);
  });
}

/***/ }),

/***/ 8117:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/empty.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EMPTY": function() { return /* binding */ EMPTY; },
/* harmony export */   "empty": function() { return /* binding */ empty; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);

var EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
  return subscriber.complete();
});
function empty(scheduler) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}

function emptyScheduled(scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    return scheduler.schedule(function () {
      return subscriber.complete();
    });
  });
}

/***/ }),

/***/ 42720:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forkJoin": function() { return /* binding */ forkJoin; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ 49861);
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/map */ 33927);
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isObject */ 71533);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./from */ 34361);






function forkJoin() {
  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  if (sources.length === 1) {
    var first = sources[0];

    if ((0,_util_isArray__WEBPACK_IMPORTED_MODULE_1__.isArray)(first)) {
      return forkJoinInternal(first, null);
    }

    if ((0,_util_isObject__WEBPACK_IMPORTED_MODULE_2__.isObject)(first) && Object.getPrototypeOf(first) === Object.prototype) {
      var keys = Object.keys(first);
      return forkJoinInternal(keys.map(function (key) {
        return first[key];
      }), keys);
    }
  }

  if (typeof sources[sources.length - 1] === 'function') {
    var resultSelector = sources.pop();
    sources = sources.length === 1 && (0,_util_isArray__WEBPACK_IMPORTED_MODULE_1__.isArray)(sources[0]) ? sources[0] : sources;
    return forkJoinInternal(sources, null).pipe((0,_operators_map__WEBPACK_IMPORTED_MODULE_3__.map)(function (args) {
      return resultSelector.apply(void 0, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(args));
    }));
  }

  return forkJoinInternal(sources, null);
}

function forkJoinInternal(sources, keys) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_4__.Observable(function (subscriber) {
    var len = sources.length;

    if (len === 0) {
      subscriber.complete();
      return;
    }

    var values = new Array(len);
    var completed = 0;
    var emitted = 0;

    var _loop = function _loop(i) {
      var source = (0,_from__WEBPACK_IMPORTED_MODULE_5__.from)(sources[i]);
      var hasValue = false;
      subscriber.add(source.subscribe({
        next: function next(value) {
          if (!hasValue) {
            hasValue = true;
            emitted++;
          }

          values[i] = value;
        },
        error: function error(err) {
          return subscriber.error(err);
        },
        complete: function complete() {
          completed++;

          if (completed === len || !hasValue) {
            if (emitted === len) {
              subscriber.next(keys ? keys.reduce(function (result, key, i) {
                return result[key] = values[i], result;
              }, {}) : values);
            }

            subscriber.complete();
          }
        }
      }));
    };

    for (var i = 0; i < len; i++) {
      _loop(i);
    }
  });
}

/***/ }),

/***/ 34361:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/from.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "from": function() { return /* binding */ from; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeTo */ 12490);
/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduled/scheduled */ 86184);



function from(input, scheduler) {
  if (!scheduler) {
    if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable) {
      return input;
    }

    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable((0,_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__.subscribeTo)(input));
  } else {
    return (0,_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__.scheduled)(input, scheduler);
  }
}

/***/ }),

/***/ 83446:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/fromArray.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromArray": function() { return /* binding */ fromArray; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToArray */ 70076);
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduled/scheduleArray */ 84049);



function fromArray(input, scheduler) {
  if (!scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable((0,_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__.subscribeToArray)(input));
  } else {
    return (0,_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__.scheduleArray)(input, scheduler);
  }
}

/***/ }),

/***/ 82516:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromEvent": function() { return /* binding */ fromEvent; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 90287);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isArray */ 49861);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isFunction */ 80018);
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ 33927);






var toString = function () {
  return Object.prototype.toString;
}();

function fromEvent(target, eventName, options, resultSelector) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(options)) {
    resultSelector = options;
    options = undefined;
  }

  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0,_operators_map__WEBPACK_IMPORTED_MODULE_2__.map)(function (args) {
      return (0,_util_isArray__WEBPACK_IMPORTED_MODULE_3__.isArray)(args) ? resultSelector.apply(void 0, (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(args)) : resultSelector(args);
    }));
  }

  return new _Observable__WEBPACK_IMPORTED_MODULE_4__.Observable(function (subscriber) {
    function handler(e) {
      if (arguments.length > 1) {
        subscriber.next(Array.prototype.slice.call(arguments));
      } else {
        subscriber.next(e);
      }
    }

    setupSubscription(target, eventName, handler, subscriber, options);
  });
}

function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
  var unsubscribe;

  if (isEventTarget(sourceObj)) {
    var source = sourceObj;
    sourceObj.addEventListener(eventName, handler, options);

    unsubscribe = function unsubscribe() {
      return source.removeEventListener(eventName, handler, options);
    };
  } else if (isJQueryStyleEventEmitter(sourceObj)) {
    var _source = sourceObj;
    sourceObj.on(eventName, handler);

    unsubscribe = function unsubscribe() {
      return _source.off(eventName, handler);
    };
  } else if (isNodeStyleEventEmitter(sourceObj)) {
    var _source2 = sourceObj;
    sourceObj.addListener(eventName, handler);

    unsubscribe = function unsubscribe() {
      return _source2.removeListener(eventName, handler);
    };
  } else if (sourceObj && sourceObj.length) {
    for (var i = 0, len = sourceObj.length; i < len; i++) {
      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
    }
  } else {
    throw new TypeError('Invalid event target');
  }

  subscriber.add(unsubscribe);
}

function isNodeStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}

function isJQueryStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}

function isEventTarget(sourceObj) {
  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

/***/ }),

/***/ 89919:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/merge.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "merge": function() { return /* binding */ merge; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ 86770);
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/mergeAll */ 96324);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromArray */ 83446);




function merge() {
  var concurrent = Number.POSITIVE_INFINITY;
  var scheduler = null;

  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {
    observables[_key] = arguments[_key];
  }

  var last = observables[observables.length - 1];

  if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(last)) {
    scheduler = observables.pop();

    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
      concurrent = observables.pop();
    }
  } else if (typeof last === 'number') {
    concurrent = observables.pop();
  }

  if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {
    return observables[0];
  }

  return (0,_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__.mergeAll)(concurrent)((0,_fromArray__WEBPACK_IMPORTED_MODULE_3__.fromArray)(observables, scheduler));
}

/***/ }),

/***/ 81134:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/of.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "of": function() { return /* binding */ of; }
/* harmony export */ });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ 86770);
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromArray */ 83446);
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduled/scheduleArray */ 84049);



function of() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var scheduler = args[args.length - 1];

  if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(scheduler)) {
    args.pop();
    return (0,_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_1__.scheduleArray)(args, scheduler);
  } else {
    return (0,_fromArray__WEBPACK_IMPORTED_MODULE_2__.fromArray)(args);
  }
}

/***/ }),

/***/ 45871:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/throwError.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throwError": function() { return /* binding */ throwError; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);

function throwError(error, scheduler) {
  if (!scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
      return subscriber.error(error);
    });
  } else {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
      return scheduler.schedule(dispatch, 0, {
        error: error,
        subscriber: subscriber
      });
    });
  }
}

function dispatch(_ref) {
  var error = _ref.error,
      subscriber = _ref.subscriber;
  subscriber.error(error);
}

/***/ }),

/***/ 12702:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/timer.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "timer": function() { return /* binding */ timer; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduler/async */ 32606);
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isNumeric */ 82867);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ 86770);




function timer() {
  var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var periodOrScheduler = arguments.length > 1 ? arguments[1] : undefined;
  var scheduler = arguments.length > 2 ? arguments[2] : undefined;
  var period = -1;

  if ((0,_util_isNumeric__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(periodOrScheduler)) {
    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
  } else if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(periodOrScheduler)) {
    scheduler = periodOrScheduler;
  }

  if (!(0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(scheduler)) {
    scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_2__.async;
  }

  return new _Observable__WEBPACK_IMPORTED_MODULE_3__.Observable(function (subscriber) {
    var due = (0,_util_isNumeric__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(dueTime) ? dueTime : +dueTime - scheduler.now();
    return scheduler.schedule(dispatch, due, {
      index: 0,
      period: period,
      subscriber: subscriber
    });
  });
}

function dispatch(state) {
  var index = state.index,
      period = state.period,
      subscriber = state.subscriber;
  subscriber.next(index);

  if (subscriber.closed) {
    return;
  } else if (period === -1) {
    return subscriber.complete();
  }

  state.index = index + 1;
  this.schedule(state, period);
}

/***/ }),

/***/ 527:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/audit.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "audit": function() { return /* binding */ audit; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);






function audit(durationSelector) {
  return function auditOperatorFunction(source) {
    return source.lift(new AuditOperator(durationSelector));
  };
}

var AuditOperator = /*#__PURE__*/function () {
  function AuditOperator(durationSelector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, AuditOperator);

    this.durationSelector = durationSelector;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(AuditOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    }
  }]);

  return AuditOperator;
}();

var AuditSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(AuditSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(AuditSubscriber);

  function AuditSubscriber(destination, durationSelector) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, AuditSubscriber);

    _this = _super.call(this, destination);
    _this.durationSelector = durationSelector;
    _this.hasValue = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(AuditSubscriber, [{
    key: "_next",
    value: function _next(value) {
      this.value = value;
      this.hasValue = true;

      if (!this.throttled) {
        var duration;

        try {
          var durationSelector = this.durationSelector;
          duration = durationSelector(value);
        } catch (err) {
          return this.destination.error(err);
        }

        var innerSubscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__.subscribeToResult)(this, duration);

        if (!innerSubscription || innerSubscription.closed) {
          this.clearThrottle();
        } else {
          this.add(this.throttled = innerSubscription);
        }
      }
    }
  }, {
    key: "clearThrottle",
    value: function clearThrottle() {
      var value = this.value,
          hasValue = this.hasValue,
          throttled = this.throttled;

      if (throttled) {
        this.remove(throttled);
        this.throttled = null;
        throttled.unsubscribe();
      }

      if (hasValue) {
        this.value = null;
        this.hasValue = false;
        this.destination.next(value);
      }
    }
  }, {
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
      this.clearThrottle();
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete() {
      this.clearThrottle();
    }
  }]);

  return AuditSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__.OuterSubscriber);

/***/ }),

/***/ 7494:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "auditTime": function() { return /* binding */ auditTime; }
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 32606);
/* harmony import */ var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audit */ 527);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/timer */ 12702);



function auditTime(duration) {
  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.async;
  return (0,_audit__WEBPACK_IMPORTED_MODULE_1__.audit)(function () {
    return (0,_observable_timer__WEBPACK_IMPORTED_MODULE_2__.timer)(duration, scheduler);
  });
}

/***/ }),

/***/ 18293:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/catchError.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "catchError": function() { return /* binding */ catchError; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../InnerSubscriber */ 90898);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);









function catchError(selector) {
  return function catchErrorOperatorFunction(source) {
    var operator = new CatchOperator(selector);
    var caught = source.lift(operator);
    return operator.caught = caught;
  };
}

var CatchOperator = /*#__PURE__*/function () {
  function CatchOperator(selector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, CatchOperator);

    this.selector = selector;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(CatchOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    }
  }]);

  return CatchOperator;
}();

var CatchSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(CatchSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(CatchSubscriber);

  function CatchSubscriber(destination, selector, caught) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, CatchSubscriber);

    _this = _super.call(this, destination);
    _this.selector = selector;
    _this.caught = caught;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(CatchSubscriber, [{
    key: "error",
    value: function error(err) {
      if (!this.isStopped) {
        var result;

        try {
          result = this.selector(err, this.caught);
        } catch (err2) {
          (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(CatchSubscriber.prototype), "error", this).call(this, err2);

          return;
        }

        this._unsubscribeAndRecycle();

        var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_6__.InnerSubscriber(this, undefined, undefined);
        this.add(innerSubscriber);
        var innerSubscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__.subscribeToResult)(this, result, undefined, undefined, innerSubscriber);

        if (innerSubscription !== innerSubscriber) {
          this.add(innerSubscription);
        }
      }
    }
  }]);

  return CatchSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__.OuterSubscriber);

/***/ }),

/***/ 92125:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concatAll.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatAll": function() { return /* binding */ concatAll; }
/* harmony export */ });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeAll */ 96324);

function concatAll() {
  return (0,_mergeAll__WEBPACK_IMPORTED_MODULE_0__.mergeAll)(1);
}

/***/ }),

/***/ 56816:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMap.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatMap": function() { return /* binding */ concatMap; }
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ 85816);

function concatMap(project, resultSelector) {
  return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(project, resultSelector, 1);
}

/***/ }),

/***/ 51253:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultIfEmpty": function() { return /* binding */ defaultIfEmpty; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function defaultIfEmpty() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return function (source) {
    return source.lift(new DefaultIfEmptyOperator(defaultValue));
  };
}

var DefaultIfEmptyOperator = /*#__PURE__*/function () {
  function DefaultIfEmptyOperator(defaultValue) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DefaultIfEmptyOperator);

    this.defaultValue = defaultValue;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DefaultIfEmptyOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    }
  }]);

  return DefaultIfEmptyOperator;
}();

var DefaultIfEmptySubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(DefaultIfEmptySubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(DefaultIfEmptySubscriber);

  function DefaultIfEmptySubscriber(destination, defaultValue) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DefaultIfEmptySubscriber);

    _this = _super.call(this, destination);
    _this.defaultValue = defaultValue;
    _this.isEmpty = true;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DefaultIfEmptySubscriber, [{
    key: "_next",
    value: function _next(value) {
      this.isEmpty = false;
      this.destination.next(value);
    }
  }, {
    key: "_complete",
    value: function _complete() {
      if (this.isEmpty) {
        this.destination.next(this.defaultValue);
      }

      this.destination.complete();
    }
  }]);

  return DefaultIfEmptySubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 83720:
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distinctUntilChanged": function() { return /* binding */ distinctUntilChanged; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function distinctUntilChanged(compare, keySelector) {
  return function (source) {
    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
  };
}

var DistinctUntilChangedOperator = /*#__PURE__*/function () {
  function DistinctUntilChangedOperator(compare, keySelector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DistinctUntilChangedOperator);

    this.compare = compare;
    this.keySelector = keySelector;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DistinctUntilChangedOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    }
  }]);

  return DistinctUntilChangedOperator;
}();

var DistinctUntilChangedSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(DistinctUntilChangedSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(DistinctUntilChangedSubscriber);

  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DistinctUntilChangedSubscriber);

    _this = _super.call(this, destination);
    _this.keySelector = keySelector;
    _this.hasKey = false;

    if (typeof compare === 'function') {
      _this.compare = compare;
    }

    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DistinctUntilChangedSubscriber, [{
    key: "compare",
    value: function compare(x, y) {
      return x === y;
    }
  }, {
    key: "_next",
    value: function _next(value) {
      var key;

      try {
        var keySelector = this.keySelector;
        key = keySelector ? keySelector(value) : value;
      } catch (err) {
        return this.destination.error(err);
      }

      var result = false;

      if (this.hasKey) {
        try {
          var compare = this.compare;
          result = compare(this.key, key);
        } catch (err) {
          return this.destination.error(err);
        }
      } else {
        this.hasKey = true;
      }

      if (!result) {
        this.key = key;
        this.destination.next(value);
      }
    }
  }]);

  return DistinctUntilChangedSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 9170:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/filter.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filter": function() { return /* binding */ filter; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function filter(predicate, thisArg) {
  return function filterOperatorFunction(source) {
    return source.lift(new FilterOperator(predicate, thisArg));
  };
}

var FilterOperator = /*#__PURE__*/function () {
  function FilterOperator(predicate, thisArg) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, FilterOperator);

    this.predicate = predicate;
    this.thisArg = thisArg;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(FilterOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    }
  }]);

  return FilterOperator;
}();

var FilterSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(FilterSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(FilterSubscriber);

  function FilterSubscriber(destination, predicate, thisArg) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, FilterSubscriber);

    _this = _super.call(this, destination);
    _this.predicate = predicate;
    _this.thisArg = thisArg;
    _this.count = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(FilterSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var result;

      try {
        result = this.predicate.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      if (result) {
        this.destination.next(value);
      }
    }
  }]);

  return FilterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 71435:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/finalize.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "finalize": function() { return /* binding */ finalize; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscription */ 94283);






function finalize(callback) {
  return function (source) {
    return source.lift(new FinallyOperator(callback));
  };
}

var FinallyOperator = /*#__PURE__*/function () {
  function FinallyOperator(callback) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, FinallyOperator);

    this.callback = callback;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(FinallyOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    }
  }]);

  return FinallyOperator;
}();

var FinallySubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(FinallySubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(FinallySubscriber);

  function FinallySubscriber(destination, callback) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, FinallySubscriber);

    _this = _super.call(this, destination);

    _this.add(new _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription(callback));

    return _this;
  }

  return FinallySubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_5__.Subscriber);

/***/ }),

/***/ 20088:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/first.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "first": function() { return /* binding */ first; }
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ 25239);
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 9170);
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./take */ 53466);
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ 51253);
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ 83240);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 87206);






function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0,_take__WEBPACK_IMPORTED_MODULE_2__.take)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(function () {
      return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError();
    }));
  };
}

/***/ }),

/***/ 27153:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/last.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "last": function() { return /* binding */ last; }
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ 25239);
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 9170);
/* harmony import */ var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./takeLast */ 86828);
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ 83240);
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ 51253);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 87206);






function last(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0,_takeLast__WEBPACK_IMPORTED_MODULE_2__.takeLast)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(function () {
      return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError();
    }));
  };
}

/***/ }),

/***/ 33927:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/map.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "map": function() { return /* binding */ map; },
/* harmony export */   "MapOperator": function() { return /* binding */ MapOperator; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Subscriber */ 71003);






function map(project, thisArg) {
  return function mapOperation(source) {
    if (typeof project !== 'function') {
      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }

    return source.lift(new MapOperator(project, thisArg));
  };
}
var MapOperator = /*#__PURE__*/function () {
  function MapOperator(project, thisArg) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, MapOperator);

    this.project = project;
    this.thisArg = thisArg;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(MapOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    }
  }]);

  return MapOperator;
}();

var MapSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(MapSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__.default)(MapSubscriber);

  function MapSubscriber(destination, project, thisArg) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, MapSubscriber);

    _this = _super.call(this, destination);
    _this.project = project;
    _this.count = 0;
    _this.thisArg = thisArg || (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this);
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(MapSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var result;

      try {
        result = this.project.call(this.thisArg, value, this.count++);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      this.destination.next(result);
    }
  }]);

  return MapSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_5__.Subscriber);

/***/ }),

/***/ 96324:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeAll": function() { return /* binding */ mergeAll; }
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ 85816);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 87206);


function mergeAll() {
  var concurrent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
  return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(_util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, concurrent);
}

/***/ }),

/***/ 85816:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeMap": function() { return /* binding */ mergeMap; },
/* harmony export */   "MergeMapOperator": function() { return /* binding */ MergeMapOperator; },
/* harmony export */   "MergeMapSubscriber": function() { return /* binding */ MergeMapSubscriber; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../InnerSubscriber */ 90898);
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./map */ 33927);
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/from */ 34361);









function mergeMap(project, resultSelector) {
  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(mergeMap(function (a, i) {
        return (0,_observable_from__WEBPACK_IMPORTED_MODULE_4__.from)(project(a, i)).pipe((0,_map__WEBPACK_IMPORTED_MODULE_5__.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }, concurrent));
    };
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }

  return function (source) {
    return source.lift(new MergeMapOperator(project, concurrent));
  };
}
var MergeMapOperator = /*#__PURE__*/function () {
  function MergeMapOperator(project) {
    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, MergeMapOperator);

    this.project = project;
    this.concurrent = concurrent;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(MergeMapOperator, [{
    key: "call",
    value: function call(observer, source) {
      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    }
  }]);

  return MergeMapOperator;
}();
var MergeMapSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(MergeMapSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(MergeMapSubscriber);

  function MergeMapSubscriber(destination, project) {
    var _this;

    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, MergeMapSubscriber);

    _this = _super.call(this, destination);
    _this.project = project;
    _this.concurrent = concurrent;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(MergeMapSubscriber, [{
    key: "_next",
    value: function _next(value) {
      if (this.active < this.concurrent) {
        this._tryNext(value);
      } else {
        this.buffer.push(value);
      }
    }
  }, {
    key: "_tryNext",
    value: function _tryNext(value) {
      var result;
      var index = this.index++;

      try {
        result = this.project(value, index);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      this.active++;

      this._innerSub(result, value, index);
    }
  }, {
    key: "_innerSub",
    value: function _innerSub(ish, value, index) {
      var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_6__.InnerSubscriber(this, value, index);
      var destination = this.destination;
      destination.add(innerSubscriber);
      var innerSubscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_7__.subscribeToResult)(this, ish, undefined, undefined, innerSubscriber);

      if (innerSubscription !== innerSubscriber) {
        destination.add(innerSubscription);
      }
    }
  }, {
    key: "_complete",
    value: function _complete() {
      this.hasCompleted = true;

      if (this.active === 0 && this.buffer.length === 0) {
        this.destination.complete();
      }

      this.unsubscribe();
    }
  }, {
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete(innerSub) {
      var buffer = this.buffer;
      this.remove(innerSub);
      this.active--;

      if (buffer.length > 0) {
        this._next(buffer.shift());
      } else if (this.active === 0 && this.hasCompleted) {
        this.destination.complete();
      }
    }
  }]);

  return MergeMapSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_8__.OuterSubscriber);

/***/ }),

/***/ 19969:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/multicast.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multicast": function() { return /* binding */ multicast; },
/* harmony export */   "MulticastOperator": function() { return /* binding */ MulticastOperator; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/ConnectableObservable */ 92494);



function multicast(subjectOrSubjectFactory, selector) {
  return function multicastOperatorFunction(source) {
    var subjectFactory;

    if (typeof subjectOrSubjectFactory === 'function') {
      subjectFactory = subjectOrSubjectFactory;
    } else {
      subjectFactory = function subjectFactory() {
        return subjectOrSubjectFactory;
      };
    }

    if (typeof selector === 'function') {
      return source.lift(new MulticastOperator(subjectFactory, selector));
    }

    var connectable = Object.create(source, _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_2__.connectableObservableDescriptor);
    connectable.source = source;
    connectable.subjectFactory = subjectFactory;
    return connectable;
  };
}
var MulticastOperator = /*#__PURE__*/function () {
  function MulticastOperator(subjectFactory, selector) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, MulticastOperator);

    this.subjectFactory = subjectFactory;
    this.selector = selector;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(MulticastOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      var selector = this.selector;
      var subject = this.subjectFactory();
      var subscription = selector(subject).subscribe(subscriber);
      subscription.add(source.subscribe(subject));
      return subscription;
    }
  }]);

  return MulticastOperator;
}();

/***/ }),

/***/ 93253:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/observeOn.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observeOn": function() { return /* binding */ observeOn; },
/* harmony export */   "ObserveOnOperator": function() { return /* binding */ ObserveOnOperator; },
/* harmony export */   "ObserveOnSubscriber": function() { return /* binding */ ObserveOnSubscriber; },
/* harmony export */   "ObserveOnMessage": function() { return /* binding */ ObserveOnMessage; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _Notification__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Notification */ 93621);






function observeOn(scheduler) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return function observeOnOperatorFunction(source) {
    return source.lift(new ObserveOnOperator(scheduler, delay));
  };
}
var ObserveOnOperator = /*#__PURE__*/function () {
  function ObserveOnOperator(scheduler) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ObserveOnOperator);

    this.scheduler = scheduler;
    this.delay = delay;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ObserveOnOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    }
  }]);

  return ObserveOnOperator;
}();
var ObserveOnSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(ObserveOnSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(ObserveOnSubscriber);

  function ObserveOnSubscriber(destination, scheduler) {
    var _this;

    var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ObserveOnSubscriber);

    _this = _super.call(this, destination);
    _this.scheduler = scheduler;
    _this.delay = delay;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ObserveOnSubscriber, [{
    key: "scheduleMessage",
    value: function scheduleMessage(notification) {
      var destination = this.destination;
      destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    }
  }, {
    key: "_next",
    value: function _next(value) {
      this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_4__.Notification.createNext(value));
    }
  }, {
    key: "_error",
    value: function _error(err) {
      this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_4__.Notification.createError(err));
      this.unsubscribe();
    }
  }, {
    key: "_complete",
    value: function _complete() {
      this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_4__.Notification.createComplete());
      this.unsubscribe();
    }
  }], [{
    key: "dispatch",
    value: function dispatch(arg) {
      var notification = arg.notification,
          destination = arg.destination;
      notification.observe(destination);
      this.unsubscribe();
    }
  }]);

  return ObserveOnSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_5__.Subscriber);
var ObserveOnMessage = function ObserveOnMessage(notification, destination) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ObserveOnMessage);

  this.notification = notification;
  this.destination = destination;
};

/***/ }),

/***/ 15347:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pairwise": function() { return /* binding */ pairwise; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function pairwise() {
  return function (source) {
    return source.lift(new PairwiseOperator());
  };
}

var PairwiseOperator = /*#__PURE__*/function () {
  function PairwiseOperator() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, PairwiseOperator);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(PairwiseOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new PairwiseSubscriber(subscriber));
    }
  }]);

  return PairwiseOperator;
}();

var PairwiseSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(PairwiseSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(PairwiseSubscriber);

  function PairwiseSubscriber(destination) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, PairwiseSubscriber);

    _this = _super.call(this, destination);
    _this.hasPrev = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(PairwiseSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var pair;

      if (this.hasPrev) {
        pair = [this.prev, value];
      } else {
        this.hasPrev = true;
      }

      this.prev = value;

      if (pair) {
        this.destination.next(pair);
      }
    }
  }]);

  return PairwiseSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 97085:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/refCount.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "refCount": function() { return /* binding */ refCount; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function refCount() {
  return function refCountOperatorFunction(source) {
    return source.lift(new RefCountOperator(source));
  };
}

var RefCountOperator = /*#__PURE__*/function () {
  function RefCountOperator(connectable) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, RefCountOperator);

    this.connectable = connectable;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(RefCountOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      var connectable = this.connectable;
      connectable._refCount++;
      var refCounter = new RefCountSubscriber(subscriber, connectable);
      var subscription = source.subscribe(refCounter);

      if (!refCounter.closed) {
        refCounter.connection = connectable.connect();
      }

      return subscription;
    }
  }]);

  return RefCountOperator;
}();

var RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(RefCountSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(RefCountSubscriber);

  function RefCountSubscriber(destination, connectable) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, RefCountSubscriber);

    _this = _super.call(this, destination);
    _this.connectable = connectable;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(RefCountSubscriber, [{
    key: "_unsubscribe",
    value: function _unsubscribe() {
      var connectable = this.connectable;

      if (!connectable) {
        this.connection = null;
        return;
      }

      this.connectable = null;
      var refCount = connectable._refCount;

      if (refCount <= 0) {
        this.connection = null;
        return;
      }

      connectable._refCount = refCount - 1;

      if (refCount > 1) {
        this.connection = null;
        return;
      }

      var connection = this.connection;
      var sharedConnection = connectable._connection;
      this.connection = null;

      if (sharedConnection && (!connection || sharedConnection === connection)) {
        sharedConnection.unsubscribe();
      }
    }
  }]);

  return RefCountSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 77430:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/scan.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scan": function() { return /* binding */ scan; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function scan(accumulator, seed) {
  var hasSeed = false;

  if (arguments.length >= 2) {
    hasSeed = true;
  }

  return function scanOperatorFunction(source) {
    return source.lift(new ScanOperator(accumulator, seed, hasSeed));
  };
}

var ScanOperator = /*#__PURE__*/function () {
  function ScanOperator(accumulator, seed) {
    var hasSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ScanOperator);

    this.accumulator = accumulator;
    this.seed = seed;
    this.hasSeed = hasSeed;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ScanOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    }
  }]);

  return ScanOperator;
}();

var ScanSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(ScanSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(ScanSubscriber);

  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ScanSubscriber);

    _this = _super.call(this, destination);
    _this.accumulator = accumulator;
    _this._seed = _seed;
    _this.hasSeed = hasSeed;
    _this.index = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ScanSubscriber, [{
    key: "seed",
    get: function get() {
      return this._seed;
    },
    set: function set(value) {
      this.hasSeed = true;
      this._seed = value;
    }
  }, {
    key: "_next",
    value: function _next(value) {
      if (!this.hasSeed) {
        this.seed = value;
        this.destination.next(value);
      } else {
        return this._tryNext(value);
      }
    }
  }, {
    key: "_tryNext",
    value: function _tryNext(value) {
      var index = this.index++;
      var result;

      try {
        result = this.accumulator(this.seed, value, index);
      } catch (err) {
        this.destination.error(err);
      }

      this.seed = result;
      this.destination.next(result);
    }
  }]);

  return ScanSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 11355:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/share.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "share": function() { return /* binding */ share; }
/* harmony export */ });
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multicast */ 19969);
/* harmony import */ var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./refCount */ 97085);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ 79441);




function shareSubjectFactory() {
  return new _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject();
}

function share() {
  return function (source) {
    return (0,_refCount__WEBPACK_IMPORTED_MODULE_1__.refCount)()((0,_multicast__WEBPACK_IMPORTED_MODULE_2__.multicast)(shareSubjectFactory)(source));
  };
}

/***/ }),

/***/ 92597:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shareReplay": function() { return /* binding */ shareReplay; }
/* harmony export */ });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ReplaySubject */ 13413);

function shareReplay(configOrBufferSize, windowTime, scheduler) {
  var config;

  if (configOrBufferSize && typeof configOrBufferSize === 'object') {
    config = configOrBufferSize;
  } else {
    config = {
      bufferSize: configOrBufferSize,
      windowTime: windowTime,
      refCount: false,
      scheduler: scheduler
    };
  }

  return function (source) {
    return source.lift(shareReplayOperator(config));
  };
}

function shareReplayOperator(_ref) {
  var _ref$bufferSize = _ref.bufferSize,
      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,
      _ref$windowTime = _ref.windowTime,
      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,
      useRefCount = _ref.refCount,
      scheduler = _ref.scheduler;
  var subject;
  var refCount = 0;
  var subscription;
  var hasError = false;
  var isComplete = false;
  return function shareReplayOperation(source) {
    refCount++;

    if (!subject || hasError) {
      hasError = false;
      subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__.ReplaySubject(bufferSize, windowTime, scheduler);
      subscription = source.subscribe({
        next: function next(value) {
          subject.next(value);
        },
        error: function error(err) {
          hasError = true;
          subject.error(err);
        },
        complete: function complete() {
          isComplete = true;
          subscription = undefined;
          subject.complete();
        }
      });
    }

    var innerSub = subject.subscribe(this);
    this.add(function () {
      refCount--;
      innerSub.unsubscribe();

      if (subscription && !isComplete && useRefCount && refCount === 0) {
        subscription.unsubscribe();
        subscription = undefined;
        subject = undefined;
      }
    });
  };
}

/***/ }),

/***/ 1143:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/startWith.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "startWith": function() { return /* binding */ startWith; }
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/concat */ 76461);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ 86770);


function startWith() {
  for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {
    array[_key] = arguments[_key];
  }

  var scheduler = array[array.length - 1];

  if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__.isScheduler)(scheduler)) {
    array.pop();
    return function (source) {
      return (0,_observable_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(array, source, scheduler);
    };
  } else {
    return function (source) {
      return (0,_observable_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(array, source);
    };
  }
}

/***/ }),

/***/ 79902:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "switchMap": function() { return /* binding */ switchMap; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../InnerSubscriber */ 90898);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map */ 33927);
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../observable/from */ 34361);











function switchMap(project, resultSelector) {
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(switchMap(function (a, i) {
        return (0,_observable_from__WEBPACK_IMPORTED_MODULE_6__.from)(project(a, i)).pipe((0,_map__WEBPACK_IMPORTED_MODULE_7__.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }

  return function (source) {
    return source.lift(new SwitchMapOperator(project));
  };
}

var SwitchMapOperator = /*#__PURE__*/function () {
  function SwitchMapOperator(project) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SwitchMapOperator);

    this.project = project;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(SwitchMapOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    }
  }]);

  return SwitchMapOperator;
}();

var SwitchMapSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(SwitchMapSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(SwitchMapSubscriber);

  function SwitchMapSubscriber(destination, project) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__.default)(this, SwitchMapSubscriber);

    _this = _super.call(this, destination);
    _this.project = project;
    _this.index = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__.default)(SwitchMapSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var result;
      var index = this.index++;

      try {
        result = this.project(value, index);
      } catch (error) {
        this.destination.error(error);
        return;
      }

      this._innerSub(result, value, index);
    }
  }, {
    key: "_innerSub",
    value: function _innerSub(result, value, index) {
      var innerSubscription = this.innerSubscription;

      if (innerSubscription) {
        innerSubscription.unsubscribe();
      }

      var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_8__.InnerSubscriber(this, value, index);
      var destination = this.destination;
      destination.add(innerSubscriber);
      this.innerSubscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_9__.subscribeToResult)(this, result, undefined, undefined, innerSubscriber);

      if (this.innerSubscription !== innerSubscriber) {
        destination.add(this.innerSubscription);
      }
    }
  }, {
    key: "_complete",
    value: function _complete() {
      var innerSubscription = this.innerSubscription;

      if (!innerSubscription || innerSubscription.closed) {
        (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(SwitchMapSubscriber.prototype), "_complete", this).call(this);
      }

      this.unsubscribe();
    }
  }, {
    key: "_unsubscribe",
    value: function _unsubscribe() {
      this.innerSubscription = null;
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete(innerSub) {
      var destination = this.destination;
      destination.remove(innerSub);
      this.innerSubscription = null;

      if (this.isStopped) {
        (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(SwitchMapSubscriber.prototype), "_complete", this).call(this);
      }
    }
  }, {
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.destination.next(innerValue);
    }
  }]);

  return SwitchMapSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_10__.OuterSubscriber);

/***/ }),

/***/ 53466:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/take.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "take": function() { return /* binding */ take; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ 84873);
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/empty */ 8117);







function take(count) {
  return function (source) {
    if (count === 0) {
      return (0,_observable_empty__WEBPACK_IMPORTED_MODULE_4__.empty)();
    } else {
      return source.lift(new TakeOperator(count));
    }
  };
}

var TakeOperator = /*#__PURE__*/function () {
  function TakeOperator(total) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeOperator);

    this.total = total;

    if (this.total < 0) {
      throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_5__.ArgumentOutOfRangeError();
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new TakeSubscriber(subscriber, this.total));
    }
  }]);

  return TakeOperator;
}();

var TakeSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(TakeSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(TakeSubscriber);

  function TakeSubscriber(destination, total) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeSubscriber);

    _this = _super.call(this, destination);
    _this.total = total;
    _this.count = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var total = this.total;
      var count = ++this.count;

      if (count <= total) {
        this.destination.next(value);

        if (count === total) {
          this.destination.complete();
          this.unsubscribe();
        }
      }
    }
  }]);

  return TakeSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_6__.Subscriber);

/***/ }),

/***/ 86828:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeLast.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeLast": function() { return /* binding */ takeLast; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ 84873);
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/empty */ 8117);







function takeLast(count) {
  return function takeLastOperatorFunction(source) {
    if (count === 0) {
      return (0,_observable_empty__WEBPACK_IMPORTED_MODULE_4__.empty)();
    } else {
      return source.lift(new TakeLastOperator(count));
    }
  };
}

var TakeLastOperator = /*#__PURE__*/function () {
  function TakeLastOperator(total) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeLastOperator);

    this.total = total;

    if (this.total < 0) {
      throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_5__.ArgumentOutOfRangeError();
    }
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeLastOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    }
  }]);

  return TakeLastOperator;
}();

var TakeLastSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(TakeLastSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(TakeLastSubscriber);

  function TakeLastSubscriber(destination, total) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeLastSubscriber);

    _this = _super.call(this, destination);
    _this.total = total;
    _this.ring = new Array();
    _this.count = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeLastSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var ring = this.ring;
      var total = this.total;
      var count = this.count++;

      if (ring.length < total) {
        ring.push(value);
      } else {
        var index = count % total;
        ring[index] = value;
      }
    }
  }, {
    key: "_complete",
    value: function _complete() {
      var destination = this.destination;
      var count = this.count;

      if (count > 0) {
        var total = this.count >= this.total ? this.total : this.count;
        var ring = this.ring;

        for (var i = 0; i < total; i++) {
          var idx = count++ % total;
          destination.next(ring[idx]);
        }
      }

      destination.complete();
    }
  }]);

  return TakeLastSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_6__.Subscriber);

/***/ }),

/***/ 22663:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeUntil": function() { return /* binding */ takeUntil; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OuterSubscriber */ 88237);
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ 26648);






function takeUntil(notifier) {
  return function (source) {
    return source.lift(new TakeUntilOperator(notifier));
  };
}

var TakeUntilOperator = /*#__PURE__*/function () {
  function TakeUntilOperator(notifier) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeUntilOperator);

    this.notifier = notifier;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeUntilOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
      var notifierSubscription = (0,_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__.subscribeToResult)(takeUntilSubscriber, this.notifier);

      if (notifierSubscription && !takeUntilSubscriber.seenValue) {
        takeUntilSubscriber.add(notifierSubscription);
        return source.subscribe(takeUntilSubscriber);
      }

      return takeUntilSubscriber;
    }
  }]);

  return TakeUntilOperator;
}();

var TakeUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(TakeUntilSubscriber, _OuterSubscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(TakeUntilSubscriber);

  function TakeUntilSubscriber(destination) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeUntilSubscriber);

    _this = _super.call(this, destination);
    _this.seenValue = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeUntilSubscriber, [{
    key: "notifyNext",
    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
      this.seenValue = true;
      this.complete();
    }
  }, {
    key: "notifyComplete",
    value: function notifyComplete() {}
  }]);

  return TakeUntilSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__.OuterSubscriber);

/***/ }),

/***/ 18511:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeWhile": function() { return /* binding */ takeWhile; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);





function takeWhile(predicate) {
  var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return function (source) {
    return source.lift(new TakeWhileOperator(predicate, inclusive));
  };
}

var TakeWhileOperator = /*#__PURE__*/function () {
  function TakeWhileOperator(predicate, inclusive) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeWhileOperator);

    this.predicate = predicate;
    this.inclusive = inclusive;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeWhileOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    }
  }]);

  return TakeWhileOperator;
}();

var TakeWhileSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(TakeWhileSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(TakeWhileSubscriber);

  function TakeWhileSubscriber(destination, predicate, inclusive) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TakeWhileSubscriber);

    _this = _super.call(this, destination);
    _this.predicate = predicate;
    _this.inclusive = inclusive;
    _this.index = 0;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TakeWhileSubscriber, [{
    key: "_next",
    value: function _next(value) {
      var destination = this.destination;
      var result;

      try {
        result = this.predicate(value, this.index++);
      } catch (err) {
        destination.error(err);
        return;
      }

      this.nextOrComplete(value, result);
    }
  }, {
    key: "nextOrComplete",
    value: function nextOrComplete(value, predicateResult) {
      var destination = this.destination;

      if (Boolean(predicateResult)) {
        destination.next(value);
      } else {
        if (this.inclusive) {
          destination.next(value);
        }

        destination.complete();
      }
    }
  }]);

  return TakeWhileSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

/***/ }),

/***/ 98636:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/tap.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tap": function() { return /* binding */ tap; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/noop */ 92941);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isFunction */ 80018);








function tap(nextOrObserver, error, complete) {
  return function tapOperatorFunction(source) {
    return source.lift(new DoOperator(nextOrObserver, error, complete));
  };
}

var DoOperator = /*#__PURE__*/function () {
  function DoOperator(nextOrObserver, error, complete) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, DoOperator);

    this.nextOrObserver = nextOrObserver;
    this.error = error;
    this.complete = complete;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(DoOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    }
  }]);

  return DoOperator;
}();

var TapSubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(TapSubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__.default)(TapSubscriber);

  function TapSubscriber(destination, observerOrNext, error, complete) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__.default)(this, TapSubscriber);

    _this = _super.call(this, destination);
    _this._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
    _this._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
    _this._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
    _this._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
    _this._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;

    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_6__.isFunction)(observerOrNext)) {
      _this._context = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__.default)(_this);
      _this._tapNext = observerOrNext;
    } else if (observerOrNext) {
      _this._context = observerOrNext;
      _this._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
      _this._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
      _this._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_5__.noop;
    }

    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__.default)(TapSubscriber, [{
    key: "_next",
    value: function _next(value) {
      try {
        this._tapNext.call(this._context, value);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      this.destination.next(value);
    }
  }, {
    key: "_error",
    value: function _error(err) {
      try {
        this._tapError.call(this._context, err);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      this.destination.error(err);
    }
  }, {
    key: "_complete",
    value: function _complete() {
      try {
        this._tapComplete.call(this._context);
      } catch (err) {
        this.destination.error(err);
        return;
      }

      return this.destination.complete();
    }
  }]);

  return TapSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_7__.Subscriber);

/***/ }),

/***/ 83240:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throwIfEmpty": function() { return /* binding */ throwIfEmpty; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ 25239);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscriber */ 71003);






function throwIfEmpty() {
  var errorFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultErrorFactory;
  return function (source) {
    return source.lift(new ThrowIfEmptyOperator(errorFactory));
  };
}

var ThrowIfEmptyOperator = /*#__PURE__*/function () {
  function ThrowIfEmptyOperator(errorFactory) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ThrowIfEmptyOperator);

    this.errorFactory = errorFactory;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ThrowIfEmptyOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
    }
  }]);

  return ThrowIfEmptyOperator;
}();

var ThrowIfEmptySubscriber = /*#__PURE__*/function (_Subscriber) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__.default)(ThrowIfEmptySubscriber, _Subscriber);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__.default)(ThrowIfEmptySubscriber);

  function ThrowIfEmptySubscriber(destination, errorFactory) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ThrowIfEmptySubscriber);

    _this = _super.call(this, destination);
    _this.errorFactory = errorFactory;
    _this.hasValue = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ThrowIfEmptySubscriber, [{
    key: "_next",
    value: function _next(value) {
      this.hasValue = true;
      this.destination.next(value);
    }
  }, {
    key: "_complete",
    value: function _complete() {
      if (!this.hasValue) {
        var err;

        try {
          err = this.errorFactory();
        } catch (e) {
          err = e;
        }

        this.destination.error(err);
      } else {
        return this.destination.complete();
      }
    }
  }]);

  return ThrowIfEmptySubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_4__.Subscriber);

function defaultErrorFactory() {
  return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError();
}

/***/ }),

/***/ 84049:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleArray": function() { return /* binding */ scheduleArray; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ 94283);


function scheduleArray(input, scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
    var i = 0;
    sub.add(scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
        return;
      }

      subscriber.next(input[i++]);

      if (!subscriber.closed) {
        sub.add(this.schedule());
      }
    }));
    return sub;
  });
}

/***/ }),

/***/ 60742:
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleIterable": function() { return /* binding */ scheduleIterable; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ 94283);
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/iterator */ 2611);



function scheduleIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }

  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
    var iterator;
    sub.add(function () {
      if (iterator && typeof iterator.return === 'function') {
        iterator.return();
      }
    });
    sub.add(scheduler.schedule(function () {
      iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__.iterator]();
      sub.add(scheduler.schedule(function () {
        if (subscriber.closed) {
          return;
        }

        var value;
        var done;

        try {
          var result = iterator.next();
          value = result.value;
          done = result.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }

        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
          this.schedule();
        }
      }));
    }));
    return sub;
  });
}

/***/ }),

/***/ 57808:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleObservable": function() { return /* binding */ scheduleObservable; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ 94283);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/observable */ 76165);



function scheduleObservable(input, scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
    sub.add(scheduler.schedule(function () {
      var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable]();
      sub.add(observable.subscribe({
        next: function next(value) {
          sub.add(scheduler.schedule(function () {
            return subscriber.next(value);
          }));
        },
        error: function error(err) {
          sub.add(scheduler.schedule(function () {
            return subscriber.error(err);
          }));
        },
        complete: function complete() {
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }
      }));
    }));
    return sub;
  });
}

/***/ }),

/***/ 70186:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "schedulePromise": function() { return /* binding */ schedulePromise; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ 94283);


function schedulePromise(input, scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(function (subscriber) {
    var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription();
    sub.add(scheduler.schedule(function () {
      return input.then(function (value) {
        sub.add(scheduler.schedule(function () {
          subscriber.next(value);
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }));
      }, function (err) {
        sub.add(scheduler.schedule(function () {
          return subscriber.error(err);
        }));
      });
    }));
    return sub;
  });
}

/***/ }),

/***/ 86184:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduled": function() { return /* binding */ scheduled; }
/* harmony export */ });
/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduleObservable */ 57808);
/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schedulePromise */ 70186);
/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scheduleArray */ 84049);
/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduleIterable */ 60742);
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isInteropObservable */ 98143);
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isPromise */ 95751);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isArrayLike */ 984);
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isIterable */ 82884);








function scheduled(input, scheduler) {
  if (input != null) {
    if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__.isInteropObservable)(input)) {
      return (0,_scheduleObservable__WEBPACK_IMPORTED_MODULE_1__.scheduleObservable)(input, scheduler);
    } else if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_2__.isPromise)(input)) {
      return (0,_schedulePromise__WEBPACK_IMPORTED_MODULE_3__.schedulePromise)(input, scheduler);
    } else if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_4__.isArrayLike)(input)) {
      return (0,_scheduleArray__WEBPACK_IMPORTED_MODULE_5__.scheduleArray)(input, scheduler);
    } else if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_6__.isIterable)(input) || typeof input === 'string') {
      return (0,_scheduleIterable__WEBPACK_IMPORTED_MODULE_7__.scheduleIterable)(input, scheduler);
    }
  }

  throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}

/***/ }),

/***/ 80473:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/Action.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Action": function() { return /* binding */ Action; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscription */ 94283);





var Action = /*#__PURE__*/function (_Subscription) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(Action, _Subscription);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(Action);

  function Action(scheduler, work) {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, Action);

    return _super.call(this);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(Action, [{
    key: "schedule",
    value: function schedule(state) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this;
    }
  }]);

  return Action;
}(_Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription);

/***/ }),

/***/ 9862:
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationFrameAction": function() { return /* binding */ AnimationFrameAction; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AsyncAction */ 23115);







var AnimationFrameAction = /*#__PURE__*/function (_AsyncAction) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(AnimationFrameAction, _AsyncAction);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(AnimationFrameAction);

  function AnimationFrameAction(scheduler, work) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AnimationFrameAction);

    _this = _super.call(this, scheduler, work);
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AnimationFrameAction, [{
    key: "requestAsyncId",
    value: function requestAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(AnimationFrameAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
      }

      scheduler.actions.push(this);
      return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
        return scheduler.flush(null);
      }));
    }
  }, {
    key: "recycleAsyncId",
    value: function recycleAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(AnimationFrameAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
      }

      if (scheduler.actions.length === 0) {
        cancelAnimationFrame(id);
        scheduler.scheduled = undefined;
      }

      return undefined;
    }
  }]);

  return AnimationFrameAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_6__.AsyncAction);

/***/ }),

/***/ 98028:
/*!**********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationFrameScheduler": function() { return /* binding */ AnimationFrameScheduler; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AsyncScheduler */ 16367);





var AnimationFrameScheduler = /*#__PURE__*/function (_AsyncScheduler) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(AnimationFrameScheduler, _AsyncScheduler);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(AnimationFrameScheduler);

  function AnimationFrameScheduler() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AnimationFrameScheduler);

    return _super.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AnimationFrameScheduler, [{
    key: "flush",
    value: function flush(action) {
      this.active = true;
      this.scheduled = undefined;
      var actions = this.actions;
      var error;
      var index = -1;
      var count = actions.length;
      action = action || actions.shift();

      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (++index < count && (action = actions.shift()));

      this.active = false;

      if (error) {
        while (++index < count && (action = actions.shift())) {
          action.unsubscribe();
        }

        throw error;
      }
    }
  }]);

  return AnimationFrameScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_4__.AsyncScheduler);

/***/ }),

/***/ 20959:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsapAction": function() { return /* binding */ AsapAction; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _util_Immediate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/Immediate */ 45429);
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AsyncAction */ 23115);








var AsapAction = /*#__PURE__*/function (_AsyncAction) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(AsapAction, _AsyncAction);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(AsapAction);

  function AsapAction(scheduler, work) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AsapAction);

    _this = _super.call(this, scheduler, work);
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AsapAction, [{
    key: "requestAsyncId",
    value: function requestAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(AsapAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
      }

      scheduler.actions.push(this);
      return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_6__.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    }
  }, {
    key: "recycleAsyncId",
    value: function recycleAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(AsapAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
      }

      if (scheduler.actions.length === 0) {
        _util_Immediate__WEBPACK_IMPORTED_MODULE_6__.Immediate.clearImmediate(id);
        scheduler.scheduled = undefined;
      }

      return undefined;
    }
  }]);

  return AsapAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_7__.AsyncAction);

/***/ }),

/***/ 6346:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsapScheduler": function() { return /* binding */ AsapScheduler; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AsyncScheduler */ 16367);





var AsapScheduler = /*#__PURE__*/function (_AsyncScheduler) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(AsapScheduler, _AsyncScheduler);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(AsapScheduler);

  function AsapScheduler() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AsapScheduler);

    return _super.apply(this, arguments);
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AsapScheduler, [{
    key: "flush",
    value: function flush(action) {
      this.active = true;
      this.scheduled = undefined;
      var actions = this.actions;
      var error;
      var index = -1;
      var count = actions.length;
      action = action || actions.shift();

      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (++index < count && (action = actions.shift()));

      this.active = false;

      if (error) {
        while (++index < count && (action = actions.shift())) {
          action.unsubscribe();
        }

        throw error;
      }
    }
  }]);

  return AsapScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_4__.AsyncScheduler);

/***/ }),

/***/ 23115:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncAction": function() { return /* binding */ AsyncAction; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Action */ 80473);





var AsyncAction = /*#__PURE__*/function (_Action) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(AsyncAction, _Action);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(AsyncAction);

  function AsyncAction(scheduler, work) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AsyncAction);

    _this = _super.call(this, scheduler, work);
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AsyncAction, [{
    key: "schedule",
    value: function schedule(state) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this.closed) {
        return this;
      }

      this.state = state;
      var id = this.id;
      var scheduler = this.scheduler;

      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, delay);
      }

      this.pending = true;
      this.delay = delay;
      this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
      return this;
    }
  }, {
    key: "requestAsyncId",
    value: function requestAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return setInterval(scheduler.flush.bind(scheduler, this), delay);
    }
  }, {
    key: "recycleAsyncId",
    value: function recycleAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && this.delay === delay && this.pending === false) {
        return id;
      }

      clearInterval(id);
      return undefined;
    }
  }, {
    key: "execute",
    value: function execute(state, delay) {
      if (this.closed) {
        return new Error('executing a cancelled action');
      }

      this.pending = false;

      var error = this._execute(state, delay);

      if (error) {
        return error;
      } else if (this.pending === false && this.id != null) {
        this.id = this.recycleAsyncId(this.scheduler, this.id, null);
      }
    }
  }, {
    key: "_execute",
    value: function _execute(state, delay) {
      var errored = false;
      var errorValue = undefined;

      try {
        this.work(state);
      } catch (e) {
        errored = true;
        errorValue = !!e && e || new Error(e);
      }

      if (errored) {
        this.unsubscribe();
        return errorValue;
      }
    }
  }, {
    key: "_unsubscribe",
    value: function _unsubscribe() {
      var id = this.id;
      var scheduler = this.scheduler;
      var actions = scheduler.actions;
      var index = actions.indexOf(this);
      this.work = null;
      this.state = null;
      this.pending = false;
      this.scheduler = null;

      if (index !== -1) {
        actions.splice(index, 1);
      }

      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }

      this.delay = null;
    }
  }]);

  return AsyncAction;
}(_Action__WEBPACK_IMPORTED_MODULE_4__.Action);

/***/ }),

/***/ 16367:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncScheduler": function() { return /* binding */ AsyncScheduler; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized */ 15816);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Scheduler */ 45979);








var AsyncScheduler = /*#__PURE__*/function (_Scheduler) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__.default)(AsyncScheduler, _Scheduler);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_6__.default)(AsyncScheduler);

  function AsyncScheduler(SchedulerAction) {
    var _this;

    var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Scheduler__WEBPACK_IMPORTED_MODULE_7__.Scheduler.now;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, AsyncScheduler);

    _this = _super.call(this, SchedulerAction, function () {
      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__.default)(_this)) {
        return AsyncScheduler.delegate.now();
      } else {
        return now();
      }
    });
    _this.actions = [];
    _this.active = false;
    _this.scheduled = undefined;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(AsyncScheduler, [{
    key: "schedule",
    value: function schedule(work) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var state = arguments.length > 2 ? arguments[2] : undefined;

      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
        return AsyncScheduler.delegate.schedule(work, delay, state);
      } else {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_3__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__.default)(AsyncScheduler.prototype), "schedule", this).call(this, work, delay, state);
      }
    }
  }, {
    key: "flush",
    value: function flush(action) {
      var actions = this.actions;

      if (this.active) {
        actions.push(action);
        return;
      }

      var error;
      this.active = true;

      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (action = actions.shift());

      this.active = false;

      if (error) {
        while (action = actions.shift()) {
          action.unsubscribe();
        }

        throw error;
      }
    }
  }]);

  return AsyncScheduler;
}(_Scheduler__WEBPACK_IMPORTED_MODULE_7__.Scheduler);

/***/ }),

/***/ 97004:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QueueAction": function() { return /* binding */ QueueAction; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 7329);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 39314);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 57269);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AsyncAction */ 23115);







var QueueAction = /*#__PURE__*/function (_AsyncAction) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__.default)(QueueAction, _AsyncAction);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_5__.default)(QueueAction);

  function QueueAction(scheduler, work) {
    var _this;

    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, QueueAction);

    _this = _super.call(this, scheduler, work);
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__.default)(QueueAction, [{
    key: "schedule",
    value: function schedule(state) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(QueueAction.prototype), "schedule", this).call(this, state, delay);
      }

      this.delay = delay;
      this.state = state;
      this.scheduler.flush(this);
      return this;
    }
  }, {
    key: "execute",
    value: function execute(state, delay) {
      return delay > 0 || this.closed ? (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(QueueAction.prototype), "execute", this).call(this, state, delay) : this._execute(state, delay);
    }
  }, {
    key: "requestAsyncId",
    value: function requestAsyncId(scheduler, id) {
      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
        return (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__.default)((0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__.default)(QueueAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
      }

      return scheduler.flush(this);
    }
  }]);

  return QueueAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_6__.AsyncAction);

/***/ }),

/***/ 66018:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QueueScheduler": function() { return /* binding */ QueueScheduler; }
/* harmony export */ });
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 52200);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 52238);
/* harmony import */ var _home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 83897);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AsyncScheduler */ 16367);




var QueueScheduler = /*#__PURE__*/function (_AsyncScheduler) {
  (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__.default)(QueueScheduler, _AsyncScheduler);

  var _super = (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__.default)(QueueScheduler);

  function QueueScheduler() {
    (0,_home_runner_work_dashboard_dashboard_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__.default)(this, QueueScheduler);

    return _super.apply(this, arguments);
  }

  return QueueScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_3__.AsyncScheduler);

/***/ }),

/***/ 90970:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "animationFrame": function() { return /* binding */ animationFrame; }
/* harmony export */ });
/* harmony import */ var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnimationFrameAction */ 9862);
/* harmony import */ var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimationFrameScheduler */ 98028);


var animationFrame = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__.AnimationFrameScheduler(_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__.AnimationFrameAction);

/***/ }),

/***/ 36317:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asap": function() { return /* binding */ asap; }
/* harmony export */ });
/* harmony import */ var _AsapAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsapAction */ 20959);
/* harmony import */ var _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsapScheduler */ 6346);


var asap = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__.AsapScheduler(_AsapAction__WEBPACK_IMPORTED_MODULE_1__.AsapAction);

/***/ }),

/***/ 32606:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "async": function() { return /* binding */ async; }
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ 23115);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ 16367);


var async = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);

/***/ }),

/***/ 75751:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/queue.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "queue": function() { return /* binding */ queue; }
/* harmony export */ });
/* harmony import */ var _QueueAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueueAction */ 97004);
/* harmony import */ var _QueueScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QueueScheduler */ 66018);


var queue = new _QueueScheduler__WEBPACK_IMPORTED_MODULE_0__.QueueScheduler(_QueueAction__WEBPACK_IMPORTED_MODULE_1__.QueueAction);

/***/ }),

/***/ 2611:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/iterator.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSymbolIterator": function() { return /* binding */ getSymbolIterator; },
/* harmony export */   "iterator": function() { return /* binding */ iterator; },
/* harmony export */   "$$iterator": function() { return /* binding */ $$iterator; }
/* harmony export */ });
function getSymbolIterator() {
  if (typeof Symbol !== 'function' || !Symbol.iterator) {
    return '@@iterator';
  }

  return Symbol.iterator;
}
var iterator = getSymbolIterator();
var $$iterator = iterator;

/***/ }),

/***/ 76165:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/observable.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observable": function() { return /* binding */ observable; }
/* harmony export */ });
var observable = function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();

/***/ }),

/***/ 69975:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rxSubscriber": function() { return /* binding */ rxSubscriber; },
/* harmony export */   "$$rxSubscriber": function() { return /* binding */ $$rxSubscriber; }
/* harmony export */ });
var rxSubscriber = function () {
  return typeof Symbol === 'function' ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
}();
var $$rxSubscriber = rxSubscriber;

/***/ }),

/***/ 84873:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgumentOutOfRangeError": function() { return /* binding */ ArgumentOutOfRangeError; }
/* harmony export */ });
var ArgumentOutOfRangeErrorImpl = function () {
  function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
  }

  ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
  return ArgumentOutOfRangeErrorImpl;
}();

var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

/***/ }),

/***/ 25239:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/EmptyError.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EmptyError": function() { return /* binding */ EmptyError; }
/* harmony export */ });
var EmptyErrorImpl = function () {
  function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
  }

  EmptyErrorImpl.prototype = Object.create(Error.prototype);
  return EmptyErrorImpl;
}();

var EmptyError = EmptyErrorImpl;

/***/ }),

/***/ 45429:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/Immediate.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Immediate": function() { return /* binding */ Immediate; },
/* harmony export */   "TestTools": function() { return /* binding */ TestTools; }
/* harmony export */ });
var nextHandle = 1;

var RESOLVED = function () {
  return Promise.resolve();
}();

var activeHandles = {};

function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }

  return false;
}

var Immediate = {
  setImmediate: function setImmediate(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    RESOLVED.then(function () {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};
var TestTools = {
  pending: function pending() {
    return Object.keys(activeHandles).length;
  }
};

/***/ }),

/***/ 96874:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectUnsubscribedError": function() { return /* binding */ ObjectUnsubscribedError; }
/* harmony export */ });
var ObjectUnsubscribedErrorImpl = function () {
  function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
  }

  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
  return ObjectUnsubscribedErrorImpl;
}();

var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

/***/ }),

/***/ 66742:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnsubscriptionError": function() { return /* binding */ UnsubscriptionError; }
/* harmony export */ });
var UnsubscriptionErrorImpl = function () {
  function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ? "".concat(errors.length, " errors occurred during unsubscription:\n").concat(errors.map(function (err, i) {
      return "".concat(i + 1, ") ").concat(err.toString());
    }).join('\n  ')) : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  }

  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
  return UnsubscriptionErrorImpl;
}();

var UnsubscriptionError = UnsubscriptionErrorImpl;

/***/ }),

/***/ 48428:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/canReportError.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "canReportError": function() { return /* binding */ canReportError; }
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ 71003);

function canReportError(observer) {
  while (observer) {
    var _observer = observer,
        closed = _observer.closed,
        destination = _observer.destination,
        isStopped = _observer.isStopped;

    if (closed || isStopped) {
      return false;
    } else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
      observer = destination;
    } else {
      observer = null;
    }
  }

  return true;
}

/***/ }),

/***/ 76901:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/hostReportError.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hostReportError": function() { return /* binding */ hostReportError; }
/* harmony export */ });
function hostReportError(err) {
  setTimeout(function () {
    throw err;
  }, 0);
}

/***/ }),

/***/ 87206:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/identity.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": function() { return /* binding */ identity; }
/* harmony export */ });
function identity(x) {
  return x;
}

/***/ }),

/***/ 49861:
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isArray.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArray": function() { return /* binding */ isArray; }
/* harmony export */ });
var isArray = function () {
  return Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
}();

/***/ }),

/***/ 984:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayLike": function() { return /* binding */ isArrayLike; }
/* harmony export */ });
var isArrayLike = function isArrayLike(x) {
  return x && typeof x.length === 'number' && typeof x !== 'function';
};

/***/ }),

/***/ 80018:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isFunction.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFunction": function() { return /* binding */ isFunction; }
/* harmony export */ });
function isFunction(x) {
  return typeof x === 'function';
}

/***/ }),

/***/ 98143:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInteropObservable": function() { return /* binding */ isInteropObservable; }
/* harmony export */ });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ 76165);

function isInteropObservable(input) {
  return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable] === 'function';
}

/***/ }),

/***/ 82884:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isIterable.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIterable": function() { return /* binding */ isIterable; }
/* harmony export */ });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ 2611);

function isIterable(input) {
  return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__.iterator] === 'function';
}

/***/ }),

/***/ 82867:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumeric": function() { return /* binding */ isNumeric; }
/* harmony export */ });
/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray */ 49861);

function isNumeric(val) {
  return !(0,_isArray__WEBPACK_IMPORTED_MODULE_0__.isArray)(val) && val - parseFloat(val) + 1 >= 0;
}

/***/ }),

/***/ 71533:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isObject.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": function() { return /* binding */ isObject; }
/* harmony export */ });
function isObject(x) {
  return x !== null && typeof x === 'object';
}

/***/ }),

/***/ 64674:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isObservable.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObservable": function() { return /* binding */ isObservable; }
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 25160);

function isObservable(obj) {
  return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable || typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
}

/***/ }),

/***/ 95751:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isPromise.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPromise": function() { return /* binding */ isPromise; }
/* harmony export */ });
function isPromise(value) {
  return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

/***/ }),

/***/ 86770:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isScheduler": function() { return /* binding */ isScheduler; }
/* harmony export */ });
function isScheduler(value) {
  return value && typeof value.schedule === 'function';
}

/***/ }),

/***/ 92941:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/noop.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "noop": function() { return /* binding */ noop; }
/* harmony export */ });
function noop() {}

/***/ }),

/***/ 89763:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/pipe.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pipe": function() { return /* binding */ pipe; },
/* harmony export */   "pipeFromArray": function() { return /* binding */ pipeFromArray; }
/* harmony export */ });
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ 87206);

function pipe() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;
  }

  if (fns.length === 1) {
    return fns[0];
  }

  return function piped(input) {
    return fns.reduce(function (prev, fn) {
      return fn(prev);
    }, input);
  };
}

/***/ }),

/***/ 12490:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeTo": function() { return /* binding */ subscribeTo; }
/* harmony export */ });
/* harmony import */ var _subscribeToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subscribeToArray */ 70076);
/* harmony import */ var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./subscribeToPromise */ 75151);
/* harmony import */ var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscribeToIterable */ 72428);
/* harmony import */ var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscribeToObservable */ 68004);
/* harmony import */ var _isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isArrayLike */ 984);
/* harmony import */ var _isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isPromise */ 95751);
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./isObject */ 71533);
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../symbol/iterator */ 2611);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ 76165);









var subscribeTo = function subscribeTo(result) {
  if (!!result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable] === 'function') {
    return (0,_subscribeToObservable__WEBPACK_IMPORTED_MODULE_1__.subscribeToObservable)(result);
  } else if ((0,_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(result)) {
    return (0,_subscribeToArray__WEBPACK_IMPORTED_MODULE_3__.subscribeToArray)(result);
  } else if ((0,_isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(result)) {
    return (0,_subscribeToPromise__WEBPACK_IMPORTED_MODULE_5__.subscribeToPromise)(result);
  } else if (!!result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__.iterator] === 'function') {
    return (0,_subscribeToIterable__WEBPACK_IMPORTED_MODULE_7__.subscribeToIterable)(result);
  } else {
    var value = (0,_isObject__WEBPACK_IMPORTED_MODULE_8__.isObject)(result) ? 'an invalid object' : "'".concat(result, "'");
    var msg = "You provided ".concat(value, " where a stream was expected.") + ' You can provide an Observable, Promise, Array, or Iterable.';
    throw new TypeError(msg);
  }
};

/***/ }),

/***/ 70076:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeToArray": function() { return /* binding */ subscribeToArray; }
/* harmony export */ });
var subscribeToArray = function subscribeToArray(array) {
  return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }

    subscriber.complete();
  };
};

/***/ }),

/***/ 72428:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeToIterable": function() { return /* binding */ subscribeToIterable; }
/* harmony export */ });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ 2611);

var subscribeToIterable = function subscribeToIterable(iterable) {
  return function (subscriber) {
    var iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__.iterator]();

    do {
      var item = iterator.next();

      if (item.done) {
        subscriber.complete();
        break;
      }

      subscriber.next(item.value);

      if (subscriber.closed) {
        break;
      }
    } while (true);

    if (typeof iterator.return === 'function') {
      subscriber.add(function () {
        if (iterator.return) {
          iterator.return();
        }
      });
    }

    return subscriber;
  };
};

/***/ }),

/***/ 68004:
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeToObservable": function() { return /* binding */ subscribeToObservable; }
/* harmony export */ });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ 76165);

var subscribeToObservable = function subscribeToObservable(obj) {
  return function (subscriber) {
    var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__.observable]();

    if (typeof obs.subscribe !== 'function') {
      throw new TypeError('Provided object does not correctly implement Symbol.observable');
    } else {
      return obs.subscribe(subscriber);
    }
  };
};

/***/ }),

/***/ 75151:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeToPromise": function() { return /* binding */ subscribeToPromise; }
/* harmony export */ });
/* harmony import */ var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hostReportError */ 76901);

var subscribeToPromise = function subscribeToPromise(promise) {
  return function (subscriber) {
    promise.then(function (value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function (err) {
      return subscriber.error(err);
    }).then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__.hostReportError);
    return subscriber;
  };
};

/***/ }),

/***/ 26648:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeToResult": function() { return /* binding */ subscribeToResult; }
/* harmony export */ });
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../InnerSubscriber */ 90898);
/* harmony import */ var _subscribeTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscribeTo */ 12490);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ 25160);



function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
  var innerSubscriber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__.InnerSubscriber(outerSubscriber, outerValue, outerIndex);

  if (innerSubscriber.closed) {
    return undefined;
  }

  if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable) {
    return result.subscribe(innerSubscriber);
  }

  return (0,_subscribeTo__WEBPACK_IMPORTED_MODULE_2__.subscribeTo)(result)(innerSubscriber);
}

/***/ }),

/***/ 94540:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toSubscriber": function() { return /* binding */ toSubscriber; }
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ 71003);
/* harmony import */ var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/rxSubscriber */ 69975);
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ 80269);



function toSubscriber(nextOrObserver, error, complete) {
  if (nextOrObserver) {
    if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
      return nextOrObserver;
    }

    if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]) {
      return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]();
    }
  }

  if (!nextOrObserver && !error && !complete) {
    return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(_Observer__WEBPACK_IMPORTED_MODULE_2__.empty);
  }

  return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(nextOrObserver, error, complete);
}

/***/ }),

/***/ 38957:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 37106);


/***/ }),

/***/ 3786:
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": function() { return /* binding */ __extends; },
/* harmony export */   "__assign": function() { return /* binding */ __assign; },
/* harmony export */   "__rest": function() { return /* binding */ __rest; },
/* harmony export */   "__decorate": function() { return /* binding */ __decorate; },
/* harmony export */   "__param": function() { return /* binding */ __param; },
/* harmony export */   "__metadata": function() { return /* binding */ __metadata; },
/* harmony export */   "__awaiter": function() { return /* binding */ __awaiter; },
/* harmony export */   "__generator": function() { return /* binding */ __generator; },
/* harmony export */   "__createBinding": function() { return /* binding */ __createBinding; },
/* harmony export */   "__exportStar": function() { return /* binding */ __exportStar; },
/* harmony export */   "__values": function() { return /* binding */ __values; },
/* harmony export */   "__read": function() { return /* binding */ __read; },
/* harmony export */   "__spread": function() { return /* binding */ __spread; },
/* harmony export */   "__spreadArrays": function() { return /* binding */ __spreadArrays; },
/* harmony export */   "__spreadArray": function() { return /* binding */ __spreadArray; },
/* harmony export */   "__await": function() { return /* binding */ __await; },
/* harmony export */   "__asyncGenerator": function() { return /* binding */ __asyncGenerator; },
/* harmony export */   "__asyncDelegator": function() { return /* binding */ __asyncDelegator; },
/* harmony export */   "__asyncValues": function() { return /* binding */ __asyncValues; },
/* harmony export */   "__makeTemplateObject": function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   "__importStar": function() { return /* binding */ __importStar; },
/* harmony export */   "__importDefault": function() { return /* binding */ __importDefault; },
/* harmony export */   "__classPrivateFieldGet": function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   "__classPrivateFieldSet": function() { return /* binding */ __classPrivateFieldSet; }
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ 37918:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_DataView.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ 56459);


/* Built-in method references that are verified to be native. */

var DataView = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(_root_js__WEBPACK_IMPORTED_MODULE_1__.default, 'DataView');
/* harmony default export */ __webpack_exports__["default"] = (DataView);

/***/ }),

/***/ 98344:
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_Hash.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hashClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hashClear.js */ 7519);
/* harmony import */ var _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_hashDelete.js */ 93882);
/* harmony import */ var _hashGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_hashGet.js */ 32205);
/* harmony import */ var _hashHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_hashHas.js */ 22794);
/* harmony import */ var _hashSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_hashSet.js */ 14022);





/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = _hashClear_js__WEBPACK_IMPORTED_MODULE_0__.default;
Hash.prototype['delete'] = _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__.default;
Hash.prototype.get = _hashGet_js__WEBPACK_IMPORTED_MODULE_2__.default;
Hash.prototype.has = _hashHas_js__WEBPACK_IMPORTED_MODULE_3__.default;
Hash.prototype.set = _hashSet_js__WEBPACK_IMPORTED_MODULE_4__.default;
/* harmony default export */ __webpack_exports__["default"] = (Hash);

/***/ }),

/***/ 97334:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_ListCache.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_listCacheClear.js */ 9309);
/* harmony import */ var _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_listCacheDelete.js */ 46443);
/* harmony import */ var _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_listCacheGet.js */ 87148);
/* harmony import */ var _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_listCacheHas.js */ 66452);
/* harmony import */ var _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_listCacheSet.js */ 40908);





/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__.default;
ListCache.prototype['delete'] = _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__.default;
ListCache.prototype.get = _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__.default;
ListCache.prototype.has = _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__.default;
ListCache.prototype.set = _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__.default;
/* harmony default export */ __webpack_exports__["default"] = (ListCache);

/***/ }),

/***/ 73731:
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Map.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ 56459);


/* Built-in method references that are verified to be native. */

var Map = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(_root_js__WEBPACK_IMPORTED_MODULE_1__.default, 'Map');
/* harmony default export */ __webpack_exports__["default"] = (Map);

/***/ }),

/***/ 49751:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_MapCache.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_mapCacheClear.js */ 9762);
/* harmony import */ var _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_mapCacheDelete.js */ 61374);
/* harmony import */ var _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_mapCacheGet.js */ 28455);
/* harmony import */ var _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapCacheHas.js */ 57737);
/* harmony import */ var _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_mapCacheSet.js */ 61098);





/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__.default;
MapCache.prototype['delete'] = _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__.default;
MapCache.prototype.get = _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__.default;
MapCache.prototype.has = _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__.default;
MapCache.prototype.set = _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__.default;
/* harmony default export */ __webpack_exports__["default"] = (MapCache);

/***/ }),

/***/ 67186:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_Promise.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ 56459);


/* Built-in method references that are verified to be native. */

var Promise = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(_root_js__WEBPACK_IMPORTED_MODULE_1__.default, 'Promise');
/* harmony default export */ __webpack_exports__["default"] = (Promise);

/***/ }),

/***/ 50663:
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Set.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ 56459);


/* Built-in method references that are verified to be native. */

var Set = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(_root_js__WEBPACK_IMPORTED_MODULE_1__.default, 'Set');
/* harmony default export */ __webpack_exports__["default"] = (Set);

/***/ }),

/***/ 14069:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_SetCache.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_MapCache.js */ 49751);
/* harmony import */ var _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setCacheAdd.js */ 14522);
/* harmony import */ var _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setCacheHas.js */ 31400);



/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;
  this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_0__.default();

  while (++index < length) {
    this.add(values[index]);
  }
} // Add methods to `SetCache`.


SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd_js__WEBPACK_IMPORTED_MODULE_1__.default;
SetCache.prototype.has = _setCacheHas_js__WEBPACK_IMPORTED_MODULE_2__.default;
/* harmony default export */ __webpack_exports__["default"] = (SetCache);

/***/ }),

/***/ 31330:
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_Stack.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ 97334);
/* harmony import */ var _stackClear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_stackClear.js */ 65912);
/* harmony import */ var _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_stackDelete.js */ 46133);
/* harmony import */ var _stackGet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_stackGet.js */ 25964);
/* harmony import */ var _stackHas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_stackHas.js */ 8251);
/* harmony import */ var _stackSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_stackSet.js */ 68704);






/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Stack(entries) {
  var data = this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__.default(entries);
  this.size = data.size;
} // Add methods to `Stack`.


Stack.prototype.clear = _stackClear_js__WEBPACK_IMPORTED_MODULE_1__.default;
Stack.prototype['delete'] = _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__.default;
Stack.prototype.get = _stackGet_js__WEBPACK_IMPORTED_MODULE_3__.default;
Stack.prototype.has = _stackHas_js__WEBPACK_IMPORTED_MODULE_4__.default;
Stack.prototype.set = _stackSet_js__WEBPACK_IMPORTED_MODULE_5__.default;
/* harmony default export */ __webpack_exports__["default"] = (Stack);

/***/ }),

/***/ 46844:
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_Symbol.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ 56459);

/** Built-in value references. */

var Symbol = _root_js__WEBPACK_IMPORTED_MODULE_0__.default.Symbol;
/* harmony default export */ __webpack_exports__["default"] = (Symbol);

/***/ }),

/***/ 91837:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_Uint8Array.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ 56459);

/** Built-in value references. */

var Uint8Array = _root_js__WEBPACK_IMPORTED_MODULE_0__.default.Uint8Array;
/* harmony default export */ __webpack_exports__["default"] = (Uint8Array);

/***/ }),

/***/ 89201:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_WeakMap.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ 56459);


/* Built-in method references that are verified to be native. */

var WeakMap = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(_root_js__WEBPACK_IMPORTED_MODULE_1__.default, 'WeakMap');
/* harmony default export */ __webpack_exports__["default"] = (WeakMap);

/***/ }),

/***/ 29865:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_arrayFilter.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (arrayFilter);

/***/ }),

/***/ 49457:
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_arrayLikeKeys.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseTimes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseTimes.js */ 59752);
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArguments.js */ 13312);
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ 18487);
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ 20342);
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_isIndex.js */ 70298);
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ 87195);






/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(value),
      isArg = !isArr && (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_1__.default)(value),
      isBuff = !isArr && !isArg && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__.default)(value),
      isType = !isArr && !isArg && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__.default)(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? (0,_baseTimes_js__WEBPACK_IMPORTED_MODULE_4__.default)(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_5__.default)(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (arrayLikeKeys);

/***/ }),

/***/ 43565:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_arrayPush.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }

  return array;
}

/* harmony default export */ __webpack_exports__["default"] = (arrayPush);

/***/ }),

/***/ 74445:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_arraySome.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (arraySome);

/***/ }),

/***/ 78673:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_assocIndexOf.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ 5595);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if ((0,_eq_js__WEBPACK_IMPORTED_MODULE_0__.default)(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

/* harmony default export */ __webpack_exports__["default"] = (assocIndexOf);

/***/ }),

/***/ 64571:
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_baseGetAllKeys.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _arrayPush_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayPush.js */ 43565);
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ 18487);


/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(object) ? result : (0,_arrayPush_js__WEBPACK_IMPORTED_MODULE_1__.default)(result, symbolsFunc(object));
}

/* harmony default export */ __webpack_exports__["default"] = (baseGetAllKeys);

/***/ }),

/***/ 34114:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseGetTag.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ 46844);
/* harmony import */ var _getRawTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getRawTag.js */ 4657);
/* harmony import */ var _objectToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_objectToString.js */ 64902);



/** `Object#toString` result references. */

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? (0,_getRawTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) : (0,_objectToString_js__WEBPACK_IMPORTED_MODULE_2__.default)(value);
}

/* harmony default export */ __webpack_exports__["default"] = (baseGetTag);

/***/ }),

/***/ 46122:
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsArguments.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ 34114);
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ 7178);


/** `Object#toString` result references. */

var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) == argsTag;
}

/* harmony default export */ __webpack_exports__["default"] = (baseIsArguments);

/***/ }),

/***/ 75538:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsEqual.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsEqualDeep.js */ 98095);
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ 7178);


/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(value) && !(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(other)) {
    return value !== value && other !== other;
  }

  return (0,_baseIsEqualDeep_js__WEBPACK_IMPORTED_MODULE_1__.default)(value, other, bitmask, customizer, baseIsEqual, stack);
}

/* harmony default export */ __webpack_exports__["default"] = (baseIsEqual);

/***/ }),

/***/ 98095:
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsEqualDeep.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Stack.js */ 31330);
/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ 54785);
/* harmony import */ var _equalByTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_equalByTag.js */ 48441);
/* harmony import */ var _equalObjects_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_equalObjects.js */ 57926);
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getTag.js */ 67267);
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ 18487);
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ 20342);
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTypedArray.js */ 87195);








/** Used to compose bitmasks for value comparisons. */

var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(object),
      othIsArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(other),
      objTag = objIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(object),
      othTag = othIsArr ? arrayTag : (0,_getTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__.default)(object)) {
    if (!(0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__.default)(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__.default());
    return objIsArr || (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__.default)(object) ? (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__.default)(object, other, bitmask, customizer, equalFunc, stack) : (0,_equalByTag_js__WEBPACK_IMPORTED_MODULE_6__.default)(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__.default());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__.default());
  return (0,_equalObjects_js__WEBPACK_IMPORTED_MODULE_7__.default)(object, other, bitmask, customizer, equalFunc, stack);
}

/* harmony default export */ __webpack_exports__["default"] = (baseIsEqualDeep);

/***/ }),

/***/ 32773:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsNative.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isFunction.js */ 90793);
/* harmony import */ var _isMasked_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isMasked.js */ 12982);
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ 40625);
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_toSource.js */ 93614);




/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__.default)(value) || (0,_isMasked_js__WEBPACK_IMPORTED_MODULE_1__.default)(value)) {
    return false;
  }

  var pattern = (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_2__.default)(value) ? reIsNative : reIsHostCtor;
  return pattern.test((0,_toSource_js__WEBPACK_IMPORTED_MODULE_3__.default)(value));
}

/* harmony default export */ __webpack_exports__["default"] = (baseIsNative);

/***/ }),

/***/ 74530:
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsTypedArray.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGetTag.js */ 34114);
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isLength.js */ 58658);
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ 7178);



/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(value) && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_1__.default)(value.length) && !!typedArrayTags[(0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__.default)(value)];
}

/* harmony default export */ __webpack_exports__["default"] = (baseIsTypedArray);

/***/ }),

/***/ 73326:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeys.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ 99756);
/* harmony import */ var _nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeys.js */ 33790);


/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__.default)(object)) {
    return (0,_nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__.default)(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (baseKeys);

/***/ }),

/***/ 59752:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseTimes.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (baseTimes);

/***/ }),

/***/ 5178:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseTrim.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_trimmedEndIndex.js */ 33240);

/** Used to match leading whitespace. */

var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */

function baseTrim(string) {
  return string ? string.slice(0, (0,_trimmedEndIndex_js__WEBPACK_IMPORTED_MODULE_0__.default)(string) + 1).replace(reTrimStart, '') : string;
}

/* harmony default export */ __webpack_exports__["default"] = (baseTrim);

/***/ }),

/***/ 76187:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseUnary.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

/* harmony default export */ __webpack_exports__["default"] = (baseUnary);

/***/ }),

/***/ 84253:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_cacheHas.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/* harmony default export */ __webpack_exports__["default"] = (cacheHas);

/***/ }),

/***/ 32753:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_coreJsData.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ 56459);

/** Used to detect overreaching core-js shims. */

var coreJsData = _root_js__WEBPACK_IMPORTED_MODULE_0__.default["__core-js_shared__"];
/* harmony default export */ __webpack_exports__["default"] = (coreJsData);

/***/ }),

/***/ 54785:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_equalArrays.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _SetCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SetCache.js */ 14069);
/* harmony import */ var _arraySome_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arraySome.js */ 74445);
/* harmony import */ var _cacheHas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_cacheHas.js */ 84253);



/** Used to compose bitmasks for value comparisons. */

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  } // Check that cyclic values are equal.


  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);

  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new _SetCache_js__WEBPACK_IMPORTED_MODULE_0__.default() : undefined;
  stack.set(array, other);
  stack.set(other, array); // Ignore non-index properties.

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    } // Recursively compare arrays (susceptible to call stack limits).


    if (seen) {
      if (!(0,_arraySome_js__WEBPACK_IMPORTED_MODULE_1__.default)(other, function (othValue, othIndex) {
        if (!(0,_cacheHas_js__WEBPACK_IMPORTED_MODULE_2__.default)(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (equalArrays);

/***/ }),

/***/ 48441:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_equalByTag.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ 46844);
/* harmony import */ var _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Uint8Array.js */ 91837);
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eq.js */ 5595);
/* harmony import */ var _equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_equalArrays.js */ 54785);
/* harmony import */ var _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapToArray.js */ 64691);
/* harmony import */ var _setToArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_setToArray.js */ 76771);






/** Used to compose bitmasks for value comparisons. */

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }

      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__.default(object), new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_1__.default(other))) {
        return false;
      }

      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return (0,_eq_js__WEBPACK_IMPORTED_MODULE_2__.default)(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = _mapToArray_js__WEBPACK_IMPORTED_MODULE_3__.default;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = _setToArray_js__WEBPACK_IMPORTED_MODULE_4__.default);

      if (object.size != other.size && !isPartial) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked) {
        return stacked == other;
      }

      bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

      stack.set(object, other);
      var result = (0,_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__.default)(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }

  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (equalByTag);

/***/ }),

/***/ 57926:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_equalObjects.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getAllKeys.js */ 66212);

/** Used to compose bitmasks for value comparisons. */

var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__.default)(object),
      objLength = objProps.length,
      othProps = (0,_getAllKeys_js__WEBPACK_IMPORTED_MODULE_0__.default)(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Check that cyclic values are equal.


  var objStacked = stack.get(object);
  var othStacked = stack.get(other);

  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (equalObjects);

/***/ }),

/***/ 72672:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_freeGlobal.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/* harmony default export */ __webpack_exports__["default"] = (freeGlobal);

/***/ }),

/***/ 66212:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getAllKeys.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseGetAllKeys.js */ 64571);
/* harmony import */ var _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getSymbols.js */ 6550);
/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ 36819);



/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

function getAllKeys(object) {
  return (0,_baseGetAllKeys_js__WEBPACK_IMPORTED_MODULE_0__.default)(object, _keys_js__WEBPACK_IMPORTED_MODULE_1__.default, _getSymbols_js__WEBPACK_IMPORTED_MODULE_2__.default);
}

/* harmony default export */ __webpack_exports__["default"] = (getAllKeys);

/***/ }),

/***/ 29821:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getMapData.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isKeyable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKeyable.js */ 95192);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

function getMapData(map, key) {
  var data = map.__data__;
  return (0,_isKeyable_js__WEBPACK_IMPORTED_MODULE_0__.default)(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

/* harmony default export */ __webpack_exports__["default"] = (getMapData);

/***/ }),

/***/ 31436:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getNative.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsNative.js */ 32773);
/* harmony import */ var _getValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getValue.js */ 7307);


/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

function getNative(object, key) {
  var value = (0,_getValue_js__WEBPACK_IMPORTED_MODULE_0__.default)(object, key);
  return (0,_baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) ? value : undefined;
}

/* harmony default export */ __webpack_exports__["default"] = (getNative);

/***/ }),

/***/ 4657:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getRawTag.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ 46844);

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (getRawTag);

/***/ }),

/***/ 6550:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getSymbols.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayFilter.js */ 29865);
/* harmony import */ var _stubArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stubArray.js */ 98914);


/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbols = !nativeGetSymbols ? _stubArray_js__WEBPACK_IMPORTED_MODULE_0__.default : function (object) {
  if (object == null) {
    return [];
  }

  object = Object(object);
  return (0,_arrayFilter_js__WEBPACK_IMPORTED_MODULE_1__.default)(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
/* harmony default export */ __webpack_exports__["default"] = (getSymbols);

/***/ }),

/***/ 67267:
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_getTag.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _DataView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_DataView.js */ 37918);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_Map.js */ 73731);
/* harmony import */ var _Promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Promise.js */ 67186);
/* harmony import */ var _Set_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_Set.js */ 50663);
/* harmony import */ var _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_WeakMap.js */ 89201);
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseGetTag.js */ 34114);
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_toSource.js */ 93614);







/** `Object#toString` result references. */

var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(_DataView_js__WEBPACK_IMPORTED_MODULE_1__.default),
    mapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(_Map_js__WEBPACK_IMPORTED_MODULE_2__.default),
    promiseCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(_Promise_js__WEBPACK_IMPORTED_MODULE_3__.default),
    setCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(_Set_js__WEBPACK_IMPORTED_MODULE_4__.default),
    weakMapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__.default);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

var getTag = _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__.default; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

if (_DataView_js__WEBPACK_IMPORTED_MODULE_1__.default && getTag(new _DataView_js__WEBPACK_IMPORTED_MODULE_1__.default(new ArrayBuffer(1))) != dataViewTag || _Map_js__WEBPACK_IMPORTED_MODULE_2__.default && getTag(new _Map_js__WEBPACK_IMPORTED_MODULE_2__.default()) != mapTag || _Promise_js__WEBPACK_IMPORTED_MODULE_3__.default && getTag(_Promise_js__WEBPACK_IMPORTED_MODULE_3__.default.resolve()) != promiseTag || _Set_js__WEBPACK_IMPORTED_MODULE_4__.default && getTag(new _Set_js__WEBPACK_IMPORTED_MODULE_4__.default()) != setTag || _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__.default && getTag(new _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__.default()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__.default)(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__.default)(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (getTag);

/***/ }),

/***/ 7307:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_getValue.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/* harmony default export */ __webpack_exports__["default"] = (getValue);

/***/ }),

/***/ 7519:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_hashClear.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ 91298);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

function hashClear() {
  this.__data__ = _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__.default ? (0,_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__.default)(null) : {};
  this.size = 0;
}

/* harmony default export */ __webpack_exports__["default"] = (hashClear);

/***/ }),

/***/ 93882:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_hashDelete.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (hashDelete);

/***/ }),

/***/ 32205:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashGet.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ 91298);

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__.default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/* harmony default export */ __webpack_exports__["default"] = (hashGet);

/***/ }),

/***/ 22794:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashHas.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ 91298);

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__.default ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/* harmony default export */ __webpack_exports__["default"] = (hashHas);

/***/ }),

/***/ 14022:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashSet.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ 91298);

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__.default && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

/* harmony default export */ __webpack_exports__["default"] = (hashSet);

/***/ }),

/***/ 70298:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_isIndex.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

/* harmony default export */ __webpack_exports__["default"] = (isIndex);

/***/ }),

/***/ 95192:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_isKeyable.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

/* harmony default export */ __webpack_exports__["default"] = (isKeyable);

/***/ }),

/***/ 12982:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_isMasked.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_coreJsData.js */ 32753);

/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(_coreJsData_js__WEBPACK_IMPORTED_MODULE_0__.default && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__.default.keys && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__.default.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

/* harmony default export */ __webpack_exports__["default"] = (isMasked);

/***/ }),

/***/ 99756:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_isPrototype.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}

/* harmony default export */ __webpack_exports__["default"] = (isPrototype);

/***/ }),

/***/ 9309:
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheClear.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/* harmony default export */ __webpack_exports__["default"] = (listCacheClear);

/***/ }),

/***/ 46443:
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheDelete.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ 78673);

/** Used for built-in method references. */

var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

/* harmony default export */ __webpack_exports__["default"] = (listCacheDelete);

/***/ }),

/***/ 87148:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheGet.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ 78673);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function listCacheGet(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(data, key);
  return index < 0 ? undefined : data[index][1];
}

/* harmony default export */ __webpack_exports__["default"] = (listCacheGet);

/***/ }),

/***/ 66452:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheHas.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ 78673);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function listCacheHas(key) {
  return (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(this.__data__, key) > -1;
}

/* harmony default export */ __webpack_exports__["default"] = (listCacheHas);

/***/ }),

/***/ 40908:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheSet.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ 78673);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

function listCacheSet(key, value) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

/* harmony default export */ __webpack_exports__["default"] = (listCacheSet);

/***/ }),

/***/ 9762:
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheClear.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Hash.js */ 98344);
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_ListCache.js */ 97334);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ 73731);



/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__.default(),
    'map': new (_Map_js__WEBPACK_IMPORTED_MODULE_1__.default || _ListCache_js__WEBPACK_IMPORTED_MODULE_2__.default)(),
    'string': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__.default()
  };
}

/* harmony default export */ __webpack_exports__["default"] = (mapCacheClear);

/***/ }),

/***/ 61374:
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheDelete.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ 29821);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function mapCacheDelete(key) {
  var result = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__.default)(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (mapCacheDelete);

/***/ }),

/***/ 28455:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheGet.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ 29821);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function mapCacheGet(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__.default)(this, key).get(key);
}

/* harmony default export */ __webpack_exports__["default"] = (mapCacheGet);

/***/ }),

/***/ 57737:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheHas.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ 29821);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function mapCacheHas(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__.default)(this, key).has(key);
}

/* harmony default export */ __webpack_exports__["default"] = (mapCacheHas);

/***/ }),

/***/ 61098:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheSet.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ 29821);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

function mapCacheSet(key, value) {
  var data = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__.default)(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/* harmony default export */ __webpack_exports__["default"] = (mapCacheSet);

/***/ }),

/***/ 64691:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_mapToArray.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (mapToArray);

/***/ }),

/***/ 91298:
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeCreate.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ 31436);

/* Built-in method references that are verified to be native. */

var nativeCreate = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__.default)(Object, 'create');
/* harmony default export */ __webpack_exports__["default"] = (nativeCreate);

/***/ }),

/***/ 33790:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeys.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ 18627);

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeKeys = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__.default)(Object.keys, Object);
/* harmony default export */ __webpack_exports__["default"] = (nativeKeys);

/***/ }),

/***/ 57665:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_nodeUtil.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ 72672);

/** Detect free variable `exports`. */

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__.default.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

/* harmony default export */ __webpack_exports__["default"] = (nodeUtil);

/***/ }),

/***/ 64902:
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_objectToString.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

/* harmony default export */ __webpack_exports__["default"] = (objectToString);

/***/ }),

/***/ 18627:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_overArg.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ __webpack_exports__["default"] = (overArg);

/***/ }),

/***/ 56459:
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_root.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ 72672);

/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__.default || freeSelf || Function('return this')();
/* harmony default export */ __webpack_exports__["default"] = (root);

/***/ }),

/***/ 14522:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setCacheAdd.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);

  return this;
}

/* harmony default export */ __webpack_exports__["default"] = (setCacheAdd);

/***/ }),

/***/ 31400:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setCacheHas.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/* harmony default export */ __webpack_exports__["default"] = (setCacheHas);

/***/ }),

/***/ 76771:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_setToArray.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (setToArray);

/***/ }),

/***/ 65912:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_stackClear.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ 97334);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

function stackClear() {
  this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__.default();
  this.size = 0;
}

/* harmony default export */ __webpack_exports__["default"] = (stackClear);

/***/ }),

/***/ 46133:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_stackDelete.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (stackDelete);

/***/ }),

/***/ 25964:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackGet.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/* harmony default export */ __webpack_exports__["default"] = (stackGet);

/***/ }),

/***/ 8251:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackHas.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/* harmony default export */ __webpack_exports__["default"] = (stackHas);

/***/ }),

/***/ 68704:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackSet.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ 97334);
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ 73731);
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_MapCache.js */ 49751);



/** Used as the size to enable large array optimizations. */

var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof _ListCache_js__WEBPACK_IMPORTED_MODULE_0__.default) {
    var pairs = data.__data__;

    if (!_Map_js__WEBPACK_IMPORTED_MODULE_1__.default || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_2__.default(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
}

/* harmony default export */ __webpack_exports__["default"] = (stackSet);

/***/ }),

/***/ 93614:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_toSource.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

/* harmony default export */ __webpack_exports__["default"] = (toSource);

/***/ }),

/***/ 33240:
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_trimmedEndIndex.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used to match a single whitespace character. */
var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */

function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}

  return index;
}

/* harmony default export */ __webpack_exports__["default"] = (trimmedEndIndex);

/***/ }),

/***/ 33263:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/debounce.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ 40625);
/* harmony import */ var _now_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./now.js */ 89836);
/* harmony import */ var _toNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toNumber.js */ 92046);



/** Error message constants. */

var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max,
    nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = (0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__.default)(wait) || 0;

  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__.default)(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax((0,_toNumber_js__WEBPACK_IMPORTED_MODULE_0__.default)(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__.default)();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (trailing && lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge((0,_now_js__WEBPACK_IMPORTED_MODULE_2__.default)());
  }

  function debounced() {
    var time = (0,_now_js__WEBPACK_IMPORTED_MODULE_2__.default)(),
        isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/* harmony default export */ __webpack_exports__["default"] = (debounce);

/***/ }),

/***/ 5595:
/*!**************************************!*\
  !*** ./node_modules/lodash-es/eq.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

/* harmony default export */ __webpack_exports__["default"] = (eq);

/***/ }),

/***/ 13312:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArguments.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsArguments.js */ 46122);
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObjectLike.js */ 7178);


/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = (0,_baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__.default)(function () {
  return arguments;
}()) ? _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__.default : function (value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
/* harmony default export */ __webpack_exports__["default"] = (isArguments);

/***/ }),

/***/ 18487:
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isArray.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
/* harmony default export */ __webpack_exports__["default"] = (isArray);

/***/ }),

/***/ 38746:
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArrayLike.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction.js */ 90793);
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isLength.js */ 58658);


/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_0__.default)(value.length) && !(0,_isFunction_js__WEBPACK_IMPORTED_MODULE_1__.default)(value);
}

/* harmony default export */ __webpack_exports__["default"] = (isArrayLike);

/***/ }),

/***/ 20342:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isBuffer.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ 56459);
/* harmony import */ var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stubFalse.js */ 90505);


/** Detect free variable `exports`. */

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__.default.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__.default;
/* harmony default export */ __webpack_exports__["default"] = (isBuffer);

/***/ }),

/***/ 11434:
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isEqual.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsEqual.js */ 75538);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */

function isEqual(value, other) {
  return (0,_baseIsEqual_js__WEBPACK_IMPORTED_MODULE_0__.default)(value, other);
}

/* harmony default export */ __webpack_exports__["default"] = (isEqual);

/***/ }),

/***/ 90793:
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/isFunction.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ 34114);
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ 40625);


/** `Object#toString` result references. */

var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__.default)(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/* harmony default export */ __webpack_exports__["default"] = (isFunction);

/***/ }),

/***/ 58658:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isLength.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/* harmony default export */ __webpack_exports__["default"] = (isLength);

/***/ }),

/***/ 40625:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isObject.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/* harmony default export */ __webpack_exports__["default"] = (isObject);

/***/ }),

/***/ 7178:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isObjectLike.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ __webpack_exports__["default"] = (isObjectLike);

/***/ }),

/***/ 57929:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isSymbol.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ 34114);
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ 7178);


/** `Object#toString` result references. */

var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) == symbolTag;
}

/* harmony default export */ __webpack_exports__["default"] = (isSymbol);

/***/ }),

/***/ 87195:
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isTypedArray.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsTypedArray.js */ 74530);
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ 76187);
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ 57665);



/* Node.js helper references. */

var nodeIsTypedArray = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__.default && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__.default.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__.default)(nodeIsTypedArray) : _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__.default;
/* harmony default export */ __webpack_exports__["default"] = (isTypedArray);

/***/ }),

/***/ 36819:
/*!****************************************!*\
  !*** ./node_modules/lodash-es/keys.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayLikeKeys.js */ 49457);
/* harmony import */ var _baseKeys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseKeys.js */ 73326);
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ 38746);



/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

function keys(object) {
  return (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__.default)(object) ? (0,_arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__.default)(object) : (0,_baseKeys_js__WEBPACK_IMPORTED_MODULE_2__.default)(object);
}

/* harmony default export */ __webpack_exports__["default"] = (keys);

/***/ }),

/***/ 89836:
/*!***************************************!*\
  !*** ./node_modules/lodash-es/now.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ 56459);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

var now = function now() {
  return _root_js__WEBPACK_IMPORTED_MODULE_0__.default.Date.now();
};

/* harmony default export */ __webpack_exports__["default"] = (now);

/***/ }),

/***/ 98914:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubArray.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/* harmony default export */ __webpack_exports__["default"] = (stubArray);

/***/ }),

/***/ 90505:
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubFalse.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (stubFalse);

/***/ }),

/***/ 92046:
/*!********************************************!*\
  !*** ./node_modules/lodash-es/toNumber.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _baseTrim_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseTrim.js */ 5178);
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject.js */ 40625);
/* harmony import */ var _isSymbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSymbol.js */ 57929);



/** Used as references for various `Number` constants. */

var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if ((0,_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__.default)(value)) {
    return NAN;
  }

  if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__.default)(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = (0,_isObject_js__WEBPACK_IMPORTED_MODULE_1__.default)(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = (0,_baseTrim_js__WEBPACK_IMPORTED_MODULE_2__.default)(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

/* harmony default export */ __webpack_exports__["default"] = (toNumber);

/***/ }),

/***/ 12981:
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _arrayLikeToArray; }
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ 91425:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _arrayWithHoles; }
/* harmony export */ });
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),

/***/ 45797:
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _arrayWithoutHoles; }
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ 12981);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr);
}

/***/ }),

/***/ 15816:
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _assertThisInitialized; }
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ 52200:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _classCallCheck; }
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ 31921:
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/construct.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _construct; }
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ 78159);
/* harmony import */ var _isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isNativeReflectConstruct.js */ 1095);


function _construct(Parent, args, Class) {
  if ((0,_isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__.default)()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

/***/ }),

/***/ 7329:
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _createClass; }
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ 28557:
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _createForOfIteratorHelper; }
/* harmony export */ });
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 48893);

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

/***/ }),

/***/ 83897:
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createSuper.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _createSuper; }
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ 57269);
/* harmony import */ var _isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isNativeReflectConstruct.js */ 1095);
/* harmony import */ var _possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./possibleConstructorReturn.js */ 58633);



function _createSuper(Derived) {
  var hasNativeReflectConstruct = (0,_isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__.default)();
  return function _createSuperInternal() {
    var Super = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0,_possibleConstructorReturn_js__WEBPACK_IMPORTED_MODULE_2__.default)(this, result);
  };
}

/***/ }),

/***/ 61861:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _defineProperty; }
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ 39314:
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/get.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _get; }
/* harmony export */ });
/* harmony import */ var _superPropBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./superPropBase.js */ 94211);

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = (0,_superPropBase_js__WEBPACK_IMPORTED_MODULE_0__.default)(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

/***/ }),

/***/ 57269:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _getPrototypeOf; }
/* harmony export */ });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ 52238:
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _inherits; }
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ 78159);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(subClass, superClass);
}

/***/ }),

/***/ 37114:
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _isNativeFunction; }
/* harmony export */ });
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

/***/ }),

/***/ 1095:
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _isNativeReflectConstruct; }
/* harmony export */ });
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

/***/ }),

/***/ 53553:
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _iterableToArray; }
/* harmony export */ });
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

/***/ }),

/***/ 36388:
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _iterableToArrayLimit; }
/* harmony export */ });
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),

/***/ 45374:
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _nonIterableRest; }
/* harmony export */ });
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ 5027:
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _nonIterableSpread; }
/* harmony export */ });
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ 58633:
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _possibleConstructorReturn; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ 62569);
/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ 15816);


function _possibleConstructorReturn(self, call) {
  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(call) === "object" || typeof call === "function")) {
    return call;
  }

  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__.default)(self);
}

/***/ }),

/***/ 78159:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _setPrototypeOf; }
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ 64790:
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _slicedToArray; }
/* harmony export */ });
/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ 91425);
/* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ 36388);
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 48893);
/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ 45374);




function _slicedToArray(arr, i) {
  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr, i) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr, i) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ 94211:
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/superPropBase.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _superPropBase; }
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ 57269);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(object);
    if (object === null) break;
  }

  return object;
}

/***/ }),

/***/ 87665:
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toArray.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _toArray; }
/* harmony export */ });
/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ 91425);
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ 53553);
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 48893);
/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ 45374);




function _toArray(arr) {
  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ 90287:
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _toConsumableArray; }
/* harmony export */ });
/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ 45797);
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ 53553);
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 48893);
/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ 5027);




function _toConsumableArray(arr) {
  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__.default)(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__.default)(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ 62569:
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _typeof; }
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ }),

/***/ 48893:
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _unsupportedIterableToArray; }
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ 12981);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
}

/***/ }),

/***/ 74917:
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _wrapNativeSuper; }
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ 57269);
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setPrototypeOf.js */ 78159);
/* harmony import */ var _isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isNativeFunction.js */ 37114);
/* harmony import */ var _construct_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./construct.js */ 31921);




function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !(0,_isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__.default)(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return (0,_construct_js__WEBPACK_IMPORTED_MODULE_3__.default)(Class, arguments, (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__.default)(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__.default)(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

/***/ })

}]);
//# sourceMappingURL=vendor.js.map